<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="UOI" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="112226">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_9" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;) + 1)" />
    <mutant id="mutant_206" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) - 1)" />
    <mutant id="mutant_327" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="((count - 1) + 1)" />
    <mutant id="mutant_448" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="((31 * result) * -1)" />
    <mutant id="mutant_569" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * -1)" />
    <mutant id="mutant_8" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;) * -1)" />
    <mutant id="mutant_207" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) + 1)" />
    <mutant id="mutant_328" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="((count - 1) * -1)" />
    <mutant id="mutant_449" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="((31 * result) + ((version) != null ? version.hashCode() : 0)) - 1" />
    <mutant id="mutant_208" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) * -1)" />
    <mutant id="mutant_329" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="((count - 1) - 1)" />
    <mutant id="mutant_209" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5) + 1)" />
    <mutant id="mutant_5" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) + 1)" />
    <mutant id="mutant_202" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) * -1)" />
    <mutant id="mutant_323" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(method.getName().startsWith(&quot;set&quot;)) &amp;&amp; ((args.length) &gt; 1)" to="!((method.getName().startsWith(&quot;set&quot;)) &amp;&amp; ((args.length) &gt; 1))" />
    <mutant id="mutant_444" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="((&quot;Manifest field does not have correct format: &quot; + s) * -1)" />
    <mutant id="mutant_565" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS)) + 1)" />
    <mutant id="mutant_686" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="(((entry.getKey()) + &quot;: &quot;) * -1)" />
    <mutant id="mutant_4" viable="true" in="org.sonar.core.computation.dbcleaner.period.KeepOneFilter.isDeletable(org.sonar.core.purge.PurgeableSnapshotDto)" from="(!(snapshot.isLast())) &amp;&amp; (!(snapshot.hasEvents()))" to="!((!(snapshot.isLast())) &amp;&amp; (!(snapshot.hasEvents())))" />
    <mutant id="mutant_203" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) * -1)" />
    <mutant id="mutant_324" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="((((Integer)(args[0])) - 1) + 1)" />
    <mutant id="mutant_445" viable="true" in="org.sonar.core.platform.PluginInfo.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_566" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS)) - 1)" />
    <mutant id="mutant_687" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="((((entry.getKey()) + &quot;: &quot;) + (entry.getValue())) * -1)" />
    <mutant id="mutant_7" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) - 1)" />
    <mutant id="mutant_204" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) + 1)" />
    <mutant id="mutant_325" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="((((Integer)(args[0])) - 1) * -1)" />
    <mutant id="mutant_446" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="((31 * result) - 1)" />
    <mutant id="mutant_567" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS)) * -1)" />
    <mutant id="mutant_688" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="((((entry.getKey()) + &quot;: &quot;) + (entry.getValue())) - 1)" />
    <mutant id="mutant_6" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) * -1)" />
    <mutant id="mutant_205" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) - 1)" />
    <mutant id="mutant_326" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="((((Integer)(args[0])) - 1) - 1)" />
    <mutant id="mutant_447" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="((31 * result) + 1)" />
    <mutant id="mutant_568" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - 1)" />
    <mutant id="mutant_689" viable="true" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="((((entry.getKey()) + &quot;: &quot;) + (entry.getValue())) + 1)" />
    <mutant id="mutant_85" viable="true" in="org.sonar.core.issue.db.IssueStorage.insertChanges(org.sonar.core.issue.db.IssueChangeMapper,org.sonar.api.issue.internal.DefaultIssue)" from="(!(issue.isNew())) &amp;&amp; (diffs != null)" to="!((!(issue.isNew())) &amp;&amp; (diffs != null))" />
    <mutant id="mutant_84" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="((&quot;Rule not found: &quot; + (issue.ruleKey())) * -1)" />
    <mutant id="mutant_87" viable="true" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="((&quot;Resolve conflict on issue &quot; + (issue.key())) + 1)" />
    <mutant id="mutant_86" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="((&quot;Resolve conflict on issue &quot; + (issue.key())) * -1)" />
    <mutant id="mutant_89" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.doTransition(org.sonar.api.issue.internal.DefaultIssue,java.lang.String,org.sonar.api.issue.internal.IssueChangeContext)" from="(transition != null) &amp;&amp; (!(transition.automatic()))" to="!((transition != null) &amp;&amp; (!(transition.automatic())))" />
    <mutant id="mutant_88" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="((&quot;Resolve conflict on issue &quot; + (issue.key())) - 1)" />
    <mutant id="mutant_90" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) * -1)" />
    <mutant id="mutant_92" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) + 1)" />
    <mutant id="mutant_91" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) - 1)" />
    <mutant id="mutant_94" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) * -1)" />
    <mutant id="mutant_93" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) + 1)" />
    <mutant id="mutant_1" viable="true" in="org.sonar.core.computation.dbcleaner.period.Interval.group(java.util.List,java.util.Date,java.util.Date,int)" from="((snapshot.getDate().before(end)) || (DateUtils.isSameDay(end, snapshot.getDate())))" to="(!((snapshot.getDate().before(end)) || (DateUtils.isSameDay(end, snapshot.getDate()))))" />
    <mutant id="mutant_440" viable="true" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="((&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath())) + 1)" />
    <mutant id="mutant_561" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) - 1)" />
    <mutant id="mutant_682" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="((&quot;Fail to parse date: &quot; + s) * -1)" />
    <mutant id="mutant_0" viable="true" in="org.sonar.core.computation.dbcleaner.period.Interval.group(java.util.List,java.util.Date,java.util.Date,int)" from="((!(DateUtils.isSameDay(start, snapshot.getDate()))) &amp;&amp; (snapshot.getDate().after(start)))" to="(!((!(DateUtils.isSameDay(start, snapshot.getDate()))) &amp;&amp; (snapshot.getDate().after(start))))" />
    <mutant id="mutant_320" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils$1.apply(org.sonar.core.persistence.dialect.Dialect)" from="(dialect != null) &amp;&amp; (dialect.matchesJdbcURL(org.apache.commons.lang.StringUtils.trimToEmpty(jdbcConnectionUrl)))" to="!((dialect != null) &amp;&amp; (dialect.matchesJdbcURL(org.apache.commons.lang.StringUtils.trimToEmpty(jdbcConnectionUrl))))" />
    <mutant id="mutant_441" viable="true" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_562" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + 1)" />
    <mutant id="mutant_683" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="((&quot;Fail to parse date: &quot; + s) - 1)" />
    <mutant id="mutant_3" viable="true" in="org.sonar.core.computation.dbcleaner.period.Interval.group(java.util.List,java.util.Date,java.util.Date,int)" from="(lastYear != currentYear) || (lastFieldValue != currentFieldValue)" to="!((lastYear != currentYear) || (lastFieldValue != currentFieldValue))" />
    <mutant id="mutant_200" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) + 1)" />
    <mutant id="mutant_321" viable="true" in="org.sonar.core.persistence.dialect.MsSql.matchesJdbcURL(java.lang.String)" from="(StringUtils.startsWithIgnoreCase(jdbcConnectionURL, &quot;jdbc:microsoft:sqlserver:&quot;)) || (StringUtils.startsWithIgnoreCase(jdbcConnectionURL, &quot;jdbc:jtds:sqlserver:&quot;))" to="!((StringUtils.startsWithIgnoreCase(jdbcConnectionURL, &quot;jdbc:microsoft:sqlserver:&quot;)) || (StringUtils.startsWithIgnoreCase(jdbcConnectionURL, &quot;jdbc:jtds:sqlserver:&quot;)))" />
    <mutant id="mutant_442" viable="true" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="((&quot;Manifest field does not have correct format: &quot; + s) + 1)" />
    <mutant id="mutant_563" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * -1)" />
    <mutant id="mutant_684" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="(((entry.getKey()) + &quot;: &quot;) - 1)" />
    <mutant id="mutant_2" viable="true" in="org.sonar.core.computation.dbcleaner.period.Interval.group(java.util.List,java.util.Date,java.util.Date,int)" from="((!(DateUtils.isSameDay(start, snapshot.getDate()))) &amp;&amp; (snapshot.getDate().after(start))) &amp;&amp; ((snapshot.getDate().before(end)) || (DateUtils.isSameDay(end, snapshot.getDate())))" to="!(((!(DateUtils.isSameDay(start, snapshot.getDate()))) &amp;&amp; (snapshot.getDate().after(start))) &amp;&amp; ((snapshot.getDate().before(end)) || (DateUtils.isSameDay(end, snapshot.getDate()))))" />
    <mutant id="mutant_201" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) - 1)" />
    <mutant id="mutant_322" viable="true" in="org.sonar.core.persistence.dialect.PostgreSQLSequenceGenerator.configure(org.hibernate.type.Type,java.util.Properties,org.hibernate.dialect.Dialect)" from="(tableName != null) &amp;&amp; (columnName != null)" to="!((tableName != null) &amp;&amp; (columnName != null))" />
    <mutant id="mutant_443" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="((&quot;Manifest field does not have correct format: &quot; + s) - 1)" />
    <mutant id="mutant_564" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - 1)" />
    <mutant id="mutant_685" viable="true" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="(((entry.getKey()) + &quot;: &quot;) + 1)" />
    <mutant id="mutant_680" viable="true" in="org.sonar.core.properties.PropertyDto.equals(java.lang.Object)" from="(((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value))) &amp;&amp; (Objects.equal(this.userId, other.userId))) &amp;&amp; (Objects.equal(this.resourceId, other.resourceId))" to="!((((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value))) &amp;&amp; (Objects.equal(this.userId, other.userId))) &amp;&amp; (Objects.equal(this.resourceId, other.resourceId)))" />
    <mutant id="mutant_560" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) * -1)" />
    <mutant id="mutant_681" viable="true" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="((&quot;Fail to parse date: &quot; + s) + 1)" />
    <mutant id="mutant_217" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="((&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;) - 1)" />
    <mutant id="mutant_338" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="(((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;) - 1)" />
    <mutant id="mutant_459" viable="true" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(minSqVersion != null) &amp;&amp; ((minSqVersion.compareToIgnoreQualifier(org.sonar.core.platform.PluginLoader.COMPATIBILITY_MODE_MAX_VERSION)) &lt; 0)" to="!((minSqVersion != null) &amp;&amp; ((minSqVersion.compareToIgnoreQualifier(org.sonar.core.platform.PluginLoader.COMPATIBILITY_MODE_MAX_VERSION)) &lt; 0))" />
    <mutant id="mutant_218" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="((&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)) + 1)" />
    <mutant id="mutant_339" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) * -1)" />
    <mutant id="mutant_219" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="((&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)) * -1)" />
    <mutant id="mutant_213" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="(((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;) - 1)" />
    <mutant id="mutant_334" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) - 1)" />
    <mutant id="mutant_455" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="((&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;) * -1)" />
    <mutant id="mutant_576" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) + 1)" />
    <mutant id="mutant_697" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + 1)" />
    <mutant id="mutant_214" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="(((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;) + 1)" />
    <mutant id="mutant_335" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + 1)" />
    <mutant id="mutant_456" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="((&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;) - 1)" />
    <mutant id="mutant_577" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) + 1" />
    <mutant id="mutant_698" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="((((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;))) * -1)" />
    <mutant id="mutant_215" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="((&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;) + 1)" />
    <mutant id="mutant_336" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="(((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;) * -1)" />
    <mutant id="mutant_457" viable="true" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="((&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;) + 1)" />
    <mutant id="mutant_578" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) * -1" />
    <mutant id="mutant_699" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="((((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;))) - 1)" />
    <mutant id="mutant_216" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="((&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;) * -1)" />
    <mutant id="mutant_337" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="(((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;) + 1)" />
    <mutant id="mutant_458" viable="true" in="org.sonar.core.platform.PluginJarExploder.explodeFromUnzippedDir(java.lang.String,java.io.File,java.io.File)" from="(libDir.isDirectory()) &amp;&amp; (libDir.exists())" to="!((libDir.isDirectory()) &amp;&amp; (libDir.exists()))" />
    <mutant id="mutant_579" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) - 1" />
    <mutant id="mutant_74" viable="true" in="org.sonar.core.component.ComponentDto.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_73" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="((ruleKey + &quot;.html&quot;) - 1)" />
    <mutant id="mutant_76" viable="true" in="org.sonar.core.dashboard.ActiveDashboardDto.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_75" viable="true" in="org.sonar.core.component.ComponentDto.isRootProject()" from="((moduleUuid) == null) &amp;&amp; (Scopes.PROJECT.equals(scope))" to="!(((moduleUuid) == null) &amp;&amp; (Scopes.PROJECT.equals(scope)))" />
    <mutant id="mutant_78" viable="true" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="((s == null) || ((s.length()) &lt;= 4000))" to="!((s == null) || ((s.length()) &lt;= 4000))" />
    <mutant id="mutant_77" viable="true" in="org.sonar.core.issue.db.ActionPlanDto.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_79" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="((&quot;Issue attributes must not exceed 4000 characters: &quot; + s) * -1)" />
    <mutant id="mutant_81" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="((&quot;Issue attributes must not exceed 4000 characters: &quot; + s) - 1)" />
    <mutant id="mutant_80" viable="true" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="((&quot;Issue attributes must not exceed 4000 characters: &quot; + s) + 1)" />
    <mutant id="mutant_83" viable="true" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="((&quot;Rule not found: &quot; + (issue.ruleKey())) + 1)" />
    <mutant id="mutant_82" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="((&quot;Rule not found: &quot; + (issue.ruleKey())) - 1)" />
    <mutant id="mutant_330" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="(((versions.size()) - 1) * -1)" />
    <mutant id="mutant_451" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="((31 * result) + ((version) != null ? version.hashCode() : 0)) * -1" />
    <mutant id="mutant_572" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_693" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) - 1)" />
    <mutant id="mutant_210" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5) - 1)" />
    <mutant id="mutant_331" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="(((versions.size()) - 1) - 1)" />
    <mutant id="mutant_452" viable="true" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="((&quot;Fail to extract plugin metadata from file: &quot; + jarFile) + 1)" />
    <mutant id="mutant_573" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_694" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) * -1)" />
    <mutant id="mutant_211" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5) * -1)" />
    <mutant id="mutant_332" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="(((versions.size()) - 1) + 1)" />
    <mutant id="mutant_453" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="((&quot;Fail to extract plugin metadata from file: &quot; + jarFile) * -1)" />
    <mutant id="mutant_574" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) * -1)" />
    <mutant id="mutant_695" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) - 1)" />
    <mutant id="mutant_212" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="(((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;) * -1)" />
    <mutant id="mutant_333" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) * -1)" />
    <mutant id="mutant_454" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="((&quot;Fail to extract plugin metadata from file: &quot; + jarFile) - 1)" />
    <mutant id="mutant_575" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) - 1)" />
    <mutant id="mutant_696" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) * -1)" />
    <mutant id="mutant_690" viable="true" in="org.sonar.jpa.session.AbstractDatabaseConnector.stop()" from="((factory) != null) &amp;&amp; (factory.isOpen())" to="!(((factory) != null) &amp;&amp; (factory.isOpen()))" />
    <mutant id="mutant_570" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + 1)" />
    <mutant id="mutant_691" viable="true" in="org.sonar.jpa.session.DefaultDatabaseConnector.getConnection()" from="((database) != null) &amp;&amp; ((database.getDataSource()) != null)" to="!(((database) != null) &amp;&amp; ((database.getDataSource()) != null))" />
    <mutant id="mutant_450" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="((31 * result) + ((version) != null ? version.hashCode() : 0)) + 1" />
    <mutant id="mutant_571" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_692" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + 1)" />
    <mutant id="mutant_107" viable="true" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="((&quot;Issue is still alive: &quot; + issue) + 1)" />
    <mutant id="mutant_228" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="((&quot;&quot; + (CoreMetrics.NCLOC_KEY)) - 1)" />
    <mutant id="mutant_349" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + 1)" />
    <mutant id="mutant_108" viable="true" in="org.sonar.core.issue.workflow.State.outManualTransitions(org.sonar.api.issue.Issue)" from="(!(transition.automatic())) &amp;&amp; (transition.supports(issue))" to="!((!(transition.automatic())) &amp;&amp; (transition.supports(issue)))" />
    <mutant id="mutant_229" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="((&quot;&quot; + (CoreMetrics.NCLOC_KEY)) + 1)" />
    <mutant id="mutant_109" viable="true" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(transition.automatic()) &amp;&amp; (transition.supports(issue))" to="!((transition.automatic()) &amp;&amp; (transition.supports(issue)))" />
    <mutant id="mutant_103" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="(((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_224" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="((&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;) - 1)" />
    <mutant id="mutant_345" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="((&quot;Fail to restore: &quot; + path) - 1)" />
    <mutant id="mutant_466" viable="true" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="((&quot;Fail to close classloader &quot; + (classLoader.toString())) + 1)" />
    <mutant id="mutant_587" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) - 1)" />
    <mutant id="mutant_104" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="(((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_225" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="((&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;) + 1)" />
    <mutant id="mutant_346" viable="true" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="((&quot;Fail to restore: &quot; + path) + 1)" />
    <mutant id="mutant_467" viable="true" in="org.sonar.core.permission.GroupWithPermission.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_588" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) * -1)" />
    <mutant id="mutant_105" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="((&quot;Issue is still alive: &quot; + issue) - 1)" />
    <mutant id="mutant_226" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="((&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;) * -1)" />
    <mutant id="mutant_347" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="((&quot;Fail to restore: &quot; + path) * -1)" />
    <mutant id="mutant_468" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="((roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))) - 1" />
    <mutant id="mutant_589" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + 1)" />
    <mutant id="mutant_106" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="((&quot;Issue is still alive: &quot; + issue) * -1)" />
    <mutant id="mutant_227" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="((&quot;&quot; + (CoreMetrics.NCLOC_KEY)) * -1)" />
    <mutant id="mutant_348" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) * -1)" />
    <mutant id="mutant_469" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="((roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))) + 1" />
    <mutant id="mutant_220" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="((&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)) - 1)" />
    <mutant id="mutant_341" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) - 1)" />
    <mutant id="mutant_462" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="((&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;) - 1)" />
    <mutant id="mutant_583" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.doIndex(org.sonar.core.resource.ResourceDto,org.sonar.core.resource.ResourceIndexerMapper)" from="((key.length()) &gt;= (ResourceIndexerDao.MINIMUM_KEY_SIZE)) || ((key.length()) == (ResourceIndexerDao.SINGLE_INDEX_SIZE))" to="!(((key.length()) &gt;= (ResourceIndexerDao.MINIMUM_KEY_SIZE)) || ((key.length()) == (ResourceIndexerDao.SINGLE_INDEX_SIZE)))" />
    <mutant id="mutant_100" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) * -1)" />
    <mutant id="mutant_221" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="((&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))) * -1)" />
    <mutant id="mutant_342" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="(((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;) - 1)" />
    <mutant id="mutant_463" viable="true" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(classLoader instanceof java.io.Closeable) &amp;&amp; (classLoader != (classloaderFactory.baseClassloader()))" to="!((classLoader instanceof java.io.Closeable) &amp;&amp; (classLoader != (classloaderFactory.baseClassloader())))" />
    <mutant id="mutant_584" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="((key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)) - 1" />
    <mutant id="mutant_101" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + 1)" />
    <mutant id="mutant_222" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="((&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))) - 1)" />
    <mutant id="mutant_343" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="(((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;) * -1)" />
    <mutant id="mutant_464" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="((&quot;Fail to close classloader &quot; + (classLoader.toString())) * -1)" />
    <mutant id="mutant_585" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="((key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)) + 1" />
    <mutant id="mutant_102" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="(((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_223" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="((&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))) + 1)" />
    <mutant id="mutant_344" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="(((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;) + 1)" />
    <mutant id="mutant_465" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="((&quot;Fail to close classloader &quot; + (classLoader.toString())) - 1)" />
    <mutant id="mutant_586" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="((key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)) * -1" />
    <mutant id="mutant_580" viable="true" in="org.sonar.core.resource.ResourceDao.insertOrUpdate(org.sonar.core.resource.ResourceDto[])" from="((resource.getUuid()) == null) &amp;&amp; (Scopes.PROJECT.equals(resource.getScope()))" to="!(((resource.getUuid()) == null) &amp;&amp; (Scopes.PROJECT.equals(resource.getScope())))" />
    <mutant id="mutant_460" viable="true" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="((&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;) + 1)" />
    <mutant id="mutant_581" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.indexResource(long,java.lang.String,java.lang.String,long,org.apache.ibatis.session.SqlSession,org.sonar.core.resource.ResourceIndexerMapper)" from="((key.length()) &gt;= (ResourceIndexerDao.MINIMUM_KEY_SIZE)) || ((key.length()) == (ResourceIndexerDao.SINGLE_INDEX_SIZE))" to="!(((key.length()) &gt;= (ResourceIndexerDao.MINIMUM_KEY_SIZE)) || ((key.length()) == (ResourceIndexerDao.SINGLE_INDEX_SIZE)))" />
    <mutant id="mutant_340" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + 1)" />
    <mutant id="mutant_461" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="((&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;) * -1)" />
    <mutant id="mutant_582" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.sanitizeIndex(long,java.lang.String,org.sonar.core.resource.ResourceIndexerMapper)" from="(masterIndex != null) &amp;&amp; (!(StringUtils.equals(key, masterIndex.getKey())))" to="!((masterIndex != null) &amp;&amp; (!(StringUtils.equals(key, masterIndex.getKey()))))" />
    <mutant id="mutant_118" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) - 1)" />
    <mutant id="mutant_239" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="((&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;) - 1)" />
    <mutant id="mutant_119" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="((((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey) + 1)" />
    <mutant id="mutant_114" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="((&quot;Transition from state &quot; + (key)) * -1)" />
    <mutant id="mutant_235" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="((&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;) + 1)" />
    <mutant id="mutant_356" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="((&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL))) * -1)" />
    <mutant id="mutant_477" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="(((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;) - 1)" />
    <mutant id="mutant_598" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="((newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length()))) * -1)" />
    <mutant id="mutant_115" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="((&quot;Transition from state &quot; + (key)) - 1)" />
    <mutant id="mutant_236" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="((&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES)) + 1)" />
    <mutant id="mutant_357" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="((&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL))) - 1)" />
    <mutant id="mutant_478" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="((&quot;Could not retrieve permission template with key &quot; + templateKey) - 1)" />
    <mutant id="mutant_599" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + 1)" />
    <mutant id="mutant_116" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) * -1)" />
    <mutant id="mutant_237" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="((&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES)) * -1)" />
    <mutant id="mutant_358" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) * -1)" />
    <mutant id="mutant_479" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="((&quot;Could not retrieve permission template with key &quot; + templateKey) * -1)" />
    <mutant id="mutant_117" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + 1)" />
    <mutant id="mutant_238" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="((&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES)) - 1)" />
    <mutant id="mutant_359" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) + 1)" />
    <mutant id="mutant_96" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) - 1)" />
    <mutant id="mutant_95" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="((&quot;Unknown status: &quot; + (issue.status())) - 1)" />
    <mutant id="mutant_98" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) * -1)" />
    <mutant id="mutant_97" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + 1)" />
    <mutant id="mutant_99" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) - 1)" />
    <mutant id="mutant_110" viable="true" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="((&quot;Several automatic transitions are available for issue: &quot; + issue) + 1)" />
    <mutant id="mutant_231" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="((&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE)) + 1)" />
    <mutant id="mutant_352" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;) + 1" />
    <mutant id="mutant_473" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="((&quot;sonar.permission.template.&quot; + qualifier) + 1)" />
    <mutant id="mutant_594" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="((newKey + (resourceKey.substring(oldKey.length(), resourceKey.length()))) - 1)" />
    <mutant id="mutant_111" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="((&quot;Several automatic transitions are available for issue: &quot; + issue) * -1)" />
    <mutant id="mutant_232" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="((&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE)) * -1)" />
    <mutant id="mutant_353" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;) - 1" />
    <mutant id="mutant_474" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="((&quot;sonar.permission.template.&quot; + qualifier) * -1)" />
    <mutant id="mutant_595" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="((newKey + (resourceKey.substring(oldKey.length(), resourceKey.length()))) * -1)" />
    <mutant id="mutant_112" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="((&quot;Several automatic transitions are available for issue: &quot; + issue) - 1)" />
    <mutant id="mutant_233" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="((&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;) * -1)" />
    <mutant id="mutant_354" viable="true" in="org.sonar.core.persistence.DefaultDatabase.completeDefaultProperty(java.util.Properties,java.lang.String,java.lang.String)" from="((props.getProperty(key)) == null) &amp;&amp; (defaultValue != null)" to="!(((props.getProperty(key)) == null) &amp;&amp; (defaultValue != null))" />
    <mutant id="mutant_475" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="(((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;) + 1)" />
    <mutant id="mutant_596" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="((newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length()))) + 1)" />
    <mutant id="mutant_113" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="((&quot;Transition from state &quot; + (key)) + 1)" />
    <mutant id="mutant_234" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="((&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;) - 1)" />
    <mutant id="mutant_355" viable="true" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="((&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL))) + 1)" />
    <mutant id="mutant_476" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="(((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;) * -1)" />
    <mutant id="mutant_597" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="((newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length()))) - 1)" />
    <mutant id="mutant_590" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;) * -1)" />
    <mutant id="mutant_470" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="((roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))) * -1" />
    <mutant id="mutant_591" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;) - 1)" />
    <mutant id="mutant_350" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) - 1)" />
    <mutant id="mutant_471" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(StringUtils.isNotBlank(keyPattern)) &amp;&amp; (componentKey.matches(keyPattern))" to="!((StringUtils.isNotBlank(keyPattern)) &amp;&amp; (componentKey.matches(keyPattern)))" />
    <mutant id="mutant_592" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;) + 1)" />
    <mutant id="mutant_230" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="((&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE)) - 1)" />
    <mutant id="mutant_351" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="((&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;) * -1" />
    <mutant id="mutant_472" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="((&quot;sonar.permission.template.&quot; + qualifier) - 1)" />
    <mutant id="mutant_593" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="((newKey + (resourceKey.substring(oldKey.length(), resourceKey.length()))) + 1)" />
    <mutant id="mutant_129" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) - 1)" />
    <mutant id="mutant_125" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) * -1)" />
    <mutant id="mutant_246" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="((&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))) - 1)" />
    <mutant id="mutant_367" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="((((long)(maxAgeInSeconds)) * 1000) + 1)" />
    <mutant id="mutant_488" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) - 1)" />
    <mutant id="mutant_126" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + 1)" />
    <mutant id="mutant_247" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="((&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))) * -1)" />
    <mutant id="mutant_368" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="((((long)(maxAgeInSeconds)) * 1000) * -1)" />
    <mutant id="mutant_489" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) * -1)" />
    <mutant id="mutant_127" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) - 1)" />
    <mutant id="mutant_248" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="((&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))) - 1)" />
    <mutant id="mutant_369" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="((((long)(maxAgeInSeconds)) * 1000) - 1)" />
    <mutant id="mutant_128" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) * -1)" />
    <mutant id="mutant_249" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="((&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))) + 1)" />
    <mutant id="mutant_121" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="((((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey) - 1)" />
    <mutant id="mutant_242" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="((&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)) + 1)" />
    <mutant id="mutant_363" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="(((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;) * -1)" />
    <mutant id="mutant_484" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="((&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;) - 1)" />
    <mutant id="mutant_122" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="((&quot;Transition \'&quot; + (transition.key())) + 1)" />
    <mutant id="mutant_243" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="((&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)) * -1)" />
    <mutant id="mutant_364" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="((&quot;Unable to load mapper &quot; + mapperName) + 1)" />
    <mutant id="mutant_485" viable="true" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="((&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;) + 1)" />
    <mutant id="mutant_123" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="((&quot;Transition \'&quot; + (transition.key())) - 1)" />
    <mutant id="mutant_244" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="((&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)) - 1)" />
    <mutant id="mutant_365" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="((&quot;Unable to load mapper &quot; + mapperName) * -1)" />
    <mutant id="mutant_486" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="((&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;) * -1)" />
    <mutant id="mutant_124" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="((&quot;Transition \'&quot; + (transition.key())) * -1)" />
    <mutant id="mutant_245" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="((&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))) + 1)" />
    <mutant id="mutant_366" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="((&quot;Unable to load mapper &quot; + mapperName) - 1)" />
    <mutant id="mutant_487" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) + 1)" />
    <mutant id="mutant_480" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="((&quot;Could not retrieve permission template with key &quot; + templateKey) + 1)" />
    <mutant id="mutant_360" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) - 1)" />
    <mutant id="mutant_481" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="((&quot;Could not retrieve permissions for template with key &quot; + templateKey) * -1)" />
    <mutant id="mutant_240" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="((&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;) * -1)" />
    <mutant id="mutant_361" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="(((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;) + 1)" />
    <mutant id="mutant_482" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="((&quot;Could not retrieve permissions for template with key &quot; + templateKey) - 1)" />
    <mutant id="mutant_120" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="((((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey) * -1)" />
    <mutant id="mutant_241" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="((&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;) + 1)" />
    <mutant id="mutant_362" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="(((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;) - 1)" />
    <mutant id="mutant_483" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="((&quot;Could not retrieve permissions for template with key &quot; + templateKey) + 1)" />
    <mutant id="mutant_136" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="((&quot;Originating state does not exist: &quot; + (transition.from())) - 1)" />
    <mutant id="mutant_257" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="((&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;) * -1)" />
    <mutant id="mutant_378" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="((&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds) * -1)" />
    <mutant id="mutant_499" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_137" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="((&quot;Destination state does not exist: &quot; + (transition.to())) + 1)" />
    <mutant id="mutant_258" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="((&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;) + 1)" />
    <mutant id="mutant_379" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="((&quot;Updating semaphore &quot; + (semaphore.getName())) * -1)" />
    <mutant id="mutant_138" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="((&quot;Destination state does not exist: &quot; + (transition.to())) * -1)" />
    <mutant id="mutant_259" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="((&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;) - 1)" />
    <mutant id="mutant_139" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="((&quot;Destination state does not exist: &quot; + (transition.to())) - 1)" />
    <mutant id="mutant_490" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + 1)" />
    <mutant id="mutant_132" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="(((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;) * -1)" />
    <mutant id="mutant_253" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) * -1" />
    <mutant id="mutant_374" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="((system.now()) - (semaphore.getLockedAt())) - 1" />
    <mutant id="mutant_495" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP)) * -1)" />
    <mutant id="mutant_133" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="(((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;) + 1)" />
    <mutant id="mutant_254" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) + 1" />
    <mutant id="mutant_375" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="((system.now()) - (semaphore.getLockedAt())) + 1" />
    <mutant id="mutant_496" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * -1)" />
    <mutant id="mutant_134" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="((&quot;Originating state does not exist: &quot; + (transition.from())) + 1)" />
    <mutant id="mutant_255" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) - 1" />
    <mutant id="mutant_376" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="((&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds) - 1)" />
    <mutant id="mutant_497" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - 1)" />
    <mutant id="mutant_135" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="((&quot;Originating state does not exist: &quot; + (transition.from())) * -1)" />
    <mutant id="mutant_256" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) * -1" />
    <mutant id="mutant_377" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="((&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds) + 1)" />
    <mutant id="mutant_498" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + 1)" />
    <mutant id="mutant_370" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="(now - (((long)(maxAgeInSeconds)) * 1000)) + 1" />
    <mutant id="mutant_491" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - 1)" />
    <mutant id="mutant_250" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="((&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))) * -1)" />
    <mutant id="mutant_371" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="(now - (((long)(maxAgeInSeconds)) * 1000)) - 1" />
    <mutant id="mutant_492" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * -1)" />
    <mutant id="mutant_130" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + 1)" />
    <mutant id="mutant_251" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) + 1" />
    <mutant id="mutant_372" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="(now - (((long)(maxAgeInSeconds)) * 1000)) * -1" />
    <mutant id="mutant_493" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP)) - 1)" />
    <mutant id="mutant_131" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="(((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;) - 1)" />
    <mutant id="mutant_252" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)) - 1" />
    <mutant id="mutant_373" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="((system.now()) - (semaphore.getLockedAt())) * -1" />
    <mutant id="mutant_494" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP)) + 1)" />
    <mutant id="mutant_147" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) - 1)" />
    <mutant id="mutant_268" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)) + 1" />
    <mutant id="mutant_389" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP)) * -1)" />
    <mutant id="mutant_148" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) + 1)" />
    <mutant id="mutant_269" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) * -1)" />
    <mutant id="mutant_149" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) * -1)" />
    <mutant id="mutant_380" viable="true" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="((&quot;Updating semaphore &quot; + (semaphore.getName())) + 1)" />
    <mutant id="mutant_143" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) * -1)" />
    <mutant id="mutant_264" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)) * -1" />
    <mutant id="mutant_385" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) + 1)" />
    <mutant id="mutant_144" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="((31 * result) + (from.hashCode())) * -1" />
    <mutant id="mutant_265" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)) + 1" />
    <mutant id="mutant_386" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + 1)" />
    <mutant id="mutant_145" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="((31 * result) + (from.hashCode())) + 1" />
    <mutant id="mutant_266" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)) * -1" />
    <mutant id="mutant_387" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - 1)" />
    <mutant id="mutant_146" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="((31 * result) + (from.hashCode())) - 1" />
    <mutant id="mutant_267" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)) - 1" />
    <mutant id="mutant_388" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * -1)" />
    <mutant id="mutant_260" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)) + 1" />
    <mutant id="mutant_381" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="((&quot;Updating semaphore &quot; + (semaphore.getName())) - 1)" />
    <mutant id="mutant_140" viable="true" in="org.sonar.core.issue.workflow.Transition.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_261" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)) * -1" />
    <mutant id="mutant_382" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociation.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_141" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) - 1)" />
    <mutant id="mutant_262" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)) - 1" />
    <mutant id="mutant_383" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) * -1)" />
    <mutant id="mutant_142" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="((31 * result) + 1)" />
    <mutant id="mutant_263" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="((IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)) - 1" />
    <mutant id="mutant_384" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) - 1)" />
    <mutant id="mutant_158" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="((totalIssues) - (unresolvedIssues)) * -1" />
    <mutant id="mutant_279" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="((&quot;Logback configuration not found in classloader: &quot; + classloaderPath) - 1)" />
    <mutant id="mutant_159" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="(((stringBuilder.length()) - 1) * -1)" />
    <mutant id="mutant_390" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP)) - 1)" />
    <mutant id="mutant_270" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) - 1)" />
    <mutant id="mutant_391" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP)) + 1)" />
    <mutant id="mutant_154" viable="true" in="org.sonar.core.issue.ActionPlanStats.overDue()" from="((isOpen()) &amp;&amp; (deadline != null))" to="(!((isOpen()) &amp;&amp; (deadline != null)))" />
    <mutant id="mutant_275" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="((&quot;Fail to load the Logback configuration: &quot; + logbackFile) - 1)" />
    <mutant id="mutant_396" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_155" viable="true" in="org.sonar.core.issue.ActionPlanStats.overDue()" from="((isOpen()) &amp;&amp; (deadline != null)) &amp;&amp; (new Date().after(deadline))" to="!(((isOpen()) &amp;&amp; (deadline != null)) &amp;&amp; (new Date().after(deadline)))" />
    <mutant id="mutant_276" viable="true" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="((&quot;Fail to load the Logback configuration: &quot; + logbackFile) + 1)" />
    <mutant id="mutant_397" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_156" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="((totalIssues) - (unresolvedIssues)) + 1" />
    <mutant id="mutant_277" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="((&quot;Fail to load the Logback configuration: &quot; + logbackFile) * -1)" />
    <mutant id="mutant_398" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="(sql + &quot;%&quot;) - 1" />
    <mutant id="mutant_157" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="((totalIssues) - (unresolvedIssues)) - 1" />
    <mutant id="mutant_278" viable="true" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="((&quot;Logback configuration not found in classloader: &quot; + classloaderPath) + 1)" />
    <mutant id="mutant_399" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="(sql + &quot;%&quot;) * -1" />
    <mutant id="mutant_150" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="((31 * result) + (to.hashCode())) * -1" />
    <mutant id="mutant_271" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) + 1)" />
    <mutant id="mutant_392" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * -1)" />
    <mutant id="mutant_151" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="((31 * result) + (to.hashCode())) + 1" />
    <mutant id="mutant_272" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) - 1)" />
    <mutant id="mutant_393" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - 1)" />
    <mutant id="mutant_152" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="((31 * result) + (to.hashCode())) - 1" />
    <mutant id="mutant_273" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) * -1)" />
    <mutant id="mutant_394" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + 1)" />
    <mutant id="mutant_153" viable="true" in="org.sonar.core.issue.ActionPlanDeadlineComparator.compare(org.sonar.api.issue.ActionPlan,org.sonar.api.issue.ActionPlan)" from="(d1 != null) &amp;&amp; (d2 != null)" to="!((d1 != null) &amp;&amp; (d2 != null))" />
    <mutant id="mutant_274" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="((&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP)) + 1)" />
    <mutant id="mutant_395" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_169" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1) - 1)" />
    <mutant id="mutant_280" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="((&quot;Logback configuration not found in classloader: &quot; + classloaderPath) * -1)" />
    <mutant id="mutant_160" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="(((stringBuilder.length()) - 1) + 1)" />
    <mutant id="mutant_281" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="((&quot;Download: &quot; + (uri)) * -1)" />
    <mutant id="mutant_165" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="((&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;) + 1)" />
    <mutant id="mutant_286" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) * -1)" />
    <mutant id="mutant_166" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="((&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;) - 1)" />
    <mutant id="mutant_287" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + 1)" />
    <mutant id="mutant_167" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1) * -1)" />
    <mutant id="mutant_288" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) * -1)" />
    <mutant id="mutant_168" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1) + 1)" />
    <mutant id="mutant_289" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) - 1)" />
    <mutant id="mutant_161" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="(((stringBuilder.length()) - 1) - 1)" />
    <mutant id="mutant_282" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="((&quot;Download: &quot; + (uri)) + 1)" />
    <mutant id="mutant_162" viable="true" in="org.sonar.core.issue.IssueUpdater.setManualSeverity(org.sonar.api.issue.internal.DefaultIssue,java.lang.String,org.sonar.api.issue.internal.IssueChangeContext)" from="(!(issue.manualSeverity())) || (!(Objects.equal(severity, issue.severity())))" to="!((!(issue.manualSeverity())) || (!(Objects.equal(severity, issue.severity()))))" />
    <mutant id="mutant_283" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="((&quot;Download: &quot; + (uri)) - 1)" />
    <mutant id="mutant_163" viable="true" in="org.sonar.core.issue.IssueUpdater$1.apply(java.lang.String)" from="(tag != null) &amp;&amp; (!(tag.isEmpty()))" to="!((tag != null) &amp;&amp; (!(tag.isEmpty())))" />
    <mutant id="mutant_284" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + 1)" />
    <mutant id="mutant_164" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="((&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;) * -1)" />
    <mutant id="mutant_285" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) - 1)" />
    <mutant id="mutant_290" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="(((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_170" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) * -1)" />
    <mutant id="mutant_291" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="(((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_171" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) + 1)" />
    <mutant id="mutant_292" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="(((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_176" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) + 1)" />
    <mutant id="mutant_297" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="((((login) + &quot;:&quot;) + (password)) - 1)" />
    <mutant id="mutant_177" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) * -1)" />
    <mutant id="mutant_298" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="((((login) + &quot;:&quot;) + (password)) * -1)" />
    <mutant id="mutant_178" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="((&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))) - 1)" />
    <mutant id="mutant_299" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="((&quot;Basic &quot; + encoded) - 1)" />
    <mutant id="mutant_179" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) * -1)" />
    <mutant id="mutant_172" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) - 1)" />
    <mutant id="mutant_293" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="(((login) + &quot;:&quot;) * -1)" />
    <mutant id="mutant_173" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) + 1)" />
    <mutant id="mutant_294" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="(((login) + &quot;:&quot;) - 1)" />
    <mutant id="mutant_174" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) - 1)" />
    <mutant id="mutant_295" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="(((login) + &quot;:&quot;) + 1)" />
    <mutant id="mutant_175" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) * -1)" />
    <mutant id="mutant_296" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="((((login) + &quot;:&quot;) + (password)) + 1)" />
    <mutant id="mutant_27" viable="true" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="((&quot;Fail to load file: &quot; + filePath) + 1)" />
    <mutant id="mutant_26" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="(&quot;/&quot; + filename) * -1" />
    <mutant id="mutant_29" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="((&quot;Fail to load file: &quot; + filePath) - 1)" />
    <mutant id="mutant_28" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="((&quot;Fail to load file: &quot; + filePath) * -1)" />
    <mutant id="mutant_21" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="(&quot;_&quot; + (locale.getLanguage())) - 1" />
    <mutant id="mutant_20" viable="true" in="org.sonar.core.i18n.DefaultI18n.formatMessage(java.lang.String,java.lang.Object[])" from="(message == null) || ((parameters.length) == 0)" to="!((message == null) || ((parameters.length) == 0))" />
    <mutant id="mutant_23" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="(&quot;_&quot; + (locale.getLanguage())) + 1" />
    <mutant id="mutant_22" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="(&quot;_&quot; + (locale.getLanguage())) * -1" />
    <mutant id="mutant_25" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="(&quot;/&quot; + filename) - 1" />
    <mutant id="mutant_24" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="(&quot;/&quot; + filename) + 1" />
    <mutant id="mutant_180" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) + 1)" />
    <mutant id="mutant_181" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="((&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))) - 1)" />
    <mutant id="mutant_182" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) - 1)" />
    <mutant id="mutant_187" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2) - 1)" />
    <mutant id="mutant_188" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3) - 1)" />
    <mutant id="mutant_189" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3) + 1)" />
    <mutant id="mutant_183" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) + 1)" />
    <mutant id="mutant_184" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="((&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))) * -1)" />
    <mutant id="mutant_185" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2) + 1)" />
    <mutant id="mutant_186" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2) * -1)" />
    <mutant id="mutant_16" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="(((toDate.getTime()) - (fromDate.getTime())) - 1)" />
    <mutant id="mutant_15" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="(((toDate.getTime()) - (fromDate.getTime())) + 1)" />
    <mutant id="mutant_18" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="(((system2.now()) - (date.getTime())) - 1)" />
    <mutant id="mutant_17" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="(((system2.now()) - (date.getTime())) * -1)" />
    <mutant id="mutant_19" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="(((system2.now()) - (date.getTime())) + 1)" />
    <mutant id="mutant_10" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;) - 1)" />
    <mutant id="mutant_12" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) + 1)" />
    <mutant id="mutant_11" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) - 1)" />
    <mutant id="mutant_14" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="(((toDate.getTime()) - (fromDate.getTime())) * -1)" />
    <mutant id="mutant_13" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="((&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;) * -1)" />
    <mutant id="mutant_190" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3) * -1)" />
    <mutant id="mutant_191" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4) * -1)" />
    <mutant id="mutant_192" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4) - 1)" />
    <mutant id="mutant_193" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4) + 1)" />
    <mutant id="mutant_198" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) + 1)" />
    <mutant id="mutant_199" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) - 1)" />
    <mutant id="mutant_194" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) * -1)" />
    <mutant id="mutant_195" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) - 1)" />
    <mutant id="mutant_196" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="((&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;) + 1)" />
    <mutant id="mutant_197" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="((&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)) * -1)" />
    <mutant id="mutant_49" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="(nbDays / 365) - 1" />
    <mutant id="mutant_48" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="(nbDays / 365) + 1" />
    <mutant id="mutant_41" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="(nbSeconds / 60) - 1" />
    <mutant id="mutant_40" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="(nbSeconds / 60) + 1" />
    <mutant id="mutant_43" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="(nbMinutes / 60) - 1" />
    <mutant id="mutant_42" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="(nbMinutes / 60) * -1" />
    <mutant id="mutant_45" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="(nbHours / 24) * -1" />
    <mutant id="mutant_44" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="(nbMinutes / 60) + 1" />
    <mutant id="mutant_47" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="(nbHours / 24) + 1" />
    <mutant id="mutant_46" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="(nbHours / 24) - 1" />
    <mutant id="mutant_50" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="(nbDays / 365) * -1" />
    <mutant id="mutant_38" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="(durationInMillis / 1000.0) * -1" />
    <mutant id="mutant_37" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="(durationInMillis / 1000.0) - 1" />
    <mutant id="mutant_39" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="(nbSeconds / 60) * -1" />
    <mutant id="mutant_30" viable="true" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="((DefaultI18n.BUNDLE_PACKAGE) + pluginKey) + 1" />
    <mutant id="mutant_32" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="((DefaultI18n.BUNDLE_PACKAGE) + pluginKey) - 1" />
    <mutant id="mutant_31" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="((DefaultI18n.BUNDLE_PACKAGE) + pluginKey) * -1" />
    <mutant id="mutant_34" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="((nbDays / 30) - 1)" />
    <mutant id="mutant_33" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="((nbDays / 30) * -1)" />
    <mutant id="mutant_36" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="(durationInMillis / 1000.0) + 1" />
    <mutant id="mutant_35" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="((nbDays / 30) + 1)" />
    <mutant id="mutant_63" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) * -1)" />
    <mutant id="mutant_62" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + 1)" />
    <mutant id="mutant_65" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;) + 1" />
    <mutant id="mutant_64" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) - 1)" />
    <mutant id="mutant_67" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;) - 1" />
    <mutant id="mutant_66" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="((((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;) * -1" />
    <mutant id="mutant_69" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="((&quot;.param.&quot; + paramKey) * -1)" />
    <mutant id="mutant_68" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="((&quot;.param.&quot; + paramKey) - 1)" />
    <mutant id="mutant_70" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="((&quot;.param.&quot; + paramKey) + 1)" />
    <mutant id="mutant_72" viable="true" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="((ruleKey + &quot;.html&quot;) + 1)" />
    <mutant id="mutant_71" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="((ruleKey + &quot;.html&quot;) * -1)" />
    <mutant id="mutant_59" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) - 1)" />
    <mutant id="mutant_52" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="((durationPrefix + key) * -1)" />
    <mutant id="mutant_51" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="((durationPrefix + key) - 1)" />
    <mutant id="mutant_54" viable="true" in="org.sonar.core.i18n.RuleI18nManager.isRuleProperty(java.lang.String)" from="((StringUtils.startsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.RULE_PREFIX)) &amp;&amp; (StringUtils.endsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.NAME_SUFFIX)))" to="(!((StringUtils.startsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.RULE_PREFIX)) &amp;&amp; (StringUtils.endsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.NAME_SUFFIX))))" />
    <mutant id="mutant_53" viable="true" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="((durationPrefix + key) + 1)" />
    <mutant id="mutant_56" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="((&quot;rules/&quot; + repositoryKey) + 1)" />
    <mutant id="mutant_55" viable="true" in="org.sonar.core.i18n.RuleI18nManager.isRuleProperty(java.lang.String)" from="((StringUtils.startsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.RULE_PREFIX)) &amp;&amp; (StringUtils.endsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.NAME_SUFFIX))) &amp;&amp; (!(propertyKey.contains(&quot;.param.&quot;)))" to="!(((StringUtils.startsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.RULE_PREFIX)) &amp;&amp; (StringUtils.endsWith(propertyKey, org.sonar.core.i18n.RuleI18nManager.NAME_SUFFIX))) &amp;&amp; (!(propertyKey.contains(&quot;.param.&quot;))))" />
    <mutant id="mutant_58" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="((&quot;rules/&quot; + repositoryKey) * -1)" />
    <mutant id="mutant_57" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="((&quot;rules/&quot; + repositoryKey) - 1)" />
    <mutant id="mutant_61" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) * -1)" />
    <mutant id="mutant_60" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + 1)" />
    <mutant id="mutant_701" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="((&quot;Expected single result, but got : &quot; + (result.toString())) - 1)" />
    <mutant id="mutant_702" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="((&quot;Expected single result, but got : &quot; + (result.toString())) * -1)" />
    <mutant id="mutant_703" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="((&quot;Expected single result, but got : &quot; + (result.toString())) + 1)" />
    <mutant id="mutant_704" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(criterias == null) &amp;&amp; raiseError" to="!((criterias == null) &amp;&amp; raiseError)" />
    <mutant id="mutant_700" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="((((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;))) + 1)" />
    <mutant id="mutant_709" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="((&quot;Unable to persist : &quot; + model) * -1)" />
    <mutant id="mutant_705" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="((i + 1) * -1)" />
    <mutant id="mutant_706" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="((i + 1) - 1)" />
    <mutant id="mutant_707" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="((i + 1) + 1)" />
    <mutant id="mutant_708" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.commitAndClose()" from="((entityManager) != null) &amp;&amp; (entityManager.isOpen())" to="!(((entityManager) != null) &amp;&amp; (entityManager.isOpen()))" />
    <mutant id="mutant_712" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) + 1)" />
    <mutant id="mutant_713" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) - 1)" />
    <mutant id="mutant_714" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) * -1)" />
    <mutant id="mutant_715" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="flushIfNeeded &amp;&amp; (((++(index)) % (DatabaseSession.BATCH_SIZE)) == 0)" to="!(flushIfNeeded &amp;&amp; (((++(index)) % (DatabaseSession.BATCH_SIZE)) == 0))" />
    <mutant id="mutant_710" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="((&quot;Unable to persist : &quot; + model) - 1)" />
    <mutant id="mutant_711" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="((&quot;Unable to persist : &quot; + model) + 1)" />
    <mutant id="mutant_716" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) + 1)" />
    <mutant id="mutant_717" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) - 1)" />
    <mutant id="mutant_718" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(((++(index)) % (DatabaseSession.BATCH_SIZE)) * -1)" />
    <mutant id="mutant_602" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;) * -1)" />
    <mutant id="mutant_603" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;) + 1)" />
    <mutant id="mutant_604" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="(((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;) - 1)" />
    <mutant id="mutant_605" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) + 1)" />
    <mutant id="mutant_600" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) - 1)" />
    <mutant id="mutant_601" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) * -1)" />
    <mutant id="mutant_606" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) * -1)" />
    <mutant id="mutant_607" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) - 1)" />
    <mutant id="mutant_608" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + 1)" />
    <mutant id="mutant_609" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) * -1)" />
    <mutant id="mutant_613" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) - 1)" />
    <mutant id="mutant_614" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="(((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;) + 1)" />
    <mutant id="mutant_615" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="(((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;) * -1)" />
    <mutant id="mutant_616" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="(((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;) - 1)" />
    <mutant id="mutant_610" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) - 1)" />
    <mutant id="mutant_611" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + 1)" />
    <mutant id="mutant_612" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) * -1)" />
    <mutant id="mutant_617" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="((&quot;&lt;- Clean snapshot &quot; + projectSnapshotId) * -1)" />
    <mutant id="mutant_618" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="((&quot;&lt;- Clean snapshot &quot; + projectSnapshotId) + 1)" />
    <mutant id="mutant_619" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="((&quot;&lt;- Clean snapshot &quot; + projectSnapshotId) - 1)" />
    <mutant id="mutant_503" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) - 1)" />
    <mutant id="mutant_624" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="(((int)(((entry.getValue()) / percent))) + 1)" />
    <mutant id="mutant_504" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) + 1)" />
    <mutant id="mutant_625" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="(((int)(((entry.getValue()) / percent))) * -1)" />
    <mutant id="mutant_505" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) + 1" />
    <mutant id="mutant_626" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="(((int)(((entry.getValue()) / percent))) - 1)" />
    <mutant id="mutant_506" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) * -1" />
    <mutant id="mutant_627" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="(((clock.now()) - (startTime)) * -1)" />
    <mutant id="mutant_620" viable="true" in="org.sonar.core.purge.PurgeProfiler.truncateList(java.util.List)" from="((i++) &gt;= maxSize) || ((item.getValue()) == 0)" to="!(((i++) &gt;= maxSize) || ((item.getValue()) == 0))" />
    <mutant id="mutant_500" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_621" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="(totalTime / 100.0) * -1" />
    <mutant id="mutant_501" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_622" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="(totalTime / 100.0) - 1" />
    <mutant id="mutant_502" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) * -1)" />
    <mutant id="mutant_623" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="(totalTime / 100.0) + 1" />
    <mutant id="mutant_507" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) - 1" />
    <mutant id="mutant_628" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="(((clock.now()) - (startTime)) + 1)" />
    <mutant id="mutant_508" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) + 1)" />
    <mutant id="mutant_629" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="(((clock.now()) - (startTime)) - 1)" />
    <mutant id="mutant_509" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) - 1)" />
    <mutant id="mutant_514" viable="true" in="org.sonar.core.permission.UserWithPermission.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_635" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="((&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;) * -1)" />
    <mutant id="mutant_515" viable="true" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS.equals(periodProperty)) || (CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION.equals(periodProperty))" to="!((CoreProperties.TIMEMACHINE_MODE_PREVIOUS_ANALYSIS.equals(periodProperty)) || (CoreProperties.TIMEMACHINE_MODE_PREVIOUS_VERSION.equals(periodProperty)))" />
    <mutant id="mutant_636" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="((&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;) - 1)" />
    <mutant id="mutant_516" viable="true" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="((&quot;Unknown period property : &quot; + periodProperty) + 1)" />
    <mutant id="mutant_637" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="((&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)) - 1)" />
    <mutant id="mutant_517" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="((&quot;Unknown period property : &quot; + periodProperty) - 1)" />
    <mutant id="mutant_638" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="((&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)) * -1)" />
    <mutant id="mutant_510" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) * -1)" />
    <mutant id="mutant_631" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="((cumulatedDuration + ((clock.now()) - (startTime))) * -1)" />
    <mutant id="mutant_511" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))) + 1" />
    <mutant id="mutant_632" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="((cumulatedDuration + ((clock.now()) - (startTime))) - 1)" />
    <mutant id="mutant_512" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))) - 1" />
    <mutant id="mutant_633" viable="true" in="org.sonar.core.purge.PurgeableSnapshotDto.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_513" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="(((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))) * -1" />
    <mutant id="mutant_634" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="((&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;) + 1)" />
    <mutant id="mutant_518" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="((&quot;Unknown period property : &quot; + periodProperty) * -1)" />
    <mutant id="mutant_639" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="((&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)) + 1)" />
    <mutant id="mutant_519" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) - 1)" />
    <mutant id="mutant_630" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="((cumulatedDuration + ((clock.now()) - (startTime))) + 1)" />
    <mutant id="mutant_404" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_525" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="((&quot;This mode is not supported : &quot; + mode) - 1)" />
    <mutant id="mutant_646" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;) - 1" />
    <mutant id="mutant_405" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="((31 * result) - 1)" />
    <mutant id="mutant_526" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="((&quot;This mode is not supported : &quot; + mode) * -1)" />
    <mutant id="mutant_647" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;) + 1" />
    <mutant id="mutant_406" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="((31 * result) + 1)" />
    <mutant id="mutant_527" viable="true" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="((&quot;This mode is not supported : &quot; + mode) + 1)" />
    <mutant id="mutant_648" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;) * -1" />
    <mutant id="mutant_407" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="((31 * result) * -1)" />
    <mutant id="mutant_528" viable="true" in="org.sonar.core.plugins.RemotePlugin.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_649" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="((&quot;notification.&quot; + dispatcherKey) - 1)" />
    <mutant id="mutant_400" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="(sql + &quot;%&quot;) + 1" />
    <mutant id="mutant_521" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) * -1)" />
    <mutant id="mutant_642" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) * -1)" />
    <mutant id="mutant_401" viable="true" in="org.sonar.core.template.LoadedTemplateDto.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_522" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) - 1)" />
    <mutant id="mutant_643" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + 1)" />
    <mutant id="mutant_402" viable="true" in="org.sonar.core.template.LoadedTemplateDto.equals(java.lang.Object)" from="((Objects.equal(id, other.id)) &amp;&amp; (Objects.equal(key, other.key)))" to="(!((Objects.equal(id, other.id)) &amp;&amp; (Objects.equal(key, other.key))))" />
    <mutant id="mutant_523" viable="true" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) + 1)" />
    <mutant id="mutant_644" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) - 1)" />
    <mutant id="mutant_403" viable="true" in="org.sonar.core.template.LoadedTemplateDto.equals(java.lang.Object)" from="((Objects.equal(id, other.id)) &amp;&amp; (Objects.equal(key, other.key))) &amp;&amp; (Objects.equal(type, other.type))" to="!(((Objects.equal(id, other.id)) &amp;&amp; (Objects.equal(key, other.key))) &amp;&amp; (Objects.equal(type, other.type)))" />
    <mutant id="mutant_524" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) * -1)" />
    <mutant id="mutant_645" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="(((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) * -1)" />
    <mutant id="mutant_408" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="((31 * result) + (ruleKey.hashCode())) + 1" />
    <mutant id="mutant_529" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) * -1)" />
    <mutant id="mutant_409" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="((31 * result) + (ruleKey.hashCode())) - 1" />
    <mutant id="mutant_640" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + 1)" />
    <mutant id="mutant_520" viable="true" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="(((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex) + 1)" />
    <mutant id="mutant_641" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) - 1)" />
    <mutant id="mutant_415" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="((semiColonPos + 1) - 1)" />
    <mutant id="mutant_536" viable="true" in="org.sonar.core.user.GroupMembership.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_657" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="((&quot;Fail to execute SQL request: &quot; + sql) + 1)" />
    <mutant id="mutant_416" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="((semiColonPos + 1) + 1)" />
    <mutant id="mutant_537" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) + 1)" />
    <mutant id="mutant_658" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="((&quot;Fail to execute SQL request: &quot; + sql) - 1)" />
    <mutant id="mutant_417" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="((&quot;%&quot; + (query.toUpperCase())) * -1)" />
    <mutant id="mutant_538" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) - 1)" />
    <mutant id="mutant_659" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) - 1)" />
    <mutant id="mutant_418" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="((&quot;%&quot; + (query.toUpperCase())) + 1)" />
    <mutant id="mutant_539" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) * -1)" />
    <mutant id="mutant_411" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="((&quot;Bad format of activeRule key: &quot; + s) - 1)" />
    <mutant id="mutant_532" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="((((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP)) - 1)" />
    <mutant id="mutant_653" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="(((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;) - 1)" />
    <mutant id="mutant_412" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="((&quot;Bad format of activeRule key: &quot; + s) + 1)" />
    <mutant id="mutant_533" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="((((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP)) * -1)" />
    <mutant id="mutant_654" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="(((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;) + 1)" />
    <mutant id="mutant_413" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="((&quot;Bad format of activeRule key: &quot; + s) * -1)" />
    <mutant id="mutant_534" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="((((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP)) + 1)" />
    <mutant id="mutant_655" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(rs.next()) &amp;&amp; ((rs.getInt(1)) &gt; 0)" to="!((rs.next()) &amp;&amp; ((rs.getInt(1)) &gt; 0))" />
    <mutant id="mutant_414" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="((semiColonPos + 1) * -1)" />
    <mutant id="mutant_535" viable="true" in="org.sonar.core.user.DefaultUser.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_656" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="((&quot;Fail to execute SQL request: &quot; + sql) * -1)" />
    <mutant id="mutant_419" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="((&quot;%&quot; + (query.toUpperCase())) - 1)" />
    <mutant id="mutant_650" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="((&quot;notification.&quot; + dispatcherKey) * -1)" />
    <mutant id="mutant_530" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + 1)" />
    <mutant id="mutant_651" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="((&quot;notification.&quot; + dispatcherKey) + 1)" />
    <mutant id="mutant_410" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="((31 * result) + (ruleKey.hashCode())) * -1" />
    <mutant id="mutant_531" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) - 1)" />
    <mutant id="mutant_652" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="(((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;) * -1)" />
    <mutant id="mutant_305" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="(((proxy.type()) + &quot; proxy: &quot;) + 1)" />
    <mutant id="mutant_426" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="(((component.getClass().getCanonicalName()) + &quot; started&quot;) * -1)" />
    <mutant id="mutant_547" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + 1)" />
    <mutant id="mutant_668" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) - 1)" />
    <mutant id="mutant_306" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="(((proxy.type()) + &quot; proxy: &quot;) * -1)" />
    <mutant id="mutant_427" viable="true" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="(((component.getClass().getCanonicalName()) + &quot; started&quot;) + 1)" />
    <mutant id="mutant_548" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - 1)" />
    <mutant id="mutant_669" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) * -1)" />
    <mutant id="mutant_307" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="((((proxy.type()) + &quot; proxy: &quot;) + (proxy.address())) + 1)" />
    <mutant id="mutant_428" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="(((component.getClass().getCanonicalName()) + &quot; started&quot;) - 1)" />
    <mutant id="mutant_549" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) + 1)" />
    <mutant id="mutant_308" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="((((proxy.type()) + &quot; proxy: &quot;) + (proxy.address())) - 1)" />
    <mutant id="mutant_429" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="((&quot;Unable to register component &quot; + (getName(component))) - 1)" />
    <mutant id="mutant_301" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="((&quot;Basic &quot; + encoded) * -1)" />
    <mutant id="mutant_422" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="((&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;) * -1" />
    <mutant id="mutant_543" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP)) + 1)" />
    <mutant id="mutant_664" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) * -1)" />
    <mutant id="mutant_302" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(encoding != null) &amp;&amp; (&quot;gzip&quot;.equalsIgnoreCase(encoding))" to="!((encoding != null) &amp;&amp; (&quot;gzip&quot;.equalsIgnoreCase(encoding)))" />
    <mutant id="mutant_423" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="((&quot;Quality profile not found: &quot; + key) * -1)" />
    <mutant id="mutant_544" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP)) * -1)" />
    <mutant id="mutant_665" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) + 1)" />
    <mutant id="mutant_303" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxies.size()) == 1) &amp;&amp; (proxies.get(0).type().equals(Proxy.Type.DIRECT))" to="!(((proxies.size()) == 1) &amp;&amp; (proxies.get(0).type().equals(Proxy.Type.DIRECT)))" />
    <mutant id="mutant_424" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="((&quot;Quality profile not found: &quot; + key) - 1)" />
    <mutant id="mutant_545" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="((((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP)) - 1)" />
    <mutant id="mutant_666" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) - 1)" />
    <mutant id="mutant_304" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="(((proxy.type()) + &quot; proxy: &quot;) - 1)" />
    <mutant id="mutant_425" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="((&quot;Quality profile not found: &quot; + key) + 1)" />
    <mutant id="mutant_546" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * -1)" />
    <mutant id="mutant_667" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) * -1)" />
    <mutant id="mutant_309" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="((((proxy.type()) + &quot; proxy: &quot;) + (proxy.address())) * -1)" />
    <mutant id="mutant_660" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) * -1)" />
    <mutant id="mutant_540" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + 1)" />
    <mutant id="mutant_661" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + 1)" />
    <mutant id="mutant_420" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="((&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;) - 1" />
    <mutant id="mutant_541" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - 1)" />
    <mutant id="mutant_662" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + 1)" />
    <mutant id="mutant_300" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="((&quot;Basic &quot; + encoded) + 1)" />
    <mutant id="mutant_421" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="((&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;) + 1" />
    <mutant id="mutant_542" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * -1)" />
    <mutant id="mutant_663" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) - 1)" />
    <mutant id="mutant_316" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="((((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl) * -1)" />
    <mutant id="mutant_437" viable="true" in="org.sonar.core.platform.PluginClassloaderDef.equals(java.lang.Object)" from="(o == null) || ((getClass()) != (o.getClass()))" to="!((o == null) || ((getClass()) != (o.getClass())))" />
    <mutant id="mutant_558" viable="true" in="org.sonar.core.user.UserDto.encodeScmAccounts(java.util.List)" from="(scmAccounts != null) &amp;&amp; (!(scmAccounts.isEmpty()))" to="!((scmAccounts != null) &amp;&amp; (!(scmAccounts.isEmpty())))" />
    <mutant id="mutant_679" viable="true" in="org.sonar.core.properties.PropertyDto.equals(java.lang.Object)" from="(((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value))) &amp;&amp; (Objects.equal(this.userId, other.userId)))" to="(!(((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value))) &amp;&amp; (Objects.equal(this.userId, other.userId))))" />
    <mutant id="mutant_317" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="((((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl) - 1)" />
    <mutant id="mutant_438" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="((&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath())) * -1)" />
    <mutant id="mutant_559" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="((&quot;Membership is not valid (got &quot; + (membership)) + 1)" />
    <mutant id="mutant_318" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="((((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl) + 1)" />
    <mutant id="mutant_439" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="((&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath())) - 1)" />
    <mutant id="mutant_319" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils$2.apply(org.sonar.core.persistence.dialect.Dialect)" from="(dialect != null) &amp;&amp; (dialect.getId().equals(dialectId))" to="!((dialect != null) &amp;&amp; (dialect.getId().equals(dialectId)))" />
    <mutant id="mutant_312" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) - 1)" />
    <mutant id="mutant_433" viable="true" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="((&quot;Unable to register extension &quot; + (getName(extension))) + 1)" />
    <mutant id="mutant_554" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) + 1)" />
    <mutant id="mutant_675" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) - 1)" />
    <mutant id="mutant_313" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) - 1)" />
    <mutant id="mutant_434" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="((&quot;Unable to register extension &quot; + (getName(extension))) - 1)" />
    <mutant id="mutant_555" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) + 1" />
    <mutant id="mutant_676" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) * -1)" />
    <mutant id="mutant_314" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) * -1)" />
    <mutant id="mutant_435" viable="true" in="org.sonar.core.platform.PicoUtils.sanitize(java.lang.Throwable)" from="(t instanceof org.picocontainer.PicoLifecycleException) &amp;&amp; (cause != null)" to="!((t instanceof org.picocontainer.PicoLifecycleException) &amp;&amp; (cause != null))" />
    <mutant id="mutant_556" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) * -1" />
    <mutant id="mutant_677" viable="true" in="org.sonar.core.properties.PropertiesDao.setProperty(org.sonar.core.properties.PropertyDto,org.apache.ibatis.session.SqlSession)" from="(persistedProperty != null) &amp;&amp; (!(StringUtils.equals(persistedProperty.getValue(), property.getValue())))" to="!((persistedProperty != null) &amp;&amp; (!(StringUtils.equals(persistedProperty.getValue(), property.getValue()))))" />
    <mutant id="mutant_315" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + 1)" />
    <mutant id="mutant_436" viable="true" in="org.sonar.core.platform.PicoUtils.sanitize(java.lang.Throwable)" from="(&quot;wrapper&quot;.equals(cause.getMessage())) &amp;&amp; ((cause.getCause()) != null)" to="!((&quot;wrapper&quot;.equals(cause.getMessage())) &amp;&amp; ((cause.getCause()) != null))" />
    <mutant id="mutant_557" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="((&quot;%&quot; + sql) + &quot;%&quot;) - 1" />
    <mutant id="mutant_678" viable="true" in="org.sonar.core.properties.PropertyDto.equals(java.lang.Object)" from="((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value)))" to="(!((Objects.equal(this.key, other.key)) &amp;&amp; (Objects.equal(this.value, other.value))))" />
    <mutant id="mutant_550" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) * -1)" />
    <mutant id="mutant_671" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + 1)" />
    <mutant id="mutant_430" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="((&quot;Unable to register component &quot; + (getName(component))) * -1)" />
    <mutant id="mutant_551" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;) - 1)" />
    <mutant id="mutant_672" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) - 1)" />
    <mutant id="mutant_310" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + 1)" />
    <mutant id="mutant_431" viable="true" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="((&quot;Unable to register component &quot; + (getName(component))) + 1)" />
    <mutant id="mutant_552" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) * -1)" />
    <mutant id="mutant_673" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) * -1)" />
    <mutant id="mutant_311" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) * -1)" />
    <mutant id="mutant_432" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="((&quot;Unable to register extension &quot; + (getName(extension))) * -1)" />
    <mutant id="mutant_553" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="((&quot;%&quot; + sql) - 1)" />
    <mutant id="mutant_674" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey) + 1)" />
    <mutant id="mutant_670" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + 1)" />
  </mutants>
</mutation>
