<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="LCR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="778940">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_569" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="false" />
    <mutant id="mutant_565" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="false" />
    <mutant id="mutant_566" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) || (!(deleted.isEmpty()))" />
    <mutant id="mutant_5680" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="true" />
    <mutant id="mutant_567" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="(getRenameLimit()) == 0" />
    <mutant id="mutant_5681" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="false" />
    <mutant id="mutant_568" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="true" />
    <mutant id="mutant_5682" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="((uri.getHost().length()) != 0)" />
    <mutant id="mutant_3020" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="false" />
    <mutant id="mutant_4351" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="true" />
    <mutant id="mutant_4350" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="!ignoreConflicts" />
    <mutant id="mutant_3017" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="(!(slices.isEmpty())) || ((slices.getLast().beginIndex) == (s.beginIndex))" />
    <mutant id="mutant_4348" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)" />
    <mutant id="mutant_3016" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="(nextTop &lt; (topPaths.size())) || (i == (topPaths.get(nextTop).slice.beginIndex))" />
    <mutant id="mutant_4347" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="false" />
    <mutant id="mutant_3015" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="false" />
    <mutant id="mutant_4346" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="true" />
    <mutant id="mutant_3014" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="true" />
    <mutant id="mutant_4345" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT)" />
    <mutant id="mutant_3013" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="nextTop &lt; (topPaths.size())" />
    <mutant id="mutant_4344" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" to="(org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.isGitLink(modeT))" />
    <mutant id="mutant_3012" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(nextTop &lt; (topPaths.size())) &amp;&amp; (i == (topPaths.get(nextTop).slice.beginIndex))" to="i == (topPaths.get(nextTop).slice.beginIndex)" />
    <mutant id="mutant_4343" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" />
    <mutant id="mutant_3011" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="w &lt; weightPerThread" />
    <mutant id="mutant_4342" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)" />
    <mutant id="mutant_3010" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="false" />
    <mutant id="mutant_4341" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="false" />
    <mutant id="mutant_561" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="(0 &lt; (breakScore))" />
    <mutant id="mutant_5672" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="putty || (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" />
    <mutant id="mutant_562" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="(0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))" />
    <mutant id="mutant_5673" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="putty" />
    <mutant id="mutant_563" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="!(deleted.isEmpty())" />
    <mutant id="mutant_5674" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="true" />
    <mutant id="mutant_564" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty()))) &amp;&amp; (!(deleted.isEmpty()))" to="true" />
    <mutant id="mutant_5675" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="false" />
    <mutant id="mutant_5676" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="putty &amp;&amp; (!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;)))" to="!(ssh.toLowerCase().contains(&quot;tortoiseplink&quot;))" />
    <mutant id="mutant_5677" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="(((uri.getHost()) != null) || ((uri.getPath()) != null))" />
    <mutant id="mutant_3019" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="true" />
    <mutant id="mutant_5678" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="((uri.getPath()) != null)" />
    <mutant id="mutant_560" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="false" />
    <mutant id="mutant_3018" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="!(slices.isEmpty())" />
    <mutant id="mutant_4349" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="(result.containsConflicts()) || (!ignoreConflicts)" />
    <mutant id="mutant_5679" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" to="((uri.getHost()) != null)" />
    <mutant id="mutant_576" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="(score &lt; 0) &amp;&amp; (score &gt; 100)" />
    <mutant id="mutant_577" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="((e.beginA) &lt; (e.endA))" />
    <mutant id="mutant_578" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="(((e.beginA) &lt; (e.endA)) || ((e.beginB) &lt; (e.endB)))" />
    <mutant id="mutant_5670" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="true" />
    <mutant id="mutant_579" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="true" />
    <mutant id="mutant_5671" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="false" />
    <mutant id="mutant_4340" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="true" />
    <mutant id="mutant_3006" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="s != null" />
    <mutant id="mutant_4337" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="false" />
    <mutant id="mutant_5669" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="((uri.getPort()) &gt; 0) || ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" />
    <mutant id="mutant_3005" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="false" />
    <mutant id="mutant_4336" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="true" />
    <mutant id="mutant_3004" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="true" />
    <mutant id="mutant_4335" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) || (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" />
    <mutant id="mutant_3003" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="maxWork &lt; (s.size())" />
    <mutant id="mutant_4334" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO))" />
    <mutant id="mutant_3002" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.stealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask)" from="(s != null) &amp;&amp; (maxWork &lt; (s.size()))" to="(s != null) || (maxWork &lt; (s.size()))" />
    <mutant id="mutant_4333" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="false" />
    <mutant id="mutant_3001" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="false" />
    <mutant id="mutant_4332" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="true" />
    <mutant id="mutant_3000" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="true" />
    <mutant id="mutant_4331" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)" />
    <mutant id="mutant_4330" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) || (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" />
    <mutant id="mutant_572" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="score &lt; 0" />
    <mutant id="mutant_5661" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(!(getSchemes().contains(uri.getScheme())))" />
    <mutant id="mutant_6992" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="true" />
    <mutant id="mutant_573" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="score &gt; 100" />
    <mutant id="mutant_5662" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) &amp;&amp; (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" />
    <mutant id="mutant_6993" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="false" />
    <mutant id="mutant_574" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="true" />
    <mutant id="mutant_5663" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" />
    <mutant id="mutant_6994" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) &amp;&amp; (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" />
    <mutant id="mutant_575" viable="true" in="org.eclipse.jgit.diff.RenameDetector.setRenameScore(int)" from="(score &lt; 0) || (score &gt; 100)" to="false" />
    <mutant id="mutant_5664" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)" />
    <mutant id="mutant_6995" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)]))" to="(&quot;year&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;years&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_5665" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="true" />
    <mutant id="mutant_6996" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)]))" to="&quot;year&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_3009" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="true" />
    <mutant id="mutant_5666" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="false" />
    <mutant id="mutant_6997" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_570" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="cnt &lt;= (getRenameLimit())" />
    <mutant id="mutant_3008" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="(w &lt; weightPerThread) || (i &lt; (endIndex))" />
    <mutant id="mutant_4339" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)" />
    <mutant id="mutant_5667" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="(uri.getPort()) &gt; 0" />
    <mutant id="mutant_6998" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;year&quot;.equals(parts[(i + 1)])) || (&quot;years&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_571" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findContentRenames(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((getRenameLimit()) == 0) || (cnt &lt;= (getRenameLimit()))" to="((getRenameLimit()) == 0) &amp;&amp; (cnt &lt;= (getRenameLimit()))" />
    <mutant id="mutant_3007" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(w &lt; weightPerThread) &amp;&amp; (i &lt; (endIndex))" to="i &lt; (endIndex)" />
    <mutant id="mutant_4338" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)" />
    <mutant id="mutant_5668" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.service(java.lang.String,org.eclipse.jgit.transport.PacketLineOut)" from="((uri.getPort()) &gt; 0) &amp;&amp; ((uri.getPort()) != (TransportGitAnon.GIT_PORT))" to="(uri.getPort()) != (TransportGitAnon.GIT_PORT)" />
    <mutant id="mutant_6999" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)]))" to="(&quot;month&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;months&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_587" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="((e.beginA) &lt; (e.endA))" />
    <mutant id="mutant_588" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="(((e.beginA) &lt; (e.endA)) || ((e.beginB) &lt; (e.endB)))" />
    <mutant id="mutant_589" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="true" />
    <mutant id="mutant_6990" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="!(&quot;ago&quot;.equals(parts[((parts.length) - 1)]))" />
    <mutant id="mutant_5660" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="false" />
    <mutant id="mutant_6991" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0)) || (!(&quot;ago&quot;.equals(parts[((parts.length) - 1)])))" to="(partsLength &lt; 3) || ((partsLength &amp; 1) == 0)" />
    <mutant id="mutant_4326" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="false" />
    <mutant id="mutant_5658" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(((uri.getScheme()) != null) || (!(getSchemes().contains(uri.getScheme()))))" />
    <mutant id="mutant_6989" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="(partsLength &lt; 3)" />
    <mutant id="mutant_4325" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="true" />
    <mutant id="mutant_5659" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="true" />
    <mutant id="mutant_4324" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) || ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" />
    <mutant id="mutant_4323" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="(modeT == 0) || (modeB != 0)" />
    <mutant id="mutant_4322" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="false" />
    <mutant id="mutant_4321" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="true" />
    <mutant id="mutant_4320" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="modeB != 0" />
    <mutant id="mutant_583" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="equals(a, e.beginA, b, e.beginB)" />
    <mutant id="mutant_5650" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="false" />
    <mutant id="mutant_6981" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="skipExisting" />
    <mutant id="mutant_584" viable="false" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="true" />
    <mutant id="mutant_5651" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" />
    <mutant id="mutant_6982" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="true" />
    <mutant id="mutant_585" viable="false" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="false" />
    <mutant id="mutant_5652" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" />
    <mutant id="mutant_6983" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="false" />
    <mutant id="mutant_586" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))" />
    <mutant id="mutant_5653" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="((uri.getHost()) != null)" />
    <mutant id="mutant_6984" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="skipExisting || (d.isDirectory())" />
    <mutant id="mutant_5654" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="true" />
    <mutant id="mutant_6985" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="((partsLength &lt; 3) &amp;&amp; ((partsLength &amp; 1) == 0))" />
    <mutant id="mutant_580" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="false" />
    <mutant id="mutant_4329" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="!(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" />
    <mutant id="mutant_5655" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="false" />
    <mutant id="mutant_6986" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="((partsLength &amp; 1) == 0)" />
    <mutant id="mutant_581" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="((e.beginB) &lt; (e.endB))" />
    <mutant id="mutant_4328" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="(tw.getRawMode(ResolveMerger.T_FILE)) == 0" />
    <mutant id="mutant_5656" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) &amp;&amp; ((uri.getHost()) != null))" />
    <mutant id="mutant_6987" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="true" />
    <mutant id="mutant_582" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, e.beginA, b, e.beginB))" to="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) || (equals(a, e.beginA, b, e.beginB))" />
    <mutant id="mutant_4327" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)) &amp;&amp; ((tw.getRawMode(ResolveMerger.T_FILE)) == 0)" to="(tw.getTreeCount()) &gt; (ResolveMerger.T_FILE)" />
    <mutant id="mutant_5657" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((uri.getScheme()) != null)" />
    <mutant id="mutant_6988" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((partsLength &lt; 3) || ((partsLength &amp; 1) == 0))" to="false" />
    <mutant id="mutant_598" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="srcIdx == (srcHash.length)" />
    <mutant id="mutant_599" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="dstIdx == (dstHash.length)" />
    <mutant id="mutant_6980" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdirs(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="d.isDirectory()" />
    <mutant id="mutant_4315" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="(modeB == modeO) || (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" />
    <mutant id="mutant_5647" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) &amp;&amp; ((uri.getPass()) != null))" />
    <mutant id="mutant_6978" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="false" />
    <mutant id="mutant_4314" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="modeB == modeO" />
    <mutant id="mutant_5648" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="((uri.getPass()) != null)" />
    <mutant id="mutant_6979" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="skipExisting || (d.isDirectory())" />
    <mutant id="mutant_4313" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) || (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" />
    <mutant id="mutant_5649" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="true" />
    <mutant id="mutant_4312" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)" />
    <mutant id="mutant_4311" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="false" />
    <mutant id="mutant_4310" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="true" />
    <mutant id="mutant_594" viable="false" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="false" />
    <mutant id="mutant_6970" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="true" />
    <mutant id="mutant_595" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))" />
    <mutant id="mutant_5640" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="false" />
    <mutant id="mutant_6971" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="false" />
    <mutant id="mutant_596" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="equals(a, ((e.endA) - 1), b, ((e.endB) - 1))" />
    <mutant id="mutant_5641" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="(((uri.getPath()) == null) &amp;&amp; ((uri.getPort()) &gt; 0))" />
    <mutant id="mutant_6972" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="(options &amp; (FileUtils.RETRY)) != 0" />
    <mutant id="mutant_597" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="(srcIdx == (srcHash.length)) &amp;&amp; (dstIdx == (dstHash.length))" />
    <mutant id="mutant_5642" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) &amp;&amp; ((uri.getUser()) != null))" />
    <mutant id="mutant_6973" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="fs.exists(f)" />
    <mutant id="mutant_590" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="false" />
    <mutant id="mutant_4319" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeT == 0) &amp;&amp; (modeB != 0)" to="modeT == 0" />
    <mutant id="mutant_5643" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" />
    <mutant id="mutant_6974" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RETRY)) != 0) &amp;&amp; (fs.exists(f))" to="((options &amp; (FileUtils.RETRY)) != 0) || (fs.exists(f))" />
    <mutant id="mutant_591" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB)))" to="((e.beginB) &lt; (e.endB))" />
    <mutant id="mutant_4318" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)" />
    <mutant id="mutant_5644" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="true" />
    <mutant id="mutant_6975" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="d.isDirectory()" />
    <mutant id="mutant_592" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) || (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" />
    <mutant id="mutant_4317" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="false" />
    <mutant id="mutant_5645" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="false" />
    <mutant id="mutant_6976" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="skipExisting" />
    <mutant id="mutant_593" viable="false" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="(((e.beginA) &lt; (e.endA)) &amp;&amp; ((e.beginB) &lt; (e.endB))) &amp;&amp; (equals(a, ((e.endA) - 1), b, ((e.endB) - 1)))" to="true" />
    <mutant id="mutant_4316" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(modeB == modeO) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))" to="true" />
    <mutant id="mutant_5646" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="((uri.getUser()) != null)" />
    <mutant id="mutant_6977" viable="true" in="org.eclipse.jgit.util.FileUtils.mkdir(java.io.File,boolean)" from="skipExisting &amp;&amp; (d.isDirectory())" to="true" />
    <mutant id="mutant_3064" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="true" />
    <mutant id="mutant_4395" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="(indexChangedListener) != null" />
    <mutant id="mutant_3063" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="(!(canBuildBitmaps))" />
    <mutant id="mutant_4394" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="((indexChangedListener) != null) || (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" />
    <mutant id="mutant_3062" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="((!(canBuildBitmaps)) &amp;&amp; ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" />
    <mutant id="mutant_4393" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="(mode != 0) || (!(FileMode.TREE.equals(mode)))" />
    <mutant id="mutant_3061" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="indexDisabled" />
    <mutant id="mutant_4392" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="false" />
    <mutant id="mutant_3060" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="false" />
    <mutant id="mutant_4391" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="true" />
    <mutant id="mutant_4390" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="!(FileMode.TREE.equals(mode))" />
    <mutant id="mutant_3059" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="true" />
    <mutant id="mutant_3058" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="(indexDisabled) &amp;&amp; (!(cachedPacks.isEmpty()))" />
    <mutant id="mutant_4389" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="mode != 0" />
    <mutant id="mutant_3057" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.isIndexDisabled()" from="(indexDisabled) || (!(cachedPacks.isEmpty()))" to="!(cachedPacks.isEmpty())" />
    <mutant id="mutant_4388" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="false" />
    <mutant id="mutant_3056" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId))" />
    <mutant id="mutant_4387" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="true" />
    <mutant id="mutant_3055" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="false" />
    <mutant id="mutant_4386" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS)" />
    <mutant id="mutant_3054" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="true" />
    <mutant id="mutant_4385" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="modeB == modeT" />
    <mutant id="mutant_3053" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="(ptr != null) &amp;&amp; (ptr.isEdge())" />
    <mutant id="mutant_4384" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="(modeB == modeT) || (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" />
    <mutant id="mutant_3052" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge())) || (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="((ptr != null) &amp;&amp; (ptr.isEdge())) &amp;&amp; (((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" />
    <mutant id="mutant_4383" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="false" />
    <mutant id="mutant_3051" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="(((haveObjects) != null) || (haveObjects.contains(objectId)))" />
    <mutant id="mutant_4382" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="true" />
    <mutant id="mutant_3050" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="((haveObjects) != null)" />
    <mutant id="mutant_4381" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="modeB == modeO" />
    <mutant id="mutant_4380" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="(modeB == modeO) || (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" />
    <mutant id="mutant_3049" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="false" />
    <mutant id="mutant_3048" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="true" />
    <mutant id="mutant_4379" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeB == modeO) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS))" to="tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_BASE, StrategySimpleTwoWayInCore.InCoreMerger.T_OURS)" />
    <mutant id="mutant_3047" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="(((haveObjects) != null) &amp;&amp; (haveObjects.contains(objectId)))" to="(haveObjects.contains(objectId))" />
    <mutant id="mutant_4378" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="modeO == modeT" />
    <mutant id="mutant_3046" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="false" />
    <mutant id="mutant_4377" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="false" />
    <mutant id="mutant_3045" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="true" />
    <mutant id="mutant_4376" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="true" />
    <mutant id="mutant_3044" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="(ptr.isEdge())" />
    <mutant id="mutant_4375" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS)" />
    <mutant id="mutant_3043" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="(ptr != null)" />
    <mutant id="mutant_4374" viable="true" in="org.eclipse.jgit.merge.StrategySimpleTwoWayInCore$InCoreMerger.mergeImpl()" from="(modeO == modeT) &amp;&amp; (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" to="(modeO == modeT) || (tw.idEqual(StrategySimpleTwoWayInCore.InCoreMerger.T_OURS, StrategySimpleTwoWayInCore.InCoreMerger.T_THEIRS))" />
    <mutant id="mutant_3042" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.have(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.lib.AnyObjectId)" from="((ptr != null) &amp;&amp; (ptr.isEdge()))" to="((ptr != null) || (ptr.isEdge()))" />
    <mutant id="mutant_4373" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="p != null" />
    <mutant id="mutant_3041" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="(b.isWritten()) &amp; (ofsDelta)" />
    <mutant id="mutant_4372" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="false" />
    <mutant id="mutant_3040" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="b != null" />
    <mutant id="mutant_4371" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="true" />
    <mutant id="mutant_4370" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="(p != null) || (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" />
    <mutant id="mutant_3039" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="false" />
    <mutant id="mutant_3038" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="true" />
    <mutant id="mutant_4369" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.add(byte[],org.eclipse.jgit.treewalk.CanonicalTreeParser,int,long,long)" from="(p != null) &amp;&amp; (!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE)))" to="!(p.getEntryFileMode().equals(org.eclipse.jgit.lib.FileMode.TREE))" />
    <mutant id="mutant_3037" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(b != null) &amp;&amp; ((b.isWritten()) &amp; (ofsDelta))" to="(b != null) || ((b.isWritten()) &amp; (ofsDelta))" />
    <mutant id="mutant_4368" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="(modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))" />
    <mutant id="mutant_3036" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="false" />
    <mutant id="mutant_4367" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="(modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)))" />
    <mutant id="mutant_3035" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="true" />
    <mutant id="mutant_4366" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) &amp;&amp; ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" />
    <mutant id="mutant_3034" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="res.object.isEdge()" />
    <mutant id="mutant_4365" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="false" />
    <mutant id="mutant_3033" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="res.object.doNotAttemptDelta()" />
    <mutant id="mutant_4364" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))) || ((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="true" />
    <mutant id="mutant_3032" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="(res.object.isEdge()) || (res.object.doNotAttemptDelta())" to="(res.object.isEdge()) &amp;&amp; (res.object.doNotAttemptDelta())" />
    <mutant id="mutant_4363" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="(modeT != 0)" />
    <mutant id="mutant_5694" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="uri.getPath().startsWith(&quot;/~&quot;)" />
    <mutant id="mutant_5695" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="true" />
    <mutant id="mutant_5696" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="false" />
    <mutant id="mutant_5697" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="(why.length()) == 0" />
    <mutant id="mutant_5698" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="true" />
    <mutant id="mutant_5699" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="false" />
    <mutant id="mutant_5690" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)" />
    <mutant id="mutant_5691" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) || ((uri.getPath().length()) != 0)" />
    <mutant id="mutant_5692" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="((uri.getScheme()) != null) || (uri.getPath().startsWith(&quot;/~&quot;))" />
    <mutant id="mutant_5693" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.commandFor(java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="(uri.getScheme()) != null" />
    <mutant id="mutant_3031" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="(maxMemory) &lt; ((loaded) + need)" />
    <mutant id="mutant_4362" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="false" />
    <mutant id="mutant_3030" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="false" />
    <mutant id="mutant_4361" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="true" />
    <mutant id="mutant_4360" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="((modeT != 0) || (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" />
    <mutant id="mutant_3028" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="n != (res)" />
    <mutant id="mutant_4359" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeT != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))))" to="(!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS)))" />
    <mutant id="mutant_3027" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="((maxMemory) &lt; ((loaded) + need)) || (n != (res))" />
    <mutant id="mutant_4358" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="(modeO != 0)" />
    <mutant id="mutant_3026" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="false" />
    <mutant id="mutant_4357" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="((modeO != 0) || (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" />
    <mutant id="mutant_3025" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="true" />
    <mutant id="mutant_4356" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="false" />
    <mutant id="mutant_3024" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="(end) &lt;= (s.beginIndex)" />
    <mutant id="mutant_4355" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="true" />
    <mutant id="mutant_3023" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="(s.beginIndex) &lt;= (cur)" />
    <mutant id="mutant_4354" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO != 0) &amp;&amp; (!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS))))" to="(!(tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_OURS)))" />
    <mutant id="mutant_3022" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="((s.beginIndex) &lt;= (cur)) || ((end) &lt;= (s.beginIndex))" to="((s.beginIndex) &lt;= (cur)) &amp;&amp; ((end) &lt;= (s.beginIndex))" />
    <mutant id="mutant_4353" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="result.containsConflicts()" />
    <mutant id="mutant_3021" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask.tryStealWork(org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice)" from="(!(slices.isEmpty())) &amp;&amp; ((slices.getLast().beginIndex) == (s.beginIndex))" to="(slices.getLast().beginIndex) == (s.beginIndex)" />
    <mutant id="mutant_4352" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(result.containsConflicts()) &amp;&amp; (!ignoreConflicts)" to="false" />
    <mutant id="mutant_5683" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="true" />
    <mutant id="mutant_5684" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="false" />
    <mutant id="mutant_5685" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) || ((uri.getHost().length()) != 0))" />
    <mutant id="mutant_5686" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0))" to="(((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null))" />
    <mutant id="mutant_5687" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="(uri.getPath().length()) != 0" />
    <mutant id="mutant_5688" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="true" />
    <mutant id="mutant_5689" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getHost()) != null) &amp;&amp; ((uri.getPath()) != null)) &amp;&amp; ((uri.getHost().length()) != 0)) &amp;&amp; ((uri.getPath().length()) != 0)" to="false" />
    <mutant id="mutant_3029" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((maxMemory) &lt; ((loaded) + need)) &amp;&amp; (n != (res))" to="true" />
    <mutant id="mutant_3099" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="(config.isBuildBitmaps())" />
    <mutant id="mutant_3098" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="false" />
    <mutant id="mutant_3097" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="true" />
    <mutant id="mutant_3096" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="d &gt;= max" />
    <mutant id="mutant_3095" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="false" />
    <mutant id="mutant_3094" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="true" />
    <mutant id="mutant_3093" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="b.isDeltaRepresentation()" />
    <mutant id="mutant_3092" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(d &gt;= max) &amp;&amp; (b.isDeltaRepresentation())" to="(d &gt;= max) || (b.isDeltaRepresentation())" />
    <mutant id="mutant_3091" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="(obj != null) || (!(obj.isEdge()))" />
    <mutant id="mutant_3090" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="obj != null" />
    <mutant id="mutant_3089" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="!(obj.isEdge())" />
    <mutant id="mutant_3088" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="false" />
    <mutant id="mutant_3087" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.get(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="true" />
    <mutant id="mutant_3086" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="(obj != null) || (!(obj.isEdge()))" />
    <mutant id="mutant_3085" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="obj != null" />
    <mutant id="mutant_3084" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="!(obj.isEdge())" />
    <mutant id="mutant_3083" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="false" />
    <mutant id="mutant_3082" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.willInclude(org.eclipse.jgit.lib.AnyObjectId)" from="(obj != null) &amp;&amp; (!(obj.isEdge()))" to="true" />
    <mutant id="mutant_3081" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="!(bitmap.contains(last))" />
    <mutant id="mutant_3080" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="false" />
    <mutant id="mutant_3079" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="true" />
    <mutant id="mutant_3078" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="(last != null) &amp;&amp; (cmit.isReuseWalker())" />
    <mutant id="mutant_3077" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker())) &amp;&amp; (!(bitmap.contains(last)))" to="((last != null) &amp;&amp; (cmit.isReuseWalker())) || (!(bitmap.contains(last)))" />
    <mutant id="mutant_3076" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="(cmit.isReuseWalker())" />
    <mutant id="mutant_3075" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="false" />
    <mutant id="mutant_3074" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="true" />
    <mutant id="mutant_3073" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="(last != null)" />
    <mutant id="mutant_3072" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((last != null) &amp;&amp; (cmit.isReuseWalker()))" to="((last != null) || (cmit.isReuseWalker()))" />
    <mutant id="mutant_3071" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="(!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))" />
    <mutant id="mutant_3070" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="false" />
    <mutant id="mutant_3069" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="true" />
    <mutant id="mutant_3068" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="!(cachedPacks.isEmpty())" />
    <mutant id="mutant_4399" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="(liveFile) == null" />
    <mutant id="mutant_3067" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) || (!(cachedPacks.isEmpty()))" to="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE))) &amp;&amp; (!(cachedPacks.isEmpty()))" />
    <mutant id="mutant_4398" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="false" />
    <mutant id="mutant_3066" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="((getObjectCount()) &gt; (Integer.MAX_VALUE))" />
    <mutant id="mutant_4397" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="true" />
    <mutant id="mutant_3065" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.prepareBitmapIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((!(canBuildBitmaps)) || ((getObjectCount()) &gt; (Integer.MAX_VALUE)))" to="false" />
    <mutant id="mutant_4396" viable="true" in="org.eclipse.jgit.dircache.DirCache.commit()" from="((indexChangedListener) != null) &amp;&amp; (!(Arrays.equals(readIndexChecksum, writeIndexChecksum)))" to="!(Arrays.equals(readIndexChecksum, writeIndexChecksum))" />
    <mutant id="mutant_5713" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="true" />
    <mutant id="mutant_5714" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="false" />
    <mutant id="mutant_5715" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="(s == null) &amp;&amp; ((s.length()) == 0)" />
    <mutant id="mutant_5716" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="s == null" />
    <mutant id="mutant_5717" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="!(s.endsWith(&quot;.pack&quot;))" />
    <mutant id="mutant_5718" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="true" />
    <mutant id="mutant_5719" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="false" />
    <mutant id="mutant_5710" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="(why != null) || ((why.length()) &gt; 0)" />
    <mutant id="mutant_5711" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="why != null" />
    <mutant id="mutant_5712" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(s == null) || ((s.length()) == 0)" to="(s.length()) == 0" />
    <mutant id="mutant_5702" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="((uri.getScheme()) != null) || (uri.getPath().startsWith(&quot;/~&quot;))" />
    <mutant id="mutant_5703" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="(uri.getScheme()) != null" />
    <mutant id="mutant_5704" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="uri.getPath().startsWith(&quot;/~&quot;)" />
    <mutant id="mutant_5705" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="true" />
    <mutant id="mutant_5706" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="((uri.getScheme()) != null) &amp;&amp; (uri.getPath().startsWith(&quot;/~&quot;))" to="false" />
    <mutant id="mutant_5707" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="(why.length()) &gt; 0" />
    <mutant id="mutant_5708" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="true" />
    <mutant id="mutant_5709" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.checkExecFailure(int,java.lang.String,java.lang.String)" from="(why != null) &amp;&amp; ((why.length()) &gt; 0)" to="false" />
    <mutant id="mutant_5700" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="(why == null) &amp;&amp; ((why.length()) == 0)" />
    <mutant id="mutant_5701" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh.cleanNotFound(org.eclipse.jgit.errors.NoRemoteRepositoryException,java.lang.String)" from="(why == null) || ((why.length()) == 0)" to="why == null" />
    <mutant id="mutant_503" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="false" />
    <mutant id="mutant_504" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="(aPtr &lt; 0)" />
    <mutant id="mutant_505" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="((aPtr &lt; 0) &amp;&amp; (bPtr &lt; 0))" />
    <mutant id="mutant_506" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="true" />
    <mutant id="mutant_500" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="(e.beginB) == (e.endB)" />
    <mutant id="mutant_501" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="((e.beginA) == (e.endA)) &amp;&amp; ((e.beginB) == (e.endB))" />
    <mutant id="mutant_502" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="true" />
    <mutant id="mutant_507" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="false" />
    <mutant id="mutant_508" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; 0) || (bPtr &lt; 0))" to="(bPtr &lt; 0)" />
    <mutant id="mutant_509" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="(((aPtr &lt; 0) || (bPtr &lt; 0)) &amp;&amp; (aEnd &gt; (aRaw.length)))" />
    <mutant id="mutant_514" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) &amp;&amp; (bEnd &gt; (bRaw.length))" />
    <mutant id="mutant_515" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="true" />
    <mutant id="mutant_516" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="false" />
    <mutant id="mutant_517" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))" />
    <mutant id="mutant_510" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="true" />
    <mutant id="mutant_511" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="false" />
    <mutant id="mutant_512" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="((aPtr &lt; 0) || (bPtr &lt; 0))" />
    <mutant id="mutant_513" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length)))" to="(aEnd &gt; (aRaw.length))" />
    <mutant id="mutant_518" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(((aPtr &lt; 0) || (bPtr &lt; 0)) || (aEnd &gt; (aRaw.length))) || (bEnd &gt; (bRaw.length))" to="bEnd &gt; (bRaw.length)" />
    <mutant id="mutant_519" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="((aPtr &lt; aEnd) || (bPtr &lt; bEnd))" />
    <mutant id="mutant_525" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="(aRaw[aPtr]) == (bRaw[bPtr])" />
    <mutant id="mutant_526" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="true" />
    <mutant id="mutant_527" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="false" />
    <mutant id="mutant_528" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) || ((aRaw[aPtr]) == (bRaw[bPtr]))" />
    <mutant id="mutant_521" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="false" />
    <mutant id="mutant_522" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(aPtr &lt; aEnd)" />
    <mutant id="mutant_523" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(bPtr &lt; bEnd)" />
    <mutant id="mutant_524" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[aPtr]) == (bRaw[bPtr]))" to="(aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)" />
    <mutant id="mutant_529" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="((aPtr &lt; aEnd) || (bPtr &lt; bEnd))" />
    <mutant id="mutant_4425" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="((hdr[0]) &gt;= 'A') || ((hdr[0]) &lt;= 'Z')" />
    <mutant id="mutant_5757" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) &amp;&amp; ((uri.getUser()) != null))" />
    <mutant id="mutant_4424" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="(hdr[0]) &gt;= 'A'" />
    <mutant id="mutant_5758" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" />
    <mutant id="mutant_4423" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="false" />
    <mutant id="mutant_5759" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="true" />
    <mutant id="mutant_4422" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="true" />
    <mutant id="mutant_4421" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="((snapshot) == null) &amp;&amp; (snapshot.isModified(liveFile))" />
    <mutant id="mutant_4420" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="(snapshot) == null" />
    <mutant id="mutant_5750" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="((this.headers) != null) || (!(this.headers.isEmpty()))" />
    <mutant id="mutant_5751" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="!(this.headers.isEmpty())" />
    <mutant id="mutant_520" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="true" />
    <mutant id="mutant_5752" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="((uri.getPort()) &gt; 0)" />
    <mutant id="mutant_4429" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="iIter.idEqual(fIter)" />
    <mutant id="mutant_5753" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="((uri.getPath()) == null)" />
    <mutant id="mutant_4428" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="false" />
    <mutant id="mutant_5754" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="true" />
    <mutant id="mutant_4427" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="true" />
    <mutant id="mutant_5755" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="false" />
    <mutant id="mutant_4426" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((hdr[0]) &gt;= 'A') &amp;&amp; ((hdr[0]) &lt;= 'Z')" to="(hdr[0]) &lt;= 'Z'" />
    <mutant id="mutant_5756" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="(((uri.getPath()) == null) &amp;&amp; ((uri.getPort()) &gt; 0))" />
    <mutant id="mutant_536" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="(aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)])" />
    <mutant id="mutant_537" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="true" />
    <mutant id="mutant_538" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="false" />
    <mutant id="mutant_539" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="!partialA" />
    <mutant id="mutant_532" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(aPtr &lt; aEnd)" />
    <mutant id="mutant_533" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="(bPtr &lt; bEnd)" />
    <mutant id="mutant_534" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) || ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" />
    <mutant id="mutant_535" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)) &amp;&amp; ((aRaw[(aEnd - 1)]) == (bRaw[(bEnd - 1)]))" to="(aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd)" />
    <mutant id="mutant_4414" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="mid &gt; 0" />
    <mutant id="mutant_5746" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="&quot;https&quot;.equals(u.getProtocol())" />
    <mutant id="mutant_4413" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; aLen" />
    <mutant id="mutant_5747" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="(this.headers) != null" />
    <mutant id="mutant_4412" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; bLen" />
    <mutant id="mutant_5748" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="true" />
    <mutant id="mutant_4411" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="(cPos &lt; aLen) || (cPos &lt; bLen)" />
    <mutant id="mutant_5749" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="((this.headers) != null) &amp;&amp; (!(this.headers.isEmpty()))" to="false" />
    <mutant id="mutant_4410" viable="false" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="false" />
    <mutant id="mutant_530" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="true" />
    <mutant id="mutant_5740" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="3 &lt; authAttempts" />
    <mutant id="mutant_531" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((aPtr &lt; aEnd) &amp;&amp; (bPtr &lt; bEnd))" to="false" />
    <mutant id="mutant_4419" viable="true" in="org.eclipse.jgit.dircache.DirCache.read()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="snapshot.isModified(liveFile)" />
    <mutant id="mutant_5741" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="(3 &lt; authAttempts) &amp;&amp; (!(authMethod.authorize(uri, credentialsProvider)))" />
    <mutant id="mutant_4418" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="(org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0" />
    <mutant id="mutant_5742" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="true" />
    <mutant id="mutant_4417" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="(mid &gt; 0) || ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" />
    <mutant id="mutant_5743" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="false" />
    <mutant id="mutant_4416" viable="false" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="false" />
    <mutant id="mutant_5744" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="!(http.sslVerify)" />
    <mutant id="mutant_4415" viable="false" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid &gt; 0) &amp;&amp; ((org.eclipse.jgit.dircache.DirCache.cmp(p, pLen, sortedEntries[(mid - 1)])) == 0)" to="true" />
    <mutant id="mutant_5745" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="(!(http.sslVerify)) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="(!(http.sslVerify)) || (&quot;https&quot;.equals(u.getProtocol()))" />
    <mutant id="mutant_547" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="false" />
    <mutant id="mutant_548" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="(getRenameLimit()) != 0" />
    <mutant id="mutant_549" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="!(added.isEmpty())" />
    <mutant id="mutant_543" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="(!partialA) || (bEnd &lt; (b.lines.get(((e.endB) + 1))))" />
    <mutant id="mutant_544" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="((getRenameLimit()) != 0) || ((getRenameLimit()) &lt; cnt)" />
    <mutant id="mutant_545" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="(getRenameLimit()) &lt; cnt" />
    <mutant id="mutant_546" viable="true" in="org.eclipse.jgit.diff.RenameDetector.isOverRenameLimit()" from="((getRenameLimit()) != 0) &amp;&amp; ((getRenameLimit()) &lt; cnt)" to="true" />
    <mutant id="mutant_4403" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="((liveFile) == null) &amp;&amp; (!(liveFile.exists()))" />
    <mutant id="mutant_5735" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="true" />
    <mutant id="mutant_4402" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="false" />
    <mutant id="mutant_5736" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="false" />
    <mutant id="mutant_4401" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="true" />
    <mutant id="mutant_5737" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="!(authMethod.authorize(uri, credentialsProvider))" />
    <mutant id="mutant_4400" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((liveFile) == null) || (!(liveFile.exists()))" to="!(liveFile.exists())" />
    <mutant id="mutant_5738" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="true" />
    <mutant id="mutant_5739" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(3 &lt; authAttempts) || (!(authMethod.authorize(uri, credentialsProvider)))" to="false" />
    <mutant id="mutant_540" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="bEnd &lt; (b.lines.get(((e.endB) + 1)))" />
    <mutant id="mutant_541" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="true" />
    <mutant id="mutant_4409" viable="false" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="true" />
    <mutant id="mutant_542" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(!partialA) &amp;&amp; (bEnd &lt; (b.lines.get(((e.endB) + 1))))" to="false" />
    <mutant id="mutant_4408" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="false" />
    <mutant id="mutant_5730" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="false" />
    <mutant id="mutant_4407" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="true" />
    <mutant id="mutant_5731" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="ObjectId.isId(line)" />
    <mutant id="mutant_4406" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="((snapshot) == null) &amp;&amp; (snapshot.isModified(liveFile))" />
    <mutant id="mutant_5732" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="(conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null" />
    <mutant id="mutant_4405" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="(snapshot) == null" />
    <mutant id="mutant_5733" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="(authMethod.getType()) == (HttpAuthMethod.Type.NONE)" />
    <mutant id="mutant_4404" viable="true" in="org.eclipse.jgit.dircache.DirCache.isOutdated()" from="((snapshot) == null) || (snapshot.isModified(liveFile))" to="snapshot.isModified(liveFile)" />
    <mutant id="mutant_5734" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) &amp;&amp; ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" to="((authMethod.getType()) == (HttpAuthMethod.Type.NONE)) || ((conn.getHeaderField(org.eclipse.jgit.util.HttpSupport.HDR_WWW_AUTHENTICATE)) != null)" />
    <mutant id="mutant_558" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="(!(added.isEmpty()))" />
    <mutant id="mutant_559" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="true" />
    <mutant id="mutant_554" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="true" />
    <mutant id="mutant_555" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="false" />
    <mutant id="mutant_556" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="(!(added.isEmpty())) || (!(deleted.isEmpty()))" />
    <mutant id="mutant_557" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="((0 &lt; (breakScore)) &amp;&amp; (!(added.isEmpty())))" to="((0 &lt; (breakScore)) || (!(added.isEmpty())))" />
    <mutant id="mutant_5724" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="false" />
    <mutant id="mutant_5725" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF)" />
    <mutant id="mutant_5726" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="(line != null) || (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" />
    <mutant id="mutant_5727" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="line != null" />
    <mutant id="mutant_5728" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="(line != null) || (ObjectId.isId(line))" />
    <mutant id="mutant_5729" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (ObjectId.isId(line))" to="true" />
    <mutant id="mutant_550" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="true" />
    <mutant id="mutant_551" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="false" />
    <mutant id="mutant_552" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="(!(added.isEmpty())) || (!(deleted.isEmpty()))" />
    <mutant id="mutant_553" viable="true" in="org.eclipse.jgit.diff.RenameDetector.compute(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(added.isEmpty())) &amp;&amp; (!(deleted.isEmpty()))" to="!(added.isEmpty())" />
    <mutant id="mutant_5720" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="!(s.startsWith(&quot;P pack-&quot;))" />
    <mutant id="mutant_5721" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.getPackNames()" from="(!(s.startsWith(&quot;P pack-&quot;))) || (!(s.endsWith(&quot;.pack&quot;)))" to="(!(s.startsWith(&quot;P pack-&quot;))) &amp;&amp; (!(s.endsWith(&quot;.pack&quot;)))" />
    <mutant id="mutant_5722" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="line != null" />
    <mutant id="mutant_5723" viable="true" in="org.eclipse.jgit.transport.TransportHttp.newDumbConnection(java.io.InputStream)" from="(line != null) &amp;&amp; (line.startsWith(org.eclipse.jgit.internal.storage.file.RefDirectory.SYMREF))" to="true" />
    <mutant id="mutant_448" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="((content.length) &gt; 1)" />
    <mutant id="mutant_449" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="(content[(e - 2)]) == '\r'" />
    <mutant id="mutant_444" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="true" />
    <mutant id="mutant_445" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="false" />
    <mutant id="mutant_6890" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="false" />
    <mutant id="mutant_446" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="(((content.length) &gt; 1) || (e &gt; 1))" />
    <mutant id="mutant_5560" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="false" />
    <mutant id="mutant_6891" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="((rc == 0) || (r != null))" />
    <mutant id="mutant_447" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1))" to="(e &gt; 1)" />
    <mutant id="mutant_5561" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="e.getKey().equals(hide)" />
    <mutant id="mutant_6892" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="(rc == 0)" />
    <mutant id="mutant_4230" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="firstFooterLine == (lines.length)" />
    <mutant id="mutant_4227" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="((lastConflictingName) != null) || ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" />
    <mutant id="mutant_5559" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="true" />
    <mutant id="mutant_4226" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="false" />
    <mutant id="mutant_4225" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="true" />
    <mutant id="mutant_4224" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="(chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE)" />
    <mutant id="mutant_4223" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="BSizeDelta != 0" />
    <mutant id="mutant_4222" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="minBSize &gt; 0" />
    <mutant id="mutant_4221" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="false" />
    <mutant id="mutant_4220" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="true" />
    <mutant id="mutant_440" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="true" />
    <mutant id="mutant_5551" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="(checkReceivedObjects) || (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" />
    <mutant id="mutant_6882" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="false" />
    <mutant id="mutant_441" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="false" />
    <mutant id="mutant_5552" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS())" />
    <mutant id="mutant_6883" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="(writer) != null" />
    <mutant id="mutant_442" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="(middle.beginA) &gt;= (middle.endA)" />
    <mutant id="mutant_5553" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="((p.charAt(((p.length()) - 1))) == '/') || (s.startsWith(p))" />
    <mutant id="mutant_6884" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="(!writeFailure) || ((writer) != null)" />
    <mutant id="mutant_443" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="((middle.beginA) &gt;= (middle.endA)) || ((middle.beginB) &gt;= (middle.endB))" />
    <mutant id="mutant_5554" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="s.startsWith(p)" />
    <mutant id="mutant_6885" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="!writeFailure" />
    <mutant id="mutant_5555" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="true" />
    <mutant id="mutant_6886" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="home == null" />
    <mutant id="mutant_5556" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="false" />
    <mutant id="mutant_6887" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="(home.length()) == 0" />
    <mutant id="mutant_4229" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="(message.length()) != 0" />
    <mutant id="mutant_5557" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.charAt(((p.length()) - 1))) == '/') &amp;&amp; (s.startsWith(p))" to="(p.charAt(((p.length()) - 1))) == '/'" />
    <mutant id="mutant_6888" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="(home == null) &amp;&amp; ((home.length()) == 0)" />
    <mutant id="mutant_4228" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictMetadata(org.eclipse.jgit.merge.MergeChunk)" from="((lastConflictingName) != null) &amp;&amp; ((chunk.getConflictState()) != (MergeChunk.ConflictState.NEXT_CONFLICTING_RANGE))" to="(lastConflictingName) != null" />
    <mutant id="mutant_5558" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="(e.getKey().equals(hide)) &amp;&amp; (prefixMatch(hide, e.getKey()))" />
    <mutant id="mutant_6889" viable="true" in="org.eclipse.jgit.util.FS.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="true" />
    <mutant id="mutant_459" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="as &lt; ae" />
    <mutant id="mutant_455" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="true" />
    <mutant id="mutant_456" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="false" />
    <mutant id="mutant_457" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="dropLF" />
    <mutant id="mutant_6880" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="false" />
    <mutant id="mutant_458" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="(content[(e - 1)]) == '\n'" />
    <mutant id="mutant_5550" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="false" />
    <mutant id="mutant_6881" viable="true" in="org.eclipse.jgit.util.FS$StreamGobbler.call()" from="(!writeFailure) &amp;&amp; ((writer) != null)" to="true" />
    <mutant id="mutant_4216" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="true" />
    <mutant id="mutant_5548" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="checkReceivedObjects" />
    <mutant id="mutant_6879" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="true" />
    <mutant id="mutant_4215" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="commonSuffix &lt; minBSize" />
    <mutant id="mutant_5549" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isMacOS()))" to="true" />
    <mutant id="mutant_4214" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="(commonSuffix &lt; minBSize) || (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" />
    <mutant id="mutant_4213" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="(commonPrefix &lt; minBSize) || (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" />
    <mutant id="mutant_4212" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="commonPrefix &lt; minBSize" />
    <mutant id="mutant_4211" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="false" />
    <mutant id="mutant_4210" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="true" />
    <mutant id="mutant_451" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="((content.length) &gt; 1) &amp;&amp; (e &gt; 1)" />
    <mutant id="mutant_5540" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="true" />
    <mutant id="mutant_6871" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="footerFirstLine != (lines.length)" />
    <mutant id="mutant_452" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="true" />
    <mutant id="mutant_5541" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="false" />
    <mutant id="mutant_6872" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches()" />
    <mutant id="mutant_453" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="false" />
    <mutant id="mutant_5542" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false)" />
    <mutant id="mutant_6873" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="true" />
    <mutant id="mutant_454" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="dropLF &amp;&amp; ((content[(e - 1)]) == '\n')" to="dropLF || ((content[(e - 1)]) == '\n')" />
    <mutant id="mutant_5543" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="checkReceivedObjects" />
    <mutant id="mutant_6874" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="false" />
    <mutant id="mutant_5544" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="true" />
    <mutant id="mutant_6875" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" to="(footerFirstLine != (lines.length)) || (ChangeIdUtil.includeInFooterPattern.matcher(lines[i]).matches())" />
    <mutant id="mutant_4219" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(minBSize &gt; 0) || (BSizeDelta != 0)" to="(minBSize &gt; 0) &amp;&amp; (BSizeDelta != 0)" />
    <mutant id="mutant_5545" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="false" />
    <mutant id="mutant_6876" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="(insertAfter == (lines.length)) || (insertAfter == footerFirstLine)" />
    <mutant id="mutant_4218" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1))" />
    <mutant id="mutant_5546" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="(checkReceivedObjects) || (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" />
    <mutant id="mutant_6877" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="insertAfter == (lines.length)" />
    <mutant id="mutant_450" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) &amp;&amp; ((content[(e - 2)]) == '\r')" to="(((content.length) &gt; 1) &amp;&amp; (e &gt; 1)) || ((content[(e - 2)]) == '\r')" />
    <mutant id="mutant_4217" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonSuffix &lt; minBSize) &amp;&amp; (cmp.equals(ours, ((oursEndB - commonSuffix) - 1), theirs, ((theirsEndB - commonSuffix) - 1)))" to="false" />
    <mutant id="mutant_5547" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows()))" to="rc.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, org.eclipse.jgit.util.SystemReader.getInstance().isWindows())" />
    <mutant id="mutant_6878" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="(insertAfter == (lines.length)) &amp;&amp; (insertAfter == footerFirstLine)" to="insertAfter == footerFirstLine" />
    <mutant id="mutant_466" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="false" />
    <mutant id="mutant_467" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac)" />
    <mutant id="mutant_468" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="(as &lt; (ae - 1)) || (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" />
    <mutant id="mutant_469" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="(bs &lt; (be - 1)) || (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" />
    <mutant id="mutant_6870" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="false" />
    <mutant id="mutant_4205" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current)" to="true" />
    <mutant id="mutant_5537" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="(checkReceivedObjects) || (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" />
    <mutant id="mutant_6868" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="(lines[i].length()) == 0" />
    <mutant id="mutant_4204" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="(theirsEdit != (MergeAlgorithm.END_EDIT)) &amp;&amp; (oursEdit != (MergeAlgorithm.END_EDIT))" />
    <mutant id="mutant_5538" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="(checkReceivedObjects) || (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" />
    <mutant id="mutant_6869" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="true" />
    <mutant id="mutant_4203" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="false" />
    <mutant id="mutant_5539" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_4202" viable="false" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="true" />
    <mutant id="mutant_4201" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="theirsEdit != (MergeAlgorithm.END_EDIT)" />
    <mutant id="mutant_4200" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit != (MergeAlgorithm.END_EDIT)) || (oursEdit != (MergeAlgorithm.END_EDIT))" to="oursEdit != (MergeAlgorithm.END_EDIT)" />
    <mutant id="mutant_462" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="false" />
    <mutant id="mutant_6860" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="!inFooter" />
    <mutant id="mutant_463" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="(as &lt; ae) || (bs &lt; be)" />
    <mutant id="mutant_5530" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="false" />
    <mutant id="mutant_6861" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="i == 0" />
    <mutant id="mutant_464" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="as &lt; (ae - 1)" />
    <mutant id="mutant_5531" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="((cnt) == (SideBandOutputStream.HDR_SIZE)) || (capacity &lt; len)" />
    <mutant id="mutant_6862" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) &amp;&amp; (i == 0)" />
    <mutant id="mutant_465" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; (ae - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(ac))" to="true" />
    <mutant id="mutant_5532" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="capacity &lt; len" />
    <mutant id="mutant_6863" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])" />
    <mutant id="mutant_4209" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(commonPrefix &lt; minBSize) &amp;&amp; (cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix)))" to="cmp.equals(ours, (oursBeginB + commonPrefix), theirs, (theirsBeginB + commonPrefix))" />
    <mutant id="mutant_5533" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_6864" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="true" />
    <mutant id="mutant_4208" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current)" to="((oursEdit.getBeginA()) != current) || ((theirsEdit.getBeginA()) != current)" />
    <mutant id="mutant_5534" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false)" />
    <mutant id="mutant_6865" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])) || (i == 0)" to="false" />
    <mutant id="mutant_460" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="bs &lt; be" />
    <mutant id="mutant_4207" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current)" to="(oursEdit.getBeginA()) != current" />
    <mutant id="mutant_5535" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="true" />
    <mutant id="mutant_6866" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="footerFirstLine != (lines.length)" />
    <mutant id="mutant_461" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="true" />
    <mutant id="mutant_4206" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEdit.getBeginA()) != current) &amp;&amp; ((theirsEdit.getBeginA()) != current)" to="false" />
    <mutant id="mutant_5536" viable="true" in="org.eclipse.jgit.transport.TransferConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (rc.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="false" />
    <mutant id="mutant_6867" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(footerFirstLine != (lines.length)) &amp;&amp; ((lines[i].length()) == 0)" to="(footerFirstLine != (lines.length)) || ((lines[i].length()) == 0)" />
    <mutant id="mutant_477" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="(as == ae) || (bs == be)" />
    <mutant id="mutant_478" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="bs == be" />
    <mutant id="mutant_479" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="as &lt; ae" />
    <mutant id="mutant_5526" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="false" />
    <mutant id="mutant_6857" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="(!inFooter) || (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" />
    <mutant id="mutant_5527" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="chan &lt;= 0" />
    <mutant id="mutant_6858" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="true" />
    <mutant id="mutant_5528" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="(cnt) == (SideBandOutputStream.HDR_SIZE)" />
    <mutant id="mutant_6859" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="false" />
    <mutant id="mutant_5529" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="((cnt) == (SideBandOutputStream.HDR_SIZE)) &amp;&amp; (capacity &lt; len)" to="true" />
    <mutant id="mutant_473" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc)" />
    <mutant id="mutant_474" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="as == ae" />
    <mutant id="mutant_6850" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="(size) &lt; index" />
    <mutant id="mutant_475" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="true" />
    <mutant id="mutant_5520" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="true" />
    <mutant id="mutant_6851" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="(ca.host.equals(host)) || ((ca.port) == port)" />
    <mutant id="mutant_476" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="false" />
    <mutant id="mutant_5521" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="false" />
    <mutant id="mutant_6852" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="true" />
    <mutant id="mutant_5522" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="0 &lt;= lf" />
    <mutant id="mutant_6853" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="false" />
    <mutant id="mutant_470" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="bs &lt; (be - 1)" />
    <mutant id="mutant_5523" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="(chan &lt;= 0) &amp;&amp; (chan &gt; 255)" />
    <mutant id="mutant_6854" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="(ca.port) == port" />
    <mutant id="mutant_471" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="true" />
    <mutant id="mutant_5524" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="chan &gt; 255" />
    <mutant id="mutant_6855" viable="true" in="org.eclipse.jgit.util.CachedAuthenticator.getPasswordAuthentication()" from="(ca.host.equals(host)) &amp;&amp; ((ca.port) == port)" to="ca.host.equals(host)" />
    <mutant id="mutant_472" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bs &lt; (be - 1)) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(bc))" to="false" />
    <mutant id="mutant_5525" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream(int,int,java.io.OutputStream)" from="(chan &lt;= 0) || (chan &gt; 255)" to="true" />
    <mutant id="mutant_6856" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(!inFooter) &amp;&amp; (org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i]))" to="org.eclipse.jgit.util.ChangeIdUtil.isEmptyLine(lines[i])" />
    <mutant id="mutant_488" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="bs == be" />
    <mutant id="mutant_489" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="idx &lt; end" />
    <mutant id="mutant_4274" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="mode != 0" />
    <mutant id="mutant_4273" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="!(failed())" />
    <mutant id="mutant_4272" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="getUnmergedPaths().isEmpty()" />
    <mutant id="mutant_4271" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="false" />
    <mutant id="mutant_4270" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="true" />
    <mutant id="mutant_4269" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTrees(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.revwalk.RevTree,org.eclipse.jgit.revwalk.RevTree,boolean)" from="(getUnmergedPaths().isEmpty()) &amp;&amp; (!(failed()))" to="(getUnmergedPaths().isEmpty()) || (!(failed()))" />
    <mutant id="mutant_4268" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="(treeWalk.isSubtree()) || (enterSubtree)" />
    <mutant id="mutant_4267" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="enterSubtree" />
    <mutant id="mutant_4266" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="false" />
    <mutant id="mutant_4265" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="true" />
    <mutant id="mutant_4264" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.mergeTreeWalk(org.eclipse.jgit.treewalk.TreeWalk,boolean)" from="(treeWalk.isSubtree()) &amp;&amp; (enterSubtree)" to="treeWalk.isSubtree()" />
    <mutant id="mutant_484" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="as == ae" />
    <mutant id="mutant_5595" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="true" />
    <mutant id="mutant_485" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="true" />
    <mutant id="mutant_5596" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="false" />
    <mutant id="mutant_486" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="false" />
    <mutant id="mutant_5597" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="(!check) || ((objectChecker) != null)" />
    <mutant id="mutant_487" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as == ae) &amp;&amp; (bs == be)" to="(as == ae) || (bs == be)" />
    <mutant id="mutant_5598" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="!check" />
    <mutant id="mutant_480" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="bs &lt; be" />
    <mutant id="mutant_5599" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="(objectChecker) != null" />
    <mutant id="mutant_481" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="true" />
    <mutant id="mutant_482" viable="false" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="false" />
    <mutant id="mutant_483" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(as &lt; ae) &amp;&amp; (bs &lt; be)" to="(as &lt; ae) || (bs &lt; be)" />
    <mutant id="mutant_5590" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="true" />
    <mutant id="mutant_499" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) == (e.endA)) || ((e.beginB) == (e.endB))" to="(e.beginA) == (e.endA)" />
    <mutant id="mutant_5591" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="false" />
    <mutant id="mutant_5592" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="check" />
    <mutant id="mutant_5593" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="(objectChecker) == null" />
    <mutant id="mutant_5594" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="check || ((objectChecker) == null)" />
    <mutant id="mutant_4263" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))" />
    <mutant id="mutant_4262" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="false" />
    <mutant id="mutant_4261" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="true" />
    <mutant id="mutant_4260" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="modeO == (FileMode.TYPE_MISSING)" />
    <mutant id="mutant_4259" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) &amp;&amp; (modeO == (FileMode.TYPE_MISSING))" to="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE))) || (modeO == (FileMode.TYPE_MISSING))" />
    <mutant id="mutant_4258" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="(isDirty || (modeF == (FileMode.TYPE_TREE)))" />
    <mutant id="mutant_490" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="(idx &lt; end) || ((lines.get((idx + 2))) &lt; ptr)" />
    <mutant id="mutant_4257" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="false" />
    <mutant id="mutant_4256" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="true" />
    <mutant id="mutant_4255" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="isDirty" />
    <mutant id="mutant_4254" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(isDirty &amp;&amp; (modeF == (FileMode.TYPE_TREE)))" to="(modeF == (FileMode.TYPE_TREE))" />
    <mutant id="mutant_4253" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF)" />
    <mutant id="mutant_495" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="false" />
    <mutant id="mutant_5584" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="toPush.isEmpty()" />
    <mutant id="mutant_496" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="(0 &lt; idx) || (ptr &lt;= (lines.get(idx)))" />
    <mutant id="mutant_5585" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="true" />
    <mutant id="mutant_497" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="0 &lt; idx" />
    <mutant id="mutant_5586" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="false" />
    <mutant id="mutant_498" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="ptr &lt;= (lines.get(idx))" />
    <mutant id="mutant_5587" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="TransportProtocol.class.isAssignableFrom(f.getType())" />
    <mutant id="mutant_491" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="(lines.get((idx + 2))) &lt; ptr" />
    <mutant id="mutant_5588" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) || (TransportProtocol.class.isAssignableFrom(f.getType()))" />
    <mutant id="mutant_492" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="true" />
    <mutant id="mutant_5589" viable="true" in="org.eclipse.jgit.transport.Transport.load(java.lang.ClassLoader,java.lang.String)" from="(((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)) &amp;&amp; (TransportProtocol.class.isAssignableFrom(f.getType()))" to="((f.getModifiers()) &amp; (Modifier.STATIC)) == (Modifier.STATIC)" />
    <mutant id="mutant_493" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx &lt; end) &amp;&amp; ((lines.get((idx + 2))) &lt; ptr)" to="false" />
    <mutant id="mutant_494" viable="false" in="org.eclipse.jgit.diff.RawTextComparator.findReverseLine(org.eclipse.jgit.util.IntList,int,int)" from="(0 &lt; idx) &amp;&amp; (ptr &lt;= (lines.get(idx)))" to="true" />
    <mutant id="mutant_5580" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="false" />
    <mutant id="mutant_5581" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="cfgSrc.equals(reqSrc)" />
    <mutant id="mutant_5582" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="(toPush == null) &amp;&amp; (toPush.isEmpty())" />
    <mutant id="mutant_5583" viable="true" in="org.eclipse.jgit.transport.Transport.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.io.OutputStream)" from="(toPush == null) || (toPush.isEmpty())" to="toPush == null" />
    <mutant id="mutant_4252" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="false" />
    <mutant id="mutant_4251" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="true" />
    <mutant id="mutant_4250" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="(!isDirty) || (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" />
    <mutant id="mutant_4249" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isWorktreeDirty(org.eclipse.jgit.treewalk.WorkingTreeIterator,org.eclipse.jgit.dircache.DirCacheEntry)" from="(!isDirty) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeF))" to="!isDirty" />
    <mutant id="mutant_4248" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="false" />
    <mutant id="mutant_4247" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="true" />
    <mutant id="mutant_4246" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" />
    <mutant id="mutant_4245" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="(ResolveMerger.nonTree(modeI)) || (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" />
    <mutant id="mutant_4244" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="(ResolveMerger.nonTree(modeI)) &amp;&amp; (!((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))))" to="org.eclipse.jgit.merge.ResolveMerger.nonTree(modeI)" />
    <mutant id="mutant_4243" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="((modeO == modeI) || (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" />
    <mutant id="mutant_4242" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="(tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS))" />
    <mutant id="mutant_5573" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="toFetch.isEmpty()" />
    <mutant id="mutant_5574" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="(toFetch == null) &amp;&amp; (toFetch.isEmpty())" />
    <mutant id="mutant_5575" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="true" />
    <mutant id="mutant_5576" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="false" />
    <mutant id="mutant_5577" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="(cfgSrc.equals(reqSrc)) || (cfgDst != null)" />
    <mutant id="mutant_5578" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="cfgDst != null" />
    <mutant id="mutant_5579" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(cfgSrc.equals(reqSrc)) &amp;&amp; (cfgDst != null)" to="true" />
    <mutant id="mutant_5570" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="srcRef != null" />
    <mutant id="mutant_5571" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="(srcRef != null) || (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" />
    <mutant id="mutant_5572" viable="true" in="org.eclipse.jgit.transport.Transport.fetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection)" from="(toFetch == null) || (toFetch.isEmpty())" to="toFetch == null" />
    <mutant id="mutant_4241" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="(modeO == modeI)" />
    <mutant id="mutant_4240" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="false" />
    <mutant id="mutant_4238" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="ok" />
    <mutant id="mutant_4237" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="false" />
    <mutant id="mutant_4236" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="true" />
    <mutant id="mutant_4235" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="ok || flush" />
    <mutant id="mutant_4234" viable="true" in="org.eclipse.jgit.merge.Merger.merge(boolean,org.eclipse.jgit.lib.AnyObjectId[])" from="ok &amp;&amp; flush" to="flush" />
    <mutant id="mutant_4233" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="(firstFooterLine == (lines.length)) || ((message.length()) != 0)" />
    <mutant id="mutant_4232" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="false" />
    <mutant id="mutant_4231" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.formatWithConflicts(java.lang.String,java.util.List)" from="(firstFooterLine == (lines.length)) &amp;&amp; ((message.length()) != 0)" to="true" />
    <mutant id="mutant_5562" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.filter(java.util.Map)" from="(e.getKey().equals(hide)) || (prefixMatch(hide, e.getKey()))" to="prefixMatch(hide, e.getKey())" />
    <mutant id="mutant_6893" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="true" />
    <mutant id="mutant_5563" viable="true" in="org.eclipse.jgit.transport.Transport.doesNotExist(org.eclipse.jgit.transport.RemoteConfig)" from="(cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty())" to="(cfg.getURIs().isEmpty()) || (cfg.getPushURIs().isEmpty())" />
    <mutant id="mutant_6894" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="false" />
    <mutant id="mutant_5564" viable="true" in="org.eclipse.jgit.transport.Transport.doesNotExist(org.eclipse.jgit.transport.RemoteConfig)" from="(cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty())" to="true" />
    <mutant id="mutant_6895" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((rc == 0) &amp;&amp; (r != null))" to="(r != null)" />
    <mutant id="mutant_5565" viable="true" in="org.eclipse.jgit.transport.Transport.doesNotExist(org.eclipse.jgit.transport.RemoteConfig)" from="(cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty())" to="false" />
    <mutant id="mutant_6896" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="((r.length()) &gt; 0)" />
    <mutant id="mutant_5566" viable="true" in="org.eclipse.jgit.transport.Transport.doesNotExist(org.eclipse.jgit.transport.RemoteConfig)" from="(cfg.getURIs().isEmpty()) &amp;&amp; (cfg.getPushURIs().isEmpty())" to="cfg.getURIs().isEmpty()" />
    <mutant id="mutant_6897" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="true" />
    <mutant id="mutant_5567" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="true" />
    <mutant id="mutant_6898" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="false" />
    <mutant id="mutant_5568" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="false" />
    <mutant id="mutant_6899" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="(((rc == 0) &amp;&amp; (r != null)) || ((r.length()) &gt; 0))" />
    <mutant id="mutant_4239" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.isIndexDirty()" from="((modeO == modeI) &amp;&amp; (tw.idEqual(ResolveMerger.T_INDEX, ResolveMerger.T_OURS)))" to="true" />
    <mutant id="mutant_5569" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(srcRef != null) &amp;&amp; (!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)))" to="!(destSpec.startsWith(org.eclipse.jgit.lib.Constants.R_REFS))" />
    <mutant id="mutant_4299" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" />
    <mutant id="mutant_4298" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) || (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" />
    <mutant id="mutant_4297" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT))" />
    <mutant id="mutant_4296" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="false" />
    <mutant id="mutant_4295" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="true" />
    <mutant id="mutant_4294" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (org.eclipse.jgit.merge.ResolveMerger.nonTree(modeT)))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO))" />
    <mutant id="mutant_4293" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="false" />
    <mutant id="mutant_4292" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="true" />
    <mutant id="mutant_4291" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="(index.getDirCacheEntry()) == null" />
    <mutant id="mutant_4290" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="(index == null) &amp;&amp; ((index.getDirCacheEntry()) == null)" />
    <mutant id="mutant_4289" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="(index == null) || ((index.getDirCacheEntry()) == null)" to="index == null" />
    <mutant id="mutant_4288" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="modeB == 0" />
    <mutant id="mutant_4287" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="false" />
    <mutant id="mutant_4286" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="true" />
    <mutant id="mutant_4285" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="(modeO == 0) &amp;&amp; (modeT == 0)" />
    <mutant id="mutant_4284" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0)) &amp;&amp; (modeB == 0)" to="((modeO == 0) &amp;&amp; (modeT == 0)) || (modeB == 0)" />
    <mutant id="mutant_4283" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="(modeO == 0)" />
    <mutant id="mutant_4282" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="false" />
    <mutant id="mutant_4281" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="true" />
    <mutant id="mutant_4280" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="((modeO == 0) || (modeT == 0))" />
    <mutant id="mutant_4279" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((modeO == 0) &amp;&amp; (modeT == 0))" to="(modeT == 0)" />
    <mutant id="mutant_4278" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="(mode != 0) || (!(FileMode.TREE.equals(mode)))" />
    <mutant id="mutant_4277" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="false" />
    <mutant id="mutant_4276" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="true" />
    <mutant id="mutant_4275" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.nonTree(int)" from="(mode != 0) &amp;&amp; (!(FileMode.TREE.equals(mode)))" to="!(FileMode.TREE.equals(mode))" />
    <mutant id="mutant_6923" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="true" />
    <mutant id="mutant_6924" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="false" />
    <mutant id="mutant_6925" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="exists" />
    <mutant id="mutant_6926" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="exists &amp;&amp; (!isDirectory)" />
    <mutant id="mutant_6927" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="true" />
    <mutant id="mutant_6928" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="false" />
    <mutant id="mutant_6929" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="(exists &amp;&amp; (!isDirectory)) || (canExecute(path))" />
    <mutant id="mutant_6920" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="isDirectory" />
    <mutant id="mutant_6921" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="(!isDirectory)" />
    <mutant id="mutant_6922" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory))" to="(exists || (!isDirectory))" />
    <mutant id="mutant_6912" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="((path.exists()) == isDirectory) &amp;&amp; isFile" />
    <mutant id="mutant_6913" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="(path.exists()) == isDirectory" />
    <mutant id="mutant_6914" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="true" />
    <mutant id="mutant_6915" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="false" />
    <mutant id="mutant_6916" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="isFile" />
    <mutant id="mutant_6917" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="true" />
    <mutant id="mutant_6918" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="false" />
    <mutant id="mutant_6919" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="isDirectory || isFile" to="isDirectory &amp;&amp; isFile" />
    <mutant id="mutant_6910" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="(!isDirectory) || (path.isFile())" />
    <mutant id="mutant_6911" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="((path.exists()) == isDirectory) || isFile" to="isFile" />
    <mutant id="mutant_6909" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="false" />
    <mutant id="mutant_6901" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) || (!(gobbler.fail.get()))" />
    <mutant id="mutant_6902" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="!(gobbler.fail.get())" />
    <mutant id="mutant_6903" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)" />
    <mutant id="mutant_6904" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="true" />
    <mutant id="mutant_6905" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; (!(gobbler.fail.get()))" to="false" />
    <mutant id="mutant_6906" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="path.isFile()" />
    <mutant id="mutant_6907" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="!isDirectory" />
    <mutant id="mutant_6908" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(!isDirectory) &amp;&amp; (path.isFile())" to="true" />
    <mutant id="mutant_6900" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((rc == 0) &amp;&amp; (r != null)) &amp;&amp; ((r.length()) &gt; 0))" to="((rc == 0) &amp;&amp; (r != null))" />
    <mutant id="mutant_404" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="(k &lt; (beginK)) &amp;&amp; (k &gt; (endK))" />
    <mutant id="mutant_405" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="k &lt; (backward.beginK)" />
    <mutant id="mutant_406" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="true" />
    <mutant id="mutant_407" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="false" />
    <mutant id="mutant_400" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="k &lt; (beginK)" />
    <mutant id="mutant_401" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="true" />
    <mutant id="mutant_402" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="false" />
    <mutant id="mutant_403" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getSnake(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="k &gt; (endK)" />
    <mutant id="mutant_408" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="k &gt; (backward.endK)" />
    <mutant id="mutant_409" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(k &lt; (backward.beginK)) || (k &gt; (backward.endK))" to="(k &lt; (backward.beginK)) &amp;&amp; (k &gt; (backward.endK))" />
    <mutant id="mutant_4304" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) || (modeB == modeT))" />
    <mutant id="mutant_5636" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="false" />
    <mutant id="mutant_6967" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="false" />
    <mutant id="mutant_4303" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) || (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" />
    <mutant id="mutant_5637" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="((uri.getPort()) &gt; 0)" />
    <mutant id="mutant_6968" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="!(f.delete())" />
    <mutant id="mutant_4302" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="false" />
    <mutant id="mutant_5638" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="((uri.getPath()) == null)" />
    <mutant id="mutant_6969" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="delete || (!(f.delete()))" />
    <mutant id="mutant_4301" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="true" />
    <mutant id="mutant_5639" viable="true" in="org.eclipse.jgit.transport.TransportBundleFile$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getPath()) == null) || ((uri.getPort()) &gt; 0))" to="true" />
    <mutant id="mutant_4300" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (ResolveMerger.nonTree(modeT))) &amp;&amp; (tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS))" to="tw.idEqual(ResolveMerger.T_OURS, ResolveMerger.T_THEIRS)" />
    <mutant id="mutant_6960" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="((options &amp; (FileUtils.RECURSIVE)) != 0) || (fs.isDirectory(f))" />
    <mutant id="mutant_5630" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="(local.getDirectory()) != null" />
    <mutant id="mutant_6961" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="(options &amp; (FileUtils.RECURSIVE)) != 0" />
    <mutant id="mutant_4309" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)) &amp;&amp; (tw.idEqual(ResolveMerger.T_BASE, ResolveMerger.T_THEIRS))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT)" />
    <mutant id="mutant_5631" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="!(props.contains(&quot;tmpdir&quot;))" />
    <mutant id="mutant_6962" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="true" />
    <mutant id="mutant_4308" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="false" />
    <mutant id="mutant_5632" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="user != null" />
    <mutant id="mutant_6963" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="false" />
    <mutant id="mutant_4307" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="true" />
    <mutant id="mutant_5633" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="pass != null" />
    <mutant id="mutant_6964" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.RECURSIVE)) != 0) &amp;&amp; (fs.isDirectory(f))" to="fs.isDirectory(f)" />
    <mutant id="mutant_4306" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="(org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO))" />
    <mutant id="mutant_5634" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="(user != null) || (pass != null)" />
    <mutant id="mutant_6965" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="delete" />
    <mutant id="mutant_4305" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator,boolean)" from="((org.eclipse.jgit.merge.ResolveMerger.nonTree(modeO)) &amp;&amp; (modeB == modeT))" to="(modeB == modeT)" />
    <mutant id="mutant_5635" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.loadProperties()" from="(user != null) &amp;&amp; (pass != null)" to="true" />
    <mutant id="mutant_6966" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="delete &amp;&amp; (!(f.delete()))" to="true" />
    <mutant id="mutant_415" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="true" />
    <mutant id="mutant_416" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="false" />
    <mutant id="mutant_417" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="x &gt;= (endA)" />
    <mutant id="mutant_418" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="(x &gt;= (endA)) &amp;&amp; ((k + x) &gt;= (endB))" />
    <mutant id="mutant_411" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="true" />
    <mutant id="mutant_412" viable="false" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="false" />
    <mutant id="mutant_413" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="x &lt; (endA)" />
    <mutant id="mutant_414" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="(x &lt; (endA)) || ((k + x) &lt; (endB))" />
    <mutant id="mutant_419" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(x &gt;= (endA)) || ((k + x) &gt;= (endB))" to="(k + x) &gt;= (endB)" />
    <mutant id="mutant_5625" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="(r != null) || ((r.getStorage()) == (Ref.Storage.PACKED))" />
    <mutant id="mutant_6956" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="true" />
    <mutant id="mutant_5626" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="(r.getStorage()) == (Ref.Storage.PACKED)" />
    <mutant id="mutant_6957" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="false" />
    <mutant id="mutant_5627" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="(!(props.contains(&quot;tmpdir&quot;))) || ((local.getDirectory()) != null)" />
    <mutant id="mutant_6958" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="!(fs.exists(f))" />
    <mutant id="mutant_5628" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="true" />
    <mutant id="mutant_6959" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="((options &amp; (FileUtils.SKIP_MISSING)) != 0) || (!(fs.exists(f)))" />
    <mutant id="mutant_5629" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(!(props.contains(&quot;tmpdir&quot;))) &amp;&amp; ((local.getDirectory()) != null)" to="false" />
    <mutant id="mutant_6950" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="baseSegments[commonPrefix].equals(otherSegments[commonPrefix])" />
    <mutant id="mutant_410" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(x &lt; (endA)) &amp;&amp; ((k + x) &lt; (endB))" to="(k + x) &lt; (endB)" />
    <mutant id="mutant_5620" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!(n.startsWith(&quot;pack-&quot;))" />
    <mutant id="mutant_6951" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="!ignoreCase" />
    <mutant id="mutant_5621" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="(!(n.startsWith(&quot;pack-&quot;))) &amp;&amp; (!(n.endsWith(&quot;.pack&quot;)))" />
    <mutant id="mutant_6952" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="true" />
    <mutant id="mutant_5622" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="r != null" />
    <mutant id="mutant_6953" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="false" />
    <mutant id="mutant_5623" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="true" />
    <mutant id="mutant_6954" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(!ignoreCase) &amp;&amp; (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" to="(!ignoreCase) || (baseSegments[commonPrefix].equals(otherSegments[commonPrefix]))" />
    <mutant id="mutant_5624" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="false" />
    <mutant id="mutant_6955" viable="true" in="org.eclipse.jgit.util.FileUtils.delete(java.io.File,int)" from="((options &amp; (FileUtils.SKIP_MISSING)) != 0) &amp;&amp; (!(fs.exists(f)))" to="(options &amp; (FileUtils.SKIP_MISSING)) != 0" />
    <mutant id="mutant_426" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(forward.calculate(d)) || (backward.calculate(d))" to="forward.calculate(d)" />
    <mutant id="mutant_427" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(forward.calculate(d)) || (backward.calculate(d))" to="true" />
    <mutant id="mutant_428" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(forward.calculate(d)) || (backward.calculate(d))" to="false" />
    <mutant id="mutant_429" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="beginA &lt; (edit.beginA)" />
    <mutant id="mutant_422" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="true" />
    <mutant id="mutant_423" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="false" />
    <mutant id="mutant_424" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="beginA == endA" />
    <mutant id="mutant_425" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(forward.calculate(d)) || (backward.calculate(d))" to="(forward.calculate(d)) &amp;&amp; (backward.calculate(d))" />
    <mutant id="mutant_5614" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="refProto == null" />
    <mutant id="mutant_6945" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="true" />
    <mutant id="mutant_5615" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="refProto == proto" />
    <mutant id="mutant_6946" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="false" />
    <mutant id="mutant_5616" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="(refProto == null) &amp;&amp; (refProto == proto)" />
    <mutant id="mutant_6947" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="ignoreCase || (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" />
    <mutant id="mutant_5617" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!(n.endsWith(&quot;.pack&quot;))" />
    <mutant id="mutant_6948" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix])" />
    <mutant id="mutant_5618" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="true" />
    <mutant id="mutant_6949" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="ignoreCase &amp;&amp; (baseSegments[commonPrefix].equalsIgnoreCase(otherSegments[commonPrefix]))" to="ignoreCase" />
    <mutant id="mutant_5619" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="false" />
    <mutant id="mutant_420" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="beginB == endB" />
    <mutant id="mutant_421" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginA == endA) || (beginB == endB)" to="(beginA == endA) &amp;&amp; (beginB == endB)" />
    <mutant id="mutant_6940" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="false" />
    <mutant id="mutant_5610" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="false" />
    <mutant id="mutant_6941" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length))" to="(commonPrefix &lt; (baseSegments.length)) || (commonPrefix &lt; (otherSegments.length))" />
    <mutant id="mutant_5611" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="(where != null) || ((where.length()) &gt; 0)" />
    <mutant id="mutant_6942" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length))" to="commonPrefix &lt; (baseSegments.length)" />
    <mutant id="mutant_5612" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="true" />
    <mutant id="mutant_6943" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length))" to="true" />
    <mutant id="mutant_5613" viable="true" in="org.eclipse.jgit.transport.Transport.unregister(org.eclipse.jgit.transport.TransportProtocol)" from="(refProto == null) || (refProto == proto)" to="false" />
    <mutant id="mutant_6944" viable="false" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="(commonPrefix &lt; (baseSegments.length)) &amp;&amp; (commonPrefix &lt; (otherSegments.length))" to="false" />
    <mutant id="mutant_437" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="false" />
    <mutant id="mutant_438" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="endA &gt; (edit.endA)" />
    <mutant id="mutant_439" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(org.eclipse.jgit.diff.Edit)" from="((middle.beginA) &gt;= (middle.endA)) &amp;&amp; ((middle.beginB) &gt;= (middle.endB))" to="(middle.beginB) &gt;= (middle.endB)" />
    <mutant id="mutant_433" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="beginB &lt; (edit.beginB)" />
    <mutant id="mutant_434" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="(endA &gt; (edit.endA)) &amp;&amp; (endB &gt; (edit.endB))" />
    <mutant id="mutant_435" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="endB &gt; (edit.endB)" />
    <mutant id="mutant_436" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(endA &gt; (edit.endA)) || (endB &gt; (edit.endB))" to="true" />
    <mutant id="mutant_5603" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="(optionReceivePack != null) || ((optionReceivePack.length()) &gt; 0)" />
    <mutant id="mutant_6934" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="true" />
    <mutant id="mutant_5604" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="true" />
    <mutant id="mutant_6935" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="false" />
    <mutant id="mutant_5605" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="false" />
    <mutant id="mutant_6936" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="home == null" />
    <mutant id="mutant_5606" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="optionReceivePack != null" />
    <mutant id="mutant_6937" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="(home.length()) == 0" />
    <mutant id="mutant_5607" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="(where.length()) &gt; 0" />
    <mutant id="mutant_6938" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="(home == null) &amp;&amp; ((home.length()) == 0)" />
    <mutant id="mutant_5608" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="where != null" />
    <mutant id="mutant_6939" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.userHomeImpl()" from="(home == null) || ((home.length()) == 0)" to="true" />
    <mutant id="mutant_5609" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionUploadPack(java.lang.String)" from="(where != null) &amp;&amp; ((where.length()) &gt; 0)" to="true" />
    <mutant id="mutant_430" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="true" />
    <mutant id="mutant_431" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="false" />
    <mutant id="mutant_432" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(beginA &lt; (edit.beginA)) || (beginB &lt; (edit.beginB))" to="(beginA &lt; (edit.beginA)) &amp;&amp; (beginB &lt; (edit.beginB))" />
    <mutant id="mutant_6930" viable="true" in="org.eclipse.jgit.util.FS.getAttributes(java.io.File)" from="(exists &amp;&amp; (!isDirectory)) &amp;&amp; (canExecute(path))" to="canExecute(path)" />
    <mutant id="mutant_5600" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="true" />
    <mutant id="mutant_6931" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="useCygPath.equals(&quot;true&quot;)" />
    <mutant id="mutant_5601" viable="true" in="org.eclipse.jgit.transport.Transport.setCheckFetchedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="false" />
    <mutant id="mutant_6932" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="useCygPath != null" />
    <mutant id="mutant_5602" viable="true" in="org.eclipse.jgit.transport.Transport.setOptionReceivePack(java.lang.String)" from="(optionReceivePack != null) &amp;&amp; ((optionReceivePack.length()) &gt; 0)" to="(optionReceivePack.length()) &gt; 0" />
    <mutant id="mutant_6933" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.resolve(java.io.File,java.lang.String)" from="(useCygPath != null) &amp;&amp; (useCygPath.equals(&quot;true&quot;))" to="(useCygPath != null) || (useCygPath.equals(&quot;true&quot;))" />
    <mutant id="mutant_6770" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="!(entry.isSmudged())" />
    <mutant id="mutant_5440" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="false" />
    <mutant id="mutant_6771" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="(entry.getLength()) != ((int)(getEntryLength()))" />
    <mutant id="mutant_4106" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="true" />
    <mutant id="mutant_5438" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="(a == null) &amp;&amp; (b == null)" />
    <mutant id="mutant_6769" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="false" />
    <mutant id="mutant_4105" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="(message) != null" />
    <mutant id="mutant_5439" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="true" />
    <mutant id="mutant_4104" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="(head != null) || (head.isSymbolic())" />
    <mutant id="mutant_4103" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head != null" />
    <mutant id="mutant_4102" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="false" />
    <mutant id="mutant_4101" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="true" />
    <mutant id="mutant_4100" viable="true" in="org.eclipse.jgit.api.SubmoduleSyncCommand.getHeadBranch(org.eclipse.jgit.lib.Repository)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head.isSymbolic()" />
    <mutant id="mutant_5430" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="false" />
    <mutant id="mutant_6761" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="(FileMode.EXECUTABLE_FILE) == iMode" />
    <mutant id="mutant_5431" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="org.eclipse.jgit.transport.RefSpec.isWildcard(dst)" />
    <mutant id="mutant_6762" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="(FileMode.EXECUTABLE_FILE) == wtMode" />
    <mutant id="mutant_5432" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" />
    <mutant id="mutant_6763" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="(FileMode.REGULAR_FILE) == iMode" />
    <mutant id="mutant_5433" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" />
    <mutant id="mutant_6764" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="((FileMode.EXECUTABLE_FILE) == wtMode) || ((FileMode.REGULAR_FILE) == iMode)" />
    <mutant id="mutant_5434" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="org.eclipse.jgit.transport.RefSpec.isWildcard(src)" />
    <mutant id="mutant_6765" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="true" />
    <mutant id="mutant_4109" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="(tagger) != null" />
    <mutant id="mutant_5435" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="true" />
    <mutant id="mutant_6766" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.EXECUTABLE_FILE) == wtMode) &amp;&amp; ((FileMode.REGULAR_FILE) == iMode)" to="false" />
    <mutant id="mutant_4108" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="((message) != null) &amp;&amp; ((tagger) != null)" />
    <mutant id="mutant_5436" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="false" />
    <mutant id="mutant_6767" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="(!(entry.isSmudged())) || ((entry.getLength()) != ((int)(getEntryLength())))" />
    <mutant id="mutant_4107" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((message) != null) || ((tagger) != null)" to="false" />
    <mutant id="mutant_5437" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) || (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="org.eclipse.jgit.transport.RefSpec.isWildcard(dst)" />
    <mutant id="mutant_6768" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="(!(entry.isSmudged())) &amp;&amp; ((entry.getLength()) != ((int)(getEntryLength())))" to="true" />
    <mutant id="mutant_6760" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="((FileMode.REGULAR_FILE) == wtMode) || ((FileMode.EXECUTABLE_FILE) == iMode)" />
    <mutant id="mutant_5427" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="all instanceof org.eclipse.jgit.util.RefMap" />
    <mutant id="mutant_6758" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="false" />
    <mutant id="mutant_5428" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="org.eclipse.jgit.transport.RefSpec.isWildcard(src)" />
    <mutant id="mutant_6759" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="(FileMode.REGULAR_FILE) == wtMode" />
    <mutant id="mutant_5429" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(org.eclipse.jgit.transport.RefSpec.isWildcard(src)) &amp;&amp; (org.eclipse.jgit.transport.RefSpec.isWildcard(dst))" to="true" />
    <mutant id="mutant_6750" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; bLen" />
    <mutant id="mutant_5420" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="true" />
    <mutant id="mutant_6751" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; aLen" />
    <mutant id="mutant_5421" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="false" />
    <mutant id="mutant_6752" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="(ent != null) || ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" />
    <mutant id="mutant_5422" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="(all instanceof java.util.SortedMap)" />
    <mutant id="mutant_6753" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="true" />
    <mutant id="mutant_5423" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="(all instanceof org.eclipse.jgit.util.RefMap) &amp;&amp; ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" />
    <mutant id="mutant_6754" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="false" />
    <mutant id="mutant_5424" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="(all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null)" />
    <mutant id="mutant_6755" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="ent != null" />
    <mutant id="mutant_5425" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="true" />
    <mutant id="mutant_6756" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.idBuffer()" from="(ent != null) &amp;&amp; ((compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL))" to="(compareMetadata(ent)) == (WorkingTreeIterator.MetadataDiff.EQUAL)" />
    <mutant id="mutant_5426" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="(all instanceof org.eclipse.jgit.util.RefMap) || ((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="false" />
    <mutant id="mutant_6757" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.getIndexFileMode(org.eclipse.jgit.dircache.DirCacheIterator)" from="((FileMode.REGULAR_FILE) == wtMode) &amp;&amp; ((FileMode.EXECUTABLE_FILE) == iMode)" to="true" />
    <mutant id="mutant_5416" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="false" />
    <mutant id="mutant_6747" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="true" />
    <mutant id="mutant_5417" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="(echoCommandFailures) || ((msgOut) != null)" />
    <mutant id="mutant_6748" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="false" />
    <mutant id="mutant_5418" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="((all instanceof SortedMap) || ((((SortedMap)(all)).comparator()) == null))" />
    <mutant id="mutant_6749" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="(cPos &lt; aLen) || (cPos &lt; bLen)" />
    <mutant id="mutant_5419" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.getSortedRefs(java.util.Map)" from="((all instanceof SortedMap) &amp;&amp; ((((SortedMap)(all)).comparator()) == null))" to="((((SortedMap)(all)).comparator()) == null)" />
    <mutant id="mutant_6740" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser" />
    <mutant id="mutant_5410" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="false" />
    <mutant id="mutant_6741" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="(o.pathOffset) == 0" />
    <mutant id="mutant_5411" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="atomic || (anyRejects())" />
    <mutant id="mutant_6742" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="(b.arrayOffset()) == 0" />
    <mutant id="mutant_5412" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="anyRejects()" />
    <mutant id="mutant_6743" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="b.hasArray()" />
    <mutant id="mutant_5413" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="echoCommandFailures" />
    <mutant id="mutant_6744" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="true" />
    <mutant id="mutant_5414" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="(msgOut) != null" />
    <mutant id="mutant_6745" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="false" />
    <mutant id="mutant_5415" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="(echoCommandFailures) &amp;&amp; ((msgOut) != null)" to="true" />
    <mutant id="mutant_6746" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.encodeName(java.nio.charset.CharsetEncoder)" from="(b.hasArray()) &amp;&amp; ((b.arrayOffset()) == 0)" to="(b.hasArray()) || ((b.arrayOffset()) == 0)" />
    <mutant id="mutant_5405" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="false" />
    <mutant id="mutant_6736" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="(t.pathCompare(minRef)) &lt; 0" />
    <mutant id="mutant_5406" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="atomic || (anyRejects())" />
    <mutant id="mutant_6737" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) || ((o.pathOffset) == 0)" />
    <mutant id="mutant_5407" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="anyRejects()" />
    <mutant id="mutant_6738" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="true" />
    <mutant id="mutant_5408" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="atomic" />
    <mutant id="mutant_6739" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.reset(org.eclipse.jgit.lib.AnyObjectId[])" from="(o instanceof org.eclipse.jgit.treewalk.CanonicalTreeParser) &amp;&amp; ((o.pathOffset) == 0)" to="false" />
    <mutant id="mutant_5409" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="true" />
    <mutant id="mutant_6730" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="FileMode.TREE.equals(t.mode)" />
    <mutant id="mutant_5400" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) &amp;&amp; (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" />
    <mutant id="mutant_6731" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) || (FileMode.TREE.equals(t.mode))" />
    <mutant id="mutant_5401" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="true" />
    <mutant id="mutant_6732" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="minRef == null" />
    <mutant id="mutant_5402" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="false" />
    <mutant id="mutant_6733" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="true" />
    <mutant id="mutant_5403" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="atomic" />
    <mutant id="mutant_6734" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="false" />
    <mutant id="mutant_5404" viable="true" in="org.eclipse.jgit.transport.ReceivePack.service()" from="atomic &amp;&amp; (anyRejects())" to="true" />
    <mutant id="mutant_6735" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.exitSubtree()" from="(minRef == null) || ((t.pathCompare(minRef)) &lt; 0)" to="(minRef == null) &amp;&amp; ((t.pathCompare(minRef)) &lt; 0)" />
    <mutant id="mutant_5480" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="false" />
    <mutant id="mutant_5481" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="(r.dstName) == null" />
    <mutant id="mutant_5482" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="(RefSpec.isWildcard(r.srcName)) || ((r.dstName) == null)" />
    <mutant id="mutant_5483" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="(match != null) || ((match.getKey().length()) &gt; (replacement.getKey().length()))" />
    <mutant id="mutant_5484" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="match != null" />
    <mutant id="mutant_4153" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="false" />
    <mutant id="mutant_4152" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="true" />
    <mutant id="mutant_4151" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="(n instanceof Candidate.ReverseCandidate) || (p.sourceBlob.equals(n.sourceBlob))" />
    <mutant id="mutant_4150" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="p.sourceBlob.equals(n.sourceBlob)" />
    <mutant id="mutant_4149" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="(ids != null) || ((ids[pIdx]) != null)" />
    <mutant id="mutant_4148" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="false" />
    <mutant id="mutant_4147" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="true" />
    <mutant id="mutant_4146" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="ids != null" />
    <mutant id="mutant_4145" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="(ids[pIdx]) != null" />
    <mutant id="mutant_4144" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="(renames != null) || ((renames[pIdx]) != null)" />
    <mutant id="mutant_4143" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="(renames[pIdx]) != null" />
    <mutant id="mutant_5474" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="(RefSpec.isWildcard(r.dstName)) || ((r.srcName) == null)" />
    <mutant id="mutant_5475" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="true" />
    <mutant id="mutant_5476" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="false" />
    <mutant id="mutant_5477" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="(r.srcName) == null" />
    <mutant id="mutant_5478" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="org.eclipse.jgit.transport.RefSpec.isWildcard(r.srcName)" />
    <mutant id="mutant_5479" viable="true" in="org.eclipse.jgit.transport.RefSpec.setSource(java.lang.String)" from="(RefSpec.isWildcard(r.srcName)) &amp;&amp; ((r.dstName) == null)" to="true" />
    <mutant id="mutant_5470" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="false" />
    <mutant id="mutant_5471" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="spec != null" />
    <mutant id="mutant_5472" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="!(org.eclipse.jgit.transport.RefSpec.isValid(spec))" />
    <mutant id="mutant_5473" viable="true" in="org.eclipse.jgit.transport.RefSpec.setDestination(java.lang.String)" from="(RefSpec.isWildcard(r.dstName)) &amp;&amp; ((r.srcName) == null)" to="org.eclipse.jgit.transport.RefSpec.isWildcard(r.dstName)" />
    <mutant id="mutant_4142" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="false" />
    <mutant id="mutant_4141" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="true" />
    <mutant id="mutant_4140" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(renames != null) &amp;&amp; ((renames[pIdx]) != null)" to="renames != null" />
    <mutant id="mutant_4139" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="(ids != null) || ((ids[pIdx]) != null)" />
    <mutant id="mutant_4138" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="false" />
    <mutant id="mutant_4137" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="true" />
    <mutant id="mutant_4136" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="ids != null" />
    <mutant id="mutant_4135" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(ids != null) &amp;&amp; ((ids[pIdx]) != null)" to="(ids[pIdx]) != null" />
    <mutant id="mutant_4134" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="(!(n instanceof Candidate.ReverseCandidate)) || (idBuf.equals(n.sourceBlob))" />
    <mutant id="mutant_4133" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="false" />
    <mutant id="mutant_4132" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="true" />
    <mutant id="mutant_5463" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) || (name.endsWith(suffix))" />
    <mutant id="mutant_6794" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(fillBuffer())" />
    <mutant id="mutant_5464" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="true" />
    <mutant id="mutant_6795" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="(ptr) == (cnt)" />
    <mutant id="mutant_5465" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="false" />
    <mutant id="mutant_6796" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="(isBinary) &amp;&amp; (b != '\n')" />
    <mutant id="mutant_5466" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))" />
    <mutant id="mutant_6797" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="true" />
    <mutant id="mutant_5467" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix))) &amp;&amp; (name.endsWith(suffix))" to="name.endsWith(suffix)" />
    <mutant id="mutant_6798" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="false" />
    <mutant id="mutant_5468" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="(spec != null) || (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" />
    <mutant id="mutant_6799" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="isBinary" />
    <mutant id="mutant_5469" viable="true" in="org.eclipse.jgit.transport.RefSpec.checkValid(java.lang.String)" from="(spec != null) &amp;&amp; (!(org.eclipse.jgit.transport.RefSpec.isValid(spec)))" to="true" />
    <mutant id="mutant_6790" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="s == (RevSort.TOPO)" />
    <mutant id="mutant_5460" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="false" />
    <mutant id="mutant_6791" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="((ptr) == (cnt)) || (!(fillBuffer()))" />
    <mutant id="mutant_5461" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) || (name.startsWith(prefix)))" />
    <mutant id="mutant_6792" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="true" />
    <mutant id="mutant_5462" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="((name.length()) &gt; ((prefix.length()) + (suffix.length())))" />
    <mutant id="mutant_6793" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="false" />
    <mutant id="mutant_4131" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="idBuf.equals(n.sourceBlob)" />
    <mutant id="mutant_4130" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(!(n instanceof Candidate.ReverseCandidate)) &amp;&amp; (idBuf.equals(n.sourceBlob))" to="!(n instanceof Candidate.ReverseCandidate)" />
    <mutant id="mutant_4128" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="false" />
    <mutant id="mutant_4127" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="true" />
    <mutant id="mutant_4126" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.COPY)" />
    <mutant id="mutant_4125" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)" />
    <mutant id="mutant_4124" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="org.eclipse.jgit.blame.BlameGenerator.isFile(treeWalk.getRawMode(0))" />
    <mutant id="mutant_4123" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="treeWalk.next()" />
    <mutant id="mutant_4122" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="false" />
    <mutant id="mutant_4121" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="true" />
    <mutant id="mutant_5452" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="i &lt; ((s.length()) - 1)" />
    <mutant id="mutant_6783" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="false" />
    <mutant id="mutant_5453" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="s != null" />
    <mutant id="mutant_6784" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="((firstParent.lane) != null) || ((firstParent.lane) != (c.lane))" />
    <mutant id="mutant_5454" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="(s != null) || (s.contains(&quot;*&quot;))" />
    <mutant id="mutant_6785" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="(firstParent.lane) != (c.lane)" />
    <mutant id="mutant_5455" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="true" />
    <mutant id="mutant_6786" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="(s == (RevSort.TOPO)) || (!use)" />
    <mutant id="mutant_5456" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="false" />
    <mutant id="mutant_6787" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="!use" />
    <mutant id="mutant_5457" viable="true" in="org.eclipse.jgit.transport.RefSpec.isWildcard(java.lang.String)" from="(s != null) &amp;&amp; (s.contains(&quot;*&quot;))" to="s.contains(&quot;*&quot;)" />
    <mutant id="mutant_6788" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="true" />
    <mutant id="mutant_5458" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="(name.startsWith(prefix))" />
    <mutant id="mutant_6789" viable="true" in="org.eclipse.jgit.revplot.PlotWalk.sort(org.eclipse.jgit.revwalk.RevSort,boolean)" from="(s == (RevSort.TOPO)) &amp;&amp; (!use)" to="false" />
    <mutant id="mutant_4129" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) &amp;&amp; ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" />
    <mutant id="mutant_5459" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(((name.length()) &gt; ((prefix.length()) + (suffix.length()))) &amp;&amp; (name.startsWith(prefix)))" to="true" />
    <mutant id="mutant_6780" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="(nChildren == 1) || ((currCommit.children[0].getParentCount()) &lt; 2)" />
    <mutant id="mutant_5450" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="false" />
    <mutant id="mutant_6781" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="(firstParent.lane) != null" />
    <mutant id="mutant_5451" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="(s.charAt((i + 1))) != '/'" />
    <mutant id="mutant_6782" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((firstParent.lane) != null) &amp;&amp; ((firstParent.lane) != (c.lane))" to="true" />
    <mutant id="mutant_4120" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.find(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(treeWalk.next()) &amp;&amp; (BlameGenerator.isFile(treeWalk.getRawMode(0)))" to="(treeWalk.next()) || (BlameGenerator.isFile(treeWalk.getRawMode(0)))" />
    <mutant id="mutant_4117" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name))))" />
    <mutant id="mutant_5449" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="true" />
    <mutant id="mutant_4116" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="((name) == null) &amp;&amp; (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" />
    <mutant id="mutant_4115" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="(name) == null" />
    <mutant id="mutant_4114" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="annotated" />
    <mutant id="mutant_4113" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="((tagger) == null) || (annotated)" />
    <mutant id="mutant_4112" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="false" />
    <mutant id="mutant_4111" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="true" />
    <mutant id="mutant_4110" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((tagger) == null) &amp;&amp; (annotated)" to="(tagger) == null" />
    <mutant id="mutant_5441" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="a == null" />
    <mutant id="mutant_6772" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[])" from="(&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name))" to="&quot;.&quot;.equals(name)" />
    <mutant id="mutant_5442" viable="true" in="org.eclipse.jgit.transport.RefSpec.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="b == null" />
    <mutant id="mutant_6773" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[])" from="(&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name))" to="true" />
    <mutant id="mutant_5443" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="(i &gt; 0) || ((s.charAt((i - 1))) != '/')" />
    <mutant id="mutant_6774" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[])" from="(&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name))" to="false" />
    <mutant id="mutant_5444" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="i &gt; 0" />
    <mutant id="mutant_6775" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.init(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry[])" from="(&quot;.&quot;.equals(name)) || (&quot;..&quot;.equals(name))" to="(&quot;.&quot;.equals(name)) &amp;&amp; (&quot;..&quot;.equals(name))" />
    <mutant id="mutant_5445" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="true" />
    <mutant id="mutant_6776" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="(currCommit.children[0].getParentCount()) &lt; 2" />
    <mutant id="mutant_5446" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="false" />
    <mutant id="mutant_6777" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="nChildren == 1" />
    <mutant id="mutant_4119" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="false" />
    <mutant id="mutant_5447" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &gt; 0) &amp;&amp; ((s.charAt((i - 1))) != '/')" to="(s.charAt((i - 1))) != '/'" />
    <mutant id="mutant_6778" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="true" />
    <mutant id="mutant_4118" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_TAGS) + (name)))))" to="true" />
    <mutant id="mutant_5448" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i &lt; ((s.length()) - 1)) &amp;&amp; ((s.charAt((i + 1))) != '/')" to="(i &lt; ((s.length()) - 1)) || ((s.charAt((i + 1))) != '/')" />
    <mutant id="mutant_6779" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(nChildren == 1) &amp;&amp; ((currCommit.children[0].getParentCount()) &lt; 2)" to="false" />
    <mutant id="mutant_1919" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="((p &gt;= 0) || (slash &lt; (s.length)))" />
    <mutant id="mutant_1917" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="slash &lt; (s.length)" />
    <mutant id="mutant_1918" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(p &gt;= 0)" />
    <mutant id="mutant_1915" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(s[slash]) != '/'" />
    <mutant id="mutant_1916" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(slash &lt; (s.length)) || ((s[slash]) != '/')" />
    <mutant id="mutant_4197" viable="true" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="b != null" />
    <mutant id="mutant_4196" viable="false" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="false" />
    <mutant id="mutant_4195" viable="false" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="true" />
    <mutant id="mutant_4194" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="((aTail.resultStart) + (aTail.length)) == (n.resultStart)" />
    <mutant id="mutant_4193" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="false" />
    <mutant id="mutant_4192" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="true" />
    <mutant id="mutant_4191" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="((aTail.sourceStart) + (aTail.length)) == (n.sourceStart)" />
    <mutant id="mutant_4190" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) &amp;&amp; (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" to="(((aTail.resultStart) + (aTail.length)) == (n.resultStart)) || (((aTail.sourceStart) + (aTail.length)) == (n.sourceStart))" />
    <mutant id="mutant_4189" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="false" />
    <mutant id="mutant_4188" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="true" />
    <mutant id="mutant_4187" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="sourcePath.getPath().equals(other.sourcePath.getPath())" />
    <mutant id="mutant_1913" viable="false" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="true" />
    <mutant id="mutant_1914" viable="false" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="false" />
    <mutant id="mutant_1911" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="false" />
    <mutant id="mutant_1912" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="(contents[p]) instanceof Tree" />
    <mutant id="mutant_1910" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="true" />
    <mutant id="mutant_1908" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="(p &gt;= 0) &amp;&amp; (slash &lt; (s.length))" />
    <mutant id="mutant_1909" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) || ((contents[p]) instanceof Tree)" />
    <mutant id="mutant_1906" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="false" />
    <mutant id="mutant_1907" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(slash &lt; (s.length))" />
    <mutant id="mutant_1904" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="((p &gt;= 0) || (slash &lt; (s.length)))" />
    <mutant id="mutant_1905" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="true" />
    <mutant id="mutant_4186" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="(sourceCommit) == (other.sourceCommit)" />
    <mutant id="mutant_4185" viable="true" in="org.eclipse.jgit.blame.Candidate.canMergeRegions(org.eclipse.jgit.blame.Candidate)" from="((sourceCommit) == (other.sourceCommit)) &amp;&amp; (sourcePath.getPath().equals(other.sourcePath.getPath()))" to="((sourceCommit) == (other.sourceCommit)) || (sourcePath.getPath().equals(other.sourcePath.getPath()))" />
    <mutant id="mutant_4184" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="false" />
    <mutant id="mutant_4183" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="true" />
    <mutant id="mutant_4182" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="end &lt; resEnd" />
    <mutant id="mutant_4181" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="resLine &lt;= end" />
    <mutant id="mutant_4180" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= end) &amp;&amp; (end &lt; resEnd)" to="(resLine &lt;= end) || (end &lt; resEnd)" />
    <mutant id="mutant_4179" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="(resLine &lt;= start) || (start &lt; resEnd)" />
    <mutant id="mutant_4178" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="false" />
    <mutant id="mutant_4177" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="true" />
    <mutant id="mutant_4176" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="start &lt; resEnd" />
    <mutant id="mutant_1902" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="slash &lt; (s.length)" />
    <mutant id="mutant_1903" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(p &gt;= 0)" />
    <mutant id="mutant_1900" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(s[slash]) != '/'" />
    <mutant id="mutant_1901" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(slash &lt; (s.length)) || ((s[slash]) != '/')" />
    <mutant id="mutant_4175" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(resLine &lt;= start) &amp;&amp; (start &lt; resEnd)" to="resLine &lt;= start" />
    <mutant id="mutant_4174" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="(start == 0) || (end == (resultContents.size()))" />
    <mutant id="mutant_4173" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="false" />
    <mutant id="mutant_4172" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="true" />
    <mutant id="mutant_4171" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="end == (resultContents.size())" />
    <mutant id="mutant_4170" viable="true" in="org.eclipse.jgit.blame.BlameResult.computeRange(int,int)" from="(start == 0) &amp;&amp; (end == (resultContents.size()))" to="start == 0" />
    <mutant id="mutant_4169" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="time &gt;= (n.getTime())" />
    <mutant id="mutant_4168" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="n == null" />
    <mutant id="mutant_4167" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="false" />
    <mutant id="mutant_4166" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="true" />
    <mutant id="mutant_4165" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="(n == null) &amp;&amp; (time &gt;= (n.getTime()))" />
    <mutant id="mutant_5496" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="srcId != null" />
    <mutant id="mutant_5497" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="!(srcId.equals(ObjectId.zeroId()))" />
    <mutant id="mutant_5498" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="(localName != null) || (localDb != null)" />
    <mutant id="mutant_5499" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="true" />
    <mutant id="mutant_5490" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="false" />
    <mutant id="mutant_5491" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="(srcId == null) || (srcRef != null)" />
    <mutant id="mutant_5492" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="srcId == null" />
    <mutant id="mutant_5493" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="true" />
    <mutant id="mutant_5494" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="false" />
    <mutant id="mutant_5495" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId != null) &amp;&amp; (!(srcId.equals(ObjectId.zeroId())))" to="(srcId != null) || (!(srcId.equals(ObjectId.zeroId())))" />
    <mutant id="mutant_4164" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="time &gt;= (n.getTime())" />
    <mutant id="mutant_4163" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="n == null" />
    <mutant id="mutant_4162" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="false" />
    <mutant id="mutant_4161" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="true" />
    <mutant id="mutant_4160" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.push(org.eclipse.jgit.blame.Candidate)" from="(n == null) || (time &gt;= (n.getTime()))" to="(n == null) &amp;&amp; (time &gt;= (n.getTime()))" />
    <mutant id="mutant_4159" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="org.eclipse.jgit.blame.BlameGenerator.isRename(ent)" />
    <mutant id="mutant_4158" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="false" />
    <mutant id="mutant_4157" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="true" />
    <mutant id="mutant_4156" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) || (ent.getNewPath().equals(path.getPath()))" />
    <mutant id="mutant_4155" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.findRename(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.treewalk.filter.PathFilter)" from="(org.eclipse.jgit.blame.BlameGenerator.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(path.getPath()))" to="ent.getNewPath().equals(path.getPath())" />
    <mutant id="mutant_4154" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.processMerge(org.eclipse.jgit.blame.Candidate)" from="(n instanceof Candidate.ReverseCandidate) &amp;&amp; (p.sourceBlob.equals(n.sourceBlob))" to="n instanceof Candidate.ReverseCandidate" />
    <mutant id="mutant_5485" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="(match.getKey().length()) &gt; (replacement.getKey().length())" />
    <mutant id="mutant_5486" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="true" />
    <mutant id="mutant_5487" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match != null) &amp;&amp; ((match.getKey().length()) &gt; (replacement.getKey().length()))" to="false" />
    <mutant id="mutant_5488" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="srcRef != null" />
    <mutant id="mutant_5489" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(srcId == null) &amp;&amp; (srcRef != null)" to="true" />
    <mutant id="mutant_1959" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="(n == null)" />
    <mutant id="mutant_1950" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="(id) != n" />
    <mutant id="mutant_1957" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="(((id) == null) || (n != null))" />
    <mutant id="mutant_1958" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="((id) != null)" />
    <mutant id="mutant_1955" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="true" />
    <mutant id="mutant_1956" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="false" />
    <mutant id="mutant_1953" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="(n != null)" />
    <mutant id="mutant_1954" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) == null) &amp;&amp; (n != null))" to="((id) == null)" />
    <mutant id="mutant_1951" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="true" />
    <mutant id="mutant_1952" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="false" />
    <mutant id="mutant_1948" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="(p != null) || ((id) != n)" />
    <mutant id="mutant_1949" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(p != null) &amp;&amp; ((id) != n)" to="p != null" />
    <mutant id="mutant_1946" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &lt; '0'" />
    <mutant id="mutant_1947" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &gt; '7'" />
    <mutant id="mutant_1944" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="true" />
    <mutant id="mutant_1945" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="false" />
    <mutant id="mutant_1942" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &gt; '7'" />
    <mutant id="mutant_1943" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="(c &lt; '0') &amp;&amp; (c &gt; '7')" />
    <mutant id="mutant_1940" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="false" />
    <mutant id="mutant_1941" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &lt; '0'" />
    <mutant id="mutant_1939" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="true" />
    <mutant id="mutant_1937" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="(raw[rawPtr]) != 0" />
    <mutant id="mutant_1938" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="(c &lt; '0') &amp;&amp; (c &gt; '7')" />
    <mutant id="mutant_1935" viable="false" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="false" />
    <mutant id="mutant_1936" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="(rawPtr &lt; rawSize) || ((raw[rawPtr]) != 0)" />
    <mutant id="mutant_1933" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="rawPtr &lt; rawSize" />
    <mutant id="mutant_1934" viable="false" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr &lt; rawSize) &amp;&amp; ((raw[rawPtr]) != 0)" to="true" />
    <mutant id="mutant_1931" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(slash &lt; (s.length)) || ((s[slash]) != '/')" />
    <mutant id="mutant_1932" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="slash &lt; (s.length)" />
    <mutant id="mutant_1930" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="(s[slash]) != '/'" />
    <mutant id="mutant_1928" viable="false" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="true" />
    <mutant id="mutant_1929" viable="false" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="false" />
    <mutant id="mutant_1926" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="false" />
    <mutant id="mutant_1927" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="(contents[p]) instanceof Tree" />
    <mutant id="mutant_4199" viable="true" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="a != null" />
    <mutant id="mutant_4198" viable="true" in="org.eclipse.jgit.blame.Candidate.mergeRegions(org.eclipse.jgit.blame.Candidate)" from="(a != null) &amp;&amp; (b != null)" to="(a != null) || (b != null)" />
    <mutant id="mutant_1924" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) || ((contents[p]) instanceof Tree)" />
    <mutant id="mutant_1925" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="true" />
    <mutant id="mutant_1922" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="(slash &lt; (s.length))" />
    <mutant id="mutant_1923" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length))) &amp;&amp; ((contents[p]) instanceof Tree)" to="(p &gt;= 0) &amp;&amp; (slash &lt; (s.length))" />
    <mutant id="mutant_1920" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="true" />
    <mutant id="mutant_1921" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="((p &gt;= 0) &amp;&amp; (slash &lt; (s.length)))" to="false" />
    <mutant id="mutant_1993" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="(toAdd) != null" />
    <mutant id="mutant_1994" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="true" />
    <mutant id="mutant_1991" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="false" />
    <mutant id="mutant_1992" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="((toAdd) != null) || (toAdd.get(position))" />
    <mutant id="mutant_1990" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="true" />
    <mutant id="mutant_1999" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="true" />
    <mutant id="mutant_1997" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="((toAdd) != null) &amp;&amp; ((toRemove) != null)" />
    <mutant id="mutant_1998" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="(toAdd) != null" />
    <mutant id="mutant_1995" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="false" />
    <mutant id="mutant_1996" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.andNot(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="(toRemove) != null" />
    <mutant id="mutant_1982" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="false" />
    <mutant id="mutant_1983" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="toRemove.get(position)" />
    <mutant id="mutant_1980" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="block &lt; (words.length)" />
    <mutant id="mutant_1981" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="true" />
    <mutant id="mutant_1988" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="toAdd.get(position)" />
    <mutant id="mutant_1989" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toAdd) != null) &amp;&amp; (toAdd.get(position))" to="(toAdd) != null" />
    <mutant id="mutant_1986" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="(toRemove) != null" />
    <mutant id="mutant_1987" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="((toRemove) != null) || (toRemove.get(position))" />
    <mutant id="mutant_1984" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="true" />
    <mutant id="mutant_1985" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.contains(int)" from="((toRemove) != null) &amp;&amp; (toRemove.get(position))" to="false" />
    <mutant id="mutant_1971" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="true" />
    <mutant id="mutant_1972" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="false" />
    <mutant id="mutant_1970" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="(((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))" />
    <mutant id="mutant_1979" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="((words[block]) &amp; (BitSet.mask(position))) != 0" />
    <mutant id="mutant_1977" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="(buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" />
    <mutant id="mutant_1978" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.get(int)" from="(block &lt; (words.length)) &amp;&amp; (((words[block]) &amp; (BitSet.mask(position))) != 0)" to="(block &lt; (words.length)) || (((words[block]) &amp; (BitSet.mask(position))) != 0)" />
    <mutant id="mutant_1975" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="false" />
    <mutant id="mutant_1976" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="((buf) == null) &amp;&amp; ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" />
    <mutant id="mutant_1973" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="(buf) == null" />
    <mutant id="mutant_1974" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((buf) == null) || ((buf.length) &lt; ((ptr) + (TreeFormatter.entrySize(mode, nameLen))))" to="true" />
    <mutant id="mutant_1960" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="true" />
    <mutant id="mutant_1961" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="false" />
    <mutant id="mutant_1968" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) &amp;&amp; (!(id.equals(n)))" />
    <mutant id="mutant_1969" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null))) || (!(id.equals(n)))" to="!(id.equals(n))" />
    <mutant id="mutant_1966" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="((((id) == null) &amp;&amp; (n != null)) &amp;&amp; (((id) != null) &amp;&amp; (n == null)))" />
    <mutant id="mutant_1967" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="(((id) == null) &amp;&amp; (n != null))" />
    <mutant id="mutant_1964" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="false" />
    <mutant id="mutant_1965" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="(((id) != null) &amp;&amp; (n == null))" />
    <mutant id="mutant_1962" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="(((id) != null) &amp;&amp; (n == null))" to="(((id) != null) || (n == null))" />
    <mutant id="mutant_1963" viable="true" in="org.eclipse.jgit.lib.TreeEntry.setId(org.eclipse.jgit.lib.ObjectId)" from="((((id) == null) &amp;&amp; (n != null)) || (((id) != null) &amp;&amp; (n == null)))" to="true" />
    <mutant id="mutant_701" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="((firstObjectId.w3) == (secondObjectId.w3))" />
    <mutant id="mutant_702" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="((firstObjectId.w4) == (secondObjectId.w4))" />
    <mutant id="mutant_703" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) || ((firstObjectId.w4) == (secondObjectId.w4)))" />
    <mutant id="mutant_704" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="true" />
    <mutant id="mutant_700" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="false" />
    <mutant id="mutant_709" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" />
    <mutant id="mutant_705" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="false" />
    <mutant id="mutant_706" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" />
    <mutant id="mutant_707" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="((firstObjectId.w5) == (secondObjectId.w5))" />
    <mutant id="mutant_708" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) || ((firstObjectId.w5) == (secondObjectId.w5)))" />
    <mutant id="mutant_712" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="(firstObjectId.w1) == (secondObjectId.w1)" />
    <mutant id="mutant_713" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="true" />
    <mutant id="mutant_714" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="false" />
    <mutant id="mutant_715" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))" />
    <mutant id="mutant_710" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="true" />
    <mutant id="mutant_711" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="false" />
    <mutant id="mutant_716" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) || ((firstObjectId.w1) == (secondObjectId.w1))" />
    <mutant id="mutant_717" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="(o &gt;= p) || (w != 0)" />
    <mutant id="mutant_718" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="w != 0" />
    <mutant id="mutant_719" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="true" />
    <mutant id="mutant_723" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="w != 0" />
    <mutant id="mutant_724" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="true" />
    <mutant id="mutant_725" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="false" />
    <mutant id="mutant_726" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="o &gt;= p" />
    <mutant id="mutant_720" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="false" />
    <mutant id="mutant_721" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="o &gt;= p" />
    <mutant id="mutant_722" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="(o &gt;= p) &amp;&amp; (w != 0)" to="(o &gt;= p) || (w != 0)" />
    <mutant id="mutant_727" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="((current != null) || ((ceilingDirectories) != null))" />
    <mutant id="mutant_728" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="true" />
    <mutant id="mutant_729" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="false" />
    <mutant id="mutant_6802" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="abortIfBinary" />
    <mutant id="mutant_6803" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="true" />
    <mutant id="mutant_6804" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="false" />
    <mutant id="mutant_6805" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="(isBinary) || (abortIfBinary)" />
    <mutant id="mutant_6806" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(fillBuffer())" />
    <mutant id="mutant_6807" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="true" />
    <mutant id="mutant_6808" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="false" />
    <mutant id="mutant_6809" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="(ptr) == (cnt)" />
    <mutant id="mutant_6800" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\n')" to="b != '\n'" />
    <mutant id="mutant_6801" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.fillBuffer()" from="(isBinary) &amp;&amp; (abortIfBinary)" to="isBinary" />
    <mutant id="mutant_734" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="((current != null) &amp;&amp; ((ceilingDirectories) != null)) || (ceilingDirectories.contains(current))" />
    <mutant id="mutant_735" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="true" />
    <mutant id="mutant_736" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="false" />
    <mutant id="mutant_737" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="isMustExist()" />
    <mutant id="mutant_730" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="((ceilingDirectories) != null)" />
    <mutant id="mutant_731" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null))" to="(current != null)" />
    <mutant id="mutant_732" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="(current != null) &amp;&amp; ((ceilingDirectories) != null)" />
    <mutant id="mutant_733" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.findGitDir(java.io.File)" from="((current != null) &amp;&amp; ((ceilingDirectories) != null)) &amp;&amp; (ceilingDirectories.contains(current))" to="ceilingDirectories.contains(current)" />
    <mutant id="mutant_738" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="true" />
    <mutant id="mutant_739" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="false" />
    <mutant id="mutant_745" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="(((ref[0]) == 'g') || ((ref[1]) == 'i'))" />
    <mutant id="mutant_746" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="((ref[1]) == 'i')" />
    <mutant id="mutant_747" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="((ref[2]) == 't')" />
    <mutant id="mutant_748" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="true" />
    <mutant id="mutant_741" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="!(repo.getObjectDatabase().exists())" />
    <mutant id="mutant_742" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="((ref[0]) == 'g')" />
    <mutant id="mutant_743" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="true" />
    <mutant id="mutant_744" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" to="false" />
    <mutant id="mutant_749" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="false" />
    <mutant id="mutant_740" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="(isMustExist()) || (!(repo.getObjectDatabase().exists()))" />
    <mutant id="mutant_756" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="false" />
    <mutant id="mutant_757" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="true" />
    <mutant id="mutant_758" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="false" />
    <mutant id="mutant_759" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) || ((ref[4]) == 'i'))" />
    <mutant id="mutant_752" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="((ref[3]) == 'd')" />
    <mutant id="mutant_753" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) || ((ref[3]) == 'd'))" />
    <mutant id="mutant_754" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" />
    <mutant id="mutant_755" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" to="true" />
    <mutant id="mutant_750" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="(((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i'))" />
    <mutant id="mutant_751" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't'))" to="((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) || ((ref[2]) == 't'))" />
    <mutant id="mutant_767" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="true" />
    <mutant id="mutant_768" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="false" />
    <mutant id="mutant_769" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) || ((ref[6]) == ':'))" />
    <mutant id="mutant_763" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="true" />
    <mutant id="mutant_764" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="false" />
    <mutant id="mutant_765" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="((ref[5]) == 'r')" />
    <mutant id="mutant_766" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) || ((ref[5]) == 'r'))" />
    <mutant id="mutant_5515" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="true" />
    <mutant id="mutant_6846" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="(index &lt; 0) &amp;&amp; ((size) &lt; index)" />
    <mutant id="mutant_5516" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="false" />
    <mutant id="mutant_6847" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="true" />
    <mutant id="mutant_5517" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0)" />
    <mutant id="mutant_6848" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="false" />
    <mutant id="mutant_5518" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="(0 &lt;= lf) || (0 &lt;= cr)" />
    <mutant id="mutant_6849" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(index &lt; 0) || ((size) &lt; index)" to="index &lt; 0" />
    <mutant id="mutant_5519" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(0 &lt;= lf) &amp;&amp; (0 &lt;= cr)" to="0 &lt;= cr" />
    <mutant id="mutant_760" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="(((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd'))" />
    <mutant id="mutant_761" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" to="((ref[4]) == 'i')" />
    <mutant id="mutant_6840" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="index &lt; 0" />
    <mutant id="mutant_762" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" to="((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i'))" />
    <mutant id="mutant_5510" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="((channel) == (SideBandInputStream.CH_DATA))" />
    <mutant id="mutant_6841" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="(size) &lt;= index" />
    <mutant id="mutant_5511" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="true" />
    <mutant id="mutant_6842" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="true" />
    <mutant id="mutant_5512" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="false" />
    <mutant id="mutant_6843" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="false" />
    <mutant id="mutant_5513" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="(eof) &amp;&amp; (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" />
    <mutant id="mutant_6844" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="(index &lt; 0) &amp;&amp; ((size) &lt;= index)" />
    <mutant id="mutant_5514" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(eof) || (((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="eof" />
    <mutant id="mutant_6845" viable="true" in="org.eclipse.jgit.util.BlockList.set(int,T)" from="(index &lt; 0) || ((size) &lt;= index)" to="index &lt; 0" />
    <mutant id="mutant_778" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="false" />
    <mutant id="mutant_779" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="(getWorkTree()) == null" />
    <mutant id="mutant_774" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="true" />
    <mutant id="mutant_775" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="false" />
    <mutant id="mutant_776" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')" />
    <mutant id="mutant_777" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="true" />
    <mutant id="mutant_5504" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="eof" />
    <mutant id="mutant_6835" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="index &lt; 0" />
    <mutant id="mutant_5505" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="(eof) || (r == 0)" />
    <mutant id="mutant_6836" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="(size) &lt;= index" />
    <mutant id="mutant_5506" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="true" />
    <mutant id="mutant_6837" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="true" />
    <mutant id="mutant_5507" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="false" />
    <mutant id="mutant_6838" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="false" />
    <mutant id="mutant_5508" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="(((channel) == (SideBandInputStream.CH_DATA)) || ((available) &gt; 0))" />
    <mutant id="mutant_6839" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="(index &lt; 0) &amp;&amp; ((size) &lt;= index)" />
    <mutant id="mutant_5509" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="(((channel) == (SideBandInputStream.CH_DATA)) &amp;&amp; ((available) &gt; 0))" to="((available) &gt; 0)" />
    <mutant id="mutant_770" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="(((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r'))" />
    <mutant id="mutant_771" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':'))" to="((ref[6]) == ':')" />
    <mutant id="mutant_772" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="(ref[7]) == ' '" />
    <mutant id="mutant_773" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.isSymRef(byte[])" from="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) &amp;&amp; ((ref[7]) == ' ')" to="((((((((ref[0]) == 'g') &amp;&amp; ((ref[1]) == 'i')) &amp;&amp; ((ref[2]) == 't')) &amp;&amp; ((ref[3]) == 'd')) &amp;&amp; ((ref[4]) == 'i')) &amp;&amp; ((ref[5]) == 'r')) &amp;&amp; ((ref[6]) == ':')) || ((ref[7]) == ' ')" />
    <mutant id="mutant_6830" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="dirSize == 0" />
    <mutant id="mutant_5500" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="false" />
    <mutant id="mutant_6831" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="(size) &lt;= index" />
    <mutant id="mutant_5501" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="localDb != null" />
    <mutant id="mutant_6832" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="true" />
    <mutant id="mutant_5502" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate(org.eclipse.jgit.lib.Repository,java.lang.String,org.eclipse.jgit.lib.ObjectId,java.lang.String,boolean,java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(localName != null) &amp;&amp; (localDb != null)" to="localName != null" />
    <mutant id="mutant_6833" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="false" />
    <mutant id="mutant_5503" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.read(byte[],int,int)" from="(eof) &amp;&amp; (r == 0)" to="r == 0" />
    <mutant id="mutant_6834" viable="true" in="org.eclipse.jgit.util.BlockList.get(int)" from="(index &lt; 0) || ((size) &lt;= index)" to="(index &lt; 0) &amp;&amp; ((size) &lt;= index)" />
    <mutant id="mutant_789" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="false" />
    <mutant id="mutant_785" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="(getGitDir()) == null" />
    <mutant id="mutant_786" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="(getWorkTree()) != null" />
    <mutant id="mutant_787" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="((getObjectDirectory()) == null) || ((getGitDir()) != null)" />
    <mutant id="mutant_788" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="true" />
    <mutant id="mutant_6824" viable="false" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="false" />
    <mutant id="mutant_6825" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="(!(terminated)) || (callingThread.isAlive())" />
    <mutant id="mutant_6826" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) &amp;&amp; (dirSize == 0)" />
    <mutant id="mutant_6827" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="true" />
    <mutant id="mutant_6828" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="false" />
    <mutant id="mutant_6829" viable="true" in="org.eclipse.jgit.util.BlockList(int)" from="((capacity &amp; (BlockList.BLOCK_MASK)) != 0) || (dirSize == 0)" to="(capacity &amp; (BlockList.BLOCK_MASK)) != 0" />
    <mutant id="mutant_781" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="((getGitDir()) == null) || ((getWorkTree()) == null)" />
    <mutant id="mutant_782" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="((getGitDir()) == null) || ((getWorkTree()) != null)" />
    <mutant id="mutant_783" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="true" />
    <mutant id="mutant_784" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupGitDir()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) != null)" to="false" />
    <mutant id="mutant_6820" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="((ptr) == (cnt)) || (!(fillBuffer()))" />
    <mutant id="mutant_6821" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="!(terminated)" />
    <mutant id="mutant_6822" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="callingThread.isAlive()" />
    <mutant id="mutant_780" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.requireGitDirOrWorkTree()" from="((getGitDir()) == null) &amp;&amp; ((getWorkTree()) == null)" to="(getGitDir()) == null" />
    <mutant id="mutant_6823" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(!(terminated)) &amp;&amp; (callingThread.isAlive())" to="true" />
    <mutant id="mutant_796" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="(!(isBare())) || ((getWorkTree()) == null)" />
    <mutant id="mutant_797" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="msg == null" />
    <mutant id="mutant_798" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="true" />
    <mutant id="mutant_799" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="false" />
    <mutant id="mutant_6813" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="false" />
    <mutant id="mutant_6814" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="(isBinary) &amp;&amp; (b != '\r')" />
    <mutant id="mutant_6815" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="b != '\r'" />
    <mutant id="mutant_6816" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="!(fillBuffer())" />
    <mutant id="mutant_6817" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="true" />
    <mutant id="mutant_6818" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="false" />
    <mutant id="mutant_6819" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="(ptr) == (cnt)" />
    <mutant id="mutant_792" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="!(isBare())" />
    <mutant id="mutant_793" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="true" />
    <mutant id="mutant_794" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="false" />
    <mutant id="mutant_795" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupWorkTree()" from="(!(isBare())) &amp;&amp; ((getWorkTree()) == null)" to="(getWorkTree()) == null" />
    <mutant id="mutant_6810" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="((ptr) == (cnt)) &amp;&amp; (!(fillBuffer()))" to="((ptr) == (cnt)) || (!(fillBuffer()))" />
    <mutant id="mutant_790" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="(getObjectDirectory()) == null" />
    <mutant id="mutant_6811" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="isBinary" />
    <mutant id="mutant_791" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.setupInternals()" from="((getObjectDirectory()) == null) &amp;&amp; ((getGitDir()) != null)" to="(getGitDir()) != null" />
    <mutant id="mutant_6812" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="(isBinary) || (b != '\r')" to="true" />
    <mutant id="mutant_9" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="(e != null) || ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" />
    <mutant id="mutant_8" viable="false" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="false" />
    <mutant id="mutant_5" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="e != null" />
    <mutant id="mutant_686" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="false" />
    <mutant id="mutant_4" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="((itr) != null) || (itr.hasNext())" />
    <mutant id="mutant_687" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="((id.length()) &lt; 2) &amp;&amp; ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" />
    <mutant id="mutant_7" viable="false" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="true" />
    <mutant id="mutant_688" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="(id.length()) &lt; 2" />
    <mutant id="mutant_6" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.build(boolean,org.eclipse.jgit.lib.ObjectInserter)" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0)" to="(e.pathCompare(nameBuf, 0, 2, org.eclipse.jgit.lib.FileMode.TREE)) &lt; 0" />
    <mutant id="mutant_689" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="true" />
    <mutant id="mutant_6650" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="(fastMinHasMatch)" />
    <mutant id="mutant_85" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="(bi &lt; (bb.size())) || (oi &lt; (ob.size()))" />
    <mutant id="mutant_84" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="(bi &lt; (bb.size()))" />
    <mutant id="mutant_87" viable="false" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="true" />
    <mutant id="mutant_86" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) &amp;&amp; (ti &lt; (tb.size()))" />
    <mutant id="mutant_89" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="ti &lt; (tb.size())" />
    <mutant id="mutant_88" viable="false" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size()))) || (ti &lt; (tb.size()))" to="false" />
    <mutant id="mutant_5317" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="tzBegin &lt; 0" />
    <mutant id="mutant_6648" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="minRef.eof()" />
    <mutant id="mutant_5318" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="whenBegin &lt; 0" />
    <mutant id="mutant_6649" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="(minRef.eof()) || ((++i) &lt; (trees.length))" />
    <mutant id="mutant_90" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="((baseList == null) || (oursList == null))" />
    <mutant id="mutant_5319" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="(whenBegin &lt; 0) &amp;&amp; ((raw[whenBegin]) != ' ')" />
    <mutant id="mutant_92" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="true" />
    <mutant id="mutant_91" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="(oursList == null)" />
    <mutant id="mutant_94" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="(baseList == null)" />
    <mutant id="mutant_93" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null))" to="false" />
    <mutant id="mutant_1" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="false" />
    <mutant id="mutant_682" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="(w5) == (b.w5)" />
    <mutant id="mutant_6640" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="((t.matches) == minRef) &amp;&amp; (t.eof())" />
    <mutant id="mutant_0" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="true" />
    <mutant id="mutant_683" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) || ((w5) == (b.w5))" />
    <mutant id="mutant_5310" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="true" />
    <mutant id="mutant_6641" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="(t.matches) == minRef" />
    <mutant id="mutant_3" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="itr.hasNext()" />
    <mutant id="mutant_684" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))" />
    <mutant id="mutant_5311" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="false" />
    <mutant id="mutant_6642" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="true" />
    <mutant id="mutant_2" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$1.hasNext()" from="((itr) != null) &amp;&amp; (itr.hasNext())" to="(itr) != null" />
    <mutant id="mutant_685" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4))) &amp;&amp; ((w5) == (b.w5))" to="true" />
    <mutant id="mutant_5312" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="(nameBegin &lt; nameEnd) || ((userId.charAt(nameBegin)) == ' ')" />
    <mutant id="mutant_6643" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="false" />
    <mutant id="mutant_5313" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="(raw[tzBegin]) != ' '" />
    <mutant id="mutant_6644" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.combineDF(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.eof())" to="t.eof()" />
    <mutant id="mutant_5314" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="(tzBegin &lt; 0) &amp;&amp; ((raw[tzBegin]) != ' ')" />
    <mutant id="mutant_6645" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="(++i) &lt; (trees.length)" />
    <mutant id="mutant_680" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="false" />
    <mutant id="mutant_5315" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="true" />
    <mutant id="mutant_6646" viable="false" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="true" />
    <mutant id="mutant_681" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) || ((w4) == (b.w4)))" />
    <mutant id="mutant_5316" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(tzBegin &lt; 0) || ((raw[tzBegin]) != ' ')" to="false" />
    <mutant id="mutant_6647" viable="false" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="false" />
    <mutant id="mutant_697" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="((firstObjectId.w2) == (secondObjectId.w2))" />
    <mutant id="mutant_698" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="(((firstObjectId.w2) == (secondObjectId.w2)) || ((firstObjectId.w3) == (secondObjectId.w3)))" />
    <mutant id="mutant_699" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="true" />
    <mutant id="mutant_74" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="false" />
    <mutant id="mutant_73" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="true" />
    <mutant id="mutant_76" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="true" />
    <mutant id="mutant_75" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="(base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)" />
    <mutant id="mutant_78" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="theirs instanceof org.eclipse.jgit.notes.FanoutBucket" />
    <mutant id="mutant_77" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="false" />
    <mutant id="mutant_79" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) || (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" to="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket)) &amp;&amp; (theirs instanceof org.eclipse.jgit.notes.FanoutBucket)" />
    <mutant id="mutant_5306" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="false" />
    <mutant id="mutant_6637" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="false" />
    <mutant id="mutant_5307" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="(userId.charAt(nameEnd)) == ' '" />
    <mutant id="mutant_6638" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="cmp &lt; 0" />
    <mutant id="mutant_5308" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="nameBegin &lt; nameEnd" />
    <mutant id="mutant_6639" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="(cmp &lt; 0) &amp;&amp; (t.first())" />
    <mutant id="mutant_5309" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameBegin &lt; nameEnd) &amp;&amp; ((userId.charAt(nameBegin)) == ' ')" to="(userId.charAt(nameBegin)) == ' '" />
    <mutant id="mutant_81" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="true" />
    <mutant id="mutant_80" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="((bi &lt; (bb.size())) &amp;&amp; (oi &lt; (ob.size())))" />
    <mutant id="mutant_83" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="(oi &lt; (ob.size()))" />
    <mutant id="mutant_82" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="((bi &lt; (bb.size())) || (oi &lt; (ob.size())))" to="false" />
    <mutant id="mutant_693" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="p &lt; end" />
    <mutant id="mutant_694" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="(n &lt; 8) || (p &lt; end)" />
    <mutant id="mutant_6630" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="t.first()" />
    <mutant id="mutant_695" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="true" />
    <mutant id="mutant_5300" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="true" />
    <mutant id="mutant_6631" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="(t.matches) == minRef" />
    <mutant id="mutant_696" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="false" />
    <mutant id="mutant_5301" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="false" />
    <mutant id="mutant_6632" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="true" />
    <mutant id="mutant_5302" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="nameEnd &lt; 0" />
    <mutant id="mutant_6633" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="false" />
    <mutant id="mutant_690" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="false" />
    <mutant id="mutant_5303" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="(nameEnd &gt;= 0) || ((userId.charAt(nameEnd)) == ' ')" />
    <mutant id="mutant_6634" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((t.matches) == minRef) || (t.first())" to="((t.matches) == minRef) &amp;&amp; (t.first())" />
    <mutant id="mutant_691" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.isId(java.lang.String)" from="((id.length()) &lt; 2) || ((Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length()))" to="(Constants.OBJECT_ID_STRING_LENGTH) &lt; (id.length())" />
    <mutant id="mutant_5304" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="nameEnd &gt;= 0" />
    <mutant id="mutant_6635" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="t.first()" />
    <mutant id="mutant_692" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(n &lt; 8) &amp;&amp; (p &lt; end)" to="n &lt; 8" />
    <mutant id="mutant_5305" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &gt;= 0) &amp;&amp; ((userId.charAt(nameEnd)) == ' ')" to="true" />
    <mutant id="mutant_6636" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.skipEntry(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(cmp &lt; 0) || (t.first())" to="true" />
    <mutant id="mutant_6626" viable="false" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="true" />
    <mutant id="mutant_6627" viable="false" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="false" />
    <mutant id="mutant_6628" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="((--delta) &gt; 0) || (ptr != end)" />
    <mutant id="mutant_6629" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="ptr != end" />
    <mutant id="mutant_6620" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="delta == 1" />
    <mutant id="mutant_6621" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="(delta == 1) || (0 &lt;= (prevPtr))" />
    <mutant id="mutant_6622" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="true" />
    <mutant id="mutant_6623" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="false" />
    <mutant id="mutant_6624" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(delta == 1) &amp;&amp; (0 &lt;= (prevPtr))" to="0 &lt;= (prevPtr)" />
    <mutant id="mutant_6625" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="((--delta) &gt; 0) &amp;&amp; (ptr != end)" to="(--delta) &gt; 0" />
    <mutant id="mutant_96" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="true" />
    <mutant id="mutant_95" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="((baseList == null) &amp;&amp; (oursList == null)) || (theirsList == null)" />
    <mutant id="mutant_98" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="theirsList == null" />
    <mutant id="mutant_97" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="false" />
    <mutant id="mutant_99" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeNonNotes(org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry,org.eclipse.jgit.notes.NonNoteEntry)" from="((baseList == null) &amp;&amp; (oursList == null)) &amp;&amp; (theirsList == null)" to="(baseList == null) &amp;&amp; (oursList == null)" />
    <mutant id="mutant_6615" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="p != null" />
    <mutant id="mutant_6616" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="true" />
    <mutant id="mutant_6617" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="false" />
    <mutant id="mutant_6618" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="(p.path) == o" />
    <mutant id="mutant_6619" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.setPathCapacity(int,int)" from="(p != null) &amp;&amp; ((p.path) == o)" to="(p != null) || ((p.path) == o)" />
    <mutant id="mutant_6610" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="newCapacity &gt; 0" />
    <mutant id="mutant_6611" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="(newCapacity &lt; capacity) || (newCapacity &gt; 0)" />
    <mutant id="mutant_6612" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="true" />
    <mutant id="mutant_6613" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="false" />
    <mutant id="mutant_6614" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.ensurePathCapacity(int,int)" from="(newCapacity &lt; capacity) &amp;&amp; (newCapacity &gt; 0)" to="newCapacity &lt; capacity" />
    <mutant id="mutant_6690" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) != ch) &amp;&amp; ((b.matches) != ch)" to="((a.matches) != ch) || ((b.matches) != ch)" />
    <mutant id="mutant_5360" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="true" />
    <mutant id="mutant_6691" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) != ch) &amp;&amp; ((b.matches) != ch)" to="true" />
    <mutant id="mutant_5361" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="false" />
    <mutant id="mutant_6692" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) != ch) &amp;&amp; ((b.matches) != ch)" to="false" />
    <mutant id="mutant_5362" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="advertisedOld.equals(ObjectId.zeroId())" />
    <mutant id="mutant_6693" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) != ch) &amp;&amp; ((b.matches) != ch)" to="(a.matches) != ch" />
    <mutant id="mutant_5363" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="true" />
    <mutant id="mutant_6694" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="(!(a.hasId())) || (!(b.hasId()))" to="(!(a.hasId())) &amp;&amp; (!(b.hasId()))" />
    <mutant id="mutant_4032" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="indexIter != null" />
    <mutant id="mutant_4031" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="false" />
    <mutant id="mutant_4030" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="true" />
    <mutant id="mutant_4029" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="!(includeUntracked)" />
    <mutant id="mutant_4028" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="((indexIter == null) &amp;&amp; (headIter == null)) || (!(includeUntracked))" />
    <mutant id="mutant_4027" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null)) &amp;&amp; (!(includeUntracked))" to="(indexIter == null) &amp;&amp; (headIter == null)" />
    <mutant id="mutant_4026" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="(indexIter == null)" />
    <mutant id="mutant_4025" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="false" />
    <mutant id="mutant_4024" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="true" />
    <mutant id="mutant_4023" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="(headIter == null)" />
    <mutant id="mutant_4022" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="((indexIter == null) &amp;&amp; (headIter == null))" to="((indexIter == null) || (headIter == null))" />
    <mutant id="mutant_5353" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="(rru.isExpectingOldObjectId()) || (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" />
    <mutant id="mutant_6684" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="hasConflict" />
    <mutant id="mutant_5354" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="!(rru.getExpectedOldObjectId().equals(advertisedOld))" />
    <mutant id="mutant_6685" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="hasConflict &amp;&amp; (fastMinHasMatch)" />
    <mutant id="mutant_5355" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="true" />
    <mutant id="mutant_6686" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="(hasConflict &amp;&amp; (fastMinHasMatch)) || ((dfConflict) == null)" />
    <mutant id="mutant_5356" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="false" />
    <mutant id="mutant_6687" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="(dfConflict) == null" />
    <mutant id="mutant_5357" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(rru.isExpectingOldObjectId()) &amp;&amp; (!(rru.getExpectedOldObjectId().equals(advertisedOld)))" to="rru.isExpectingOldObjectId()" />
    <mutant id="mutant_6688" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="true" />
    <mutant id="mutant_5358" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="(advertisedOld.equals(ObjectId.zeroId())) &amp;&amp; (rru.isDelete())" />
    <mutant id="mutant_6689" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch)) &amp;&amp; ((dfConflict) == null)" to="false" />
    <mutant id="mutant_5359" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(advertisedOld.equals(ObjectId.zeroId())) || (rru.isDelete())" to="rru.isDelete()" />
    <mutant id="mutant_6680" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="(hasConflict || (fastMinHasMatch))" />
    <mutant id="mutant_5350" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="true" />
    <mutant id="mutant_6681" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="(fastMinHasMatch)" />
    <mutant id="mutant_5351" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="false" />
    <mutant id="mutant_6682" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="true" />
    <mutant id="mutant_5352" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="(!(received)) &amp;&amp; ((nonceGenerator) == null)" />
    <mutant id="mutant_6683" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(hasConflict &amp;&amp; (fastMinHasMatch))" to="false" />
    <mutant id="mutant_4021" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="false" />
    <mutant id="mutant_4020" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="true" />
    <mutant id="mutant_4018" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="indexIter != null" />
    <mutant id="mutant_4017" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="(indexIter != null) || (!(indexIter.getDirCacheEntry().isMerged()))" />
    <mutant id="mutant_4016" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="false" />
    <mutant id="mutant_4015" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="true" />
    <mutant id="mutant_4014" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="(head.getObjectId()) == null" />
    <mutant id="mutant_4013" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="(head == null) &amp;&amp; ((head.getObjectId()) == null)" />
    <mutant id="mutant_4012" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="head == null" />
    <mutant id="mutant_4011" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="false" />
    <mutant id="mutant_5342" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="false" />
    <mutant id="mutant_6673" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" />
    <mutant id="mutant_5343" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="(sentNonce) == null" />
    <mutant id="mutant_6674" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="(!(org.eclipse.jgit.treewalk.NameConflictTreeWalk.isTree(minRef)))" />
    <mutant id="mutant_5344" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="((sentNonce) == null) || ((nonceGenerator) != null)" />
    <mutant id="mutant_6675" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))" />
    <mutant id="mutant_5345" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="true" />
    <mutant id="mutant_6676" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) || (NameConflictTreeWalk.nameEqual(t, minRef))" />
    <mutant id="mutant_5346" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="false" />
    <mutant id="mutant_6677" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="true" />
    <mutant id="mutant_5347" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.sentNonce()" from="((sentNonce) == null) &amp;&amp; ((nonceGenerator) != null)" to="(nonceGenerator) != null" />
    <mutant id="mutant_6678" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="false" />
    <mutant id="mutant_5348" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="(nonceGenerator) == null" />
    <mutant id="mutant_6679" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(t, minRef))" to="org.eclipse.jgit.treewalk.NameConflictTreeWalk.nameEqual(t, minRef)" />
    <mutant id="mutant_4019" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (!(indexIter.getDirCacheEntry().isMerged()))" to="!(indexIter.getDirCacheEntry().isMerged())" />
    <mutant id="mutant_5349" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.build()" from="(!(received)) || ((nonceGenerator) == null)" to="!(received)" />
    <mutant id="mutant_6670" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) || (!(NameConflictTreeWalk.isTree(minRef))))" />
    <mutant id="mutant_5340" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) &amp;&amp; ((s.charAt(header.length())) != ' ')" />
    <mutant id="mutant_6671" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="true" />
    <mutant id="mutant_5341" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="true" />
    <mutant id="mutant_6672" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t))) &amp;&amp; (!(NameConflictTreeWalk.isTree(minRef))))" to="false" />
    <mutant id="mutant_4010" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="true" />
    <mutant id="mutant_4007" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="dcIter != null" />
    <mutant id="mutant_5339" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="(s.charAt(header.length())) != ' '" />
    <mutant id="mutant_4006" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="(stashCommit.getParentCount()) == 3" />
    <mutant id="mutant_4005" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="(applyUntracked) || ((stashCommit.getParentCount()) == 3)" />
    <mutant id="mutant_4004" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="applyUntracked" />
    <mutant id="mutant_4003" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="false" />
    <mutant id="mutant_4002" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(applyUntracked) &amp;&amp; ((stashCommit.getParentCount()) == 3)" to="true" />
    <mutant id="mutant_4001" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="(stashCommit.getParentCount()) &gt; 3" />
    <mutant id="mutant_4000" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="false" />
    <mutant id="mutant_5331" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="hasTz || (!hasWhen)" />
    <mutant id="mutant_6662" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="false" />
    <mutant id="mutant_5332" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="hasTz" />
    <mutant id="mutant_6663" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))" />
    <mutant id="mutant_5333" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="((s.length()) &lt;= (header.length()))" />
    <mutant id="mutant_6664" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="org.eclipse.jgit.treewalk.NameConflictTreeWalk.nameEqual(minRef, t)" />
    <mutant id="mutant_5334" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="(!(s.startsWith(header)))" />
    <mutant id="mutant_6665" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="(fastMinHasMatch)" />
    <mutant id="mutant_5335" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="true" />
    <mutant id="mutant_6666" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="true" />
    <mutant id="mutant_5336" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="false" />
    <mutant id="mutant_6667" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="false" />
    <mutant id="mutant_4009" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="(dcIter != null) || (dcIter.idEqual(cIter))" />
    <mutant id="mutant_5337" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header))))" to="(((s.length()) &lt;= (header.length())) &amp;&amp; (!(s.startsWith(header))))" />
    <mutant id="mutant_6668" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="(org.eclipse.jgit.treewalk.NameConflictTreeWalk.isTree(t))" />
    <mutant id="mutant_4008" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.resetIndex(org.eclipse.jgit.revwalk.RevTree)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="dcIter.idEqual(cIter)" />
    <mutant id="mutant_5338" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="(((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))) || ((s.charAt(header.length())) != ' ')" to="((s.length()) &lt;= (header.length())) || (!(s.startsWith(header)))" />
    <mutant id="mutant_6669" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(t)))" to="((fastMinHasMatch) || (NameConflictTreeWalk.isTree(t)))" />
    <mutant id="mutant_6660" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) || (NameConflictTreeWalk.nameEqual(minRef, t))" />
    <mutant id="mutant_5330" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="false" />
    <mutant id="mutant_6661" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t)))) &amp;&amp; (NameConflictTreeWalk.nameEqual(minRef, t))" to="true" />
    <mutant id="mutant_5328" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="!hasWhen" />
    <mutant id="mutant_6659" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" />
    <mutant id="mutant_5329" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; (!hasWhen)" to="true" />
    <mutant id="mutant_5320" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="true" />
    <mutant id="mutant_6651" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="true" />
    <mutant id="mutant_5321" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="false" />
    <mutant id="mutant_6652" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="false" />
    <mutant id="mutant_5322" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(whenBegin &lt; 0) || ((raw[whenBegin]) != ' ')" to="(raw[whenBegin]) != ' '" />
    <mutant id="mutant_6653" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="((fastMinHasMatch) || (NameConflictTreeWalk.isTree(minRef)))" />
    <mutant id="mutant_5323" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="true" />
    <mutant id="mutant_6654" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef)))" to="(org.eclipse.jgit.treewalk.NameConflictTreeWalk.isTree(minRef))" />
    <mutant id="mutant_5324" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="false" />
    <mutant id="mutant_6655" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) || (!(NameConflictTreeWalk.isTree(t))))" />
    <mutant id="mutant_5325" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="hasTz || hasWhen" />
    <mutant id="mutant_6656" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="true" />
    <mutant id="mutant_5326" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="hasTz" />
    <mutant id="mutant_6657" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="false" />
    <mutant id="mutant_5327" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="hasTz &amp;&amp; hasWhen" to="hasWhen" />
    <mutant id="mutant_6658" viable="true" in="org.eclipse.jgit.treewalk.NameConflictTreeWalk.fastMin()" from="(((fastMinHasMatch) &amp;&amp; (NameConflictTreeWalk.isTree(minRef))) &amp;&amp; (!(NameConflictTreeWalk.isTree(t))))" to="(!(org.eclipse.jgit.treewalk.NameConflictTreeWalk.isTree(t)))" />
    <mutant id="mutant_4076" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="true" />
    <mutant id="mutant_4075" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))" />
    <mutant id="mutant_4074" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="(!(diff.getModified().isEmpty()))" />
    <mutant id="mutant_4073" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="false" />
    <mutant id="mutant_4072" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="true" />
    <mutant id="mutant_4071" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) &amp;&amp; (!(diff.getModified().isEmpty())))" />
    <mutant id="mutant_4070" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty())))" to="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" />
    <mutant id="mutant_4069" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) &amp;&amp; (!(diff.getMissing().isEmpty())))" />
    <mutant id="mutant_4068" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="(!(diff.getMissing().isEmpty()))" />
    <mutant id="mutant_4067" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="false" />
    <mutant id="mutant_4066" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="true" />
    <mutant id="mutant_5397" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!(o instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_5398" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="(!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_5399" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n)))))" to="!(walk.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(o)), ((org.eclipse.jgit.revwalk.RevCommit)(n))))" />
    <mutant id="mutant_5390" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="!(AnyObjectId.equals(oldId, newId))" />
    <mutant id="mutant_5391" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="((type) == (ReceiveCommand.Type.UPDATE)) || (!(AnyObjectId.equals(oldId, newId)))" />
    <mutant id="mutant_5392" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="(type) == (ReceiveCommand.Type.UPDATE)" />
    <mutant id="mutant_5393" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) &amp;&amp; (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" />
    <mutant id="mutant_5394" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!(n instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_5395" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="true" />
    <mutant id="mutant_5396" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((!(o instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(n instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="false" />
    <mutant id="mutant_4065" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty())))" to="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" />
    <mutant id="mutant_4064" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="(!(diff.getRemoved().isEmpty()))" />
    <mutant id="mutant_4063" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" />
    <mutant id="mutant_4062" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="false" />
    <mutant id="mutant_4061" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="true" />
    <mutant id="mutant_4060" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty())))" to="(((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) &amp;&amp; (!(diff.getRemoved().isEmpty())))" />
    <mutant id="mutant_4059" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" to="(!(diff.getAdded().isEmpty()))" />
    <mutant id="mutant_4058" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" to="false" />
    <mutant id="mutant_4057" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" to="true" />
    <mutant id="mutant_4056" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty())))" to="((!(diff.getAdded().isEmpty())) &amp;&amp; (!(diff.getChanged().isEmpty())))" />
    <mutant id="mutant_4055" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty()))" to="false" />
    <mutant id="mutant_5386" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="false" />
    <mutant id="mutant_5387" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="rru.hasTrackingRefUpdate()" />
    <mutant id="mutant_5388" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="true" />
    <mutant id="mutant_5389" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.updateType(org.eclipse.jgit.revwalk.RevWalk)" from="((type) == (ReceiveCommand.Type.UPDATE)) &amp;&amp; (!(AnyObjectId.equals(oldId, newId)))" to="false" />
    <mutant id="mutant_27" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="false" />
    <mutant id="mutant_26" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="true" />
    <mutant id="mutant_29" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="(a == null) || (b == null)" />
    <mutant id="mutant_5380" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="false" />
    <mutant id="mutant_28" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="a == null" />
    <mutant id="mutant_5381" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="(status == (RemoteRefUpdate.Status.UP_TO_DATE))" />
    <mutant id="mutant_5382" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="(status == (RemoteRefUpdate.Status.OK))" />
    <mutant id="mutant_5383" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="(status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK))" />
    <mutant id="mutant_5384" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="(rru.hasTrackingRefUpdate()) || ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" />
    <mutant id="mutant_5385" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="(rru.hasTrackingRefUpdate()) &amp;&amp; ((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="true" />
    <mutant id="mutant_4054" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty()))" to="true" />
    <mutant id="mutant_4053" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty()))" to="(!(wtEdits.isEmpty())) &amp;&amp; (!(wtDeletes.isEmpty()))" />
    <mutant id="mutant_21" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="aPos &lt; aEnd" />
    <mutant id="mutant_4052" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(!(wtEdits.isEmpty())) || (!(wtDeletes.isEmpty()))" to="!(wtEdits.isEmpty())" />
    <mutant id="mutant_20" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="(aPos &lt; aEnd) || (bPos &lt; bEnd)" />
    <mutant id="mutant_4051" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="wtIter == null" />
    <mutant id="mutant_23" viable="false" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="true" />
    <mutant id="mutant_4050" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="headIter != null" />
    <mutant id="mutant_22" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="bPos &lt; bEnd" />
    <mutant id="mutant_25" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="(a == null) &amp;&amp; (b == null)" to="b == null" />
    <mutant id="mutant_24" viable="false" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="false" />
    <mutant id="mutant_4049" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="false" />
    <mutant id="mutant_4048" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="true" />
    <mutant id="mutant_4047" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(wtIter == null) &amp;&amp; (headIter != null)" to="(wtIter == null) || (headIter != null)" />
    <mutant id="mutant_4046" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="indexIter == null" />
    <mutant id="mutant_4045" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="false" />
    <mutant id="mutant_4044" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="true" />
    <mutant id="mutant_5375" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="true" />
    <mutant id="mutant_5376" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="false" />
    <mutant id="mutant_5377" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="(!fastForward) || (!(rru.isForceUpdate()))" />
    <mutant id="mutant_5378" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) &amp;&amp; (status == (RemoteRefUpdate.Status.OK)))" />
    <mutant id="mutant_5379" viable="true" in="org.eclipse.jgit.transport.PushProcess.updateTrackingRefs()" from="((status == (RemoteRefUpdate.Status.UP_TO_DATE)) || (status == (RemoteRefUpdate.Status.OK)))" to="true" />
    <mutant id="mutant_16" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="e != null" />
    <mutant id="mutant_15" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="(e != null) || ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" />
    <mutant id="mutant_18" viable="false" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="true" />
    <mutant id="mutant_17" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="(e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0" />
    <mutant id="mutant_5370" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="true" />
    <mutant id="mutant_5371" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="false" />
    <mutant id="mutant_19" viable="false" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(e != null) &amp;&amp; ((e.pathCompare(nameBuf, prefixLen, nameLen, org.eclipse.jgit.lib.FileMode.REGULAR_FILE)) &lt; 0)" to="false" />
    <mutant id="mutant_5372" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) &amp;&amp; (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" />
    <mutant id="mutant_5373" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="!(rru.isForceUpdate())" />
    <mutant id="mutant_5374" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="(!fastForward) &amp;&amp; (!(rru.isForceUpdate()))" to="!fastForward" />
    <mutant id="mutant_4043" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="headIter == null" />
    <mutant id="mutant_4042" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter == null) &amp;&amp; (headIter == null)" to="(indexIter == null) || (headIter == null)" />
    <mutant id="mutant_10" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="((LeafBucket.MAX_SIZE) &lt;= (cnt)) || (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_4041" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="headIter != null" />
    <mutant id="mutant_4040" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="false" />
    <mutant id="mutant_12" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="false" />
    <mutant id="mutant_11" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="true" />
    <mutant id="mutant_14" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_13" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((LeafBucket.MAX_SIZE) &lt;= (cnt)) &amp;&amp; (((prefixLen) + 2) &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="(LeafBucket.MAX_SIZE) &lt;= (cnt)" />
    <mutant id="mutant_4039" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="true" />
    <mutant id="mutant_4038" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="(headIter != null) || (wtIter.idEqual(headIter))" />
    <mutant id="mutant_4037" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(headIter != null) &amp;&amp; (wtIter.idEqual(headIter))" to="wtIter.idEqual(headIter)" />
    <mutant id="mutant_4036" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="false" />
    <mutant id="mutant_4035" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="true" />
    <mutant id="mutant_4034" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="(indexIter != null) || (wtIter.idEqual(indexIter))" />
    <mutant id="mutant_4033" viable="true" in="org.eclipse.jgit.api.StashCreateCommand.call()" from="(indexIter != null) &amp;&amp; (wtIter.idEqual(indexIter))" to="wtIter.idEqual(indexIter)" />
    <mutant id="mutant_5364" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="false" />
    <mutant id="mutant_6695" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="(!(a.hasId())) || (!(b.hasId()))" to="true" />
    <mutant id="mutant_5365" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_6696" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="(!(a.hasId())) || (!(b.hasId()))" to="false" />
    <mutant id="mutant_5366" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) &amp;&amp; (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" />
    <mutant id="mutant_6697" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="(!(a.hasId())) || (!(b.hasId()))" to="!(a.hasId())" />
    <mutant id="mutant_5367" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit)))" to="(!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_6698" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) == ch) &amp;&amp; ((b.matches) == ch)" to="((a.matches) == ch) || ((b.matches) == ch)" />
    <mutant id="mutant_5368" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="(!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))" />
    <mutant id="mutant_6699" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) == ch) &amp;&amp; ((b.matches) == ch)" to="true" />
    <mutant id="mutant_5369" viable="true" in="org.eclipse.jgit.transport.PushProcess.prepareRemoteUpdates()" from="((!(oldRev instanceof org.eclipse.jgit.revwalk.RevCommit)) || (!(newRev instanceof org.eclipse.jgit.revwalk.RevCommit))) || (!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev)))))" to="!(walker.isMergedInto(((org.eclipse.jgit.revwalk.RevCommit)(oldRev)), ((org.eclipse.jgit.revwalk.RevCommit)(newRev))))" />
    <mutant id="mutant_49" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(b != null)" />
    <mutant id="mutant_48" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="false" />
    <mutant id="mutant_1838" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="((dashg + 5) &lt; (revstr.length()))" />
    <mutant id="mutant_1839" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) || (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" />
    <mutant id="mutant_41" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="(a == null) || (b == null)" />
    <mutant id="mutant_40" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="b == null" />
    <mutant id="mutant_43" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="false" />
    <mutant id="mutant_42" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="true" />
    <mutant id="mutant_45" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="((a != null) || (b != null))" />
    <mutant id="mutant_44" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="a == null" />
    <mutant id="mutant_47" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="true" />
    <mutant id="mutant_46" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(a != null)" />
    <mutant id="mutant_50" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="(a != null) &amp;&amp; (b != null)" />
    <mutant id="mutant_1836" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="true" />
    <mutant id="mutant_1837" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="false" />
    <mutant id="mutant_1834" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="(((dashg + 5) &lt; (revstr.length())) || (0 &lt;= dashg))" />
    <mutant id="mutant_1835" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" to="(0 &lt;= dashg)" />
    <mutant id="mutant_1832" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_1833" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_1830" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_1831" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_38" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="a.getTreeId().equals(b.getTreeId())" />
    <mutant id="mutant_37" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="((a != null) &amp;&amp; (b != null)) || (a.getTreeId().equals(b.getTreeId()))" />
    <mutant id="mutant_39" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="(a != null) &amp;&amp; (b != null)" />
    <mutant id="mutant_1829" viable="true" in="org.eclipse.jgit.lib.Repository.readRevertHead()" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1827" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_1828" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_30" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="(a != null)" />
    <mutant id="mutant_32" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="true" />
    <mutant id="mutant_31" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="((a != null) || (b != null))" />
    <mutant id="mutant_34" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="(b != null)" />
    <mutant id="mutant_33" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null))" to="false" />
    <mutant id="mutant_36" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="false" />
    <mutant id="mutant_35" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.equals(org.eclipse.jgit.notes.NoteBucket,org.eclipse.jgit.notes.NoteBucket)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (a.getTreeId().equals(b.getTreeId()))" to="true" />
    <mutant id="mutant_4099" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="update != null" />
    <mutant id="mutant_1825" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_1826" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_1823" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_1824" viable="true" in="org.eclipse.jgit.lib.Repository.readOrigHead()" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1821" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_1822" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_1820" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_4090" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="((uri) == null) &amp;&amp; ((uri.length()) == 0)" />
    <mutant id="mutant_1818" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_1819" viable="true" in="org.eclipse.jgit.lib.Repository.readCherryPickHead()" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1816" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_1817" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_63" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="false" />
    <mutant id="mutant_4098" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="false" />
    <mutant id="mutant_62" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="true" />
    <mutant id="mutant_4097" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="true" />
    <mutant id="mutant_65" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="(a != null) &amp;&amp; (b != null)" />
    <mutant id="mutant_4096" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="(url != null) &amp;&amp; (update != null)" />
    <mutant id="mutant_64" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(b != null)" />
    <mutant id="mutant_4095" viable="true" in="org.eclipse.jgit.api.SubmoduleInitCommand.call()" from="(url != null) || (update != null)" to="url != null" />
    <mutant id="mutant_67" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="true" />
    <mutant id="mutant_4094" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="false" />
    <mutant id="mutant_66" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="((a != null) &amp;&amp; (b != null)) || (AnyObjectId.equals(a, b))" />
    <mutant id="mutant_4093" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="true" />
    <mutant id="mutant_69" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="AnyObjectId.equals(a, b)" />
    <mutant id="mutant_4092" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="(uri.length()) == 0" />
    <mutant id="mutant_68" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="false" />
    <mutant id="mutant_4091" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="(uri) == null" />
    <mutant id="mutant_70" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="(ours instanceof org.eclipse.jgit.notes.FanoutBucket)" />
    <mutant id="mutant_72" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="((base instanceof org.eclipse.jgit.notes.FanoutBucket) &amp;&amp; (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" />
    <mutant id="mutant_4089" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="(path) == null" />
    <mutant id="mutant_71" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.merge(int,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket,org.eclipse.jgit.notes.InMemoryNoteBucket)" from="((base instanceof org.eclipse.jgit.notes.FanoutBucket) || (ours instanceof org.eclipse.jgit.notes.FanoutBucket))" to="(base instanceof org.eclipse.jgit.notes.FanoutBucket)" />
    <mutant id="mutant_4088" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="false" />
    <mutant id="mutant_1814" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1815" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_1812" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="(absWd == workDir) || (absFile == file)" />
    <mutant id="mutant_1813" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="absFile == file" />
    <mutant id="mutant_1810" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="false" />
    <mutant id="mutant_1811" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="absWd == workDir" />
    <mutant id="mutant_59" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="a == null" />
    <mutant id="mutant_1809" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(absWd == workDir) &amp;&amp; (absFile == file)" to="true" />
    <mutant id="mutant_1807" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))" />
    <mutant id="mutant_1808" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) &amp;&amp; (!(filePath.startsWith(workDirPath)))" />
    <mutant id="mutant_1805" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="true" />
    <mutant id="mutant_1806" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="false" />
    <mutant id="mutant_52" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="((a != null) &amp;&amp; (b != null)) || (AnyObjectId.equals(a.getData(), b.getData()))" />
    <mutant id="mutant_4087" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="true" />
    <mutant id="mutant_51" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="AnyObjectId.equals(a.getData(), b.getData())" />
    <mutant id="mutant_4086" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="((path) == null) &amp;&amp; ((path.length()) == 0)" />
    <mutant id="mutant_54" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="false" />
    <mutant id="mutant_4085" viable="true" in="org.eclipse.jgit.api.SubmoduleAddCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="(path.length()) == 0" />
    <mutant id="mutant_53" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameContent(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a.getData(), b.getData()))" to="true" />
    <mutant id="mutant_4084" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="(!(hasUncommittedChanges)) || (diff.getUntracked().isEmpty())" />
    <mutant id="mutant_56" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="(a == null) || (b == null)" />
    <mutant id="mutant_4083" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="diff.getUntracked().isEmpty()" />
    <mutant id="mutant_55" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="b == null" />
    <mutant id="mutant_4082" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="false" />
    <mutant id="mutant_58" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="false" />
    <mutant id="mutant_4081" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="true" />
    <mutant id="mutant_57" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(a == null) &amp;&amp; (b == null)" to="true" />
    <mutant id="mutant_4080" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(!(hasUncommittedChanges)) &amp;&amp; (diff.getUntracked().isEmpty())" to="!(hasUncommittedChanges)" />
    <mutant id="mutant_4079" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) &amp;&amp; (!(diff.getConflicting().isEmpty()))" />
    <mutant id="mutant_61" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="(a != null)" />
    <mutant id="mutant_4078" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="!(diff.getConflicting().isEmpty())" />
    <mutant id="mutant_60" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.sameNote(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((a != null) &amp;&amp; (b != null))" to="((a != null) || (b != null))" />
    <mutant id="mutant_4077" viable="true" in="org.eclipse.jgit.api.Status(org.eclipse.jgit.lib.IndexDiff)" from="(((((!(diff.getAdded().isEmpty())) || (!(diff.getChanged().isEmpty()))) || (!(diff.getRemoved().isEmpty()))) || (!(diff.getMissing().isEmpty()))) || (!(diff.getModified().isEmpty()))) || (!(diff.getConflicting().isEmpty()))" to="false" />
    <mutant id="mutant_1803" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="((filePath.charAt(workDirPath.length())) != (File.separatorChar))" />
    <mutant id="mutant_1804" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar))) || (!(filePath.startsWith(workDirPath)))" to="!(filePath.startsWith(workDirPath))" />
    <mutant id="mutant_1801" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="false" />
    <mutant id="mutant_1802" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="(((filePath.length()) &lt;= (workDirPath.length())) &amp;&amp; ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" />
    <mutant id="mutant_1800" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="true" />
    <mutant id="mutant_1872" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="(fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())" />
    <mutant id="mutant_1873" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="(ref.startsWith(&quot;ref: refs/&quot;))" />
    <mutant id="mutant_1870" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="false" />
    <mutant id="mutant_1871" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD))" />
    <mutant id="mutant_1878" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="(ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref))" />
    <mutant id="mutant_1879" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="ref != null" />
    <mutant id="mutant_1876" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="false" />
    <mutant id="mutant_1877" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="((ref.startsWith(&quot;ref: refs/&quot;)) &amp;&amp; (ObjectId.isId(ref)))" />
    <mutant id="mutant_1874" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="(ObjectId.isId(ref))" />
    <mutant id="mutant_1875" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="true" />
    <mutant id="mutant_1861" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="false" />
    <mutant id="mutant_1862" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="path.equals(((RepositoryCache.FileKey)(o)).path)" />
    <mutant id="mutant_1860" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="true" />
    <mutant id="mutant_1869" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="true" />
    <mutant id="mutant_1867" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists()))" to="(fs.resolve(dir, &quot;objects&quot;).exists())" />
    <mutant id="mutant_1868" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) &amp;&amp; (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" to="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists())) || (org.eclipse.jgit.lib.RepositoryCache.FileKey.isValidHead(new java.io.File(dir , org.eclipse.jgit.lib.Constants.HEAD)))" />
    <mutant id="mutant_1865" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists()))" to="true" />
    <mutant id="mutant_1866" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists()))" to="false" />
    <mutant id="mutant_1863" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="o instanceof org.eclipse.jgit.lib.RepositoryCache.FileKey" />
    <mutant id="mutant_1864" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isGitRepository(java.io.File,org.eclipse.jgit.util.FS)" from="((fs.resolve(dir, &quot;objects&quot;).exists()) &amp;&amp; (fs.resolve(dir, &quot;refs&quot;).exists()))" to="((fs.resolve(dir, &quot;objects&quot;).exists()) || (fs.resolve(dir, &quot;refs&quot;).exists()))" />
    <mutant id="mutant_1850" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4))" />
    <mutant id="mutant_1851" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))" />
    <mutant id="mutant_1858" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_1859" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.equals(java.lang.Object)" from="(o instanceof RepositoryCache.FileKey) &amp;&amp; (path.equals(((RepositoryCache.FileKey)(o)).path))" to="(o instanceof RepositoryCache.FileKey) || (path.equals(((RepositoryCache.FileKey)(o)).path))" />
    <mutant id="mutant_1856" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_1857" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_1854" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1855" viable="true" in="org.eclipse.jgit.lib.Repository.getRepositoryState()" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_1852" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="true" />
    <mutant id="mutant_1853" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="false" />
    <mutant id="mutant_1849" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" to="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))) || (org.eclipse.jgit.lib.Repository.isAllHex(revstr, (dashg + 4)))" />
    <mutant id="mutant_1840" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="true" />
    <mutant id="mutant_1847" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) || (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" />
    <mutant id="mutant_1848" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="(org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3))))" />
    <mutant id="mutant_1845" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="false" />
    <mutant id="mutant_1846" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" />
    <mutant id="mutant_1843" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="(((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg))" />
    <mutant id="mutant_1844" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 3)))))" to="true" />
    <mutant id="mutant_1841" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="false" />
    <mutant id="mutant_1842" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="((((dashg + 5) &lt; (revstr.length())) &amp;&amp; (0 &lt;= dashg)) &amp;&amp; (org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2)))))" to="(org.eclipse.jgit.lib.Repository.isHex(revstr.charAt((dashg + 2))))" />
    <mutant id="mutant_1894" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="j &lt; (a.length)" />
    <mutant id="mutant_1895" viable="false" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="true" />
    <mutant id="mutant_1892" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="nameStart == 0" />
    <mutant id="mutant_1893" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="(j &lt; (a.length)) || (k &lt; nameEnd)" />
    <mutant id="mutant_1890" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="true" />
    <mutant id="mutant_1891" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="false" />
    <mutant id="mutant_1898" viable="false" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="true" />
    <mutant id="mutant_1899" viable="false" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash &lt; (s.length)) &amp;&amp; ((s[slash]) != '/')" to="false" />
    <mutant id="mutant_1896" viable="false" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="false" />
    <mutant id="mutant_1897" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(j &lt; (a.length)) &amp;&amp; (k &lt; nameEnd)" to="k &lt; nameEnd" />
    <mutant id="mutant_1883" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs))" />
    <mutant id="mutant_1884" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="mustExist || (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" />
    <mutant id="mutant_1881" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="false" />
    <mutant id="mutant_1882" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="(ref != null) || ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" />
    <mutant id="mutant_1880" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.isValidHead(java.io.File)" from="(ref != null) &amp;&amp; ((ref.startsWith(&quot;ref: refs/&quot;)) || (ObjectId.isId(ref)))" to="true" />
    <mutant id="mutant_1889" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="nameStart == (s.length)" />
    <mutant id="mutant_1887" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="mustExist" />
    <mutant id="mutant_1888" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="(nameStart == 0) &amp;&amp; (nameStart == (s.length))" to="(nameStart == 0) || (nameStart == (s.length))" />
    <mutant id="mutant_1885" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="true" />
    <mutant id="mutant_1886" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.open(boolean)" from="mustExist &amp;&amp; (!(org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(path, fs)))" to="false" />
    <mutant id="mutant_602" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="(ptr - start) &lt; 64" />
    <mutant id="mutant_603" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="ptr &lt; end" />
    <mutant id="mutant_604" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="true" />
    <mutant id="mutant_605" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="false" />
    <mutant id="mutant_600" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="true" />
    <mutant id="mutant_601" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.common(long[],int,long[],int)" from="(srcIdx == (srcHash.length)) || (dstIdx == (dstHash.length))" to="false" />
    <mutant id="mutant_606" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((ptr - start) &lt; 64)" to="(ptr &lt; end) || ((ptr - start) &lt; 64)" />
    <mutant id="mutant_607" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="text" />
    <mutant id="mutant_608" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="true" />
    <mutant id="mutant_609" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="false" />
    <mutant id="mutant_613" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="((text &amp;&amp; (c == '\r')) || (ptr &lt; end))" />
    <mutant id="mutant_614" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="(ptr &lt; end)" />
    <mutant id="mutant_615" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="true" />
    <mutant id="mutant_616" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="false" />
    <mutant id="mutant_610" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="(text || (c == '\r'))" />
    <mutant id="mutant_611" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(text &amp;&amp; (c == '\r'))" to="(c == '\r')" />
    <mutant id="mutant_612" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end))" to="(text &amp;&amp; (c == '\r'))" />
    <mutant id="mutant_617" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) || ((raw[ptr]) == '\n')" />
    <mutant id="mutant_618" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="(raw[ptr]) == '\n'" />
    <mutant id="mutant_619" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="true" />
    <mutant id="mutant_624" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="n &lt; remaining" />
    <mutant id="mutant_625" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="true" />
    <mutant id="mutant_626" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="false" />
    <mutant id="mutant_627" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="text" />
    <mutant id="mutant_620" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="false" />
    <mutant id="mutant_621" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)) &amp;&amp; ((raw[ptr]) == '\n')" to="(text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; end)" />
    <mutant id="mutant_622" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="n &lt; 64" />
    <mutant id="mutant_623" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(n &lt; 64) &amp;&amp; (n &lt; remaining)" to="(n &lt; 64) || (n &lt; remaining)" />
    <mutant id="mutant_628" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="true" />
    <mutant id="mutant_629" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="false" />
    <mutant id="mutant_635" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="true" />
    <mutant id="mutant_636" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="false" />
    <mutant id="mutant_637" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) || ((buf[ptr]) == '\n')" />
    <mutant id="mutant_638" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="true" />
    <mutant id="mutant_631" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="(c == '\r')" />
    <mutant id="mutant_632" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="(ptr &lt; cnt)" />
    <mutant id="mutant_633" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="(text &amp;&amp; (c == '\r'))" />
    <mutant id="mutant_634" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt))" to="((text &amp;&amp; (c == '\r')) || (ptr &lt; cnt))" />
    <mutant id="mutant_639" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="false" />
    <mutant id="mutant_630" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="(text &amp;&amp; (c == '\r'))" to="(text || (c == '\r'))" />
    <mutant id="mutant_646" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="dstTooLarge != null" />
    <mutant id="mutant_647" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="((txt.length()) &gt; 0)" />
    <mutant id="mutant_648" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="true" />
    <mutant id="mutant_649" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="false" />
    <mutant id="mutant_642" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="(dstTooLarge != null) || (dstTooLarge.get(dstIdx))" />
    <mutant id="mutant_643" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="true" />
    <mutant id="mutant_644" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="false" />
    <mutant id="mutant_645" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(dstTooLarge != null) &amp;&amp; (dstTooLarge.get(dstIdx))" to="dstTooLarge.get(dstIdx)" />
    <mutant id="mutant_6725" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="((t.matches) == ch)" />
    <mutant id="mutant_6726" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="(!(t.eof()))" />
    <mutant id="mutant_6727" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="((t.matches) == ch) &amp;&amp; (!(t.eof()))" />
    <mutant id="mutant_6728" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="true" />
    <mutant id="mutant_6729" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof()))) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="false" />
    <mutant id="mutant_640" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="(buf[ptr]) == '\n'" />
    <mutant id="mutant_641" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)) &amp;&amp; ((buf[ptr]) == '\n')" to="(text &amp;&amp; (c == '\r')) &amp;&amp; (ptr &lt; cnt)" />
    <mutant id="mutant_6720" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="minRef.eof()" />
    <mutant id="mutant_6721" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="(minRef.eof()) || ((++i) &lt; (trees.length))" />
    <mutant id="mutant_6722" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="(((t.matches) == ch) || (!(t.eof())))" />
    <mutant id="mutant_6723" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="true" />
    <mutant id="mutant_6724" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.enterSubtree()" from="(((t.matches) == ch) &amp;&amp; (!(t.eof())))" to="false" />
    <mutant id="mutant_657" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="(getCommitEditMessageFilePath()) != null" />
    <mutant id="mutant_658" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="(commitMessage) != null" />
    <mutant id="mutant_659" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="true" />
    <mutant id="mutant_653" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="false" />
    <mutant id="mutant_654" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_655" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="!(txt.startsWith(&quot;!&quot;))" />
    <mutant id="mutant_656" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) || (!(txt.startsWith(&quot;!&quot;)))" />
    <mutant id="mutant_6714" viable="false" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="true" />
    <mutant id="mutant_6715" viable="false" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="false" />
    <mutant id="mutant_6716" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="ci &lt; cLen" />
    <mutant id="mutant_6717" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="(++i) &lt; (trees.length)" />
    <mutant id="mutant_6718" viable="false" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="true" />
    <mutant id="mutant_6719" viable="false" in="org.eclipse.jgit.treewalk.TreeWalk.min()" from="(minRef.eof()) &amp;&amp; ((++i) &lt; (trees.length))" to="false" />
    <mutant id="mutant_650" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(!(txt.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_651" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(((txt.length()) &gt; 0) || (!(txt.startsWith(&quot;#&quot;))))" />
    <mutant id="mutant_652" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.startsWith(&quot;!&quot;)))" to="true" />
    <mutant id="mutant_6710" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="FileMode.TREE.equals(t.mode)" />
    <mutant id="mutant_6711" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="(recursive) || (FileMode.TREE.equals(t.mode))" />
    <mutant id="mutant_6712" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="ci &lt; pLen" />
    <mutant id="mutant_6713" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="(ci &lt; cLen) &amp;&amp; (ci &lt; pLen)" to="(ci &lt; cLen) || (ci &lt; pLen)" />
    <mutant id="mutant_668" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" />
    <mutant id="mutant_669" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="((w2) == (b.w2))" />
    <mutant id="mutant_664" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="false" />
    <mutant id="mutant_665" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="(((nibbles) == (b.nibbles)) || ((w1) == (b.w1)))" />
    <mutant id="mutant_666" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="((w1) == (b.w1))" />
    <mutant id="mutant_667" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) || ((w2) == (b.w2)))" />
    <mutant id="mutant_6703" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="(postChildren) || (isSubtree())" />
    <mutant id="mutant_6704" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="isSubtree()" />
    <mutant id="mutant_6705" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="true" />
    <mutant id="mutant_6706" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="false" />
    <mutant id="mutant_6707" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="recursive" />
    <mutant id="mutant_6708" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="true" />
    <mutant id="mutant_6709" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.next()" from="(recursive) &amp;&amp; (FileMode.TREE.equals(t.mode))" to="false" />
    <mutant id="mutant_660" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="false" />
    <mutant id="mutant_661" viable="true" in="org.eclipse.jgit.hooks.CommitMsgHook.canRun()" from="((getCommitEditMessageFilePath()) != null) &amp;&amp; ((commitMessage) != null)" to="((getCommitEditMessageFilePath()) != null) || ((commitMessage) != null)" />
    <mutant id="mutant_662" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="((nibbles) == (b.nibbles))" />
    <mutant id="mutant_663" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1)))" to="true" />
    <mutant id="mutant_6700" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) == ch) &amp;&amp; ((b.matches) == ch)" to="false" />
    <mutant id="mutant_6701" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.idEqual(int,int)" from="((a.matches) == ch) &amp;&amp; ((b.matches) == ch)" to="(a.matches) == ch" />
    <mutant id="mutant_6702" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPostChildren()" from="(postChildren) &amp;&amp; (isSubtree())" to="postChildren" />
    <mutant id="mutant_679" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="true" />
    <mutant id="mutant_675" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="((w3) == (b.w3))" />
    <mutant id="mutant_676" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) || ((w3) == (b.w3)))" />
    <mutant id="mutant_677" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" />
    <mutant id="mutant_678" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3))) &amp;&amp; ((w4) == (b.w4)))" to="((w4) == (b.w4))" />
    <mutant id="mutant_671" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="false" />
    <mutant id="mutant_672" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" />
    <mutant id="mutant_673" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="true" />
    <mutant id="mutant_674" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="(((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2))) &amp;&amp; ((w3) == (b.w3)))" to="false" />
    <mutant id="mutant_670" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.equals(java.lang.Object)" from="((((nibbles) == (b.nibbles)) &amp;&amp; ((w1) == (b.w1))) &amp;&amp; ((w2) == (b.w2)))" to="true" />
    <mutant id="mutant_6527" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="((tw.getRawMode(i)) != dm) &amp;&amp; (!(tw.idEqual(i, dirCache)))" />
    <mutant id="mutant_6528" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="!(ret.isEmpty())" />
    <mutant id="mutant_6529" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="ret.getLast().startsWith(toBeAdded)" />
    <mutant id="mutant_6520" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="i == (dirCache)" />
    <mutant id="mutant_6521" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="true" />
    <mutant id="mutant_6522" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="false" />
    <mutant id="mutant_6523" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="(tw.getRawMode(i)) != dm" />
    <mutant id="mutant_6524" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="true" />
    <mutant id="mutant_6525" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="false" />
    <mutant id="mutant_6526" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((tw.getRawMode(i)) != dm) || (!(tw.idEqual(i, dirCache)))" to="!(tw.idEqual(i, dirCache))" />
    <mutant id="mutant_6516" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="true" />
    <mutant id="mutant_6517" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="false" />
    <mutant id="mutant_6518" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="i == (workingTree)" />
    <mutant id="mutant_6519" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="(i == (dirCache)) &amp;&amp; (i == (workingTree))" />
    <mutant id="mutant_6510" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="false" />
    <mutant id="mutant_6511" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="wi.isEntryIgnored()" />
    <mutant id="mutant_6512" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="honorIgnores" />
    <mutant id="mutant_6513" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="i == (workingTree)" />
    <mutant id="mutant_6514" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="(i == (dirCache)) &amp;&amp; (i == (workingTree))" />
    <mutant id="mutant_6515" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == (dirCache)) || (i == (workingTree))" to="i == (dirCache)" />
    <mutant id="mutant_6505" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="false" />
    <mutant id="mutant_6506" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="(i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))" />
    <mutant id="mutant_6507" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="FileMode.TREE.equals(rmode)" />
    <mutant id="mutant_6508" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="(honorIgnores) || (wi.isEntryIgnored())" />
    <mutant id="mutant_6509" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(honorIgnores) &amp;&amp; (wi.isEntryIgnored())" to="true" />
    <mutant id="mutant_6500" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="(i != (workingTree))" />
    <mutant id="mutant_6501" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="(rmode != (FileMode.TYPE_MISSING))" />
    <mutant id="mutant_6502" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="((i != (workingTree)) || (rmode != (FileMode.TYPE_MISSING)))" />
    <mutant id="mutant_6503" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) || (FileMode.TREE.equals(rmode))" />
    <mutant id="mutant_6504" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING))) &amp;&amp; (FileMode.TREE.equals(rmode))" to="true" />
    <mutant id="mutant_6570" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="a.shouldBeRecursive()" />
    <mutant id="mutant_5240" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="false" />
    <mutant id="mutant_6571" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="(a == (TreeFilter.ALL)) &amp;&amp; (b == (TreeFilter.ALL))" />
    <mutant id="mutant_5241" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="isCheckObjectCollisions()" />
    <mutant id="mutant_6572" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="a == (TreeFilter.ALL)" />
    <mutant id="mutant_5242" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="readCurs.has(tempObjectId)" />
    <mutant id="mutant_6573" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="b == (TreeFilter.ALL)" />
    <mutant id="mutant_5232" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="((bAvail) &gt; 0) || (expectDataAfterPackFooter)" />
    <mutant id="mutant_6563" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) || (b.include(walker))" to="a.include(walker)" />
    <mutant id="mutant_5233" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="vers != 3" />
    <mutant id="mutant_6564" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) || (b.include(walker))" to="true" />
    <mutant id="mutant_5234" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="true" />
    <mutant id="mutant_6565" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) || (b.include(walker))" to="false" />
    <mutant id="mutant_5235" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="false" />
    <mutant id="mutant_6566" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) || (b.include(walker))" to="(a.include(walker)) &amp;&amp; (b.include(walker))" />
    <mutant id="mutant_5236" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="vers != 2" />
    <mutant id="mutant_6567" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="(a.shouldBeRecursive()) &amp;&amp; (b.shouldBeRecursive())" />
    <mutant id="mutant_5237" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(vers != 2) &amp;&amp; (vers != 3)" to="(vers != 2) || (vers != 3)" />
    <mutant id="mutant_6568" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="true" />
    <mutant id="mutant_5238" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="(isCheckObjectCollisions()) || (readCurs.has(tempObjectId))" />
    <mutant id="mutant_6569" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="false" />
    <mutant id="mutant_5239" viable="true" in="org.eclipse.jgit.transport.PackParser.whole(long,int,long)" from="(isCheckObjectCollisions()) &amp;&amp; (readCurs.has(tempObjectId))" to="true" />
    <mutant id="mutant_6560" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="true" />
    <mutant id="mutant_5230" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="(bAvail) &gt; 0" />
    <mutant id="mutant_6561" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="false" />
    <mutant id="mutant_5231" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="expectDataAfterPackFooter" />
    <mutant id="mutant_6562" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="(i == null) &amp;&amp; (!(i.isEntryIgnored()))" />
    <mutant id="mutant_5229" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="false" />
    <mutant id="mutant_5221" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="false" />
    <mutant id="mutant_6552" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="baseDci != null" />
    <mutant id="mutant_5222" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="(maxObjectSizeLimit) &lt; size" />
    <mutant id="mutant_6553" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="((walker.getRawMode(i)) != m) &amp;&amp; (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" />
    <mutant id="mutant_5223" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="((bAvail) != 0) || (!(expectDataAfterPackFooter))" />
    <mutant id="mutant_6554" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="true" />
    <mutant id="mutant_5224" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="(bAvail) != 0" />
    <mutant id="mutant_6555" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="false" />
    <mutant id="mutant_5225" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="true" />
    <mutant id="mutant_6556" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="(walker.getRawMode(i)) != m" />
    <mutant id="mutant_5226" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="false" />
    <mutant id="mutant_6557" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree)))" to="!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.baseTree))" />
    <mutant id="mutant_5227" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) != 0) &amp;&amp; (!(expectDataAfterPackFooter))" to="!(expectDataAfterPackFooter)" />
    <mutant id="mutant_6558" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="i == null" />
    <mutant id="mutant_5228" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="((bAvail) &gt; 0) &amp;&amp; (expectDataAfterPackFooter)" to="true" />
    <mutant id="mutant_6559" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(i == null) || (!(i.isEntryIgnored()))" to="!(i.isEntryIgnored())" />
    <mutant id="mutant_6550" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="true" />
    <mutant id="mutant_5220" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="true" />
    <mutant id="mutant_6551" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="false" />
    <mutant id="mutant_5218" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="(0 &lt; (maxObjectSizeLimit)) || ((maxObjectSizeLimit) &lt; size)" />
    <mutant id="mutant_6549" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="newDci != null" />
    <mutant id="mutant_5219" viable="true" in="org.eclipse.jgit.transport.PackParser.checkIfTooLarge(int,long)" from="(0 &lt; (maxObjectSizeLimit)) &amp;&amp; ((maxObjectSizeLimit) &lt; size)" to="0 &lt; (maxObjectSizeLimit)" />
    <mutant id="mutant_5210" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="false" />
    <mutant id="mutant_6541" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="false" />
    <mutant id="mutant_5211" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="(a != null)" />
    <mutant id="mutant_6542" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="(!(untrackedFolders.isEmpty())) || (untrackedFolders.getLast().startsWith(pathToBeSaved))" />
    <mutant id="mutant_5212" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="((a.position) &lt; (b.position))" />
    <mutant id="mutant_6543" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="(baseDirCache != null) || (newDirCache != null)" />
    <mutant id="mutant_5213" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="(a != null) &amp;&amp; ((a.position) &lt; (b.position))" />
    <mutant id="mutant_6544" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="newDirCache != null" />
    <mutant id="mutant_5214" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="(b == null) &amp;&amp; ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" />
    <mutant id="mutant_6545" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="true" />
    <mutant id="mutant_5215" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="b == null" />
    <mutant id="mutant_6546" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="false" />
    <mutant id="mutant_5216" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="true" />
    <mutant id="mutant_6547" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDirCache != null) &amp;&amp; (newDirCache != null)" to="baseDirCache != null" />
    <mutant id="mutant_5217" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(b == null) || ((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="false" />
    <mutant id="mutant_6548" viable="true" in="org.eclipse.jgit.treewalk.filter.InterIndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(baseDci != null) &amp;&amp; (newDci != null)" to="(baseDci != null) || (newDci != null)" />
    <mutant id="mutant_6540" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="true" />
    <mutant id="mutant_5207" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="a != null" />
    <mutant id="mutant_6538" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="untrackedFolders.getLast().startsWith(pathToBeSaved)" />
    <mutant id="mutant_5208" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="((a != null) || ((a.position) &lt; (b.position)))" />
    <mutant id="mutant_6539" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedFolders.isEmpty())) &amp;&amp; (untrackedFolders.getLast().startsWith(pathToBeSaved))" to="!(untrackedFolders.isEmpty())" />
    <mutant id="mutant_5209" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="((a != null) &amp;&amp; ((a.position) &lt; (b.position)))" to="true" />
    <mutant id="mutant_6530" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="(!(ret.isEmpty())) || (ret.getLast().startsWith(toBeAdded))" />
    <mutant id="mutant_5200" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="false" />
    <mutant id="mutant_6531" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="true" />
    <mutant id="mutant_5201" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="((read(skipBuffer)) != (-1)) &amp;&amp; ((actualSize) != (expectedSize))" />
    <mutant id="mutant_6532" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.getUntrackedFolders()" from="(!(ret.isEmpty())) &amp;&amp; (ret.getLast().startsWith(toBeAdded))" to="false" />
    <mutant id="mutant_5202" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="(actualSize) != (expectedSize)" />
    <mutant id="mutant_6533" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="(!(untrackedParentFolders.isEmpty())) || (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" />
    <mutant id="mutant_5203" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="(a != null) &amp;&amp; (b != null)" />
    <mutant id="mutant_6534" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="!(untrackedParentFolders.isEmpty())" />
    <mutant id="mutant_5204" viable="true" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="b != null" />
    <mutant id="mutant_6535" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="true" />
    <mutant id="mutant_5205" viable="false" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="true" />
    <mutant id="mutant_6536" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="false" />
    <mutant id="mutant_5206" viable="false" in="org.eclipse.jgit.transport.PackParser.firstChildOf(org.eclipse.jgit.transport.PackedObjectInfo)" from="(a != null) || (b != null)" to="false" />
    <mutant id="mutant_6537" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="(!(untrackedParentFolders.isEmpty())) &amp;&amp; (!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;))))" to="!(currentPath.startsWith(((untrackedParentFolders.getFirst()) + &quot;/&quot;)))" />
    <mutant id="mutant_5280" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="false" />
    <mutant id="mutant_5281" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) &amp;&amp; (rawCommands.isEmpty())" />
    <mutant id="mutant_5282" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="((commands == null) || (commands.isEmpty())) || (rawCommands == null)" />
    <mutant id="mutant_5283" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="signature == null" />
    <mutant id="mutant_5284" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="signature.isEmpty()" />
    <mutant id="mutant_5285" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="true" />
    <mutant id="mutant_5286" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="false" />
    <mutant id="mutant_5276" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="true" />
    <mutant id="mutant_5277" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="false" />
    <mutant id="mutant_5278" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="rawCommands.isEmpty()" />
    <mutant id="mutant_5279" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null)) || (rawCommands.isEmpty())" to="true" />
    <mutant id="mutant_5270" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="false" />
    <mutant id="mutant_5271" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="(commands.isEmpty())" />
    <mutant id="mutant_5272" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="((commands == null) &amp;&amp; (commands.isEmpty()))" />
    <mutant id="mutant_5273" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="(((commands == null) || (commands.isEmpty())) &amp;&amp; (rawCommands == null))" />
    <mutant id="mutant_5274" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="((commands == null) || (commands.isEmpty()))" />
    <mutant id="mutant_5275" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(((commands == null) || (commands.isEmpty())) || (rawCommands == null))" to="(rawCommands == null)" />
    <mutant id="mutant_5265" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="false" />
    <mutant id="mutant_6596" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="(prefix.length()) &gt; 0" />
    <mutant id="mutant_5266" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="(nonce == null) &amp;&amp; (nonce.isEmpty())" />
    <mutant id="mutant_6597" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="(prefix != null) || ((prefix.length()) &gt; 0)" />
    <mutant id="mutant_5267" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="nonce == null" />
    <mutant id="mutant_6598" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="true" />
    <mutant id="mutant_5268" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="(commands == null)" />
    <mutant id="mutant_6599" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="false" />
    <mutant id="mutant_5269" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="((commands == null) || (commands.isEmpty()))" to="true" />
    <mutant id="mutant_6590" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="(prefix != null) || ((prefix.length) &gt; 0)" />
    <mutant id="mutant_5260" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="false" />
    <mutant id="mutant_6591" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="true" />
    <mutant id="mutant_5261" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="(pushee == null) &amp;&amp; (pushee.isEmpty())" />
    <mutant id="mutant_6592" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="false" />
    <mutant id="mutant_5262" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="pushee == null" />
    <mutant id="mutant_6593" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="prefix != null" />
    <mutant id="mutant_5263" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="nonce.isEmpty()" />
    <mutant id="mutant_6594" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="(prefix != null) &amp;&amp; ((prefix.length) &gt; 0)" to="(prefix.length) &gt; 0" />
    <mutant id="mutant_5264" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(nonce == null) || (nonce.isEmpty())" to="true" />
    <mutant id="mutant_6595" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="(prefix != null) &amp;&amp; ((prefix.length()) &gt; 0)" to="prefix != null" />
    <mutant id="mutant_5254" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="version.isEmpty()" />
    <mutant id="mutant_6585" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="true" />
    <mutant id="mutant_5255" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="true" />
    <mutant id="mutant_6586" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="false" />
    <mutant id="mutant_5256" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="false" />
    <mutant id="mutant_6587" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="(walker.getRawMode(i)) != m" />
    <mutant id="mutant_5257" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="version == null" />
    <mutant id="mutant_6588" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree))" />
    <mutant id="mutant_5258" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="pushee.isEmpty()" />
    <mutant id="mutant_6589" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter$AnyDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((walker.getRawMode(i)) != m) || (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" to="((walker.getRawMode(i)) != m) &amp;&amp; (!(walker.idEqual(i, org.eclipse.jgit.treewalk.filter.TreeFilter.AnyDiffFilter.baseTree)))" />
    <mutant id="mutant_5259" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(pushee == null) || (pushee.isEmpty())" to="true" />
    <mutant id="mutant_6580" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="e == null" />
    <mutant id="mutant_5250" viable="false" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="true" />
    <mutant id="mutant_6581" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="(e == null) &amp;&amp; (!(e.isSkipWorkTree()))" />
    <mutant id="mutant_5251" viable="false" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="false" />
    <mutant id="mutant_6582" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="true" />
    <mutant id="mutant_5252" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="(o &gt;= 0) || (w != 0)" />
    <mutant id="mutant_6583" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="false" />
    <mutant id="mutant_5253" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(version == null) || (version.isEmpty())" to="(version == null) &amp;&amp; (version.isEmpty())" />
    <mutant id="mutant_6584" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(e == null) || (!(e.isSkipWorkTree()))" to="!(e.isSkipWorkTree())" />
    <mutant id="mutant_5243" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="len != 0" />
    <mutant id="mutant_6574" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="true" />
    <mutant id="mutant_5244" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="true" />
    <mutant id="mutant_6575" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter.create(org.eclipse.jgit.treewalk.filter.TreeFilter,org.eclipse.jgit.treewalk.filter.TreeFilter)" from="(a == (TreeFilter.ALL)) || (b == (TreeFilter.ALL))" to="false" />
    <mutant id="mutant_5245" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="false" />
    <mutant id="mutant_6576" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(i &lt; (a.length)) &amp;&amp; (i &lt; (b.length))" to="(i &lt; (a.length)) || (i &lt; (b.length))" />
    <mutant id="mutant_5246" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="(len != 0) || (len &lt; 4)" />
    <mutant id="mutant_6577" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(i &lt; (a.length)) &amp;&amp; (i &lt; (b.length))" to="true" />
    <mutant id="mutant_5247" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(len != 0) &amp;&amp; (len &lt; 4)" to="len &lt; 4" />
    <mutant id="mutant_6578" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(i &lt; (a.length)) &amp;&amp; (i &lt; (b.length))" to="false" />
    <mutant id="mutant_5248" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="o &gt;= 0" />
    <mutant id="mutant_6579" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(i &lt; (a.length)) &amp;&amp; (i &lt; (b.length))" to="i &lt; (a.length)" />
    <mutant id="mutant_5249" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.formatLength(byte[],int)" from="(o &gt;= 0) &amp;&amp; (w != 0)" to="w != 0" />
    <mutant id="mutant_1719" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="(dst.getObjectId()) != null" />
    <mutant id="mutant_1717" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="false" />
    <mutant id="mutant_1718" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="old != null" />
    <mutant id="mutant_1715" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="(old != null) || ((old.getObjectId()) != null)" />
    <mutant id="mutant_1716" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="true" />
    <mutant id="mutant_1713" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="(old != null) || (old.isSymbolic())" />
    <mutant id="mutant_1714" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; ((old.getObjectId()) != null)" to="(old.getObjectId()) != null" />
    <mutant id="mutant_1711" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="false" />
    <mutant id="mutant_1712" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="old != null" />
    <mutant id="mutant_1710" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="true" />
    <mutant id="mutant_1708" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="checkConflicting" />
    <mutant id="mutant_1709" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(old != null) &amp;&amp; (old.isSymbolic())" to="old.isSymbolic()" />
    <mutant id="mutant_1706" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="true" />
    <mutant id="mutant_1707" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="false" />
    <mutant id="mutant_1704" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="getRefDatabase().isNameConflicting(getName())" />
    <mutant id="mutant_1705" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(checkConflicting) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="(checkConflicting) || (getRefDatabase().isNameConflicting(getName()))" />
    <mutant id="mutant_1702" viable="true" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head != null" />
    <mutant id="mutant_1703" viable="true" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="(head != null) || (head.isSymbolic())" />
    <mutant id="mutant_1700" viable="true" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="true" />
    <mutant id="mutant_1701" viable="false" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="false" />
    <mutant id="mutant_5298" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="(nameEnd &lt; 0) &amp;&amp; ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" />
    <mutant id="mutant_5299" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd &lt; 0) || ((userId.indexOf('&gt;', nameEnd)) &lt; 0)" to="(userId.indexOf('&gt;', nameEnd)) &lt; 0" />
    <mutant id="mutant_5290" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE))" />
    <mutant id="mutant_5291" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="true" />
    <mutant id="mutant_5292" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="false" />
    <mutant id="mutant_5293" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="true" />
    <mutant id="mutant_5294" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="false" />
    <mutant id="mutant_5295" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="o instanceof org.eclipse.jgit.transport.PushCertificateIdent" />
    <mutant id="mutant_5296" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="raw.equals(((PushCertificateIdent)(o)).raw)" />
    <mutant id="mutant_5297" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.equals(java.lang.Object)" from="(o instanceof PushCertificateIdent) &amp;&amp; (raw.equals(((PushCertificateIdent)(o)).raw))" to="(o instanceof PushCertificateIdent) || (raw.equals(((PushCertificateIdent)(o)).raw))" />
    <mutant id="mutant_5287" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(signature == null) || (signature.isEmpty())" to="(signature == null) &amp;&amp; (signature.isEmpty())" />
    <mutant id="mutant_5288" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))" />
    <mutant id="mutant_5289" viable="false" in="org.eclipse.jgit.transport.PushCertificate(java.lang.String,org.eclipse.jgit.transport.PushCertificateIdent,java.lang.String,java.lang.String,org.eclipse.jgit.transport.PushCertificate$NonceStatus,java.util.List,java.lang.String,java.lang.String)" from="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) || (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" to="(!(signature.startsWith(org.eclipse.jgit.transport.PushCertificateParser.BEGIN_SIGNATURE))) &amp;&amp; (!(signature.endsWith(org.eclipse.jgit.transport.PushCertificateParser.END_SIGNATURE)))" />
    <mutant id="mutant_1751" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="true" />
    <mutant id="mutant_1752" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="false" />
    <mutant id="mutant_1750" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="(msg == null) || appendStatus" />
    <mutant id="mutant_1759" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="(c &lt;= '9')" />
    <mutant id="mutant_1757" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="(r.getStorage().isPacked()) || (r.isPeeled())" />
    <mutant id="mutant_1758" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="r.isPeeled()" />
    <mutant id="mutant_1755" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="true" />
    <mutant id="mutant_1756" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="false" />
    <mutant id="mutant_1753" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="appendStatus" />
    <mutant id="mutant_1754" viable="true" in="org.eclipse.jgit.lib.RefWriter.writePackedRefs()" from="(r.getStorage().isPacked()) &amp;&amp; (r.isPeeled())" to="r.getStorage().isPacked()" />
    <mutant id="mutant_1740" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="true" />
    <mutant id="mutant_1741" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="false" />
    <mutant id="mutant_1748" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="!appendStatus" />
    <mutant id="mutant_1749" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="msg == null" />
    <mutant id="mutant_1746" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="false" />
    <mutant id="mutant_1747" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="(msg == null) || (!appendStatus)" />
    <mutant id="mutant_1744" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="msg == null" />
    <mutant id="mutant_1745" viable="true" in="org.eclipse.jgit.lib.RefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="true" />
    <mutant id="mutant_1742" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="oldObj instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_1743" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) || (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" />
    <mutant id="mutant_900" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="false" />
    <mutant id="mutant_901" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="((e.section) != null) || ((e.name) == null)" />
    <mutant id="mutant_902" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="escaped.endsWith(&quot;\&quot;&quot;)" />
    <mutant id="mutant_1739" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (oldObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="newObj instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_907" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="(e.name) != null" />
    <mutant id="mutant_908" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="((e.section) != null) || ((e.name) != null)" />
    <mutant id="mutant_909" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="(e.section) != null" />
    <mutant id="mutant_903" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="true" />
    <mutant id="mutant_904" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="false" />
    <mutant id="mutant_905" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="(escaped.startsWith(&quot;\&quot;&quot;)) || (escaped.endsWith(&quot;\&quot;&quot;))" />
    <mutant id="mutant_906" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="(escaped.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (escaped.endsWith(&quot;\&quot;&quot;))" to="escaped.startsWith(&quot;\&quot;&quot;)" />
    <mutant id="mutant_1730" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="getRefDatabase().isNameConflicting(getName())" />
    <mutant id="mutant_1737" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="false" />
    <mutant id="mutant_1738" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="newObj == oldObj" />
    <mutant id="mutant_1735" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="(newObj == oldObj) || (!(detachingSymbolicRef))" />
    <mutant id="mutant_1736" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="true" />
    <mutant id="mutant_1733" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="false" />
    <mutant id="mutant_1734" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(newObj == oldObj) &amp;&amp; (!(detachingSymbolicRef))" to="!(detachingSymbolicRef)" />
    <mutant id="mutant_1731" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="((oldValue) == null) &amp;&amp; (checkConflicting)" />
    <mutant id="mutant_1732" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="true" />
    <mutant id="mutant_910" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="true" />
    <mutant id="mutant_911" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) != null)" to="false" />
    <mutant id="mutant_912" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="&quot;&quot;.equals(e.prefix)" />
    <mutant id="mutant_913" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="((e.prefix) == null) &amp;&amp; (&quot;&quot;.equals(e.prefix))" />
    <mutant id="mutant_1728" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="(checkConflicting)" />
    <mutant id="mutant_1729" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting)) &amp;&amp; (getRefDatabase().isNameConflicting(getName()))" to="(((oldValue) == null) &amp;&amp; (checkConflicting)) || (getRefDatabase().isNameConflicting(getName()))" />
    <mutant id="mutant_918" viable="false" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="true" />
    <mutant id="mutant_919" viable="false" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="false" />
    <mutant id="mutant_914" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="true" />
    <mutant id="mutant_915" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="false" />
    <mutant id="mutant_916" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.prefix) == null) || (&quot;&quot;.equals(e.prefix))" to="(e.prefix) == null" />
    <mutant id="mutant_917" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="(entryIndex &lt; (entries.size())) || (valueIndex &lt; (values.size()))" />
    <mutant id="mutant_1726" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="true" />
    <mutant id="mutant_1727" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="false" />
    <mutant id="mutant_1724" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="(((oldValue) == null) || (checkConflicting))" />
    <mutant id="mutant_1725" viable="true" in="org.eclipse.jgit.lib.RefUpdate.updateImpl(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.RefUpdate$Store)" from="(((oldValue) == null) &amp;&amp; (checkConflicting))" to="((oldValue) == null)" />
    <mutant id="mutant_1722" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="false" />
    <mutant id="mutant_1723" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="(dst != null) || ((dst.getObjectId()) != null)" />
    <mutant id="mutant_1720" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="dst != null" />
    <mutant id="mutant_1721" viable="true" in="org.eclipse.jgit.lib.RefUpdate.link(java.lang.String)" from="(dst != null) &amp;&amp; ((dst.getObjectId()) != null)" to="true" />
    <mutant id="mutant_921" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="entryIndex &lt; (entries.size())" />
    <mutant id="mutant_922" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="true" />
    <mutant id="mutant_923" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="false" />
    <mutant id="mutant_924" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="valueIndex == (values.size())" />
    <mutant id="mutant_920" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(entryIndex &lt; (entries.size())) &amp;&amp; (valueIndex &lt; (values.size()))" to="valueIndex &lt; (values.size())" />
    <mutant id="mutant_929" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="false" />
    <mutant id="mutant_925" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="entryIndex &lt; (entries.size())" />
    <mutant id="mutant_926" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex == (values.size())) &amp;&amp; (entryIndex &lt; (entries.size()))" to="(valueIndex == (values.size())) || (entryIndex &lt; (entries.size()))" />
    <mutant id="mutant_927" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="(valueIndex &lt; (values.size())) || (entryIndex == (entries.size()))" />
    <mutant id="mutant_928" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="true" />
    <mutant id="mutant_1795" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="isBare()" />
    <mutant id="mutant_1796" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="true" />
    <mutant id="mutant_1793" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="(i + 1) &lt; (revChars.length)" />
    <mutant id="mutant_1794" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="(getDirectory()) == null" />
    <mutant id="mutant_1791" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="true" />
    <mutant id="mutant_1792" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="false" />
    <mutant id="mutant_1790" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="((i + 1) &lt; (revChars.length)) || ((revChars[(i + 1)]) != '{')" />
    <mutant id="mutant_1799" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="(((filePath.length()) &lt;= (workDirPath.length())) || ((filePath.charAt(workDirPath.length())) != (File.separatorChar)))" to="((filePath.length()) &lt;= (workDirPath.length()))" />
    <mutant id="mutant_1797" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="false" />
    <mutant id="mutant_1798" viable="true" in="org.eclipse.jgit.lib.Repository.readCommitMsgFile(java.lang.String)" from="(isBare()) || ((getDirectory()) == null)" to="(isBare()) &amp;&amp; ((getDirectory()) == null)" />
    <mutant id="mutant_932" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="(lastWasMatch || ((e.section) == null))" />
    <mutant id="mutant_933" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="((e.section) == null)" />
    <mutant id="mutant_934" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="true" />
    <mutant id="mutant_935" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="false" />
    <mutant id="mutant_930" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="valueIndex &lt; (values.size())" />
    <mutant id="mutant_931" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="(valueIndex &lt; (values.size())) &amp;&amp; (entryIndex == (entries.size()))" to="entryIndex == (entries.size())" />
    <mutant id="mutant_936" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null))" to="lastWasMatch" />
    <mutant id="mutant_937" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="(lastWasMatch &amp;&amp; ((e.section) == null)) || ((e.subsection) == null)" />
    <mutant id="mutant_938" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="lastWasMatch &amp;&amp; ((e.section) == null)" />
    <mutant id="mutant_939" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="(e.subsection) == null" />
    <mutant id="mutant_1784" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="i == 0" />
    <mutant id="mutant_1785" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="i == (len - 1)" />
    <mutant id="mutant_1782" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="false" />
    <mutant id="mutant_1783" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) &amp;&amp; (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" />
    <mutant id="mutant_1780" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="('A' &lt;= c) &amp;&amp; (c &lt;= 'F')" />
    <mutant id="mutant_1781" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="true" />
    <mutant id="mutant_1788" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="(i == 0) &amp;&amp; (i == (len - 1))" />
    <mutant id="mutant_1789" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((i + 1) &lt; (revChars.length)) &amp;&amp; ((revChars[(i + 1)]) != '{')" to="(revChars[(i + 1)]) != '{'" />
    <mutant id="mutant_1786" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="true" />
    <mutant id="mutant_1787" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(i == 0) || (i == (len - 1))" to="false" />
    <mutant id="mutant_943" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="true" />
    <mutant id="mutant_944" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="false" />
    <mutant id="mutant_945" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="';' == c" />
    <mutant id="mutant_946" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="'#' == c" />
    <mutant id="mutant_940" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="true" />
    <mutant id="mutant_941" viable="true" in="org.eclipse.jgit.lib.Config.unsetSection(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String)" from="(lastWasMatch &amp;&amp; ((e.section) == null)) &amp;&amp; ((e.subsection) == null)" to="false" />
    <mutant id="mutant_942" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="(';' == c) || ('#' == c)" to="(';' == c) &amp;&amp; ('#' == c)" />
    <mutant id="mutant_947" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="(e.section) == null" />
    <mutant id="mutant_948" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="Character.isWhitespace(c)" />
    <mutant id="mutant_949" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="true" />
    <mutant id="mutant_1773" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) &amp;&amp; (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" />
    <mutant id="mutant_1774" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="('A' &lt;= c)" />
    <mutant id="mutant_1771" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="true" />
    <mutant id="mutant_1772" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="false" />
    <mutant id="mutant_1770" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" />
    <mutant id="mutant_1779" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))) || (('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="(('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" />
    <mutant id="mutant_1777" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="false" />
    <mutant id="mutant_1778" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="(('A' &lt;= c) || (c &lt;= 'F'))" />
    <mutant id="mutant_1775" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="(c &lt;= 'F')" />
    <mutant id="mutant_1776" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('A' &lt;= c) &amp;&amp; (c &lt;= 'F'))" to="true" />
    <mutant id="mutant_954" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="true" />
    <mutant id="mutant_955" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="false" />
    <mutant id="mutant_956" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="(value &gt;= (Config.GiB)) || ((value % (Config.GiB)) == 0)" />
    <mutant id="mutant_957" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="(value % (Config.MiB)) == 0" />
    <mutant id="mutant_950" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="false" />
    <mutant id="mutant_951" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.section) == null) &amp;&amp; (Character.isWhitespace(c))" to="((e.section) == null) || (Character.isWhitespace(c))" />
    <mutant id="mutant_952" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="(value % (Config.GiB)) == 0" />
    <mutant id="mutant_953" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.GiB)) &amp;&amp; ((value % (Config.GiB)) == 0)" to="value &gt;= (Config.GiB)" />
    <mutant id="mutant_958" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="true" />
    <mutant id="mutant_959" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="false" />
    <mutant id="mutant_1762" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="true" />
    <mutant id="mutant_1763" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="false" />
    <mutant id="mutant_1760" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="(('0' &lt;= c) || (c &lt;= '9'))" />
    <mutant id="mutant_1761" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" to="('0' &lt;= c)" />
    <mutant id="mutant_1768" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="('a' &lt;= c)" />
    <mutant id="mutant_1769" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="((('0' &lt;= c) &amp;&amp; (c &lt;= '9')) || (('a' &lt;= c) &amp;&amp; (c &lt;= 'f')))" to="(('0' &lt;= c) &amp;&amp; (c &lt;= '9'))" />
    <mutant id="mutant_1766" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="true" />
    <mutant id="mutant_1767" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="false" />
    <mutant id="mutant_1764" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="(('a' &lt;= c) || (c &lt;= 'f'))" />
    <mutant id="mutant_1765" viable="true" in="org.eclipse.jgit.lib.Repository.isHex(char)" from="(('a' &lt;= c) &amp;&amp; (c &lt;= 'f'))" to="(c &lt;= 'f')" />
    <mutant id="mutant_965" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="(value &gt;= (Config.KiB)) || ((value % (Config.KiB)) == 0)" />
    <mutant id="mutant_966" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="value &gt;= (Config.KiB)" />
    <mutant id="mutant_967" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="true" />
    <mutant id="mutant_968" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="false" />
    <mutant id="mutant_961" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="(value &gt;= (Config.MiB)) || ((value % (Config.MiB)) == 0)" />
    <mutant id="mutant_962" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="(value % (Config.KiB)) == 0" />
    <mutant id="mutant_963" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="true" />
    <mutant id="mutant_964" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.KiB)) &amp;&amp; ((value % (Config.KiB)) == 0)" to="false" />
    <mutant id="mutant_969" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="a == null" />
    <mutant id="mutant_960" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value &gt;= (Config.MiB)) &amp;&amp; ((value % (Config.MiB)) == 0)" to="value &gt;= (Config.MiB)" />
    <mutant id="mutant_976" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="b == null" />
    <mutant id="mutant_977" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="true" />
    <mutant id="mutant_978" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="false" />
    <mutant id="mutant_979" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="a == null" />
    <mutant id="mutant_972" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="(a == null) &amp;&amp; (b == null)" />
    <mutant id="mutant_973" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="true" />
    <mutant id="mutant_974" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="false" />
    <mutant id="mutant_975" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="a == null" />
    <mutant id="mutant_970" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="(a == null) || (b == null)" />
    <mutant id="mutant_971" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="b == null" />
    <mutant id="mutant_987" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) || (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" />
    <mutant id="mutant_988" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="true" />
    <mutant id="mutant_989" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="false" />
    <mutant id="mutant_983" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="true" />
    <mutant id="mutant_984" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="false" />
    <mutant id="mutant_985" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="a == null" />
    <mutant id="mutant_986" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="b == null" />
    <mutant id="mutant_980" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="(a == null) || (b == null)" />
    <mutant id="mutant_981" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) &amp;&amp; (b == null)" to="b == null" />
    <mutant id="mutant_982" viable="true" in="org.eclipse.jgit.lib.ConfigLine.eqSameCase(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="(a == null) &amp;&amp; (b == null)" />
    <mutant id="mutant_998" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) || (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" />
    <mutant id="mutant_999" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="true" />
    <mutant id="mutant_994" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="false" />
    <mutant id="mutant_995" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="(org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" />
    <mutant id="mutant_996" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection))" />
    <mutant id="mutant_997" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey)" />
    <mutant id="mutant_990" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)" />
    <mutant id="mutant_991" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" to="org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)" />
    <mutant id="mutant_992" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) || (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" />
    <mutant id="mutant_993" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection)))" to="true" />
    <mutant id="mutant_6604" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="(ap == null) &amp;&amp; (bp == null)" />
    <mutant id="mutant_6605" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="(aPos &lt; aEnd) || (bPos &lt; bEnd)" />
    <mutant id="mutant_6606" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="aPos &lt; aEnd" />
    <mutant id="mutant_6607" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="bPos &lt; bEnd" />
    <mutant id="mutant_6608" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="true" />
    <mutant id="mutant_6609" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="false" />
    <mutant id="mutant_6600" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="true" />
    <mutant id="mutant_6601" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="false" />
    <mutant id="mutant_6602" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="bp == null" />
    <mutant id="mutant_6603" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.alreadyMatch(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ap == null) || (bp == null)" to="ap == null" />
    <mutant id="mutant_6406" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0" />
    <mutant id="mutant_6407" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) || (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" />
    <mutant id="mutant_6408" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="true" />
    <mutant id="mutant_6409" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="false" />
    <mutant id="mutant_6400" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="boundary" />
    <mutant id="mutant_6401" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="!uninteresting" />
    <mutant id="mutant_6402" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="true" />
    <mutant id="mutant_6403" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="false" />
    <mutant id="mutant_6404" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="boundary &amp;&amp; (!uninteresting)" to="boundary || (!uninteresting)" />
    <mutant id="mutant_6405" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)) &amp;&amp; (((g.outputType()) &amp; (Generator.SORT_TOPO)) == 0)" to="walker.hasRevSort(org.eclipse.jgit.revwalk.RevSort.TOPO)" />
    <mutant id="mutant_6450" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="(((in.length) &gt;= 3) || ((in[0]) == ((byte)(239))))" />
    <mutant id="mutant_5120" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="((login) != null)" />
    <mutant id="mutant_6451" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="true" />
    <mutant id="mutant_5121" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="(((login) != null) || ((password) != null))" />
    <mutant id="mutant_6452" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="false" />
    <mutant id="mutant_5119" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="false" />
    <mutant id="mutant_5111" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) || (credentialsProvider != null)" />
    <mutant id="mutant_6442" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="true" />
    <mutant id="mutant_5112" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)" />
    <mutant id="mutant_6443" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="false" />
    <mutant id="mutant_5113" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="channel.isConnected()" />
    <mutant id="mutant_6444" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) &amp;&amp; ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" />
    <mutant id="mutant_5114" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="true" />
    <mutant id="mutant_6445" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) || (ent.getNewPath().equals(oldFilter.getPath()))" />
    <mutant id="mutant_5115" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="false" />
    <mutant id="mutant_6446" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="ent.getNewPath().equals(oldFilter.getPath())" />
    <mutant id="mutant_5116" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="((channel.getExitStatus()) &lt; 0) || (channel.isConnected())" />
    <mutant id="mutant_6447" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="true" />
    <mutant id="mutant_5117" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess.isRunning()" from="((channel.getExitStatus()) &lt; 0) &amp;&amp; (channel.isConnected())" to="(channel.getExitStatus()) &lt; 0" />
    <mutant id="mutant_6448" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="false" />
    <mutant id="mutant_5118" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="true" />
    <mutant id="mutant_6449" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.updateFollowFilter(org.eclipse.jgit.lib.ObjectId[],org.eclipse.jgit.diff.DiffConfig)" from="(org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldFilter.getPath()))" to="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(ent)" />
    <mutant id="mutant_6440" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)" />
    <mutant id="mutant_5110" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="credentialsProvider != null" />
    <mutant id="mutant_6441" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.COPY)" />
    <mutant id="mutant_5108" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="true" />
    <mutant id="mutant_6439" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="diff || (!same)" />
    <mutant id="mutant_5109" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.getSession(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,int)" from="(org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(e)) &amp;&amp; (credentialsProvider != null)" to="false" />
    <mutant id="mutant_5100" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="false" />
    <mutant id="mutant_6431" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="pMode == 0" />
    <mutant id="mutant_5101" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="(!(hc.isBatchMode()))" />
    <mutant id="mutant_6432" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="true" />
    <mutant id="mutant_5102" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="((!(hc.isBatchMode())) &amp;&amp; (!(credentialsProvider.isInteractive())))" />
    <mutant id="mutant_6433" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="false" />
    <mutant id="mutant_5103" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="(credentialsProvider != null) || ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" />
    <mutant id="mutant_6434" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="(pMode == 0) || (myMode != 0)" />
    <mutant id="mutant_5104" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="true" />
    <mutant id="mutant_6435" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="diff" />
    <mutant id="mutant_5105" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="false" />
    <mutant id="mutant_6436" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="true" />
    <mutant id="mutant_5106" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="(!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive()))" />
    <mutant id="mutant_6437" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="false" />
    <mutant id="mutant_5107" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="(credentialsProvider != null) &amp;&amp; ((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="credentialsProvider != null" />
    <mutant id="mutant_6438" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="diff &amp;&amp; (!same)" to="!same" />
    <mutant id="mutant_6430" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(pMode == 0) &amp;&amp; (myMode != 0)" to="myMode != 0" />
    <mutant id="mutant_6428" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="tw.idEqual(i, nParents)" />
    <mutant id="mutant_6429" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="(myMode == pMode) || (tw.idEqual(i, nParents))" />
    <mutant id="mutant_6420" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="true" />
    <mutant id="mutant_6421" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="false" />
    <mutant id="mutant_6422" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="(adds &gt; 0) || ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" />
    <mutant id="mutant_6423" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="(tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter" />
    <mutant id="mutant_6424" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(adds &gt; 0) &amp;&amp; ((tw.getFilter()) instanceof org.eclipse.jgit.revwalk.FollowFilter)" to="adds &gt; 0" />
    <mutant id="mutant_6425" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="true" />
    <mutant id="mutant_6426" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="false" />
    <mutant id="mutant_6427" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(myMode == pMode) &amp;&amp; (tw.idEqual(i, nParents))" to="myMode == pMode" />
    <mutant id="mutant_6417" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="true" />
    <mutant id="mutant_6418" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="false" />
    <mutant id="mutant_6419" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="((tw.getRawMode(0)) == 0) || ((tw.getRawMode(1)) != 0)" />
    <mutant id="mutant_6410" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0" />
    <mutant id="mutant_6411" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="true" />
    <mutant id="mutant_6412" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="false" />
    <mutant id="mutant_6413" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="((--(p.inDegree)) == 0) || (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" />
    <mutant id="mutant_6414" viable="true" in="org.eclipse.jgit.revwalk.TopoSortGenerator.next()" from="((--(p.inDegree)) == 0) &amp;&amp; (((p.flags) &amp; (TopoSortGenerator.TOPO_DELAY)) != 0)" to="(--(p.inDegree)) == 0" />
    <mutant id="mutant_6415" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="(tw.getRawMode(0)) == 0" />
    <mutant id="mutant_6416" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((tw.getRawMode(0)) == 0) &amp;&amp; ((tw.getRawMode(1)) != 0)" to="(tw.getRawMode(1)) != 0" />
    <mutant id="mutant_6490" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="false" />
    <mutant id="mutant_5160" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6491" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="(wi.isEntryIgnored())" />
    <mutant id="mutant_5161" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6492" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="(honorIgnores)" />
    <mutant id="mutant_5162" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="(entry.machine) != null" />
    <mutant id="mutant_6493" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="!((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" />
    <mutant id="mutant_5163" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="(entry.macdef) != null" />
    <mutant id="mutant_6494" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="true" />
    <mutant id="mutant_5164" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="true" />
    <mutant id="mutant_6495" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="false" />
    <mutant id="mutant_5165" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="false" />
    <mutant id="mutant_6496" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="FileMode.TREE.equals(wm)" />
    <mutant id="mutant_5155" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6486" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="true" />
    <mutant id="mutant_5156" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6487" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="false" />
    <mutant id="mutant_5157" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="((entry.macdef) != null) || (entry.complete())" />
    <mutant id="mutant_6488" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="((honorIgnores) || (wi.isEntryIgnored()))" />
    <mutant id="mutant_5158" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="((entry.machine) != null) || (entry.complete())" />
    <mutant id="mutant_6489" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((honorIgnores) &amp;&amp; (wi.isEntryIgnored()))" to="true" />
    <mutant id="mutant_5159" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6480" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="(pos) == (length)" />
    <mutant id="mutant_5150" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6481" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="true" />
    <mutant id="mutant_5151" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6482" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="false" />
    <mutant id="mutant_5152" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="(entry.machine) != null" />
    <mutant id="mutant_6483" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="((storedObj.length) != length) &amp;&amp; ((toFind.length) &lt; length)" />
    <mutant id="mutant_5153" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="(entry.macdef) != null" />
    <mutant id="mutant_6484" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="(storedObj.length) != length" />
    <mutant id="mutant_5154" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6485" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.equals(byte[],byte[],int)" from="((storedObj.length) != length) || ((toFind.length) &lt; length)" to="(toFind.length) &lt; length" />
    <mutant id="mutant_5144" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6475" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="true" />
    <mutant id="mutant_5145" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6476" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="false" />
    <mutant id="mutant_5146" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6477" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="a.shouldBeRecursive()" />
    <mutant id="mutant_5147" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="(entry.password) != null" />
    <mutant id="mutant_6478" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="((pos) == (length)) &amp;&amp; ((data[pos]) == '/')" />
    <mutant id="mutant_5148" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="((entry.machine) != null) || (entry.complete())" />
    <mutant id="mutant_6479" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((pos) == (length)) || ((data[pos]) == '/')" to="(data[pos]) == '/'" />
    <mutant id="mutant_5149" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.machine) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6470" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) &amp;&amp; (b.include(walker))" to="a.include(walker)" />
    <mutant id="mutant_5140" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6471" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) &amp;&amp; (b.include(walker))" to="true" />
    <mutant id="mutant_5141" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6472" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) &amp;&amp; (b.include(walker))" to="false" />
    <mutant id="mutant_5142" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="(entry.login) != null" />
    <mutant id="mutant_6473" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(a.include(walker)) &amp;&amp; (b.include(walker))" to="(a.include(walker)) || (b.include(walker))" />
    <mutant id="mutant_5143" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.password) != null) &amp;&amp; (entry.complete())" to="((entry.password) != null) || (entry.complete())" />
    <mutant id="mutant_6474" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.shouldBeRecursive()" from="(a.shouldBeRecursive()) || (b.shouldBeRecursive())" to="(a.shouldBeRecursive()) &amp;&amp; (b.shouldBeRecursive())" />
    <mutant id="mutant_5133" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="((entry.account) != null) || (entry.complete())" />
    <mutant id="mutant_6464" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="(in[2]) == ((byte)(191))" />
    <mutant id="mutant_5134" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6465" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="isMustExist()" />
    <mutant id="mutant_5135" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="false" />
    <mutant id="mutant_6466" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="true" />
    <mutant id="mutant_5136" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="(entry.account) != null" />
    <mutant id="mutant_6467" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="false" />
    <mutant id="mutant_5137" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.account) != null) &amp;&amp; (entry.complete())" to="entry.complete()" />
    <mutant id="mutant_6468" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="!(repo.getObjectDatabase().exists())" />
    <mutant id="mutant_5138" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="((entry.login) != null) || (entry.complete())" />
    <mutant id="mutant_6469" viable="true" in="org.eclipse.jgit.storage.file.FileRepositoryBuilder.build()" from="(isMustExist()) &amp;&amp; (!(repo.getObjectDatabase().exists()))" to="(isMustExist()) || (!(repo.getObjectDatabase().exists()))" />
    <mutant id="mutant_5139" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.login) != null) &amp;&amp; (entry.complete())" to="true" />
    <mutant id="mutant_6460" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))" />
    <mutant id="mutant_5130" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="false" />
    <mutant id="mutant_6461" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="true" />
    <mutant id="mutant_5131" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="((entry.macdef) != null) || ((entry.macbody) == null)" />
    <mutant id="mutant_6462" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="false" />
    <mutant id="mutant_5132" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="(entry.macbody) == null" />
    <mutant id="mutant_6463" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) &amp;&amp; ((in[2]) == ((byte)(191)))" to="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187)))) || ((in[2]) == ((byte)(191)))" />
    <mutant id="mutant_5122" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null))" to="((password) != null)" />
    <mutant id="mutant_6453" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="((in[0]) == ((byte)(239)))" />
    <mutant id="mutant_5123" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="((login) != null) &amp;&amp; ((password) != null)" />
    <mutant id="mutant_6454" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" to="((in.length) &gt;= 3)" />
    <mutant id="mutant_5124" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="true" />
    <mutant id="mutant_6455" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) || ((in[1]) == ((byte)(187))))" />
    <mutant id="mutant_5125" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="false" />
    <mutant id="mutant_6456" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="(((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239))))" />
    <mutant id="mutant_5126" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="(((login) != null) &amp;&amp; ((password) != null)) || ((machine) != null)" />
    <mutant id="mutant_6457" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="((in[1]) == ((byte)(187)))" />
    <mutant id="mutant_5127" viable="true" in="org.eclipse.jgit.transport.NetRC$NetRCEntry.complete()" from="(((login) != null) &amp;&amp; ((password) != null)) &amp;&amp; ((machine) != null)" to="(machine) != null" />
    <mutant id="mutant_6458" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="true" />
    <mutant id="mutant_5128" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="(entry.macdef) != null" />
    <mutant id="mutant_6459" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.load()" from="((((in.length) &gt;= 3) &amp;&amp; ((in[0]) == ((byte)(239)))) &amp;&amp; ((in[1]) == ((byte)(187))))" to="false" />
    <mutant id="mutant_5129" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="true" />
    <mutant id="mutant_2929" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="false" />
    <mutant id="mutant_2928" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="true" />
    <mutant id="mutant_2927" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="ref.isSymbolic()" />
    <mutant id="mutant_2926" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="0 &lt;= idx" />
    <mutant id="mutant_5199" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="true" />
    <mutant id="mutant_2925" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="false" />
    <mutant id="mutant_2924" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="true" />
    <mutant id="mutant_2923" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="(0 &lt;= idx) || ((cur.ids.get(idx)) == oldLeaf)" />
    <mutant id="mutant_2922" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((cur.ids.get(idx)) == oldLeaf)" to="(cur.ids.get(idx)) == oldLeaf" />
    <mutant id="mutant_2921" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="oldLeaf.isPeeled()" />
    <mutant id="mutant_2920" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="false" />
    <mutant id="mutant_5191" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="true" />
    <mutant id="mutant_5192" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="false" />
    <mutant id="mutant_5193" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="(parent) != null" />
    <mutant id="mutant_5194" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="((parent) != null) || ((parent.nextChild) == null)" />
    <mutant id="mutant_2919" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="true" />
    <mutant id="mutant_5195" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="true" />
    <mutant id="mutant_2918" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="(oldLeaf.isPeeled()) &amp;&amp; ((oldLeaf.getObjectId()) == null)" />
    <mutant id="mutant_5196" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="false" />
    <mutant id="mutant_2917" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.peel(org.eclipse.jgit.lib.Ref)" from="(oldLeaf.isPeeled()) || ((oldLeaf.getObjectId()) == null)" to="(oldLeaf.getObjectId()) == null" />
    <mutant id="mutant_5197" viable="true" in="org.eclipse.jgit.transport.PackParser$DeltaVisit.next()" from="((parent) != null) &amp;&amp; ((parent.nextChild) == null)" to="(parent.nextChild) == null" />
    <mutant id="mutant_2916" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="false" />
    <mutant id="mutant_5198" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="((read(skipBuffer)) != (-1)) || ((actualSize) != (expectedSize))" to="(read(skipBuffer)) != (-1)" />
    <mutant id="mutant_5190" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="(msg != null) || ((msg.length()) &gt; 0)" />
    <mutant id="mutant_2915" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="true" />
    <mutant id="mutant_5188" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="(msg.length()) &gt; 0" />
    <mutant id="mutant_2914" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="(ref != null) || ((ref.getObjectId()) != null)" />
    <mutant id="mutant_5189" viable="true" in="org.eclipse.jgit.transport.OperationResult.addMessages(java.lang.String)" from="(msg != null) &amp;&amp; ((msg.length()) &gt; 0)" to="msg != null" />
    <mutant id="mutant_2913" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="(ref.getObjectId()) != null" />
    <mutant id="mutant_2912" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRefs(java.lang.String)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="ref != null" />
    <mutant id="mutant_2911" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="false" />
    <mutant id="mutant_2910" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="true" />
    <mutant id="mutant_5180" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="false" />
    <mutant id="mutant_5181" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="(value.startsWith(&quot;\&quot;&quot;)) || (value.endsWith(&quot;\&quot;&quot;))" />
    <mutant id="mutant_5182" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="value.startsWith(&quot;\&quot;&quot;)" />
    <mutant id="mutant_2909" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="(idx &lt; (all.size())) || (all.get(idx).getName().startsWith(prefix))" />
    <mutant id="mutant_5183" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="line.startsWith(&quot;#&quot;)" />
    <mutant id="mutant_2908" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="all.get(idx).getName().startsWith(prefix)" />
    <mutant id="mutant_5184" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="(line.length()) == 0" />
    <mutant id="mutant_2907" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(idx &lt; (all.size())) &amp;&amp; (all.get(idx).getName().startsWith(prefix))" to="idx &lt; (all.size())" />
    <mutant id="mutant_5185" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="true" />
    <mutant id="mutant_2906" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="!(b.contains(pack.key, position))" />
    <mutant id="mutant_5186" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="false" />
    <mutant id="mutant_2905" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="false" />
    <mutant id="mutant_5187" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.parse(java.io.InputStream)" from="((line.length()) == 0) || (line.startsWith(&quot;#&quot;))" to="((line.length()) == 0) &amp;&amp; (line.startsWith(&quot;#&quot;))" />
    <mutant id="mutant_2904" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="true" />
    <mutant id="mutant_5177" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="false" />
    <mutant id="mutant_2903" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="(b == null) &amp;&amp; (!(b.contains(pack.key, position)))" />
    <mutant id="mutant_5178" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="value.endsWith(&quot;\&quot;&quot;)" />
    <mutant id="mutant_2902" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.pin(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long)" from="(b == null) || (!(b.contains(pack.key, position)))" to="b == null" />
    <mutant id="mutant_5179" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="(value.startsWith(&quot;\&quot;&quot;)) &amp;&amp; (value.endsWith(&quot;\&quot;&quot;))" to="true" />
    <mutant id="mutant_2901" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="(pack == (last)) &amp;&amp; (noGarbage &amp;&amp; (pack.isGarbage()))" />
    <mutant id="mutant_2900" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="false" />
    <mutant id="mutant_5170" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="false" />
    <mutant id="mutant_5171" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="((batchMode) != null) || (batchMode.booleanValue())" />
    <mutant id="mutant_5172" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="(batchMode) != null" />
    <mutant id="mutant_5173" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="(s.indexOf('*')) &gt;= 0" />
    <mutant id="mutant_5174" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="((s.indexOf('*')) &gt;= 0) &amp;&amp; ((s.indexOf('?')) &gt;= 0)" />
    <mutant id="mutant_5175" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="(s.indexOf('?')) &gt;= 0" />
    <mutant id="mutant_5176" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.isHostPattern(java.lang.String)" from="((s.indexOf('*')) &gt;= 0) || ((s.indexOf('?')) &gt;= 0)" to="true" />
    <mutant id="mutant_5166" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="((entry.macdef) != null) || ((entry.macbody) == null)" />
    <mutant id="mutant_6497" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(FileMode.TREE.equals(wm)) &amp;&amp; (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" to="(FileMode.TREE.equals(wm)) || (!((honorIgnores) &amp;&amp; (wi.isEntryIgnored())))" />
    <mutant id="mutant_5167" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="((entry.macdef) != null) &amp;&amp; ((entry.macbody) == null)" to="(entry.macbody) == null" />
    <mutant id="mutant_6498" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="true" />
    <mutant id="mutant_5168" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="batchMode.booleanValue()" />
    <mutant id="mutant_6499" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((i != (workingTree)) &amp;&amp; (rmode != (FileMode.TYPE_MISSING)))" to="false" />
    <mutant id="mutant_5169" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig$Host.isBatchMode()" from="((batchMode) != null) &amp;&amp; (batchMode.booleanValue())" to="true" />
    <mutant id="mutant_1630" viable="true" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="len &lt; (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2962" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="true" />
    <mutant id="mutant_1631" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="((getName().equals(p.getName())) || (getEmailAddress().equals(p.getEmailAddress())))" />
    <mutant id="mutant_2961" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="(limit) &lt; ((size) + p)" />
    <mutant id="mutant_2960" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="((limit) != 0) || ((limit) &lt; ((size) + p))" />
    <mutant id="mutant_1638" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="true" />
    <mutant id="mutant_1639" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="false" />
    <mutant id="mutant_2969" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="(end &lt; (DeltaIndex.BLKSZ)) &amp;&amp; ((table.length) == 0)" />
    <mutant id="mutant_1636" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="((when) / 1000L) == ((p.when) / 1000L)" />
    <mutant id="mutant_2968" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="false" />
    <mutant id="mutant_1637" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="(getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))" />
    <mutant id="mutant_2967" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="true" />
    <mutant id="mutant_1634" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="false" />
    <mutant id="mutant_2966" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="(size) &lt; (limit)" />
    <mutant id="mutant_1635" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="(getName().equals(p.getName()))" />
    <mutant id="mutant_2965" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="(limit) == 0" />
    <mutant id="mutant_1632" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="(getEmailAddress().equals(p.getEmailAddress()))" />
    <mutant id="mutant_2964" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="((limit) == 0) &amp;&amp; ((size) &lt; (limit))" />
    <mutant id="mutant_1633" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress())))" to="true" />
    <mutant id="mutant_2963" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.writeVarint(long)" from="((limit) == 0) || ((size) &lt; (limit))" to="false" />
    <mutant id="mutant_1629" viable="true" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="1 &lt; (matches.size())" />
    <mutant id="mutant_2951" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="false" />
    <mutant id="mutant_1620" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="false" />
    <mutant id="mutant_2950" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="true" />
    <mutant id="mutant_1627" viable="false" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="false" />
    <mutant id="mutant_2959" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="false" />
    <mutant id="mutant_1628" viable="true" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="(1 &lt; (matches.size())) || (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_2958" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="true" />
    <mutant id="mutant_1625" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) || ((firstObjectId.w1) == (secondObjectId.w1))" />
    <mutant id="mutant_2957" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="(limit) != 0" />
    <mutant id="mutant_1626" viable="false" in="org.eclipse.jgit.lib.ObjectReader.abbreviate(org.eclipse.jgit.lib.AnyObjectId,int)" from="(1 &lt; (matches.size())) &amp;&amp; (len &lt; (Constants.OBJECT_ID_STRING_LENGTH))" to="true" />
    <mutant id="mutant_2956" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="(limit) &lt; ((size) + p)" />
    <mutant id="mutant_1623" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="false" />
    <mutant id="mutant_2955" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="((limit) != 0) || ((limit) &lt; ((size) + p))" />
    <mutant id="mutant_1624" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))" />
    <mutant id="mutant_2954" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="false" />
    <mutant id="mutant_1621" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="(firstObjectId.w1) == (secondObjectId.w1)" />
    <mutant id="mutant_2953" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="true" />
    <mutant id="mutant_1622" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5))) &amp;&amp; ((firstObjectId.w1) == (secondObjectId.w1))" to="true" />
    <mutant id="mutant_2952" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((limit) != 0) &amp;&amp; ((limit) &lt; ((size) + p))" to="(limit) != 0" />
    <mutant id="mutant_1618" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" />
    <mutant id="mutant_1619" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="true" />
    <mutant id="mutant_2949" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="0 &lt; (size)" />
    <mutant id="mutant_2940" viable="false" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="false" />
    <mutant id="mutant_1616" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="((firstObjectId.w5) == (secondObjectId.w5))" />
    <mutant id="mutant_2948" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="(size) &lt; ((used) + length)" />
    <mutant id="mutant_1617" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) &amp;&amp; ((firstObjectId.w5) == (secondObjectId.w5)))" to="(((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4))) || ((firstObjectId.w5) == (secondObjectId.w5)))" />
    <mutant id="mutant_2947" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="(0 &lt; (size)) || ((size) &lt; ((used) + length))" />
    <mutant id="mutant_1614" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="false" />
    <mutant id="mutant_2946" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="false" />
    <mutant id="mutant_1615" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" />
    <mutant id="mutant_2945" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="true" />
    <mutant id="mutant_1612" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) || ((firstObjectId.w4) == (secondObjectId.w4)))" />
    <mutant id="mutant_2944" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="0 &lt; (size)" />
    <mutant id="mutant_1613" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="true" />
    <mutant id="mutant_2943" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="(size) &lt; ((used) + length)" />
    <mutant id="mutant_1610" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="((firstObjectId.w3) == (secondObjectId.w3))" />
    <mutant id="mutant_2942" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(0 &lt; (size)) &amp;&amp; ((size) &lt; ((used) + length))" to="(0 &lt; (size)) || ((size) &lt; ((used) + length))" />
    <mutant id="mutant_1611" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="((((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3))) &amp;&amp; ((firstObjectId.w4) == (secondObjectId.w4)))" to="((firstObjectId.w4) == (secondObjectId.w4))" />
    <mutant id="mutant_2941" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="(ptr &lt; end) || ((pathBuf[ptr]) != '/')" />
    <mutant id="mutant_1609" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="false" />
    <mutant id="mutant_1607" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="(((firstObjectId.w2) == (secondObjectId.w2)) || ((firstObjectId.w3) == (secondObjectId.w3)))" />
    <mutant id="mutant_2939" viable="false" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="true" />
    <mutant id="mutant_1608" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="true" />
    <mutant id="mutant_2938" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="(pathBuf[ptr]) != '/'" />
    <mutant id="mutant_1605" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="(firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)])" />
    <mutant id="mutant_2937" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.nextSlash(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((pathBuf[ptr]) != '/')" to="ptr &lt; end" />
    <mutant id="mutant_1606" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.equals(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId)" from="(((firstObjectId.w2) == (secondObjectId.w2)) &amp;&amp; ((firstObjectId.w3) == (secondObjectId.w3)))" to="((firstObjectId.w2) == (secondObjectId.w2))" />
    <mutant id="mutant_2936" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="(cur != null) || (eq(cur, oldRef))" />
    <mutant id="mutant_1603" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="false" />
    <mutant id="mutant_2935" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="false" />
    <mutant id="mutant_1604" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) || ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" />
    <mutant id="mutant_2934" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="true" />
    <mutant id="mutant_1601" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))" />
    <mutant id="mutant_2933" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="eq(cur, oldRef)" />
    <mutant id="mutant_1602" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))) &amp;&amp; ((firstBuffer[(fi + 19)]) == (secondBuffer[(si + 19)]))" to="true" />
    <mutant id="mutant_2932" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemRefDatabase.compareAndRemove(org.eclipse.jgit.lib.Ref)" from="(cur != null) &amp;&amp; (eq(cur, oldRef))" to="cur != null" />
    <mutant id="mutant_2931" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="detach || (ref.isSymbolic())" />
    <mutant id="mutant_1600" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" />
    <mutant id="mutant_2930" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="detach" />
    <mutant id="mutant_800" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="(msg == null) || (!appendStatus)" />
    <mutant id="mutant_801" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; (!appendStatus)" to="!appendStatus" />
    <mutant id="mutant_802" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="msg == null" />
    <mutant id="mutant_803" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="(msg == null) || appendStatus" />
    <mutant id="mutant_808" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="true" />
    <mutant id="mutant_809" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="false" />
    <mutant id="mutant_804" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="true" />
    <mutant id="mutant_805" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="false" />
    <mutant id="mutant_806" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.setRefLogMessage(java.lang.String,boolean)" from="(msg == null) &amp;&amp; appendStatus" to="appendStatus" />
    <mutant id="mutant_807" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="(((RevCommit)(treeish)).getTree()) != null" />
    <mutant id="mutant_1674" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="false" />
    <mutant id="mutant_1675" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="(RebaseTodoLine.Action.COMMENT.equals(action)) || (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" />
    <mutant id="mutant_1672" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="RebaseTodoLine.Action.COMMENT.equals(newAction)" />
    <mutant id="mutant_1673" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="true" />
    <mutant id="mutant_1670" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="(!(RebaseTodoLine.Action.COMMENT.equals(action))) || (RebaseTodoLine.Action.COMMENT.equals(newAction))" />
    <mutant id="mutant_1671" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(!(RebaseTodoLine.Action.COMMENT.equals(action))) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(newAction))" to="!(RebaseTodoLine.Action.COMMENT.equals(action))" />
    <mutant id="mutant_1678" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="true" />
    <mutant id="mutant_1679" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="false" />
    <mutant id="mutant_1676" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="!(RebaseTodoLine.Action.COMMENT.equals(newAction))" />
    <mutant id="mutant_1677" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(RebaseTodoLine.Action.COMMENT.equals(action)) &amp;&amp; (!(RebaseTodoLine.Action.COMMENT.equals(newAction)))" to="RebaseTodoLine.Action.COMMENT.equals(action)" />
    <mutant id="mutant_811" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="treeish instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_812" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="remote == null" />
    <mutant id="mutant_813" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="(remote == null) &amp;&amp; (mergeRef == null)" />
    <mutant id="mutant_814" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="true" />
    <mutant id="mutant_810" viable="true" in="org.eclipse.jgit.lib.BlobBasedConfig.asTree(org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.AnyObjectId)" from="(treeish instanceof RevCommit) &amp;&amp; ((((RevCommit)(treeish)).getTree()) != null)" to="(treeish instanceof RevCommit) || ((((RevCommit)(treeish)).getTree()) != null)" />
    <mutant id="mutant_819" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="true" />
    <mutant id="mutant_815" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="false" />
    <mutant id="mutant_816" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getRemoteTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="mergeRef == null" />
    <mutant id="mutant_817" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="remote == null" />
    <mutant id="mutant_818" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="(remote == null) &amp;&amp; (mergeRef == null)" />
    <mutant id="mutant_1663" viable="false" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="false" />
    <mutant id="mutant_2995" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="false" />
    <mutant id="mutant_1664" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="nextSpace &lt; lineEnd" />
    <mutant id="mutant_2994" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="true" />
    <mutant id="mutant_1661" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="(tokenCount &lt; 3) || (nextSpace &lt; lineEnd)" />
    <mutant id="mutant_2993" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="lastHash == key" />
    <mutant id="mutant_1662" viable="false" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="true" />
    <mutant id="mutant_2992" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="head != 0" />
    <mutant id="mutant_2991" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="(1024 &lt;= sz) || (u &lt; ((units.length) - 1))" />
    <mutant id="mutant_1660" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="(lineEnd &gt;= 0) || ((buf[lineEnd]) == '\r')" />
    <mutant id="mutant_2990" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="false" />
    <mutant id="mutant_1669" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.parse(java.lang.String)" from="(action.token.equals(token)) || (action.shortToken.equals(token))" to="(action.token.equals(token)) &amp;&amp; (action.shortToken.equals(token))" />
    <mutant id="mutant_1667" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.parse(java.lang.String)" from="(action.token.equals(token)) || (action.shortToken.equals(token))" to="true" />
    <mutant id="mutant_2999" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="o.isEdge()" />
    <mutant id="mutant_1668" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.parse(java.lang.String)" from="(action.token.equals(token)) || (action.shortToken.equals(token))" to="false" />
    <mutant id="mutant_2998" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="o.doNotAttemptDelta()" />
    <mutant id="mutant_1665" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(tokenCount &lt; 3) &amp;&amp; (nextSpace &lt; lineEnd)" to="tokenCount &lt; 3" />
    <mutant id="mutant_2997" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="(o.isEdge()) || (o.doNotAttemptDelta())" to="(o.isEdge()) &amp;&amp; (o.doNotAttemptDelta())" />
    <mutant id="mutant_1666" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.parse(java.lang.String)" from="(action.token.equals(token)) || (action.shortToken.equals(token))" to="action.token.equals(token)" />
    <mutant id="mutant_2996" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="(head != 0) &amp;&amp; (lastHash == key)" to="(head != 0) || (lastHash == key)" />
    <mutant id="mutant_822" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="(encoding) != null" />
    <mutant id="mutant_823" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="true" />
    <mutant id="mutant_824" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="false" />
    <mutant id="mutant_825" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="((encoding) != null) || ((encoding) != (Constants.CHARSET))" />
    <mutant id="mutant_820" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="false" />
    <mutant id="mutant_821" viable="true" in="org.eclipse.jgit.lib.BranchConfig.getTrackingBranch()" from="(remote == null) || (mergeRef == null)" to="mergeRef == null" />
    <mutant id="mutant_826" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.toString()" from="((encoding) != null) &amp;&amp; ((encoding) != (Constants.CHARSET))" to="(encoding) != (Constants.CHARSET)" />
    <mutant id="mutant_827" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="(trueState != null) || (falseState != null)" />
    <mutant id="mutant_828" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="trueState != null" />
    <mutant id="mutant_829" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="true" />
    <mutant id="mutant_1652" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r')" />
    <mutant id="mutant_2984" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="false" />
    <mutant id="mutant_1653" viable="false" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="true" />
    <mutant id="mutant_2983" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="true" />
    <mutant id="mutant_1650" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="((buf[tokenBegin]) == '\r')" />
    <mutant id="mutant_2982" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="0 &lt; (--limit)" />
    <mutant id="mutant_1651" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="tokenBegin &lt;= lineEnd" />
    <mutant id="mutant_2981" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="(resPtr &lt; (res.length)) || (srcPtr &lt; (src.length))" />
    <mutant id="mutant_2980" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="false" />
    <mutant id="mutant_1658" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="true" />
    <mutant id="mutant_1659" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="false" />
    <mutant id="mutant_2989" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="true" />
    <mutant id="mutant_1656" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="lineEnd &gt;= 0" />
    <mutant id="mutant_2988" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="1024 &lt;= sz" />
    <mutant id="mutant_1657" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(lineEnd &gt;= 0) &amp;&amp; ((buf[lineEnd]) == '\r')" to="(buf[lineEnd]) == '\r'" />
    <mutant id="mutant_2987" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(1024 &lt;= sz) &amp;&amp; (u &lt; ((units.length) - 1))" to="u &lt; ((units.length) - 1)" />
    <mutant id="mutant_1654" viable="false" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="false" />
    <mutant id="mutant_2986" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="0 &lt;= srcPtr" />
    <mutant id="mutant_1655" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(tokenBegin &lt;= lineEnd) &amp;&amp; ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="(tokenBegin &lt;= lineEnd) || ((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" />
    <mutant id="mutant_2985" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="(0 &lt;= srcPtr) &amp;&amp; (0 &lt; (--limit))" to="(0 &lt;= srcPtr) || (0 &lt; (--limit))" />
    <mutant id="mutant_833" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="true" />
    <mutant id="mutant_834" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="false" />
    <mutant id="mutant_835" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="val &lt;= (Integer.MAX_VALUE)" />
    <mutant id="mutant_836" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="(Integer.MIN_VALUE) &lt;= val" />
    <mutant id="mutant_830" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="false" />
    <mutant id="mutant_831" viable="true" in="org.eclipse.jgit.lib.Config.getEnum(T[],java.lang.String,java.lang.String,java.lang.String,T)" from="(trueState != null) &amp;&amp; (falseState != null)" to="falseState != null" />
    <mutant id="mutant_832" viable="true" in="org.eclipse.jgit.lib.Config.getInt(java.lang.String,java.lang.String,java.lang.String,int)" from="((Integer.MIN_VALUE) &lt;= val) &amp;&amp; (val &lt;= (Integer.MAX_VALUE))" to="((Integer.MIN_VALUE) &lt;= val) || (val &lt;= (Integer.MAX_VALUE))" />
    <mutant id="mutant_837" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="((r.length()) &gt; 0)" />
    <mutant id="mutant_838" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="(!inquote)" />
    <mutant id="mutant_839" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="true" />
    <mutant id="mutant_1641" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="true" />
    <mutant id="mutant_2973" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="true" />
    <mutant id="mutant_1642" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="false" />
    <mutant id="mutant_2972" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="(bestLen &lt; 4096) || (entryIdx &lt; (entries.length))" />
    <mutant id="mutant_2971" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="(table.length) == 0" />
    <mutant id="mutant_1640" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) &amp;&amp; (((when) / 1000L) == ((p.when) / 1000L))" to="((getName().equals(p.getName())) &amp;&amp; (getEmailAddress().equals(p.getEmailAddress()))) || (((when) / 1000L) == ((p.when) / 1000L))" />
    <mutant id="mutant_2970" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(end &lt; (DeltaIndex.BLKSZ)) || ((table.length) == 0)" to="end &lt; (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_1649" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" />
    <mutant id="mutant_1647" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="false" />
    <mutant id="mutant_2979" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="true" />
    <mutant id="mutant_1648" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) &amp;&amp; ((buf[tokenBegin]) == '\r'))" />
    <mutant id="mutant_2978" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="resPtr &lt; (res.length)" />
    <mutant id="mutant_1645" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="((buf[tokenBegin]) == '\t')" />
    <mutant id="mutant_2977" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="(resPtr &lt; (res.length)) &amp;&amp; (srcPtr &lt; (src.length))" to="srcPtr &lt; (src.length)" />
    <mutant id="mutant_1646" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="((((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t')) || ((buf[tokenBegin]) == '\r'))" to="true" />
    <mutant id="mutant_2976" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="bestLen &lt; 4096" />
    <mutant id="mutant_1643" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="(((buf[tokenBegin]) == ' ') &amp;&amp; ((buf[tokenBegin]) == '\t'))" />
    <mutant id="mutant_2975" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="entryIdx &lt; (entries.length)" />
    <mutant id="mutant_1644" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.nextParsableToken(byte[],int,int)" from="(((buf[tokenBegin]) == ' ') || ((buf[tokenBegin]) == '\t'))" to="((buf[tokenBegin]) == ' ')" />
    <mutant id="mutant_2974" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestLen &lt; 4096) &amp;&amp; (entryIdx &lt; (entries.length))" to="false" />
    <mutant id="mutant_844" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) || ((r.charAt(((r.length()) - 1))) == ' ')" />
    <mutant id="mutant_845" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="(r.charAt(((r.length()) - 1))) == ' '" />
    <mutant id="mutant_846" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="(!inquote) &amp;&amp; ((r.length()) &gt; 0)" />
    <mutant id="mutant_847" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="'\t' == c" />
    <mutant id="mutant_840" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="false" />
    <mutant id="mutant_841" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0))" to="((!inquote) || ((r.length()) &gt; 0))" />
    <mutant id="mutant_842" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="true" />
    <mutant id="mutant_843" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((!inquote) &amp;&amp; ((r.length()) &gt; 0)) &amp;&amp; ((r.charAt(((r.length()) - 1))) == ' ')" to="false" />
    <mutant id="mutant_848" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="' ' == c" />
    <mutant id="mutant_849" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="(' ' == c) &amp;&amp; ('\t' == c)" />
    <mutant id="mutant_855" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="false" />
    <mutant id="mutant_856" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="((';' == c) &amp;&amp; ('#' == c))" />
    <mutant id="mutant_857" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="(';' == c) || ('#' == c)" />
    <mutant id="mutant_858" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="true" />
    <mutant id="mutant_851" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="false" />
    <mutant id="mutant_852" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="('#' == c)" />
    <mutant id="mutant_853" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="(';' == c)" />
    <mutant id="mutant_854" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c))" to="true" />
    <mutant id="mutant_859" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="false" />
    <mutant id="mutant_850" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="true" />
    <mutant id="mutant_866" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="false" />
    <mutant id="mutant_867" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="Character.isLetterOrDigit(((char)(c)))" />
    <mutant id="mutant_868" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="(Character.isLetterOrDigit(((char)(c)))) &amp;&amp; (c == '-')" />
    <mutant id="mutant_869" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="true" />
    <mutant id="mutant_862" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="'\t' == c" />
    <mutant id="mutant_863" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="' ' == c" />
    <mutant id="mutant_864" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="(' ' == c) &amp;&amp; ('\t' == c)" />
    <mutant id="mutant_865" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="true" />
    <mutant id="mutant_1696" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="true" />
    <mutant id="mutant_1697" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="false" />
    <mutant id="mutant_1694" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="result != null" />
    <mutant id="mutant_1695" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)" />
    <mutant id="mutant_1692" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="true" />
    <mutant id="mutant_1693" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="false" />
    <mutant id="mutant_1690" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="slash != (-1)" />
    <mutant id="mutant_1691" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(result != null) || (slash != (-1))" to="(result != null) &amp;&amp; (slash != (-1))" />
    <mutant id="mutant_860" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="((';' == c) || ('#' == c)) &amp;&amp; ('\n' == c)" />
    <mutant id="mutant_861" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="((';' == c) || ('#' == c)) || ('\n' == c)" to="'\n' == c" />
    <mutant id="mutant_1698" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="(source.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (destination.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_1699" viable="true" in="org.eclipse.jgit.lib.RefUpdate.delete(org.eclipse.jgit.revwalk.RevWalk)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head.isSymbolic()" />
    <mutant id="mutant_877" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="'\t' == c" />
    <mutant id="mutant_878" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="' ' == c" />
    <mutant id="mutant_879" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="(' ' == c) &amp;&amp; ('\t' == c)" />
    <mutant id="mutant_873" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="' ' == c" />
    <mutant id="mutant_874" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="(' ' == c) &amp;&amp; ('\t' == c)" />
    <mutant id="mutant_875" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="true" />
    <mutant id="mutant_876" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="false" />
    <mutant id="mutant_1685" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="newComment.startsWith(&quot;#&quot;)" />
    <mutant id="mutant_1686" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="(newComment.trim().length()) == 0" />
    <mutant id="mutant_1683" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="false" />
    <mutant id="mutant_1684" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="newComment.contains(&quot;\r&quot;)" />
    <mutant id="mutant_1681" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="newComment.contains(&quot;\n&quot;)" />
    <mutant id="mutant_1682" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="true" />
    <mutant id="mutant_1680" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="(newComment.contains(&quot;\n&quot;)) || (newComment.contains(&quot;\r&quot;))" to="(newComment.contains(&quot;\n&quot;)) &amp;&amp; (newComment.contains(&quot;\r&quot;))" />
    <mutant id="mutant_870" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="false" />
    <mutant id="mutant_871" viable="true" in="org.eclipse.jgit.lib.Config.readKeyName(org.eclipse.jgit.lib.Config$StringReader)" from="(Character.isLetterOrDigit(((char)(c)))) || (c == '-')" to="c == '-'" />
    <mutant id="mutant_872" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="'\t' == c" />
    <mutant id="mutant_1689" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="((newComment.trim().length()) == 0) &amp;&amp; (newComment.startsWith(&quot;#&quot;))" />
    <mutant id="mutant_1687" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="true" />
    <mutant id="mutant_1688" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setComment(java.lang.String)" from="((newComment.trim().length()) == 0) || (newComment.startsWith(&quot;#&quot;))" to="false" />
    <mutant id="mutant_888" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="'-' == c" />
    <mutant id="mutant_889" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="true" />
    <mutant id="mutant_884" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="false" />
    <mutant id="mutant_885" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="((Character.isLetterOrDigit(((char)(c)))) &amp;&amp; ('.' == c))" />
    <mutant id="mutant_886" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="('.' == c)" />
    <mutant id="mutant_887" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) &amp;&amp; ('-' == c)" />
    <mutant id="mutant_880" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="true" />
    <mutant id="mutant_881" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="(' ' == c) || ('\t' == c)" to="false" />
    <mutant id="mutant_882" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="(Character.isLetterOrDigit(((char)(c))))" />
    <mutant id="mutant_883" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c))" to="true" />
    <mutant id="mutant_899" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="true" />
    <mutant id="mutant_895" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="false" />
    <mutant id="mutant_896" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="(';' == c) &amp;&amp; ('#' == c)" />
    <mutant id="mutant_897" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="(e.section) != null" />
    <mutant id="mutant_898" viable="true" in="org.eclipse.jgit.lib.Config.toText()" from="((e.section) != null) &amp;&amp; ((e.name) == null)" to="(e.name) == null" />
    <mutant id="mutant_891" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="(Character.isLetterOrDigit(((char)(c)))) || ('.' == c)" />
    <mutant id="mutant_892" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="'#' == c" />
    <mutant id="mutant_893" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="';' == c" />
    <mutant id="mutant_894" viable="true" in="org.eclipse.jgit.lib.Config.readValue(org.eclipse.jgit.lib.Config$StringReader,boolean,int)" from="(';' == c) || ('#' == c)" to="true" />
    <mutant id="mutant_890" viable="true" in="org.eclipse.jgit.lib.Config.readSectionName(org.eclipse.jgit.lib.Config$StringReader)" from="((Character.isLetterOrDigit(((char)(c)))) || ('.' == c)) || ('-' == c)" to="false" />
    <mutant id="mutant_6330" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="(walker) == null" />
    <mutant id="mutant_5000" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="false" />
    <mutant id="mutant_6331" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="((walker) == null) &amp;&amp; ((size) &gt; highMark)" />
    <mutant id="mutant_6329" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="((rangeBegin++) &lt; rangeEnd) || (index &lt; (RevObjectList.BLOCK_SIZE))" />
    <mutant id="mutant_6321" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="true" />
    <mutant id="mutant_6322" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="false" />
    <mutant id="mutant_6323" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="(begin--) &gt;= 0" />
    <mutant id="mutant_6324" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="index &gt;= 0" />
    <mutant id="mutant_6325" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="index &lt; (RevObjectList.BLOCK_SIZE)" />
    <mutant id="mutant_6326" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="true" />
    <mutant id="mutant_6327" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="false" />
    <mutant id="mutant_6328" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.applyFlag(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.RevFlag,int,int)" from="((rangeBegin++) &lt; rangeEnd) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="(rangeBegin++) &lt; rangeEnd" />
    <mutant id="mutant_6320" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin--) &gt;= 0) &amp;&amp; (index &gt;= 0)" to="((begin--) &gt;= 0) || (index &gt;= 0)" />
    <mutant id="mutant_6318" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="false" />
    <mutant id="mutant_6319" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="(begin++) &lt; (size())" />
    <mutant id="mutant_6310" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="true" />
    <mutant id="mutant_6311" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="false" />
    <mutant id="mutant_6312" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="pList == null" />
    <mutant id="mutant_6313" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="(pList == null) &amp;&amp; ((pList.length) == 0)" />
    <mutant id="mutant_6314" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(pList == null) || ((pList.length) == 0)" to="(pList.length) == 0" />
    <mutant id="mutant_6315" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="((begin++) &lt; (size())) || (index &lt; (RevObjectList.BLOCK_SIZE))" />
    <mutant id="mutant_6316" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="index &lt; (RevObjectList.BLOCK_SIZE)" />
    <mutant id="mutant_6317" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.indexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((begin++) &lt; (size())) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="true" />
    <mutant id="mutant_6307" viable="false" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="true" />
    <mutant id="mutant_6308" viable="false" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="false" />
    <mutant id="mutant_6309" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="valStart &lt; (raw.length)" />
    <mutant id="mutant_6300" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="n != null" />
    <mutant id="mutant_6301" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="true" />
    <mutant id="mutant_6302" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="false" />
    <mutant id="mutant_6303" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="(n != null) || ((n.commitTime) &gt;= (last.commitTime))" />
    <mutant id="mutant_6304" viable="true" in="org.eclipse.jgit.revwalk.PendingGenerator.next()" from="(n != null) &amp;&amp; ((n.commitTime) &gt;= (last.commitTime))" to="(n.commitTime) &gt;= (last.commitTime)" />
    <mutant id="mutant_6305" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="(raw[valStart]) == ' '" />
    <mutant id="mutant_6306" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valStart &lt; (raw.length)) &amp;&amp; ((raw[valStart]) == ' ')" to="(valStart &lt; (raw.length)) || ((raw[valStart]) == ' ')" />
    <mutant id="mutant_6370" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="(((highMark == 0) || ((size) &lt;= highMark)) || (index &lt; (RevObjectList.BLOCK_SIZE)))" />
    <mutant id="mutant_5040" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="false" />
    <mutant id="mutant_6371" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="((highMark == 0) || ((size) &lt;= highMark))" />
    <mutant id="mutant_5041" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) || (!(askForIsComplete()))" />
    <mutant id="mutant_6372" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="(index &lt; (RevObjectList.BLOCK_SIZE))" />
    <mutant id="mutant_5042" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="(transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))" />
    <mutant id="mutant_6373" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="true" />
    <mutant id="mutant_5043" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="(idxSent == (-1)) &amp;&amp; (idxRecv == (-1))" />
    <mutant id="mutant_6374" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE)))" to="false" />
    <mutant id="mutant_5044" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="idxRecv == (-1)" />
    <mutant id="mutant_6375" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="true" />
    <mutant id="mutant_5034" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="true" />
    <mutant id="mutant_6365" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="(highMark == 0)" />
    <mutant id="mutant_5035" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="false" />
    <mutant id="mutant_6366" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="((highMark == 0) &amp;&amp; ((size) &lt;= highMark))" />
    <mutant id="mutant_5036" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="((transport.isCheckFetchedObjects()) || (!(conn.didFetchTestConnectivity())))" />
    <mutant id="mutant_6367" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="true" />
    <mutant id="mutant_5037" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="(!(conn.didFetchTestConnectivity()))" />
    <mutant id="mutant_6368" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="false" />
    <mutant id="mutant_5038" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="!(askForIsComplete())" />
    <mutant id="mutant_6369" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="((size) &lt;= highMark)" />
    <mutant id="mutant_5039" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity()))) &amp;&amp; (!(askForIsComplete()))" to="true" />
    <mutant id="mutant_6360" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="(highMark == 0) || ((size) &lt;= highMark)" />
    <mutant id="mutant_5030" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="true" />
    <mutant id="mutant_6361" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="true" />
    <mutant id="mutant_5031" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="false" />
    <mutant id="mutant_6362" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="false" />
    <mutant id="mutant_5032" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="(spec.matchSource(src)) || (matched.add(src))" />
    <mutant id="mutant_6363" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="!(c.equals(commitToLoad))" />
    <mutant id="mutant_5033" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="((transport.isCheckFetchedObjects()) &amp;&amp; (!(conn.didFetchTestConnectivity())))" to="(transport.isCheckFetchedObjects())" />
    <mutant id="mutant_6364" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (!(c.equals(commitToLoad)))" to="((highMark == 0) || ((size) &lt;= highMark)) || (!(c.equals(commitToLoad)))" />
    <mutant id="mutant_5023" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="(local == null) &amp;&amp; (!(r.getObjectId().equals(local.getObjectId())))" />
    <mutant id="mutant_6354" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="(highMark &gt; 0) &amp;&amp; ((size) &gt; highMark)" />
    <mutant id="mutant_5024" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="local == null" />
    <mutant id="mutant_6355" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="(highMark == 0)" />
    <mutant id="mutant_5025" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="!(r.getObjectId().equals(local.getObjectId()))" />
    <mutant id="mutant_6356" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="((highMark == 0) &amp;&amp; ((size) &lt;= highMark))" />
    <mutant id="mutant_5026" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="true" />
    <mutant id="mutant_6357" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="true" />
    <mutant id="mutant_5027" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandFetchTags()" from="(local == null) || (!(r.getObjectId().equals(local.getObjectId())))" to="false" />
    <mutant id="mutant_6358" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="false" />
    <mutant id="mutant_5028" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="matched.add(src)" />
    <mutant id="mutant_6359" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark == 0) || ((size) &lt;= highMark))" to="((size) &lt;= highMark)" />
    <mutant id="mutant_5029" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandWildcard(org.eclipse.jgit.transport.RefSpec,java.util.Set)" from="(spec.matchSource(src)) &amp;&amp; (matched.add(src))" to="spec.matchSource(src)" />
    <mutant id="mutant_6350" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="true" />
    <mutant id="mutant_5020" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="true" />
    <mutant id="mutant_6351" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="false" />
    <mutant id="mutant_5021" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="false" />
    <mutant id="mutant_6352" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="(((walker) == null) || (commitToLoad == null)) &amp;&amp; ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" />
    <mutant id="mutant_5022" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate())" />
    <mutant id="mutant_6353" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null)) || ((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="((walker) == null) || (commitToLoad == null)" />
    <mutant id="mutant_5012" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="(!(askFor.isEmpty())) || ((!includedTags) || (!(askForIsComplete())))" />
    <mutant id="mutant_6343" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="(commitToLoad == null)" />
    <mutant id="mutant_5013" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="true" />
    <mutant id="mutant_6344" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="(((walker) == null) &amp;&amp; (commitToLoad == null))" />
    <mutant id="mutant_5014" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="false" />
    <mutant id="mutant_6345" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="((highMark &gt; 0) || ((size) &gt; highMark))" />
    <mutant id="mutant_5015" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="(cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command)" />
    <mutant id="mutant_6346" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="(highMark &gt; 0)" />
    <mutant id="mutant_5016" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD))" />
    <mutant id="mutant_6347" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="true" />
    <mutant id="mutant_5017" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" to="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) || (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command))" />
    <mutant id="mutant_6348" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="false" />
    <mutant id="mutant_5018" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) || (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" />
    <mutant id="mutant_6349" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((highMark &gt; 0) &amp;&amp; ((size) &gt; highMark))" to="((size) &gt; highMark)" />
    <mutant id="mutant_5019" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof TrackingRefUpdate.Command)) &amp;&amp; (!(((TrackingRefUpdate.Command)(cmd)).canForceUpdate()))" to="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (cmd instanceof org.eclipse.jgit.transport.TrackingRefUpdate.Command)" />
    <mutant id="mutant_6340" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="((walker) == null)" />
    <mutant id="mutant_5010" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="!(askFor.isEmpty())" />
    <mutant id="mutant_6341" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="true" />
    <mutant id="mutant_5011" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="(!includedTags) || (!(askForIsComplete()))" />
    <mutant id="mutant_6342" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((walker) == null) || (commitToLoad == null))" to="false" />
    <mutant id="mutant_5009" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="false" />
    <mutant id="mutant_5001" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="!(additionalTags.isEmpty())" />
    <mutant id="mutant_6332" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="true" />
    <mutant id="mutant_5002" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="tagopt == (TagOpt.AUTO_FOLLOW)" />
    <mutant id="mutant_6333" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="false" />
    <mutant id="mutant_5003" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="(!(askForIsComplete()))" />
    <mutant id="mutant_6334" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((walker) == null) || ((size) &gt; highMark)" to="(size) &gt; highMark" />
    <mutant id="mutant_5004" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="((!includedTags) &amp;&amp; (!(askForIsComplete())))" />
    <mutant id="mutant_6335" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="index &lt; (RevObjectList.BLOCK_SIZE)" />
    <mutant id="mutant_5005" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="true" />
    <mutant id="mutant_6336" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="true" />
    <mutant id="mutant_5006" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="false" />
    <mutant id="mutant_6337" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="false" />
    <mutant id="mutant_5007" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="((!includedTags) || (!(askForIsComplete())))" to="(!includedTags)" />
    <mutant id="mutant_6338" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="((size) &lt;= highMark) || (index &lt; (RevObjectList.BLOCK_SIZE))" />
    <mutant id="mutant_5008" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; ((!includedTags) || (!(askForIsComplete())))" to="true" />
    <mutant id="mutant_6339" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((size) &lt;= highMark) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" to="(size) &lt;= highMark" />
    <mutant id="mutant_5081" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="false" />
    <mutant id="mutant_5082" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="credentialsProvider.supports(u, p)" />
    <mutant id="mutant_5083" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="(value != null) || ((value.length()) != 0)" />
    <mutant id="mutant_5084" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="(value.length()) != 0" />
    <mutant id="mutant_2809" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="true" />
    <mutant id="mutant_5085" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="true" />
    <mutant id="mutant_2808" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="bs &lt; wantSize" />
    <mutant id="mutant_5086" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="false" />
    <mutant id="mutant_2807" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="0 &lt; bs" />
    <mutant id="mutant_5087" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.scanResponse(org.eclipse.jgit.transport.http.HttpConnection)" from="(value != null) &amp;&amp; ((value.length()) != 0)" to="value != null" />
    <mutant id="mutant_2806" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="(invalid) &amp;&amp; (isGarbage())" />
    <mutant id="mutant_5088" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="e.getMessage().equals(&quot;Auth cancel&quot;)" />
    <mutant id="mutant_5080" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="true" />
    <mutant id="mutant_2805" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="false" />
    <mutant id="mutant_5078" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="credentialsProvider.get(uri, u, p)" />
    <mutant id="mutant_2804" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="true" />
    <mutant id="mutant_5079" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod.authorize(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialsProvider)" from="(credentialsProvider.supports(u, p)) &amp;&amp; (credentialsProvider.get(uri, u, p))" to="(credentialsProvider.supports(u, p)) || (credentialsProvider.get(uri, u, p))" />
    <mutant id="mutant_2803" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="invalid" />
    <mutant id="mutant_2802" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(invalid) || (isGarbage())" to="isGarbage()" />
    <mutant id="mutant_2801" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="0 &lt;= len" />
    <mutant id="mutant_2800" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="false" />
    <mutant id="mutant_5070" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="false" />
    <mutant id="mutant_5071" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="(eq &lt; 0) &amp;&amp; ((eq + 1) == (auth.length()))" />
    <mutant id="mutant_5072" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="eq &lt; 0" />
    <mutant id="mutant_5073" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="(cnonce != null) || (qop != null)" />
    <mutant id="mutant_5074" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="cnonce != null" />
    <mutant id="mutant_5075" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="qop != null" />
    <mutant id="mutant_5076" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="true" />
    <mutant id="mutant_5077" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(cnonce != null) &amp;&amp; (qop != null)" to="false" />
    <mutant id="mutant_5067" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="Character.isWhitespace(auth.charAt(next))" />
    <mutant id="mutant_6398" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="true" />
    <mutant id="mutant_5068" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="(eq + 1) == (auth.length())" />
    <mutant id="mutant_6399" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="false" />
    <mutant id="mutant_5069" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq &lt; 0) || ((eq + 1) == (auth.length()))" to="true" />
    <mutant id="mutant_6390" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="((r.flags) &amp; (RevWalk.PARSED)) != 0" />
    <mutant id="mutant_5060" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="true" />
    <mutant id="mutant_6391" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="r != null" />
    <mutant id="mutant_5061" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="false" />
    <mutant id="mutant_6392" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="true" />
    <mutant id="mutant_5062" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="(auth.charAt(next)) == ','" />
    <mutant id="mutant_6393" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="false" />
    <mutant id="mutant_5063" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="next &lt; (auth.length())" />
    <mutant id="mutant_6394" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.parseAny(java.lang.Iterable,boolean)" from="(r != null) &amp;&amp; (((r.flags) &amp; (RevWalk.PARSED)) != 0)" to="(r != null) || (((r.flags) &amp; (RevWalk.PARSED)) != 0)" />
    <mutant id="mutant_5064" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="(next &lt; (auth.length())) || (Character.isWhitespace(auth.charAt(next)))" />
    <mutant id="mutant_6395" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="(!boundary) || ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" />
    <mutant id="mutant_5065" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="true" />
    <mutant id="mutant_6396" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="!boundary" />
    <mutant id="mutant_5066" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; (Character.isWhitespace(auth.charAt(next)))" to="false" />
    <mutant id="mutant_6397" viable="true" in="org.eclipse.jgit.revwalk.StartGenerator.next()" from="(!boundary) &amp;&amp; ((walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk)" to="(walker) instanceof org.eclipse.jgit.revwalk.ObjectWalk" />
    <mutant id="mutant_5056" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="&quot;https&quot;.equals(u.getProtocol())" />
    <mutant id="mutant_6387" viable="false" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="true" />
    <mutant id="mutant_5057" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="((u.getPort()) == 443) || (&quot;https&quot;.equals(u.getProtocol()))" />
    <mutant id="mutant_6388" viable="false" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="false" />
    <mutant id="mutant_5058" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="next &lt; (auth.length())" />
    <mutant id="mutant_6389" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="(s != null) || ((s.shift) &gt; 0)" />
    <mutant id="mutant_5059" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(next &lt; (auth.length())) &amp;&amp; ((auth.charAt(next)) == ',')" to="(next &lt; (auth.length())) || ((auth.charAt(next)) == ',')" />
    <mutant id="mutant_6380" viable="true" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="p &lt; (active.size())" />
    <mutant id="mutant_5050" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="false" />
    <mutant id="mutant_6381" viable="true" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="(p &lt; (active.size())) || ((active.get(p).mask) &lt; (flag.mask))" />
    <mutant id="mutant_5051" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="((u.getPort()) == 80) || (&quot;http&quot;.equals(u.getProtocol()))" />
    <mutant id="mutant_6382" viable="false" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="true" />
    <mutant id="mutant_5052" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="&quot;http&quot;.equals(u.getProtocol())" />
    <mutant id="mutant_6383" viable="false" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="false" />
    <mutant id="mutant_5053" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="(u.getPort()) == 443" />
    <mutant id="mutant_6384" viable="true" in="org.eclipse.jgit.revwalk.RevFlagSet.add(org.eclipse.jgit.revwalk.RevFlag)" from="(p &lt; (active.size())) &amp;&amp; ((active.get(p).mask) &lt; (flag.mask))" to="(active.get(p).mask) &lt; (flag.mask)" />
    <mutant id="mutant_5054" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="true" />
    <mutant id="mutant_6385" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="s != null" />
    <mutant id="mutant_5055" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 443) &amp;&amp; (&quot;https&quot;.equals(u.getProtocol()))" to="false" />
    <mutant id="mutant_6386" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.get(int)" from="(s != null) &amp;&amp; ((s.shift) &gt; 0)" to="(s.shift) &gt; 0" />
    <mutant id="mutant_5045" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="true" />
    <mutant id="mutant_6376" viable="false" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="false" />
    <mutant id="mutant_5046" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="false" />
    <mutant id="mutant_6377" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="!(c.equals(commitToLoad))" />
    <mutant id="mutant_5047" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(idxSent == (-1)) || (idxRecv == (-1))" to="idxSent == (-1)" />
    <mutant id="mutant_6378" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))" />
    <mutant id="mutant_5048" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="(u.getPort()) == 80" />
    <mutant id="mutant_6379" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) &amp;&amp; (!(c.equals(commitToLoad)))" to="(((highMark == 0) || ((size) &lt;= highMark)) &amp;&amp; (index &lt; (RevObjectList.BLOCK_SIZE))) || (!(c.equals(commitToLoad)))" />
    <mutant id="mutant_5049" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.uri(java.net.URL)" from="((u.getPort()) == 80) &amp;&amp; (&quot;http&quot;.equals(u.getProtocol()))" to="true" />
    <mutant id="mutant_1519" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))" />
    <mutant id="mutant_2841" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="!(readBlock.contains(packKey, readPos))" />
    <mutant id="mutant_1510" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="false" />
    <mutant id="mutant_2840" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="((readBlock) == null) &amp;&amp; (!(readBlock.contains(packKey, readPos)))" />
    <mutant id="mutant_1517" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="true" />
    <mutant id="mutant_2849" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="pack.isGarbage()" />
    <mutant id="mutant_1518" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="false" />
    <mutant id="mutant_2848" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="noGarbage" />
    <mutant id="mutant_1515" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))" />
    <mutant id="mutant_2847" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="noGarbage || (pack.isGarbage())" />
    <mutant id="mutant_1516" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) || ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" />
    <mutant id="mutant_2846" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="(packDsc) != null" />
    <mutant id="mutant_1513" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="false" />
    <mutant id="mutant_2845" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="false" />
    <mutant id="mutant_1514" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="(((firstBuffer[fi]) == (secondBuffer[si])) || ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" />
    <mutant id="mutant_2844" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="true" />
    <mutant id="mutant_1511" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="((firstBuffer[fi]) == (secondBuffer[si]))" />
    <mutant id="mutant_2843" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="rollback" />
    <mutant id="mutant_1512" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" to="true" />
    <mutant id="mutant_2842" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="rollback &amp;&amp; ((packDsc) != null)" to="rollback || ((packDsc) != null)" />
    <mutant id="mutant_1508" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="(ptr == sz) &amp;&amp; ((raw[ptr]) != 0)" />
    <mutant id="mutant_1509" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="true" />
    <mutant id="mutant_2839" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="false" />
    <mutant id="mutant_2830" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="!(inf.finished())" />
    <mutant id="mutant_1506" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="(raw[ptr]) != 0" />
    <mutant id="mutant_2838" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="true" />
    <mutant id="mutant_1507" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(ptr == sz) || ((raw[ptr]) != 0)" to="ptr == sz" />
    <mutant id="mutant_2837" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((readBlock) == null) || (!(readBlock.contains(packKey, readPos)))" to="(readBlock) == null" />
    <mutant id="mutant_1504" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="!(allowZeroMode)" />
    <mutant id="mutant_2836" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="false" />
    <mutant id="mutant_1505" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="((thisMode == 0) &amp;&amp; (c == '0')) || (!(allowZeroMode))" />
    <mutant id="mutant_2835" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="true" />
    <mutant id="mutant_1502" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="false" />
    <mutant id="mutant_2834" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="(crc2.getValue()) != expectedCRC" />
    <mutant id="mutant_1503" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="(thisMode == 0) &amp;&amp; (c == '0')" />
    <mutant id="mutant_2833" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="validate || ((crc2.getValue()) != expectedCRC)" />
    <mutant id="mutant_1500" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="((thisMode == 0) || (c == '0'))" />
    <mutant id="mutant_2832" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="validate" />
    <mutant id="mutant_1501" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0')) &amp;&amp; (!(allowZeroMode))" to="true" />
    <mutant id="mutant_2831" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="(inf.getBytesRead()) != dataLength" />
    <mutant id="mutant_2829" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="false" />
    <mutant id="mutant_2828" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="true" />
    <mutant id="mutant_2827" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="(!(inf.finished())) &amp;&amp; ((inf.getBytesRead()) != dataLength)" />
    <mutant id="mutant_2826" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="validate || (idx(ctx).hasCRC32Support())" />
    <mutant id="mutant_2825" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="idx(ctx).hasCRC32Support()" />
    <mutant id="mutant_2824" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="false" />
    <mutant id="mutant_2823" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="true" />
    <mutant id="mutant_2822" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="validate &amp;&amp; (idx(ctx).hasCRC32Support())" to="validate" />
    <mutant id="mutant_2821" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="(0 &lt; offset) || (!(isCorrupt(offset)))" />
    <mutant id="mutant_2820" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="false" />
    <mutant id="mutant_5092" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="((e.getCause()) == null) || (e.getMessage().equals(&quot;Auth cancel&quot;))" />
    <mutant id="mutant_5093" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="true" />
    <mutant id="mutant_5094" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="false" />
    <mutant id="mutant_5095" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="(e.getCause()) == null" />
    <mutant id="mutant_5096" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="((e.getCause()) == null) || (e.getMessage().equals(&quot;Auth fail&quot;))" />
    <mutant id="mutant_2819" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="true" />
    <mutant id="mutant_5097" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationFailed(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth fail&quot;))" to="e.getMessage().equals(&quot;Auth fail&quot;)" />
    <mutant id="mutant_2818" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="0 &lt; offset" />
    <mutant id="mutant_5098" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="(!(credentialsProvider.isInteractive()))" />
    <mutant id="mutant_2817" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.get(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!(isCorrupt(offset))" />
    <mutant id="mutant_5099" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.createSession(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.util.FS,java.lang.String,java.lang.String,java.lang.String,int,org.eclipse.jgit.transport.OpenSshConfig$Host)" from="((!(hc.isBatchMode())) || (!(credentialsProvider.isInteractive())))" to="true" />
    <mutant id="mutant_5090" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="false" />
    <mutant id="mutant_5091" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="(e.getCause()) == null" />
    <mutant id="mutant_2816" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="(0 &lt; bs) || (bs &lt; wantSize)" />
    <mutant id="mutant_5089" viable="true" in="org.eclipse.jgit.transport.JschConfigSessionFactory.isAuthenticationCanceled(com.jcraft.jsch.JSchException)" from="((e.getCause()) == null) &amp;&amp; (e.getMessage().equals(&quot;Auth cancel&quot;))" to="true" />
    <mutant id="mutant_2815" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="false" />
    <mutant id="mutant_2814" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="true" />
    <mutant id="mutant_2813" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="bs &lt; wantSize" />
    <mutant id="mutant_2812" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="0 &lt; bs" />
    <mutant id="mutant_2811" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="(0 &lt; bs) || (bs &lt; wantSize)" />
    <mutant id="mutant_2810" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt; bs) &amp;&amp; (bs &lt; wantSize)" to="false" />
    <mutant id="mutant_1553" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="true" />
    <mutant id="mutant_2885" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="inf.finished()" />
    <mutant id="mutant_1554" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="false" />
    <mutant id="mutant_2884" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(inf.finished()) &amp;&amp; (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" />
    <mutant id="mutant_1551" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) || ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" />
    <mutant id="mutant_2883" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="false" />
    <mutant id="mutant_1552" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))" />
    <mutant id="mutant_2882" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="true" />
    <mutant id="mutant_2881" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="headerOnly" />
    <mutant id="mutant_1550" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" />
    <mutant id="mutant_2880" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(headerOnly || (dstoff == (dstbuf.length)))" />
    <mutant id="mutant_1559" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="false" />
    <mutant id="mutant_1557" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" />
    <mutant id="mutant_2889" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="pack.isGarbage()" />
    <mutant id="mutant_1558" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="true" />
    <mutant id="mutant_2888" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="noGarbage" />
    <mutant id="mutant_1555" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)])))" to="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" />
    <mutant id="mutant_2887" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="noGarbage || (pack.isGarbage())" />
    <mutant id="mutant_1556" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))" />
    <mutant id="mutant_2886" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="headerOnly &amp;&amp; (dstoff == (dstbuf.length))" />
    <mutant id="mutant_1542" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="true" />
    <mutant id="mutant_2874" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="false" />
    <mutant id="mutant_1543" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="false" />
    <mutant id="mutant_2873" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="true" />
    <mutant id="mutant_1540" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) || ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" />
    <mutant id="mutant_2872" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="position &lt; length" />
    <mutant id="mutant_1541" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) || ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" />
    <mutant id="mutant_2871" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="length &lt;= position" />
    <mutant id="mutant_2870" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="(0 &lt;= length) || (length &lt;= position)" />
    <mutant id="mutant_1548" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="false" />
    <mutant id="mutant_1549" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))" />
    <mutant id="mutant_2879" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="false" />
    <mutant id="mutant_1546" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) || ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" />
    <mutant id="mutant_2878" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="true" />
    <mutant id="mutant_1547" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)])))" to="true" />
    <mutant id="mutant_2877" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(dstoff == (dstbuf.length))" />
    <mutant id="mutant_1544" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))" />
    <mutant id="mutant_2876" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="(0 &lt; need) || (position &lt; length)" />
    <mutant id="mutant_1545" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)])))" to="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" />
    <mutant id="mutant_2875" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt; need) &amp;&amp; (position &lt; length)" to="0 &lt; need" />
    <mutant id="mutant_1531" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) || ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" />
    <mutant id="mutant_2863" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="noGarbage &amp;&amp; (pack.isGarbage())" />
    <mutant id="mutant_1532" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="true" />
    <mutant id="mutant_2862" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="pack == (last)" />
    <mutant id="mutant_2861" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="false" />
    <mutant id="mutant_1530" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))" />
    <mutant id="mutant_2860" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="true" />
    <mutant id="mutant_1539" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="false" />
    <mutant id="mutant_1537" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))" />
    <mutant id="mutant_2869" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="false" />
    <mutant id="mutant_1538" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="true" />
    <mutant id="mutant_2868" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="true" />
    <mutant id="mutant_1535" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" />
    <mutant id="mutant_2867" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="(0 &lt;= length) &amp;&amp; (length &lt;= position)" to="0 &lt;= length" />
    <mutant id="mutant_1536" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)])))" to="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" />
    <mutant id="mutant_2866" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="(pack == (last)) &amp;&amp; (noGarbage &amp;&amp; (pack.isGarbage()))" />
    <mutant id="mutant_1533" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="false" />
    <mutant id="mutant_2865" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="false" />
    <mutant id="mutant_1534" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)])))" to="((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))" />
    <mutant id="mutant_2864" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="true" />
    <mutant id="mutant_1520" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" to="(((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)])))" />
    <mutant id="mutant_2852" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="last.hasObject(this, objectId)" />
    <mutant id="mutant_1521" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))" />
    <mutant id="mutant_2851" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="false" />
    <mutant id="mutant_2850" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.findAll(java.lang.Iterable)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="true" />
    <mutant id="mutant_1528" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="false" />
    <mutant id="mutant_1529" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) || ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" />
    <mutant id="mutant_2859" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(pack.isGarbage())" />
    <mutant id="mutant_1526" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" />
    <mutant id="mutant_2858" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="noGarbage" />
    <mutant id="mutant_1527" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)])))" to="true" />
    <mutant id="mutant_2857" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(noGarbage || (pack.isGarbage()))" />
    <mutant id="mutant_1524" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)])))" />
    <mutant id="mutant_2856" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="(last) != null" />
    <mutant id="mutant_1525" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) || ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" />
    <mutant id="mutant_2855" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="false" />
    <mutant id="mutant_1522" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="true" />
    <mutant id="mutant_2854" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="true" />
    <mutant id="mutant_1523" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)])))" to="false" />
    <mutant id="mutant_2853" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.has(org.eclipse.jgit.lib.AnyObjectId)" from="((last) != null) &amp;&amp; (last.hasObject(this, objectId))" to="((last) != null) || (last.hasObject(this, objectId))" />
    <mutant id="mutant_1597" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="true" />
    <mutant id="mutant_1598" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="false" />
    <mutant id="mutant_1595" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))" />
    <mutant id="mutant_1596" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) || ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" />
    <mutant id="mutant_1593" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="false" />
    <mutant id="mutant_1594" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) || ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" />
    <mutant id="mutant_1591" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" />
    <mutant id="mutant_1592" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)])))" to="true" />
    <mutant id="mutant_1599" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))) &amp;&amp; ((firstBuffer[(fi + 17)]) == (secondBuffer[(si + 17)]))) &amp;&amp; ((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)])))" to="((firstBuffer[(fi + 18)]) == (secondBuffer[(si + 18)]))" />
    <mutant id="mutant_1590" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) || ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" />
    <mutant id="mutant_1586" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" />
    <mutant id="mutant_1587" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="true" />
    <mutant id="mutant_1584" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="false" />
    <mutant id="mutant_1585" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" />
    <mutant id="mutant_1582" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))" />
    <mutant id="mutant_1583" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="true" />
    <mutant id="mutant_1580" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))" />
    <mutant id="mutant_1581" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" to="(((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) || ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)])))" />
    <mutant id="mutant_1588" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="false" />
    <mutant id="mutant_1589" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)]))) &amp;&amp; ((firstBuffer[(fi + 15)]) == (secondBuffer[(si + 15)]))) &amp;&amp; ((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)])))" to="((firstBuffer[(fi + 16)]) == (secondBuffer[(si + 16)]))" />
    <mutant id="mutant_1575" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="false" />
    <mutant id="mutant_1576" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) || ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" />
    <mutant id="mutant_1573" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))" />
    <mutant id="mutant_1574" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="true" />
    <mutant id="mutant_1571" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" />
    <mutant id="mutant_1572" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" to="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) || ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" />
    <mutant id="mutant_1570" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))" />
    <mutant id="mutant_1579" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="false" />
    <mutant id="mutant_1577" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="(((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)])))" />
    <mutant id="mutant_1578" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)]))) &amp;&amp; ((firstBuffer[(fi + 13)]) == (secondBuffer[(si + 13)]))) &amp;&amp; ((firstBuffer[(fi + 14)]) == (secondBuffer[(si + 14)])))" to="true" />
    <mutant id="mutant_1564" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) || ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" />
    <mutant id="mutant_2896" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="false" />
    <mutant id="mutant_1565" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))" />
    <mutant id="mutant_2895" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="true" />
    <mutant id="mutant_1562" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="false" />
    <mutant id="mutant_2894" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(pack.isGarbage())" />
    <mutant id="mutant_1563" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" />
    <mutant id="mutant_2893" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="noGarbage" />
    <mutant id="mutant_1560" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" to="((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) || ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)])))" />
    <mutant id="mutant_2892" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(noGarbage &amp;&amp; (pack.isGarbage()))" to="(noGarbage || (pack.isGarbage()))" />
    <mutant id="mutant_1561" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" to="true" />
    <mutant id="mutant_2891" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="false" />
    <mutant id="mutant_2890" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="noGarbage &amp;&amp; (pack.isGarbage())" to="true" />
    <mutant id="mutant_1568" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="true" />
    <mutant id="mutant_1569" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="false" />
    <mutant id="mutant_2899" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="true" />
    <mutant id="mutant_1566" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) || ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" />
    <mutant id="mutant_2898" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="noGarbage &amp;&amp; (pack.isGarbage())" />
    <mutant id="mutant_1567" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="((((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)]))) &amp;&amp; ((firstBuffer[(fi + 12)]) == (secondBuffer[(si + 12)])))" to="(((((((((((((firstBuffer[fi]) == (secondBuffer[si])) &amp;&amp; ((firstBuffer[(fi + 1)]) == (secondBuffer[(si + 1)]))) &amp;&amp; ((firstBuffer[(fi + 2)]) == (secondBuffer[(si + 2)]))) &amp;&amp; ((firstBuffer[(fi + 3)]) == (secondBuffer[(si + 3)]))) &amp;&amp; ((firstBuffer[(fi + 4)]) == (secondBuffer[(si + 4)]))) &amp;&amp; ((firstBuffer[(fi + 5)]) == (secondBuffer[(si + 5)]))) &amp;&amp; ((firstBuffer[(fi + 6)]) == (secondBuffer[(si + 6)]))) &amp;&amp; ((firstBuffer[(fi + 7)]) == (secondBuffer[(si + 7)]))) &amp;&amp; ((firstBuffer[(fi + 8)]) == (secondBuffer[(si + 8)]))) &amp;&amp; ((firstBuffer[(fi + 9)]) == (secondBuffer[(si + 9)]))) &amp;&amp; ((firstBuffer[(fi + 10)]) == (secondBuffer[(si + 10)]))) &amp;&amp; ((firstBuffer[(fi + 11)]) == (secondBuffer[(si + 11)])))" />
    <mutant id="mutant_2897" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(pack == (last)) || (noGarbage &amp;&amp; (pack.isGarbage()))" to="pack == (last)" />
    <mutant id="mutant_6210" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="true" />
    <mutant id="mutant_6208" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="(!(pattern.startsWith(&quot;^&quot;))) || (!(pattern.startsWith(&quot;.*&quot;)))" />
    <mutant id="mutant_6209" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="!(pattern.startsWith(&quot;.*&quot;))" />
    <mutant id="mutant_6200" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="(a == (RevFilter.ALL)) &amp;&amp; (b == (RevFilter.ALL))" />
    <mutant id="mutant_6201" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="true" />
    <mutant id="mutant_6202" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="false" />
    <mutant id="mutant_6203" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="a == (RevFilter.ALL)" />
    <mutant id="mutant_6204" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter.create(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a == (RevFilter.ALL)) || (b == (RevFilter.ALL))" to="b == (RevFilter.ALL)" />
    <mutant id="mutant_6205" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="!(pattern.startsWith(&quot;^&quot;))" />
    <mutant id="mutant_6206" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="true" />
    <mutant id="mutant_6207" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.startsWith(&quot;^&quot;))) &amp;&amp; (!(pattern.startsWith(&quot;.*&quot;)))" to="false" />
    <mutant id="mutant_6250" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="c.has(REINTERESTING)" />
    <mutant id="mutant_6251" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="true" />
    <mutant id="mutant_6252" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="false" />
    <mutant id="mutant_6253" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="(c.has(UNSHALLOW)) &amp;&amp; (c.has(REINTERESTING))" />
    <mutant id="mutant_6254" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.has(UNSHALLOW)) || (c.has(REINTERESTING))" to="c.has(UNSHALLOW)" />
    <mutant id="mutant_6244" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="(q == null) &amp;&amp; ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" />
    <mutant id="mutant_6245" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="(p != null) || ((p.commit.commitTime) &gt; when)" />
    <mutant id="mutant_6246" viable="false" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="true" />
    <mutant id="mutant_6247" viable="false" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="false" />
    <mutant id="mutant_6248" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="(p.commit.commitTime) &gt; when" />
    <mutant id="mutant_6249" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(p != null) &amp;&amp; ((p.commit.commitTime) &gt; when)" to="p != null" />
    <mutant id="mutant_6240" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="q == null" />
    <mutant id="mutant_6241" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="(q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime))" />
    <mutant id="mutant_6242" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="true" />
    <mutant id="mutant_6243" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(q == null) || ((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="false" />
    <mutant id="mutant_6233" viable="false" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="false" />
    <mutant id="mutant_6234" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="(low &gt; (first)) || (when == (index[low].commit.commitTime))" />
    <mutant id="mutant_6235" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="((q == (head)) || (when &gt; (q.commit.commitTime)))" />
    <mutant id="mutant_6236" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="(when &gt; (q.commit.commitTime))" />
    <mutant id="mutant_6237" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="true" />
    <mutant id="mutant_6238" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="false" />
    <mutant id="mutant_6239" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((q == (head)) &amp;&amp; (when &gt; (q.commit.commitTime)))" to="(q == (head))" />
    <mutant id="mutant_6230" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="when == (index[low].commit.commitTime)" />
    <mutant id="mutant_6231" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="low &gt; (first)" />
    <mutant id="mutant_6232" viable="false" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low &gt; (first)) &amp;&amp; (when == (index[low].commit.commitTime))" to="true" />
    <mutant id="mutant_6222" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="false" />
    <mutant id="mutant_6223" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) || ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" />
    <mutant id="mutant_6224" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="(++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)" />
    <mutant id="mutant_6225" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="(first) &lt;= (last)" />
    <mutant id="mutant_6226" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="true" />
    <mutant id="mutant_6227" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="false" />
    <mutant id="mutant_6228" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="(index[first].commit.commitTime) &gt; when" />
    <mutant id="mutant_6229" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((first) &lt;= (last)) &amp;&amp; ((index[first].commit.commitTime) &gt; when)" to="((first) &lt;= (last)) || ((index[first].commit.commitTime) &gt; when)" />
    <mutant id="mutant_6220" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="(sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)" />
    <mutant id="mutant_6221" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="((++(inQueue)) &gt; (DateRevQueue.REBUILD_INDEX_COUNT)) &amp;&amp; ((sinceLastIndex) &gt; (DateRevQueue.REBUILD_INDEX_COUNT))" to="true" />
    <mutant id="mutant_6219" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="(index) != null" />
    <mutant id="mutant_6211" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="false" />
    <mutant id="mutant_6212" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="!(pattern.endsWith(&quot;$&quot;))" />
    <mutant id="mutant_6213" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="!(pattern.endsWith(&quot;.*&quot;))" />
    <mutant id="mutant_6214" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="(!(pattern.endsWith(&quot;$&quot;))) &amp;&amp; (!(pattern.endsWith(&quot;.*&quot;)))" to="(!(pattern.endsWith(&quot;$&quot;))) || (!(pattern.endsWith(&quot;.*&quot;)))" />
    <mutant id="mutant_6215" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="q == (index[first])" />
    <mutant id="mutant_6216" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="true" />
    <mutant id="mutant_6217" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="false" />
    <mutant id="mutant_6218" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.next()" from="((index) != null) &amp;&amp; (q == (index[first]))" to="((index) != null) || (q == (index[first]))" />
    <mutant id="mutant_6291" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="o instanceof org.eclipse.jgit.revwalk.RevBlob" />
    <mutant id="mutant_6292" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="true" />
    <mutant id="mutant_6293" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="false" />
    <mutant id="mutant_6294" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="!(reader.has(o))" />
    <mutant id="mutant_6295" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="(o.getType()) != (Constants.OBJ_COMMIT)" />
    <mutant id="mutant_6296" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="((o.getType()) != (Constants.OBJ_COMMIT)) || (boundary)" />
    <mutant id="mutant_6297" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="true" />
    <mutant id="mutant_6298" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="false" />
    <mutant id="mutant_6290" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(reader.has(o)))" to="(o instanceof org.eclipse.jgit.revwalk.RevBlob) || (!(reader.has(o)))" />
    <mutant id="mutant_6288" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="false" />
    <mutant id="mutant_6289" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="((obj.flags) &amp; (RevWalk.SEEN)) != 0" />
    <mutant id="mutant_6280" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="!(b.canUnpop())" />
    <mutant id="mutant_6281" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="true" />
    <mutant id="mutant_6282" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="false" />
    <mutant id="mutant_6283" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="(b == null) &amp;&amp; (!(b.canUnpop()))" />
    <mutant id="mutant_6284" viable="true" in="org.eclipse.jgit.revwalk.LIFORevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(b == null) || (!(b.canUnpop()))" to="b == null" />
    <mutant id="mutant_6285" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="(obj != null) || (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" />
    <mutant id="mutant_6286" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="obj != null" />
    <mutant id="mutant_6287" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.nextObject()" from="(obj != null) &amp;&amp; (((obj.flags) &amp; (RevWalk.SEEN)) != 0)" to="true" />
    <mutant id="mutant_6277" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="((valStart) &lt; at) || (at &lt; (valEnd))" />
    <mutant id="mutant_6278" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="true" />
    <mutant id="mutant_6279" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="false" />
    <mutant id="mutant_6270" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="true" />
    <mutant id="mutant_6271" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="false" />
    <mutant id="mutant_6272" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="('A' &lt;= b) || (b &lt;= 'Z')" />
    <mutant id="mutant_6273" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="'A' &lt;= b" />
    <mutant id="mutant_6274" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="b &lt;= 'Z'" />
    <mutant id="mutant_6275" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="at &lt; (valEnd)" />
    <mutant id="mutant_6276" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="((valStart) &lt; at) &amp;&amp; (at &lt; (valEnd))" to="(valStart) &lt; at" />
    <mutant id="mutant_6266" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="true" />
    <mutant id="mutant_6267" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="false" />
    <mutant id="mutant_6268" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="TreeFilter.ANY_DIFF.shouldBeRecursive()" />
    <mutant id="mutant_6269" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="path.shouldBeRecursive()" />
    <mutant id="mutant_6260" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="(path.include(walker)) || (TreeFilter.ANY_DIFF.include(walker))" />
    <mutant id="mutant_6261" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="TreeFilter.ANY_DIFF.include(walker)" />
    <mutant id="mutant_6262" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="true" />
    <mutant id="mutant_6263" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="false" />
    <mutant id="mutant_6264" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="(path.include(walker)) &amp;&amp; (TreeFilter.ANY_DIFF.include(walker))" to="path.include(walker)" />
    <mutant id="mutant_6265" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.shouldBeRecursive()" from="(path.shouldBeRecursive()) || (TreeFilter.ANY_DIFF.shouldBeRecursive())" to="(path.shouldBeRecursive()) &amp;&amp; (TreeFilter.ANY_DIFF.shouldBeRecursive())" />
    <mutant id="mutant_6255" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) || (!(c.has(UNSHALLOW)))" />
    <mutant id="mutant_6256" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="true" />
    <mutant id="mutant_6257" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="false" />
    <mutant id="mutant_6258" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0" />
    <mutant id="mutant_6259" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(((c.flags) &amp; (RevWalk.UNINTERESTING)) != 0) &amp;&amp; (!(c.has(UNSHALLOW)))" to="!(c.has(UNSHALLOW))" />
    <mutant id="mutant_2729" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="true" />
    <mutant id="mutant_2720" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="true" />
    <mutant id="mutant_2728" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="((pool.lookupOrNull(id)) != null) &amp;&amp; (anyPackHas(id))" />
    <mutant id="mutant_2727" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="anyPackHas(id)" />
    <mutant id="mutant_2726" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="false" />
    <mutant id="mutant_2725" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="true" />
    <mutant id="mutant_2724" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="(ref.getObjectId()) == null" />
    <mutant id="mutant_2723" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="ref.isSymbolic()" />
    <mutant id="mutant_2722" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.pack(org.eclipse.jgit.lib.ProgressMonitor)" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="(ref.isSymbolic()) &amp;&amp; ((ref.getObjectId()) == null)" />
    <mutant id="mutant_2721" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="false" />
    <mutant id="mutant_2719" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="(pack != null) || (pack.invalid())" />
    <mutant id="mutant_2718" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="pack.invalid()" />
    <mutant id="mutant_2717" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrCreate(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription,org.eclipse.jgit.internal.storage.dfs.DfsPackKey)" from="(pack != null) &amp;&amp; (pack.invalid())" to="pack != null" />
    <mutant id="mutant_2716" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="(top.ref.next) == null" />
    <mutant id="mutant_2715" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="top != null" />
    <mutant id="mutant_2714" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="false" />
    <mutant id="mutant_2713" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="true" />
    <mutant id="mutant_2712" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.clean(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry)" from="(top != null) &amp;&amp; ((top.ref.next) == null)" to="(top != null) || ((top.ref.next) == null)" />
    <mutant id="mutant_2711" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="(r.pack) == pack" />
    <mutant id="mutant_2710" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="false" />
    <mutant id="mutant_2709" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="true" />
    <mutant id="mutant_2708" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="((r.pack) == pack) || ((r.position) == position)" />
    <mutant id="mutant_2707" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.scanRef(org.eclipse.jgit.internal.storage.dfs.DfsBlockCache$HashEntry,org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="(r.position) == position" />
    <mutant id="mutant_2706" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="pos &lt; (end)" />
    <mutant id="mutant_2705" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="((pack) == want) &amp;&amp; ((start) &lt;= pos)" />
    <mutant id="mutant_2704" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="false" />
    <mutant id="mutant_2703" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="true" />
    <mutant id="mutant_2702" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) &amp;&amp; (pos &lt; (end))" to="(((pack) == want) &amp;&amp; ((start) &lt;= pos)) || (pos &lt; (end))" />
    <mutant id="mutant_2701" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="false" />
    <mutant id="mutant_2700" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="true" />
    <mutant id="mutant_6299" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markUninteresting(org.eclipse.jgit.revwalk.RevObject)" from="((o.getType()) != (Constants.OBJ_COMMIT)) &amp;&amp; (boundary)" to="boundary" />
    <mutant id="mutant_1432" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_2764" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="(obj.has(added)) || (obj.has(isBase))" />
    <mutant id="mutant_1433" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2763" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="(obj != null) || ((obj.has(added)) || (obj.has(isBase)))" />
    <mutant id="mutant_1430" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2762" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="obj != null" />
    <mutant id="mutant_1431" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) || (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2761" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="(obj.has(isBase))" />
    <mutant id="mutant_2760" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="((obj.has(added)) &amp;&amp; (obj.has(isBase)))" />
    <mutant id="mutant_1438" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="false" />
    <mutant id="mutant_1439" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="((end - ptr) &gt;= 3)" />
    <mutant id="mutant_2769" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="true" />
    <mutant id="mutant_1436" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="(((end - ptr) &gt;= 3) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" />
    <mutant id="mutant_2768" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="!(base.has(isBase))" />
    <mutant id="mutant_1437" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="true" />
    <mutant id="mutant_2767" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="(!(base.has(added))) || (!(base.has(isBase)))" />
    <mutant id="mutant_1434" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')" />
    <mutant id="mutant_2766" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="false" />
    <mutant id="mutant_1435" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2765" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(obj != null) &amp;&amp; ((obj.has(added)) || (obj.has(isBase)))" to="true" />
    <mutant id="mutant_1421" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l')" />
    <mutant id="mutant_2753" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="true" />
    <mutant id="mutant_1422" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="true" />
    <mutant id="mutant_2752" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="(rollback) || ((packDsc) != null)" />
    <mutant id="mutant_2751" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="objectMap.contains(id)" />
    <mutant id="mutant_1420" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="((end - ptr) &gt;= 3)" />
    <mutant id="mutant_2750" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="false" />
    <mutant id="mutant_1429" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_1427" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3)" />
    <mutant id="mutant_2759" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="(obj.has(added))" />
    <mutant id="mutant_1428" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) == 3) &amp;&amp; ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2758" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="false" />
    <mutant id="mutant_1425" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" />
    <mutant id="mutant_2757" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.toInclude(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((obj.has(added)) || (obj.has(isBase)))" to="true" />
    <mutant id="mutant_1426" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2756" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="(packDsc) != null" />
    <mutant id="mutant_1423" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="false" />
    <mutant id="mutant_2755" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="rollback" />
    <mutant id="mutant_1424" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'l'))" />
    <mutant id="mutant_2754" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.close()" from="(rollback) &amp;&amp; ((packDsc) != null)" to="false" />
    <mutant id="mutant_1410" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(((end - ptr) == 4) &amp;&amp; ((raw[(ptr + 4)]) == '.'))" />
    <mutant id="mutant_2742" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="true" />
    <mutant id="mutant_1411" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))" />
    <mutant id="mutant_2741" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="r &lt; cnt" />
    <mutant id="mutant_2740" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="(currPos) &lt;= pos" />
    <mutant id="mutant_1418" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="false" />
    <mutant id="mutant_1419" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="(((end - ptr) &gt;= 3) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" />
    <mutant id="mutant_2749" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="true" />
    <mutant id="mutant_1416" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')" />
    <mutant id="mutant_2748" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="((objectMap) != null) || (objectMap.contains(id))" />
    <mutant id="mutant_1417" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="true" />
    <mutant id="mutant_2747" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter.insert(int,byte[],int,int)" from="((objectMap) != null) &amp;&amp; (objectMap.contains(id))" to="(objectMap) != null" />
    <mutant id="mutant_1414" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')" />
    <mutant id="mutant_2746" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="type == (Constants.OBJ_REF_DELTA)" />
    <mutant id="mutant_1415" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) || (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" />
    <mutant id="mutant_2745" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="(type == (Constants.OBJ_OFS_DELTA)) &amp;&amp; (type == (Constants.OBJ_REF_DELTA))" />
    <mutant id="mutant_1412" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="true" />
    <mutant id="mutant_2744" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="type == (Constants.OBJ_OFS_DELTA)" />
    <mutant id="mutant_1413" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="false" />
    <mutant id="mutant_2743" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(type == (Constants.OBJ_OFS_DELTA)) || (type == (Constants.OBJ_REF_DELTA))" to="false" />
    <mutant id="mutant_1409" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="false" />
    <mutant id="mutant_2731" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="(pool.lookupOrNull(id)) != null" />
    <mutant id="mutant_1400" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" />
    <mutant id="mutant_2730" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsGarbageCollector.packGarbage(org.eclipse.jgit.lib.ProgressMonitor)" from="((pool.lookupOrNull(id)) != null) || (anyPackHas(id))" to="false" />
    <mutant id="mutant_1407" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((raw[(ptr + 4)]) == '.')" />
    <mutant id="mutant_2739" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="false" />
    <mutant id="mutant_1408" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="true" />
    <mutant id="mutant_2738" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="true" />
    <mutant id="mutant_1405" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" />
    <mutant id="mutant_2737" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPos) &lt;= pos) &amp;&amp; (r &lt; cnt)" to="((currPos) &lt;= pos) || (r &lt; cnt)" />
    <mutant id="mutant_1406" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((end - ptr) == 4)" />
    <mutant id="mutant_2736" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="pos &lt; (currPos)" />
    <mutant id="mutant_1403" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="true" />
    <mutant id="mutant_2735" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="r &lt; cnt" />
    <mutant id="mutant_1404" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="false" />
    <mutant id="mutant_2734" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="false" />
    <mutant id="mutant_1401" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) || (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" />
    <mutant id="mutant_2733" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="true" />
    <mutant id="mutant_1402" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))" />
    <mutant id="mutant_2732" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(pos &lt; (currPos)) &amp;&amp; (r &lt; cnt)" to="(pos &lt; (currPos)) || (r &lt; cnt)" />
    <mutant id="mutant_1480" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_1476" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = id(raw, ptr)) &lt; 0" />
    <mutant id="mutant_1477" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = id(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_1474" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="false" />
    <mutant id="mutant_1475" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="((raw[(end - 1)]) == ' ') &amp;&amp; ((raw[(end - 1)]) == '.')" />
    <mutant id="mutant_1472" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="(raw[(end - 1)]) == '.'" />
    <mutant id="mutant_1473" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="true" />
    <mutant id="mutant_1470" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(raw, ptr, end)" />
    <mutant id="mutant_1471" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((raw[(end - 1)]) == ' ') || ((raw[(end - 1)]) == '.')" to="(raw[(end - 1)]) == ' '" />
    <mutant id="mutant_1478" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_1479" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_1465" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end)" />
    <mutant id="mutant_2797" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="len &lt; (pos + size)" />
    <mutant id="mutant_1466" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="macosx" />
    <mutant id="mutant_2796" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="false" />
    <mutant id="mutant_1463" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="true" />
    <mutant id="mutant_2795" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="true" />
    <mutant id="mutant_1464" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="false" />
    <mutant id="mutant_2794" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="(0 &lt; n) || (buf.hasRemaining())" />
    <mutant id="mutant_1461" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="(end - ptr) &gt; 4" />
    <mutant id="mutant_2793" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="buf.hasRemaining()" />
    <mutant id="mutant_1462" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="((end - ptr) &gt; 4) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" to="((end - ptr) &gt; 4) || (org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(raw, (ptr + 1), end))" />
    <mutant id="mutant_2792" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.read(org.eclipse.jgit.internal.storage.dfs.ReadableChannel,java.nio.ByteBuffer)" from="(0 &lt; n) &amp;&amp; (buf.hasRemaining())" to="0 &lt; n" />
    <mutant id="mutant_2791" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="false" />
    <mutant id="mutant_1460" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="(raw[e]) == 0" />
    <mutant id="mutant_2790" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="true" />
    <mutant id="mutant_1469" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="(macosx) || (ObjectChecker.isMacHFSGit(raw, ptr, end))" />
    <mutant id="mutant_1467" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="true" />
    <mutant id="mutant_2799" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="true" />
    <mutant id="mutant_1468" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(macosx) &amp;&amp; (ObjectChecker.isMacHFSGit(raw, ptr, end))" to="false" />
    <mutant id="mutant_2798" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(0 &lt;= len) &amp;&amp; (len &lt; (pos + size))" to="(0 &lt;= len) || (len &lt; (pos + size))" />
    <mutant id="mutant_1454" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2786" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="(0 &lt; offset) || (!(isCorrupt(offset)))" />
    <mutant id="mutant_1455" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2785" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="false" />
    <mutant id="mutant_1452" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) || (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2784" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="true" />
    <mutant id="mutant_1453" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_2783" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="0 &lt; offset" />
    <mutant id="mutant_1450" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2782" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.hasObject(org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!(isCorrupt(offset))" />
    <mutant id="mutant_1451" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')" />
    <mutant id="mutant_2781" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="bs != null" />
    <mutant id="mutant_2780" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="as != null" />
    <mutant id="mutant_1458" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="true" />
    <mutant id="mutant_1459" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="false" />
    <mutant id="mutant_2789" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="idxref.has()" />
    <mutant id="mutant_1456" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="e &lt; end" />
    <mutant id="mutant_2788" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="idxref != null" />
    <mutant id="mutant_1457" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment(byte[],int,int)" from="(e &lt; end) &amp;&amp; ((raw[e]) == 0)" to="(e &lt; end) || ((raw[e]) == 0)" />
    <mutant id="mutant_2787" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.isIndexLoaded()" from="(idxref != null) &amp;&amp; (idxref.has())" to="(idxref != null) || (idxref.has())" />
    <mutant id="mutant_1443" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')" />
    <mutant id="mutant_2775" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="(packName.equals(desc.packName)) || (getRepositoryDescription().equals(desc.getRepositoryDescription()))" />
    <mutant id="mutant_1444" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="true" />
    <mutant id="mutant_2774" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="false" />
    <mutant id="mutant_1441" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" />
    <mutant id="mutant_2773" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="true" />
    <mutant id="mutant_1442" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" />
    <mutant id="mutant_2772" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="getRepositoryDescription().equals(desc.getRepositoryDescription())" />
    <mutant id="mutant_2771" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="!(base.has(added))" />
    <mutant id="mutant_1440" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')" />
    <mutant id="mutant_2770" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor.addObjectsToPack(org.eclipse.jgit.internal.storage.pack.PackWriter,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.lib.ProgressMonitor)" from="(!(base.has(added))) &amp;&amp; (!(base.has(isBase)))" to="false" />
    <mutant id="mutant_1449" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_1447" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3)" />
    <mutant id="mutant_2779" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="false" />
    <mutant id="mutant_1448" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) == 3) &amp;&amp; ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2778" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="true" />
    <mutant id="mutant_1445" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'r')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="false" />
    <mutant id="mutant_2777" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as != null) &amp;&amp; (bs != null)" to="(as != null) || (bs != null)" />
    <mutant id="mutant_1446" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2776" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.equals(java.lang.Object)" from="(packName.equals(desc.packName)) &amp;&amp; (getRepositoryDescription().equals(desc.getRepositoryDescription()))" to="packName.equals(desc.packName)" />
    <mutant id="mutant_1498" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="false" />
    <mutant id="mutant_1499" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="(thisMode == 0)" />
    <mutant id="mutant_1496" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="(c == '0')" />
    <mutant id="mutant_1497" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="((thisMode == 0) &amp;&amp; (c == '0'))" to="true" />
    <mutant id="mutant_1494" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="false" />
    <mutant id="mutant_1495" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &gt; '7'" />
    <mutant id="mutant_1492" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="c &lt; '0'" />
    <mutant id="mutant_1493" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="true" />
    <mutant id="mutant_1490" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="(windows) &amp;&amp; (macosx)" />
    <mutant id="mutant_1491" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(c &lt; '0') || (c &gt; '7')" to="(c &lt; '0') &amp;&amp; (c &gt; '7')" />
    <mutant id="mutant_1487" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="true" />
    <mutant id="mutant_1488" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="false" />
    <mutant id="mutant_1485" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_1486" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="macosx" />
    <mutant id="mutant_1483" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_1484" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_1481" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = personIdent(raw, ptr)) &lt; 0" />
    <mutant id="mutant_1482" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTag(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = personIdent(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_1489" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="(windows) || (macosx)" to="windows" />
    <mutant id="mutant_1298" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="true" />
    <mutant id="mutant_1299" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="false" />
    <mutant id="mutant_1296" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="(ptr == (raw.length)) &amp;&amp; ((raw[ptr]) != ' ')" />
    <mutant id="mutant_1297" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="ptr == (raw.length)" />
    <mutant id="mutant_1294" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="false" />
    <mutant id="mutant_1295" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="(raw[emailE]) != ' '" />
    <mutant id="mutant_1292" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="emailE == (raw.length)" />
    <mutant id="mutant_1293" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="true" />
    <mutant id="mutant_1290" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="(emailE == emailB) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;')" />
    <mutant id="mutant_1291" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == (raw.length)) || ((raw[emailE]) != ' ')" to="(emailE == (raw.length)) &amp;&amp; ((raw[emailE]) != ' ')" />
    <mutant id="mutant_1289" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="emailE == emailB" />
    <mutant id="mutant_1287" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="true" />
    <mutant id="mutant_1288" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="false" />
    <mutant id="mutant_1285" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="(raw[(emailB - 1)]) != '&lt;'" />
    <mutant id="mutant_1286" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE == emailB) || ((raw[(emailE - 1)]) != '&gt;')" to="(raw[(emailE - 1)]) != '&gt;'" />
    <mutant id="mutant_1283" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="true" />
    <mutant id="mutant_1284" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="false" />
    <mutant id="mutant_6130" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="true" />
    <mutant id="mutant_6131" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="false" />
    <mutant id="mutant_6132" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="(packNameList == null) &amp;&amp; (packNameList.isEmpty())" />
    <mutant id="mutant_6133" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="packNameList == null" />
    <mutant id="mutant_6123" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="(!(monitor.isCancelled())) || (!(workQueue.isEmpty()))" />
    <mutant id="mutant_6124" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="!(((RevObject)(id)).has(COMPLETE))" />
    <mutant id="mutant_6125" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="true" />
    <mutant id="mutant_6126" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="false" />
    <mutant id="mutant_6127" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="!(id instanceof org.eclipse.jgit.revwalk.RevObject)" />
    <mutant id="mutant_6128" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(id instanceof RevObject)) || (!(((RevObject)(id)).has(COMPLETE)))" to="(!(id instanceof RevObject)) &amp;&amp; (!(((RevObject)(id)).has(COMPLETE)))" />
    <mutant id="mutant_6129" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packNameList == null) || (packNameList.isEmpty())" to="packNameList.isEmpty()" />
    <mutant id="mutant_6120" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="true" />
    <mutant id="mutant_6121" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="false" />
    <mutant id="mutant_6122" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="!(monitor.isCancelled())" />
    <mutant id="mutant_6112" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="packItr.hasNext()" />
    <mutant id="mutant_6113" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="!(monitor.isCancelled())" />
    <mutant id="mutant_6114" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="altList != null" />
    <mutant id="mutant_6115" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="true" />
    <mutant id="mutant_6116" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="false" />
    <mutant id="mutant_6117" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="!(altList.isEmpty())" />
    <mutant id="mutant_6118" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.expandOneAlternate(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ProgressMonitor)" from="(altList != null) &amp;&amp; (!(altList.isEmpty()))" to="(altList != null) || (!(altList.isEmpty()))" />
    <mutant id="mutant_6119" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.doFetch(org.eclipse.jgit.lib.ProgressMonitor,java.util.Collection,java.util.Set)" from="(!(monitor.isCancelled())) &amp;&amp; (!(workQueue.isEmpty()))" to="!(workQueue.isEmpty())" />
    <mutant id="mutant_6110" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="true" />
    <mutant id="mutant_6111" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="false" />
    <mutant id="mutant_6109" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadPackedObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(packItr.hasNext()) &amp;&amp; (!(monitor.isCancelled()))" to="(packItr.hasNext()) || (!(monitor.isCancelled()))" />
    <mutant id="mutant_6101" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="false" />
    <mutant id="mutant_6102" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="(o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))" />
    <mutant id="mutant_6103" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="(o.charAt(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_AGENT.length())) == '='" />
    <mutant id="mutant_6104" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="(!(pm.isCancelled())) || ((cnt = s.in.read(buf)) &gt;= 0)" />
    <mutant id="mutant_6105" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="true" />
    <mutant id="mutant_6106" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="false" />
    <mutant id="mutant_6107" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="!(pm.isCancelled())" />
    <mutant id="mutant_6108" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(pm.isCancelled())) &amp;&amp; ((cnt = s.in.read(buf)) &gt;= 0)" to="(cnt = s.in.read(buf)) &gt;= 0" />
    <mutant id="mutant_6100" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="true" />
    <mutant id="mutant_6170" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="(o.length()) == 0" />
    <mutant id="mutant_6171" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="true" />
    <mutant id="mutant_6172" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="false" />
    <mutant id="mutant_6173" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="o == null" />
    <mutant id="mutant_6174" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="!(url.startsWith(&quot;./&quot;))" />
    <mutant id="mutant_6175" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="!(url.startsWith(&quot;../&quot;))" />
    <mutant id="mutant_6176" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="true" />
    <mutant id="mutant_6177" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="false" />
    <mutant id="mutant_6167" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="false" />
    <mutant id="mutant_6168" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="(!(updates.isEmpty())) || (isNewRepository())" />
    <mutant id="mutant_6169" viable="true" in="org.eclipse.jgit.transport.TagOpt.fromOption(java.lang.String)" from="(o == null) || ((o.length()) == 0)" to="(o == null) &amp;&amp; ((o.length()) == 0)" />
    <mutant id="mutant_6160" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="false" />
    <mutant id="mutant_6161" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="(!(n.startsWith(&quot;refs/&quot;))) &amp;&amp; (!(Repository.isValidRefName(n)))" />
    <mutant id="mutant_6162" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="!(n.startsWith(&quot;refs/&quot;))" />
    <mutant id="mutant_6163" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="!(Repository.isValidRefName(n))" />
    <mutant id="mutant_6164" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="!(updates.isEmpty())" />
    <mutant id="mutant_6165" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="isNewRepository()" />
    <mutant id="mutant_6166" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(updates.isEmpty())) &amp;&amp; (isNewRepository())" to="true" />
    <mutant id="mutant_6156" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="false" />
    <mutant id="mutant_6157" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="packNames.isEmpty()" />
    <mutant id="mutant_6158" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) || (packNames.isEmpty())" />
    <mutant id="mutant_6159" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.push(org.eclipse.jgit.lib.ProgressMonitor,java.util.Map,java.io.OutputStream)" from="(!(n.startsWith(&quot;refs/&quot;))) || (!(Repository.isValidRefName(n)))" to="true" />
    <mutant id="mutant_6150" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="(getRefsMap().isEmpty())" />
    <mutant id="mutant_6151" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="true" />
    <mutant id="mutant_6152" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="false" />
    <mutant id="mutant_6153" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="((getRefsMap().isEmpty()) || ((packNames) != null))" />
    <mutant id="mutant_6154" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="(getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)" />
    <mutant id="mutant_6155" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null)) &amp;&amp; (packNames.isEmpty())" to="true" />
    <mutant id="mutant_6145" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="true" />
    <mutant id="mutant_6146" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="false" />
    <mutant id="mutant_6147" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="(c.getCommitTime()) &lt; until" />
    <mutant id="mutant_6148" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="c == null" />
    <mutant id="mutant_6149" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.isNewRepository()" from="((getRefsMap().isEmpty()) &amp;&amp; ((packNames) != null))" to="((packNames) != null)" />
    <mutant id="mutant_6140" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="true" />
    <mutant id="mutant_6141" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="false" />
    <mutant id="mutant_6142" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="(failures != null) || (!(failures.isEmpty()))" />
    <mutant id="mutant_6143" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="failures != null" />
    <mutant id="mutant_6144" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.markLocalCommitsComplete(int)" from="(c == null) || ((c.getCommitTime()) &lt; until)" to="(c == null) &amp;&amp; ((c.getCommitTime()) &lt; until)" />
    <mutant id="mutant_6134" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="true" />
    <mutant id="mutant_6135" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="false" />
    <mutant id="mutant_6136" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="al != null" />
    <mutant id="mutant_6137" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="!(al.isEmpty())" />
    <mutant id="mutant_6138" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(al != null) &amp;&amp; (!(al.isEmpty()))" to="(al != null) || (!(al.isEmpty()))" />
    <mutant id="mutant_6139" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(failures != null) &amp;&amp; (!(failures.isEmpty()))" to="!(failures.isEmpty())" />
    <mutant id="mutant_2608" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="(fb &amp; 143) == 8" />
    <mutant id="mutant_2609" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="true" />
    <mutant id="mutant_3939" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" to="true" />
    <mutant id="mutant_3930" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) || ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" />
    <mutant id="mutant_2606" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="deref || (ref.isSymbolic())" />
    <mutant id="mutant_3938" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" to="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) &amp;&amp; (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" />
    <mutant id="mutant_2607" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="((fb &amp; 143) == 8) || ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" />
    <mutant id="mutant_3937" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="(nextStep == null) &amp;&amp; (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" />
    <mutant id="mutant_2604" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="true" />
    <mutant id="mutant_3936" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH))" />
    <mutant id="mutant_2605" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="false" />
    <mutant id="mutant_3935" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="false" />
    <mutant id="mutant_2602" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="ref.isSymbolic()" />
    <mutant id="mutant_3934" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="true" />
    <mutant id="mutant_2603" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(org.eclipse.jgit.lib.RefUpdate,java.lang.String,boolean)" from="deref &amp;&amp; (ref.isSymbolic())" to="deref" />
    <mutant id="mutant_3933" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(nextStep == null) || (((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="nextStep == null" />
    <mutant id="mutant_2600" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="false" />
    <mutant id="mutant_3932" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="false" />
    <mutant id="mutant_2601" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="(!(dir.mkdirs())) || (!(dir.isDirectory()))" />
    <mutant id="mutant_3931" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="true" />
    <mutant id="mutant_3929" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH))" />
    <mutant id="mutant_3928" viable="true" in="org.eclipse.jgit.api.RebaseCommand.squashIntoPrevious(boolean,org.eclipse.jgit.lib.RebaseTodoLine)" from="(((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP)) &amp;&amp; ((nextStep.getAction()) != (RebaseTodoLine.Action.SQUASH)))" to="((nextStep.getAction()) != (RebaseTodoLine.Action.FIXUP))" />
    <mutant id="mutant_3927" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="false" />
    <mutant id="mutant_3926" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="true" />
    <mutant id="mutant_3925" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="(head.getObjectId()) == null" />
    <mutant id="mutant_3924" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="(head == null) &amp;&amp; ((head.getObjectId()) == null)" />
    <mutant id="mutant_3923" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getHead()" from="(head == null) || ((head.getObjectId()) == null)" to="head == null" />
    <mutant id="mutant_3922" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="(name != null) || (email != null)" />
    <mutant id="mutant_3921" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="email != null" />
    <mutant id="mutant_3920" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="name != null" />
    <mutant id="mutant_6192" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="true" />
    <mutant id="mutant_6193" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="false" />
    <mutant id="mutant_6194" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="(a.requiresCommitBody()) &amp;&amp; (b.requiresCommitBody())" />
    <mutant id="mutant_6195" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="a.requiresCommitBody()" />
    <mutant id="mutant_6196" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) || (b.include(walker, c))" to="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" />
    <mutant id="mutant_3919" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="false" />
    <mutant id="mutant_6197" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) || (b.include(walker, c))" to="true" />
    <mutant id="mutant_3918" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(name != null) &amp;&amp; (email != null)" to="true" />
    <mutant id="mutant_6198" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) || (b.include(walker, c))" to="false" />
    <mutant id="mutant_3917" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="messageFixupFile.exists()" />
    <mutant id="mutant_6199" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) || (b.include(walker, c))" to="a.include(walker, c)" />
    <mutant id="mutant_6190" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="false" />
    <mutant id="mutant_6191" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="(cmit.getCommitTime()) &lt;= (until)" />
    <mutant id="mutant_3916" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="isSquash" />
    <mutant id="mutant_6189" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="true" />
    <mutant id="mutant_3915" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="false" />
    <mutant id="mutant_3914" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="true" />
    <mutant id="mutant_3913" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="isSquash &amp;&amp; (messageFixupFile.exists())" to="isSquash || (messageFixupFile.exists())" />
    <mutant id="mutant_3912" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="false" />
    <mutant id="mutant_3911" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="true" />
    <mutant id="mutant_3910" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="(RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction()))" />
    <mutant id="mutant_6181" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="(a.requiresCommitBody()) &amp;&amp; (b.requiresCommitBody())" />
    <mutant id="mutant_6182" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="a.requiresCommitBody()" />
    <mutant id="mutant_6183" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" to="(a.include(walker, c)) || (b.include(walker, c))" />
    <mutant id="mutant_6184" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" to="true" />
    <mutant id="mutant_3909" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="((preserveMerges) &amp;&amp; shouldPick) || ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" />
    <mutant id="mutant_6185" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" to="false" />
    <mutant id="mutant_3908" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick) &amp;&amp; ((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="(preserveMerges) &amp;&amp; shouldPick" />
    <mutant id="mutant_6186" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="(a.include(walker, c)) &amp;&amp; (b.include(walker, c))" to="a.include(walker, c)" />
    <mutant id="mutant_3907" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="(RebaseTodoLine.Action.EDIT.equals(step.getAction()))" />
    <mutant id="mutant_6187" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="((cmit.getCommitTime()) &lt;= (until)) || ((cmit.getCommitTime()) &gt;= (when))" />
    <mutant id="mutant_3906" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="false" />
    <mutant id="mutant_6188" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="((cmit.getCommitTime()) &lt;= (until)) &amp;&amp; ((cmit.getCommitTime()) &gt;= (when))" to="(cmit.getCommitTime()) &gt;= (when)" />
    <mutant id="mutant_6180" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="false" />
    <mutant id="mutant_3905" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="true" />
    <mutant id="mutant_6178" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(url.startsWith(&quot;./&quot;))) &amp;&amp; (!(url.startsWith(&quot;../&quot;)))" to="(!(url.startsWith(&quot;./&quot;))) || (!(url.startsWith(&quot;../&quot;)))" />
    <mutant id="mutant_3904" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) || (RebaseTodoLine.Action.PICK.equals(step.getAction())))" to="((RebaseTodoLine.Action.EDIT.equals(step.getAction())) &amp;&amp; (RebaseTodoLine.Action.PICK.equals(step.getAction())))" />
    <mutant id="mutant_6179" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary(org.eclipse.jgit.revwalk.filter.RevFilter,org.eclipse.jgit.revwalk.filter.RevFilter)" from="(a.requiresCommitBody()) || (b.requiresCommitBody())" to="true" />
    <mutant id="mutant_3903" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="(preserveMerges)" />
    <mutant id="mutant_3902" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="((preserveMerges) || shouldPick)" />
    <mutant id="mutant_3901" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="false" />
    <mutant id="mutant_3900" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="true" />
    <mutant id="mutant_1311" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = id(raw, ptr)) &lt; 0" />
    <mutant id="mutant_2642" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="((r.pack) == pack) || ((r.position) == position)" />
    <mutant id="mutant_3974" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="(dcIter != null) || (dcIter.idEqual(cIter))" />
    <mutant id="mutant_1312" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = id(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_2643" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="true" />
    <mutant id="mutant_3973" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="dcIter.idEqual(cIter)" />
    <mutant id="mutant_2640" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="false" />
    <mutant id="mutant_3972" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="dcIter != null" />
    <mutant id="mutant_1310" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_2641" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="((maxFiles) &lt; (openFiles.get())) &amp;&amp; ((maxBytes) &lt; (openBytes.get()))" />
    <mutant id="mutant_3971" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="commitId == null" />
    <mutant id="mutant_3970" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="false" />
    <mutant id="mutant_1319" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_1317" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = personIdent(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_2648" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="(top != null) || (top.dead)" />
    <mutant id="mutant_1318" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_2649" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="true" />
    <mutant id="mutant_3979" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="true" />
    <mutant id="mutant_1315" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_2646" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="(r.position) == position" />
    <mutant id="mutant_3978" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="(!(merger.failed())) || (!(unmergedPaths.isEmpty()))" />
    <mutant id="mutant_1316" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = personIdent(raw, ptr)) &lt; 0" />
    <mutant id="mutant_2647" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="top != null" />
    <mutant id="mutant_3977" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="!(unmergedPaths.isEmpty())" />
    <mutant id="mutant_1313" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_2644" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="false" />
    <mutant id="mutant_3976" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="false" />
    <mutant id="mutant_1314" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_2645" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.scan(org.eclipse.jgit.internal.storage.file.WindowCache$Entry,org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((r.pack) == pack) &amp;&amp; ((r.position) == position)" to="(r.pack) == pack" />
    <mutant id="mutant_3975" viable="true" in="org.eclipse.jgit.api.ResetCommand.resetIndex(org.eclipse.jgit.lib.ObjectId)" from="(dcIter != null) &amp;&amp; (dcIter.idEqual(cIter))" to="true" />
    <mutant id="mutant_1300" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr == (raw.length)) || ((raw[ptr]) != ' ')" to="(raw[ptr]) != ' '" />
    <mutant id="mutant_2631" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="(size &lt; (wc.getStreamFileThreshold())) &amp;&amp; (path == null)" />
    <mutant id="mutant_3963" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="true" />
    <mutant id="mutant_1301" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="true" />
    <mutant id="mutant_2632" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="(in.read()) != (-1)" />
    <mutant id="mutant_3962" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="(state.equals(RepositoryState.REVERTING)) &amp;&amp; (state.equals(RepositoryState.REVERTING_RESOLVED))" />
    <mutant id="mutant_3961" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="state.equals(RepositoryState.CHERRY_PICKING_RESOLVED)" />
    <mutant id="mutant_2630" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="path == null" />
    <mutant id="mutant_3960" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="(state.equals(RepositoryState.CHERRY_PICKING)) &amp;&amp; (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" />
    <mutant id="mutant_1308" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_2639" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="true" />
    <mutant id="mutant_1309" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_1306" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = id(raw, ptr)) &lt; 0" />
    <mutant id="mutant_2637" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="(maxBytes) &lt; (openBytes.get())" />
    <mutant id="mutant_3969" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="true" />
    <mutant id="mutant_1307" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = id(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = id(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_2638" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.isFull()" from="((maxFiles) &lt; (openFiles.get())) || ((maxBytes) &lt; (openBytes.get()))" to="(maxFiles) &lt; (openFiles.get())" />
    <mutant id="mutant_3968" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="(ref) != null" />
    <mutant id="mutant_1304" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="(windows) || (ObjectChecker.isInvalidOnWindows(c))" />
    <mutant id="mutant_2635" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="false" />
    <mutant id="mutant_3967" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="((ref) != null) &amp;&amp; (commitId == null)" to="((ref) != null) || (commitId == null)" />
    <mutant id="mutant_1305" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="windows" />
    <mutant id="mutant_2636" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="(inf.getRemaining()) != 0" />
    <mutant id="mutant_3966" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="state.equals(RepositoryState.REVERTING_RESOLVED)" />
    <mutant id="mutant_1302" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="false" />
    <mutant id="mutant_2633" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="((inf.getRemaining()) != 0) &amp;&amp; ((in.read()) != (-1))" />
    <mutant id="mutant_3965" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="state.equals(RepositoryState.REVERTING)" />
    <mutant id="mutant_1303" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.scanPathSegment(byte[],int,int)" from="(windows) &amp;&amp; (ObjectChecker.isInvalidOnWindows(c))" to="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(c)" />
    <mutant id="mutant_2634" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.checkValidEndOfStream(java.io.InputStream,java.util.zip.Inflater,org.eclipse.jgit.lib.AnyObjectId,byte[])" from="((inf.getRemaining()) != 0) || ((in.read()) != (-1))" to="true" />
    <mutant id="mutant_3964" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.REVERTING)) || (state.equals(RepositoryState.REVERTING_RESOLVED))" to="false" />
    <mutant id="mutant_2620" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="path == null" />
    <mutant id="mutant_3952" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="state.equals(RepositoryState.MERGING_RESOLVED)" />
    <mutant id="mutant_2621" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="(size &lt; (wc.getStreamFileThreshold())) &amp;&amp; (path == null)" />
    <mutant id="mutant_3951" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="RebaseTodoLine.Action.COMMENT.equals(line.getAction())" />
    <mutant id="mutant_3950" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="false" />
    <mutant id="mutant_2628" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="true" />
    <mutant id="mutant_2629" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="false" />
    <mutant id="mutant_3959" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="false" />
    <mutant id="mutant_2626" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="(path == null) || ((Integer.MAX_VALUE) &lt; size)" />
    <mutant id="mutant_3958" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="true" />
    <mutant id="mutant_2627" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="size &lt; (wc.getStreamFileThreshold())" />
    <mutant id="mutant_3957" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.CHERRY_PICKING)) || (state.equals(RepositoryState.CHERRY_PICKING_RESOLVED))" to="state.equals(RepositoryState.CHERRY_PICKING)" />
    <mutant id="mutant_2624" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="path == null" />
    <mutant id="mutant_3956" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="state.equals(RepositoryState.MERGING)" />
    <mutant id="mutant_2625" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="(Integer.MAX_VALUE) &lt; size" />
    <mutant id="mutant_3955" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="(state.equals(RepositoryState.MERGING)) &amp;&amp; (state.equals(RepositoryState.MERGING_RESOLVED))" />
    <mutant id="mutant_2622" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="true" />
    <mutant id="mutant_3954" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="false" />
    <mutant id="mutant_2623" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="false" />
    <mutant id="mutant_3953" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(state.equals(RepositoryState.MERGING)) || (state.equals(RepositoryState.MERGING_RESOLVED))" to="true" />
    <mutant id="mutant_2619" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="false" />
    <mutant id="mutant_3941" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" to="RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())" />
    <mutant id="mutant_2610" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="false" />
    <mutant id="mutant_3940" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(RebaseTodoLine.Action.SQUASH.equals(steps.get(0).getAction())) || (RebaseTodoLine.Action.FIXUP.equals(steps.get(0).getAction()))" to="false" />
    <mutant id="mutant_2617" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="size &lt; (wc.getStreamFileThreshold())" />
    <mutant id="mutant_3949" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="true" />
    <mutant id="mutant_2618" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(size &lt; (wc.getStreamFileThreshold())) || (path == null)" to="true" />
    <mutant id="mutant_3948" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="(poppedLines.size()) &gt;= numSteps" />
    <mutant id="mutant_2615" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="(Integer.MAX_VALUE) &lt; size" />
    <mutant id="mutant_3947" viable="true" in="org.eclipse.jgit.api.RebaseCommand.popSteps(int)" from="((poppedLines.size()) &gt;= numSteps) || (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" to="((poppedLines.size()) &gt;= numSteps) &amp;&amp; (RebaseTodoLine.Action.COMMENT.equals(line.getAction()))" />
    <mutant id="mutant_2616" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="(path == null) || ((Integer.MAX_VALUE) &lt; size)" />
    <mutant id="mutant_3946" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) &amp;&amp; ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" />
    <mutant id="mutant_2613" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="false" />
    <mutant id="mutant_3945" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="false" />
    <mutant id="mutant_2614" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="path == null" />
    <mutant id="mutant_3944" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="true" />
    <mutant id="mutant_2611" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="((fb &amp; 143) == 8) &amp;&amp; ((((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0)" to="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31) == 0" />
    <mutant id="mutant_3943" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="(rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0" />
    <mutant id="mutant_2612" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(path == null) &amp;&amp; ((Integer.MAX_VALUE) &lt; size)" to="true" />
    <mutant id="mutant_3942" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkSteps(java.util.List)" from="(!(rebaseState.getFile(RebaseCommand.DONE).exists())) || ((rebaseState.readFile(RebaseCommand.DONE).trim().length()) == 0)" to="!(rebaseState.getFile(RebaseCommand.DONE).exists())" />
    <mutant id="mutant_2690" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="key.equals(e.pack)" />
    <mutant id="mutant_1355" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')" />
    <mutant id="mutant_2686" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="w == null" />
    <mutant id="mutant_1356" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2687" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="true" />
    <mutant id="mutant_1353" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="true" />
    <mutant id="mutant_2684" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="true" />
    <mutant id="mutant_1354" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="false" />
    <mutant id="mutant_2685" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="false" />
    <mutant id="mutant_1351" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" />
    <mutant id="mutant_2682" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="!(w.contains(pack, position))" />
    <mutant id="mutant_1352" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" />
    <mutant id="mutant_2683" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.pin(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(w == null) || (!(w.contains(pack, position)))" to="(w == null) &amp;&amp; (!(w.contains(pack, position)))" />
    <mutant id="mutant_2680" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="(typeHint != (ObjectReader.OBJ_ANY)) || ((ldr.getType()) != typeHint)" />
    <mutant id="mutant_1350" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="((end - ptr) &gt;= 3)" />
    <mutant id="mutant_2681" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="(ldr.getType()) != typeHint" />
    <mutant id="mutant_1359" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_1357" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3)" />
    <mutant id="mutant_2688" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="false" />
    <mutant id="mutant_1358" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) == 3) &amp;&amp; ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2689" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="(e.offset) == position" />
    <mutant id="mutant_1344" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2675" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="false" />
    <mutant id="mutant_1345" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')" />
    <mutant id="mutant_2676" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) || (window.contains(p, (pos + (cnt - 1))))" />
    <mutant id="mutant_1342" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_2673" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="(window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow" />
    <mutant id="mutant_1343" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2674" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="true" />
    <mutant id="mutant_1340" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2671" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="headerOnly &amp;&amp; (dstoff == (dstbuf.length))" />
    <mutant id="mutant_1341" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')) || (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2672" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="((window) instanceof org.eclipse.jgit.internal.storage.file.ByteArrayWindow) &amp;&amp; (window.contains(p, (pos + (cnt - 1))))" to="window.contains(p, (pos + (cnt - 1)))" />
    <mutant id="mutant_2670" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="inf.finished()" />
    <mutant id="mutant_1348" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="true" />
    <mutant id="mutant_2679" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="typeHint != (ObjectReader.OBJ_ANY)" />
    <mutant id="mutant_1349" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="false" />
    <mutant id="mutant_1346" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="(((end - ptr) &gt;= 3) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" />
    <mutant id="mutant_2677" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="true" />
    <mutant id="mutant_1347" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')" />
    <mutant id="mutant_2678" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(typeHint != (ObjectReader.OBJ_ANY)) &amp;&amp; ((ldr.getType()) != typeHint)" to="false" />
    <mutant id="mutant_1333" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" />
    <mutant id="mutant_2664" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="false" />
    <mutant id="mutant_3996" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="false" />
    <mutant id="mutant_1334" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" />
    <mutant id="mutant_2665" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(headerOnly || (dstoff == (dstbuf.length)))" />
    <mutant id="mutant_3995" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="true" />
    <mutant id="mutant_1331" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="true" />
    <mutant id="mutant_2662" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(dstoff == (dstbuf.length))" />
    <mutant id="mutant_3994" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="!(ignoreRepositoryState)" />
    <mutant id="mutant_1332" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="false" />
    <mutant id="mutant_2663" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="true" />
    <mutant id="mutant_3993" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="(!(ignoreRepositoryState)) || ((repo.getRepositoryState()) != (RepositoryState.SAFE))" />
    <mutant id="mutant_2660" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="false" />
    <mutant id="mutant_3992" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="(!(ignoreRepositoryState)) &amp;&amp; ((repo.getRepositoryState()) != (RepositoryState.SAFE))" to="(repo.getRepositoryState()) != (RepositoryState.SAFE)" />
    <mutant id="mutant_1330" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="((end - ptr) &gt;= 3)" />
    <mutant id="mutant_2661" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="(need &gt; 0) || (position &lt; length)" />
    <mutant id="mutant_3991" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="(p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))" />
    <mutant id="mutant_3990" viable="false" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="false" />
    <mutant id="mutant_1339" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_1337" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3)" />
    <mutant id="mutant_2668" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="false" />
    <mutant id="mutant_1338" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) == 3) &amp;&amp; ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2669" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="(inf.finished()) &amp;&amp; (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" />
    <mutant id="mutant_3999" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="true" />
    <mutant id="mutant_1335" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'x')" />
    <mutant id="mutant_2666" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="headerOnly" />
    <mutant id="mutant_3998" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="((stashCommit.getParentCount()) &lt; 2) &amp;&amp; ((stashCommit.getParentCount()) &gt; 3)" />
    <mutant id="mutant_1336" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2667" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="(inf.finished()) || (headerOnly &amp;&amp; (dstoff == (dstbuf.length)))" to="true" />
    <mutant id="mutant_3997" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((stashCommit.getParentCount()) &lt; 2) || ((stashCommit.getParentCount()) &gt; 3)" to="(stashCommit.getParentCount()) &lt; 2" />
    <mutant id="mutant_1322" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="((ptr = personIdent(raw, ptr)) &lt; 0) &amp;&amp; ((raw[ptr++]) != '\n')" />
    <mutant id="mutant_2653" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="(e.ref.lastAccess) &lt; (old.ref.lastAccess)" />
    <mutant id="mutant_3985" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="((p != null) || (!(p.equals(repo.getWorkTree()))))" />
    <mutant id="mutant_1323" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="true" />
    <mutant id="mutant_2654" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="true" />
    <mutant id="mutant_3984" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="(p != null)" />
    <mutant id="mutant_1320" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_2651" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="top.dead" />
    <mutant id="mutant_3983" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="false" />
    <mutant id="mutant_1321" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(ptr = personIdent(raw, ptr)) &lt; 0" />
    <mutant id="mutant_2652" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="(old == null) &amp;&amp; ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" />
    <mutant id="mutant_3982" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="true" />
    <mutant id="mutant_3981" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="!(merger.failed())" />
    <mutant id="mutant_2650" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache.clean(org.eclipse.jgit.internal.storage.file.WindowCache$Entry)" from="(top != null) &amp;&amp; (top.dead)" to="false" />
    <mutant id="mutant_3980" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(!(merger.failed())) &amp;&amp; (!(unmergedPaths.isEmpty()))" to="false" />
    <mutant id="mutant_1328" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="false" />
    <mutant id="mutant_2659" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="true" />
    <mutant id="mutant_1329" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="(((end - ptr) &gt;= 3) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" />
    <mutant id="mutant_1326" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u')" />
    <mutant id="mutant_2657" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="position &lt; length" />
    <mutant id="mutant_3989" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="true" />
    <mutant id="mutant_1327" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'u'))" to="true" />
    <mutant id="mutant_2658" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="(need &gt; 0) &amp;&amp; (position &lt; length)" to="need &gt; 0" />
    <mutant id="mutant_3988" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) || (p.delete())" />
    <mutant id="mutant_1324" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="false" />
    <mutant id="mutant_2655" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="false" />
    <mutant id="mutant_3987" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree())))) &amp;&amp; (p.delete())" to="p.delete()" />
    <mutant id="mutant_1325" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkCommit(byte[])" from="((ptr = personIdent(raw, ptr)) &lt; 0) || ((raw[ptr++]) != '\n')" to="(raw[ptr++]) != '\n'" />
    <mutant id="mutant_2656" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(old == null) || ((e.ref.lastAccess) &lt; (old.ref.lastAccess))" to="old == null" />
    <mutant id="mutant_3986" viable="true" in="org.eclipse.jgit.api.RmCommand.delete(java.io.File)" from="((p != null) &amp;&amp; (!(p.equals(repo.getWorkTree()))))" to="(!(p.equals(repo.getWorkTree())))" />
    <mutant id="mutant_1399" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't')" />
    <mutant id="mutant_1397" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="true" />
    <mutant id="mutant_1398" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="false" />
    <mutant id="mutant_1395" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')" />
    <mutant id="mutant_1396" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 't'))" to="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" />
    <mutant id="mutant_1393" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="((end - ptr) &gt;= 4)" />
    <mutant id="mutant_1394" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="(((end - ptr) &gt;= 4) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" />
    <mutant id="mutant_1391" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="true" />
    <mutant id="mutant_1392" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'p'))" to="false" />
    <mutant id="mutant_1390" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))" />
    <mutant id="mutant_1388" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="false" />
    <mutant id="mutant_1389" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.')" />
    <mutant id="mutant_1386" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) || (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" />
    <mutant id="mutant_1387" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))) &amp;&amp; (((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="true" />
    <mutant id="mutant_1384" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="false" />
    <mutant id="mutant_1385" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="(((end - ptr) == 4) &amp;&amp; ((raw[(ptr + 4)]) == '.'))" />
    <mutant id="mutant_1382" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((raw[(ptr + 4)]) == '.')" />
    <mutant id="mutant_1383" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="true" />
    <mutant id="mutant_1380" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="false" />
    <mutant id="mutant_1381" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 4) || ((raw[(ptr + 4)]) == '.'))" to="((end - ptr) == 4)" />
    <mutant id="mutant_1377" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) || (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" />
    <mutant id="mutant_1378" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" />
    <mutant id="mutant_1375" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')" />
    <mutant id="mutant_1376" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="(org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)]))" />
    <mutant id="mutant_1373" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="true" />
    <mutant id="mutant_1374" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="false" />
    <mutant id="mutant_1371" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" />
    <mutant id="mutant_1372" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o'))" to="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" />
    <mutant id="mutant_1379" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(raw[(ptr + 3)])))" to="true" />
    <mutant id="mutant_1370" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="((end - ptr) &gt;= 4)" />
    <mutant id="mutant_1366" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm')" />
    <mutant id="mutant_2697" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="((start) &lt;= pos)" />
    <mutant id="mutant_1367" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="(((end - ptr) &gt;= 4) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" />
    <mutant id="mutant_2698" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="((pack) == want)" />
    <mutant id="mutant_1364" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="(((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')" />
    <mutant id="mutant_2695" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="((curByteCount) &gt; (maxByteCount)) || ((lruTail) != null)" />
    <mutant id="mutant_1365" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) || (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" />
    <mutant id="mutant_2696" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="(lruTail) != null" />
    <mutant id="mutant_1362" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2693" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="false" />
    <mutant id="mutant_1363" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.')" />
    <mutant id="mutant_2694" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="(curByteCount) &gt; (maxByteCount)" />
    <mutant id="mutant_1360" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="false" />
    <mutant id="mutant_2691" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((e.offset) == position) &amp;&amp; (key.equals(e.pack))" to="((e.offset) == position) || (key.equals(e.pack))" />
    <mutant id="mutant_1361" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="((((end - ptr) &gt;= 3) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'n')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 1)])) == 'o')) &amp;&amp; (((end - ptr) == 3) || ((raw[(ptr + 3)]) == '.'))" to="true" />
    <mutant id="mutant_2692" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DeltaBaseCache.releaseMemory()" from="((curByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="true" />
    <mutant id="mutant_1368" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="true" />
    <mutant id="mutant_2699" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.contains(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((pack) == want) &amp;&amp; ((start) &lt;= pos))" to="(((pack) == want) || ((start) &lt;= pos))" />
    <mutant id="mutant_1369" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(((end - ptr) &gt;= 4) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(raw[(ptr + 2)])) == 'm'))" to="false" />
    <mutant id="mutant_1199" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="false" />
    <mutant id="mutant_1197" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" />
    <mutant id="mutant_1198" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="true" />
    <mutant id="mutant_1195" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="(missing.isEmpty())" />
    <mutant id="mutant_1196" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) || (modified.isEmpty()))" />
    <mutant id="mutant_1193" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="false" />
    <mutant id="mutant_1194" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" />
    <mutant id="mutant_1191" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) || (missing.isEmpty()))" />
    <mutant id="mutant_1192" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty()))" to="true" />
    <mutant id="mutant_1190" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) || (removed.isEmpty()))" />
    <mutant id="mutant_1188" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="false" />
    <mutant id="mutant_1189" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="(removed.isEmpty())" />
    <mutant id="mutant_1186" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" />
    <mutant id="mutant_1187" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty()))" to="true" />
    <mutant id="mutant_1184" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" to="false" />
    <mutant id="mutant_1185" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" to="(added.isEmpty())" />
    <mutant id="mutant_1182" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" to="((added.isEmpty()) || (changed.isEmpty()))" />
    <mutant id="mutant_1183" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((added.isEmpty()) &amp;&amp; (changed.isEmpty()))" to="true" />
    <mutant id="mutant_1180" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="smid.getRemoved().isEmpty()" />
    <mutant id="mutant_1181" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())" />
    <mutant id="mutant_1179" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="false" />
    <mutant id="mutant_1177" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) || (smid.getRemoved().isEmpty())" />
    <mutant id="mutant_1178" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty())) &amp;&amp; (smid.getRemoved().isEmpty())" to="true" />
    <mutant id="mutant_1175" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="(smid.getModified().isEmpty())" />
    <mutant id="mutant_1176" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" />
    <mutant id="mutant_1173" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="true" />
    <mutant id="mutant_1174" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="false" />
    <mutant id="mutant_1171" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="(smid.getMissing().isEmpty())" />
    <mutant id="mutant_1172" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) &amp;&amp; (smid.getModified().isEmpty()))" to="(((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty())) || (smid.getModified().isEmpty()))" />
    <mutant id="mutant_1170" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="false" />
    <mutant id="mutant_1168" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) || (smid.getMissing().isEmpty()))" />
    <mutant id="mutant_2499" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="true" />
    <mutant id="mutant_1169" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="true" />
    <mutant id="mutant_1166" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="(smid.getConflicting().isEmpty())" />
    <mutant id="mutant_2497" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) || ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" />
    <mutant id="mutant_1167" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty())) &amp;&amp; (smid.getMissing().isEmpty()))" to="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" />
    <mutant id="mutant_2498" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" />
    <mutant id="mutant_1164" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) || (smid.getConflicting().isEmpty()))" />
    <mutant id="mutant_2495" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="false" />
    <mutant id="mutant_1165" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" />
    <mutant id="mutant_2496" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="(&quot;&quot;.equals(prefix))" />
    <mutant id="mutant_1162" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="true" />
    <mutant id="mutant_2493" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="((!(needle.contains(&quot;/&quot;))) || (&quot;&quot;.equals(prefix)))" />
    <mutant id="mutant_1163" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty())) &amp;&amp; (smid.getConflicting().isEmpty()))" to="false" />
    <mutant id="mutant_2494" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="true" />
    <mutant id="mutant_7341" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)" />
    <mutant id="mutant_6010" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="clientShallowCommits.remove(c)" />
    <mutant id="mutant_7340" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) || (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" />
    <mutant id="mutant_6011" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="true" />
    <mutant id="mutant_7343" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="false" />
    <mutant id="mutant_6012" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="false" />
    <mutant id="mutant_7342" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="true" />
    <mutant id="mutant_6002" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head != null" />
    <mutant id="mutant_7334" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="((fh.getHunks().isEmpty()) || ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" />
    <mutant id="mutant_6003" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="(head != null) || (head.isSymbolic())" />
    <mutant id="mutant_7333" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="(fh.getHunks().isEmpty())" />
    <mutant id="mutant_6004" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="true" />
    <mutant id="mutant_7336" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="true" />
    <mutant id="mutant_6005" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="false" />
    <mutant id="mutant_7335" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) || ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" />
    <mutant id="mutant_6006" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="!(clientShallowCommits.contains(c))" />
    <mutant id="mutant_7338" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" />
    <mutant id="mutant_6007" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="(c.getDepth()) == (depth)" />
    <mutant id="mutant_7337" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="false" />
    <mutant id="mutant_6008" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) == (depth)) &amp;&amp; (!(clientShallowCommits.contains(c)))" to="((c.getDepth()) == (depth)) || (!(clientShallowCommits.contains(c)))" />
    <mutant id="mutant_6009" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="((c.getDepth()) &lt; (depth)) || (clientShallowCommits.remove(c))" />
    <mutant id="mutant_7339" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0))" to="((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (org.eclipse.jgit.patch.Patch.BIN_TRAILER.length)), org.eclipse.jgit.patch.Patch.BIN_TRAILER)) &gt;= 0)" />
    <mutant id="mutant_7330" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="((Patch.BIN_TRAILER.length) &lt; (eol - c))" />
    <mutant id="mutant_6000" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="true" />
    <mutant id="mutant_7332" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="false" />
    <mutant id="mutant_6001" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="false" />
    <mutant id="mutant_7331" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c)))" to="true" />
    <mutant id="mutant_7323" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="(org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0" />
    <mutant id="mutant_7322" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="false" />
    <mutant id="mutant_7325" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="(org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0" />
    <mutant id="mutant_7324" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) || ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" />
    <mutant id="mutant_7327" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="false" />
    <mutant id="mutant_7326" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="true" />
    <mutant id="mutant_7329" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="(fh.getHunks().isEmpty()) || ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" />
    <mutant id="mutant_7328" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(fh.getHunks().isEmpty()) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.Patch.GIT_BINARY)) &gt;= 0)" to="fh.getHunks().isEmpty()" />
    <mutant id="mutant_7321" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="true" />
    <mutant id="mutant_7320" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="((org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, n, org.eclipse.jgit.patch.FileHeader.NEW_NAME)) &gt;= 0)" to="(org.eclipse.jgit.util.RawParseUtils.match(buf, c, org.eclipse.jgit.patch.FileHeader.OLD_NAME)) &gt;= 0" />
    <mutant id="mutant_7319" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="((nContext) + (old.nAdded)) &gt; (newLineCount)" />
    <mutant id="mutant_7312" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))" />
    <mutant id="mutant_7311" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="(org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0" />
    <mutant id="mutant_7314" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="false" />
    <mutant id="mutant_7313" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="true" />
    <mutant id="mutant_7316" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) &amp;&amp; (((nContext) + (old.nAdded)) &gt; (newLineCount))" />
    <mutant id="mutant_7315" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="((nContext) + (old.nDeleted)) &gt; (old.lineCount)" />
    <mutant id="mutant_7318" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="false" />
    <mutant id="mutant_7317" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) &gt; (old.lineCount)) || (((nContext) + (old.nAdded)) &gt; (newLineCount))" to="true" />
    <mutant id="mutant_7310" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" to="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount))) || ((org.eclipse.jgit.util.RawParseUtils.match(buf, last, org.eclipse.jgit.patch.Patch.SIG_FOOTER)) &gt;= 0)" />
    <mutant id="mutant_7309" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="(((nContext) + (old.nAdded)) == (newLineCount))" />
    <mutant id="mutant_7308" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="false" />
    <mutant id="mutant_7301" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="((last &lt; end) || ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" />
    <mutant id="mutant_7300" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))" />
    <mutant id="mutant_7303" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="false" />
    <mutant id="mutant_7302" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="true" />
    <mutant id="mutant_7305" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" />
    <mutant id="mutant_7304" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount)))" to="(last &lt; end)" />
    <mutant id="mutant_7307" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="true" />
    <mutant id="mutant_7306" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) &amp;&amp; (((nContext) + (old.nAdded)) == (newLineCount)))" to="(((last &lt; end) &amp;&amp; ((((nContext) + (old.nDeleted)) - 1) == (old.lineCount))) || (((nContext) + (old.nAdded)) == (newLineCount)))" />
    <mutant id="mutant_6050" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="(((depth) == 0) || (clientShallowCommits.isEmpty()))" />
    <mutant id="mutant_6051" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="true" />
    <mutant id="mutant_6052" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="false" />
    <mutant id="mutant_6053" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="clientShallowCommits.isEmpty()" />
    <mutant id="mutant_6054" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="true" />
    <mutant id="mutant_6055" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="false" />
    <mutant id="mutant_6056" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="commonBase.isEmpty()" />
    <mutant id="mutant_6046" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="true" />
    <mutant id="mutant_6047" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="false" />
    <mutant id="mutant_6048" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="sideband" />
    <mutant id="mutant_6049" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(((depth) == 0) &amp;&amp; (clientShallowCommits.isEmpty()))" to="((depth) == 0)" />
    <mutant id="mutant_6040" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="true" />
    <mutant id="mutant_6041" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="false" />
    <mutant id="mutant_6042" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K)" />
    <mutant id="mutant_6043" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)" />
    <mutant id="mutant_6044" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="(noPack.getMessage()) != null" />
    <mutant id="mutant_6045" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="sideband &amp;&amp; ((noPack.getMessage()) != null)" to="sideband || ((noPack.getMessage()) != null)" />
    <mutant id="mutant_6035" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="(policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))" />
    <mutant id="mutant_6036" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="policy == null" />
    <mutant id="mutant_6037" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="true" />
    <mutant id="mutant_6038" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="false" />
    <mutant id="mutant_6039" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) &amp;&amp; (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" />
    <mutant id="mutant_6030" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT))" />
    <mutant id="mutant_6031" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))" />
    <mutant id="mutant_6032" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="true" />
    <mutant id="mutant_6033" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="false" />
    <mutant id="mutant_6034" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) &amp;&amp; (policy == null)" />
    <mutant id="mutant_6024" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="policy == null" />
    <mutant id="mutant_6025" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) &amp;&amp; (policy == null)" />
    <mutant id="mutant_6026" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="true" />
    <mutant id="mutant_6027" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="false" />
    <mutant id="mutant_6028" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))) || (policy == null)" to="(policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))" />
    <mutant id="mutant_6029" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="((policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT)) &amp;&amp; (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" />
    <mutant id="mutant_7350" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) || (!(fh.hasMetaDataChanges()))" />
    <mutant id="mutant_6020" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(policy == (UploadPack.RequestPolicy.TIP))" />
    <mutant id="mutant_7352" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="!(fh.hasMetaDataChanges())" />
    <mutant id="mutant_6021" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="(policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP))" />
    <mutant id="mutant_7351" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="(fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))" />
    <mutant id="mutant_6022" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="true" />
    <mutant id="mutant_7354" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="false" />
    <mutant id="mutant_6023" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="false" />
    <mutant id="mutant_7353" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))) &amp;&amp; (!(fh.hasMetaDataChanges()))" to="true" />
    <mutant id="mutant_6013" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="((c.getDepth()) &lt; (depth)) &amp;&amp; (clientShallowCommits.remove(c))" to="(c.getDepth()) &lt; (depth)" />
    <mutant id="mutant_7345" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="((fh.getHunks().isEmpty()) || ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" />
    <mutant id="mutant_6014" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="!(line.startsWith(&quot;want &quot;))" />
    <mutant id="mutant_7344" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(((fh.getHunks().isEmpty()) &amp;&amp; ((Patch.BIN_TRAILER.length) &lt; (eol - c))) &amp;&amp; ((org.eclipse.jgit.util.RawParseUtils.match(buf, (eol - (Patch.BIN_TRAILER.length)), Patch.BIN_TRAILER)) &gt;= 0)) &amp;&amp; (Patch.matchAny(buf, c, Patch.BIN_HEADERS))" to="org.eclipse.jgit.patch.Patch.matchAny(buf, c, org.eclipse.jgit.patch.Patch.BIN_HEADERS)" />
    <mutant id="mutant_6015" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="(line.length()) &lt; 45" />
    <mutant id="mutant_7347" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="false" />
    <mutant id="mutant_6016" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="true" />
    <mutant id="mutant_7346" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="true" />
    <mutant id="mutant_6017" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="false" />
    <mutant id="mutant_7349" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED))" />
    <mutant id="mutant_6018" viable="false" in="org.eclipse.jgit.transport.UploadPack.recvWants()" from="(!(line.startsWith(&quot;want &quot;))) || ((line.length()) &lt; 45)" to="(!(line.startsWith(&quot;want &quot;))) &amp;&amp; ((line.length()) &lt; 45)" />
    <mutant id="mutant_7348" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="((fh.getHunks().isEmpty()) &amp;&amp; ((fh.getPatchType()) == (FileHeader.PatchType.UNIFIED)))" to="(fh.getHunks().isEmpty())" />
    <mutant id="mutant_6019" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="((policy == (UploadPack.RequestPolicy.TIP)) || (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" to="((policy == (UploadPack.RequestPolicy.TIP)) &amp;&amp; (policy == (UploadPack.RequestPolicy.REACHABLE_COMMIT_TIP)))" />
    <mutant id="mutant_6093" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="options.isEmpty()" />
    <mutant id="mutant_6094" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="(o.startsWith(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_AGENT))" />
    <mutant id="mutant_6095" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))" />
    <mutant id="mutant_6096" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) || ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" />
    <mutant id="mutant_6097" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="true" />
    <mutant id="mutant_6098" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length())))" to="false" />
    <mutant id="mutant_3819" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="commit" />
    <mutant id="mutant_6099" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) &amp;&amp; ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" to="((o.startsWith(GitProtocolConstants.OPTION_AGENT)) &amp;&amp; ((o.length()) &gt; (GitProtocolConstants.OPTION_AGENT.length()))) || ((o.charAt(GitProtocolConstants.OPTION_AGENT.length())) == '=')" />
    <mutant id="mutant_3818" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="!(squash)" />
    <mutant id="mutant_6090" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="(options == null) &amp;&amp; (options.isEmpty())" />
    <mutant id="mutant_6091" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="true" />
    <mutant id="mutant_6092" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="false" />
    <mutant id="mutant_3817" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="false" />
    <mutant id="mutant_3816" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="true" />
    <mutant id="mutant_3815" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="commit" />
    <mutant id="mutant_3814" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (!(squash))" to="(commit) || (!(squash))" />
    <mutant id="mutant_3813" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="!(commit)" />
    <mutant id="mutant_3812" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="!(squash)" />
    <mutant id="mutant_3811" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="false" />
    <mutant id="mutant_3810" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="true" />
    <mutant id="mutant_6082" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="false" />
    <mutant id="mutant_6083" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="c &lt;= 32" />
    <mutant id="mutant_6084" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="((b.length()) &gt; 0) || ((b.charAt(((b.length()) - 1))) == '.')" />
    <mutant id="mutant_6085" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="(b.length()) &gt; 0" />
    <mutant id="mutant_6086" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="true" />
    <mutant id="mutant_3809" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (!(squash))" to="(!(commit)) || (!(squash))" />
    <mutant id="mutant_6087" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="false" />
    <mutant id="mutant_3808" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="!(commit)" />
    <mutant id="mutant_6088" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) &gt; 0) &amp;&amp; ((b.charAt(((b.length()) - 1))) == '.')" to="(b.charAt(((b.length()) - 1))) == '.'" />
    <mutant id="mutant_3807" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="(!(commit)) || (squash)" />
    <mutant id="mutant_6089" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="(options == null) || (options.isEmpty())" to="options == null" />
    <mutant id="mutant_6080" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="(c &lt;= 32) &amp;&amp; (c &gt;= 127)" />
    <mutant id="mutant_6081" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="true" />
    <mutant id="mutant_3806" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="false" />
    <mutant id="mutant_6079" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="(c &lt;= 32) || (c &gt;= 127)" to="c &gt;= 127" />
    <mutant id="mutant_3805" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="true" />
    <mutant id="mutant_3804" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(!(commit)) &amp;&amp; (squash)" to="squash" />
    <mutant id="mutant_3803" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="(fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF)" />
    <mutant id="mutant_3802" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="(revWalk.isMergedInto(headCommit, srcCommit)) || ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" />
    <mutant id="mutant_3801" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="false" />
    <mutant id="mutant_3800" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="true" />
    <mutant id="mutant_6071" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="true" />
    <mutant id="mutant_6072" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="false" />
    <mutant id="mutant_6073" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="pw.willInclude(peeledId)" />
    <mutant id="mutant_6074" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="(!(err.isOutput())) || ((err.getMessage()) != null)" />
    <mutant id="mutant_6075" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="!(err.isOutput())" />
    <mutant id="mutant_6076" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="(err.getMessage()) != null" />
    <mutant id="mutant_6077" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="true" />
    <mutant id="mutant_6078" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(!(err.isOutput())) &amp;&amp; ((err.getMessage()) != null)" to="false" />
    <mutant id="mutant_6070" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="(pw.willInclude(peeledId)) || (!(pw.willInclude(objectId)))" />
    <mutant id="mutant_6068" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="false" />
    <mutant id="mutant_6069" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.willInclude(peeledId)) &amp;&amp; (!(pw.willInclude(objectId)))" to="!(pw.willInclude(objectId))" />
    <mutant id="mutant_6060" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)" />
    <mutant id="mutant_6061" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="true" />
    <mutant id="mutant_6062" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="false" />
    <mutant id="mutant_6063" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="(refs) != null" />
    <mutant id="mutant_6064" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="obj.has(WANT)" />
    <mutant id="mutant_6065" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="obj != null" />
    <mutant id="mutant_6066" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="(obj != null) || (obj.has(WANT))" />
    <mutant id="mutant_6067" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(obj != null) &amp;&amp; (obj.has(WANT))" to="true" />
    <mutant id="mutant_6057" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="(commonBase.isEmpty()) || ((refs) != null)" />
    <mutant id="mutant_6058" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(commonBase.isEmpty()) &amp;&amp; ((refs) != null)" to="(refs) != null" />
    <mutant id="mutant_6059" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) &amp;&amp; ((refs) != null)" to="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_INCLUDE_TAG)) || ((refs) != null)" />
    <mutant id="mutant_2521" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="false" />
    <mutant id="mutant_3853" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="id != null" />
    <mutant id="mutant_2522" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="last != null" />
    <mutant id="mutant_3852" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="(id != null) || ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" />
    <mutant id="mutant_3851" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="false" />
    <mutant id="mutant_2520" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="true" />
    <mutant id="mutant_3850" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="true" />
    <mutant id="mutant_2529" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="false" />
    <mutant id="mutant_2527" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="file.isFile()" />
    <mutant id="mutant_3859" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="(preserveMerges) &amp;&amp; ((commit.getParentCount()) == 1)" />
    <mutant id="mutant_2528" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="true" />
    <mutant id="mutant_3858" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="(head != null) || (head.isSymbolic())" />
    <mutant id="mutant_2525" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="false" />
    <mutant id="mutant_3857" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head != null" />
    <mutant id="mutant_2526" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="(last != null) || ((RefComparator.compareTo(last, cur)) &gt; 0)" />
    <mutant id="mutant_3856" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="false" />
    <mutant id="mutant_2523" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="(RefComparator.compareTo(last, cur)) &gt; 0" />
    <mutant id="mutant_3855" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="true" />
    <mutant id="mutant_2524" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(last != null) &amp;&amp; ((RefComparator.compareTo(last, cur)) &gt; 0)" to="true" />
    <mutant id="mutant_3854" viable="true" in="org.eclipse.jgit.api.PushCommand.call()" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head.isSymbolic()" />
    <mutant id="mutant_2510" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="0 &lt;= idx" />
    <mutant id="mutant_3842" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="li &lt; 0" />
    <mutant id="mutant_2511" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="(curList.get(idx)) == leaf" />
    <mutant id="mutant_3841" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="false" />
    <mutant id="mutant_3840" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="true" />
    <mutant id="mutant_2518" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="(loose != null) || (dst.getName().startsWith(prefix))" />
    <mutant id="mutant_2519" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="dst.getName().startsWith(prefix)" />
    <mutant id="mutant_3849" viable="true" in="org.eclipse.jgit.api.NameRevCommand.addAnnotatedTags()" from="(id != null) &amp;&amp; ((walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag)" to="(walk.parseAny(id)) instanceof org.eclipse.jgit.revwalk.RevTag" />
    <mutant id="mutant_2516" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="f.isPeeled()" />
    <mutant id="mutant_3848" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="(ri &lt; 0) || (rightTip.startsWith(prefix))" />
    <mutant id="mutant_2517" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(loose != null) &amp;&amp; (dst.getName().startsWith(prefix))" to="loose != null" />
    <mutant id="mutant_3847" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="ri &lt; 0" />
    <mutant id="mutant_2514" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="false" />
    <mutant id="mutant_3846" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="false" />
    <mutant id="mutant_2515" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="(f.getStorage().isPacked()) || (f.isPeeled())" />
    <mutant id="mutant_3845" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="true" />
    <mutant id="mutant_2512" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="f.getStorage().isPacked()" />
    <mutant id="mutant_3844" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(ri &lt; 0) &amp;&amp; (rightTip.startsWith(prefix))" to="rightTip.startsWith(prefix)" />
    <mutant id="mutant_2513" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peeledPackedRef(org.eclipse.jgit.lib.Ref)" from="(f.getStorage().isPacked()) &amp;&amp; (f.isPeeled())" to="true" />
    <mutant id="mutant_3843" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="(li &lt; 0) || (leftTip.startsWith(prefix))" />
    <mutant id="mutant_2509" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="false" />
    <mutant id="mutant_3831" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="true" />
    <mutant id="mutant_2500" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="false" />
    <mutant id="mutant_3830" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="((p.tip) == null) &amp;&amp; ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" />
    <mutant id="mutant_2507" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="(0 &lt;= idx) || ((curList.get(idx)) == leaf)" />
    <mutant id="mutant_3839" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(li &lt; 0) &amp;&amp; (leftTip.startsWith(prefix))" to="leftTip.startsWith(prefix)" />
    <mutant id="mutant_2508" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(0 &lt;= idx) &amp;&amp; ((curList.get(idx)) == leaf)" to="true" />
    <mutant id="mutant_3838" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="(c != 0) &amp;&amp; (prefixes.isEmpty())" />
    <mutant id="mutant_2505" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="false" />
    <mutant id="mutant_3837" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="prefixes.isEmpty()" />
    <mutant id="mutant_2506" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="leaf.isPeeled()" />
    <mutant id="mutant_3836" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="c != 0" />
    <mutant id="mutant_2503" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="(leaf.isPeeled()) &amp;&amp; ((leaf.getObjectId()) == null)" />
    <mutant id="mutant_3835" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="false" />
    <mutant id="mutant_2504" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="true" />
    <mutant id="mutant_3834" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="(c != 0) || (prefixes.isEmpty())" to="true" />
    <mutant id="mutant_2501" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix))) &amp;&amp; ((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException))" to="((e.getCause()) instanceof org.eclipse.jgit.errors.InvalidObjectIdException)" />
    <mutant id="mutant_3833" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="(compare(c.tip, cost, p.tip, p.cost)) &lt; 0" />
    <mutant id="mutant_2502" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.peel(org.eclipse.jgit.lib.Ref)" from="(leaf.isPeeled()) || ((leaf.getObjectId()) == null)" to="(leaf.getObjectId()) == null" />
    <mutant id="mutant_3832" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="false" />
    <mutant id="mutant_3829" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="((p.tip) == null) || ((compare(c.tip, cost, p.tip, p.cost)) &lt; 0)" to="(p.tip) == null" />
    <mutant id="mutant_3820" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="squash" />
    <mutant id="mutant_3828" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="(fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF)" />
    <mutant id="mutant_3827" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="false" />
    <mutant id="mutant_3826" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="true" />
    <mutant id="mutant_3825" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="squash.booleanValue()" />
    <mutant id="mutant_3824" viable="true" in="org.eclipse.jgit.api.MergeCommand.checkParameters()" from="(squash.booleanValue()) &amp;&amp; ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" to="(squash.booleanValue()) || ((fastForwardMode) == (MergeCommand.FastForwardMode.NO_FF))" />
    <mutant id="mutant_3823" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="(commit) || (squash)" />
    <mutant id="mutant_3822" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="false" />
    <mutant id="mutant_3821" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(commit) &amp;&amp; (squash)" to="true" />
    <mutant id="mutant_1234" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="true" />
    <mutant id="mutant_2565" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="(max--) &gt; 0" />
    <mutant id="mutant_3897" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="false" />
    <mutant id="mutant_1235" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="false" />
    <mutant id="mutant_2566" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="rs &gt;= 0" />
    <mutant id="mutant_3896" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="true" />
    <mutant id="mutant_1232" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" />
    <mutant id="mutant_2563" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="true" />
    <mutant id="mutant_3895" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="!(isInteractive())" />
    <mutant id="mutant_1233" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) || ((buf[(p + 3)]) == '~'))" />
    <mutant id="mutant_2564" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="false" />
    <mutant id="mutant_3894" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="(!(isInteractive())) || (walk.isMergedInto(headCommit, upstream))" />
    <mutant id="mutant_1230" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" />
    <mutant id="mutant_2561" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="false" />
    <mutant id="mutant_3893" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="false" />
    <mutant id="mutant_1231" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~'))" to="((buf[(p + 3)]) == '~')" />
    <mutant id="mutant_2562" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="(rs &gt;= 0) &amp;&amp; ((max--) &gt; 0)" to="(rs &gt;= 0) || ((max--) &gt; 0)" />
    <mutant id="mutant_3892" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="true" />
    <mutant id="mutant_3891" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="walk.isMergedInto(upstream, headCommit)" />
    <mutant id="mutant_2560" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="true" />
    <mutant id="mutant_3890" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="(!(isInteractive())) || (walk.isMergedInto(upstream, headCommit))" />
    <mutant id="mutant_1238" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="false" />
    <mutant id="mutant_2569" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="false" />
    <mutant id="mutant_1239" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="(buf[(p + 4)]) == '1'" />
    <mutant id="mutant_1236" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')" />
    <mutant id="mutant_2567" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="(refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_3899" viable="true" in="org.eclipse.jgit.api.RebaseCommand.processStep(org.eclipse.jgit.lib.RebaseTodoLine,boolean)" from="((preserveMerges) &amp;&amp; shouldPick)" to="shouldPick" />
    <mutant id="mutant_1237" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="true" />
    <mutant id="mutant_2568" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="true" />
    <mutant id="mutant_3898" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(headCommit, upstream))" to="walk.isMergedInto(headCommit, upstream)" />
    <mutant id="mutant_1223" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="false" />
    <mutant id="mutant_2554" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="false" />
    <mutant id="mutant_3886" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="false" />
    <mutant id="mutant_1224" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') || ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" />
    <mutant id="mutant_2555" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="((dir.exists()) &amp;&amp; (!(dir.mkdirs())))" />
    <mutant id="mutant_3885" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="true" />
    <mutant id="mutant_1221" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g')" />
    <mutant id="mutant_2552" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="(!(dir.mkdirs()))" />
    <mutant id="mutant_3884" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="lastStepIsForward &amp;&amp; (finalHead == null)" />
    <mutant id="mutant_1222" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="true" />
    <mutant id="mutant_2553" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="true" />
    <mutant id="mutant_3883" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="false" />
    <mutant id="mutant_2550" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="false" />
    <mutant id="mutant_3882" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="true" />
    <mutant id="mutant_1220" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')" />
    <mutant id="mutant_2551" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="clr_oid.equals(packedRef.getObjectId())" />
    <mutant id="mutant_3881" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="(operation) == (RebaseCommand.Operation.BEGIN)" />
    <mutant id="mutant_3880" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="(mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED)" />
    <mutant id="mutant_1229" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="false" />
    <mutant id="mutant_1227" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" />
    <mutant id="mutant_2558" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="(dir.exists()) || (!(dir.mkdirs()))" />
    <mutant id="mutant_1228" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="true" />
    <mutant id="mutant_2559" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="!(dir.isDirectory())" />
    <mutant id="mutant_3889" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(!(isInteractive())) &amp;&amp; (walk.isMergedInto(upstream, headCommit))" to="!(isInteractive())" />
    <mutant id="mutant_1225" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')" />
    <mutant id="mutant_2556" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs())))" to="(dir.exists())" />
    <mutant id="mutant_3888" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="finalHead == null" />
    <mutant id="mutant_1226" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" />
    <mutant id="mutant_2557" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.rename(java.io.File,java.io.File)" from="((dir.exists()) || (!(dir.mkdirs()))) &amp;&amp; (!(dir.isDirectory()))" to="((dir.exists()) || (!(dir.mkdirs()))) || (!(dir.isDirectory()))" />
    <mutant id="mutant_3887" viable="true" in="org.eclipse.jgit.api.RebaseCommand.finishRebase(org.eclipse.jgit.revwalk.RevCommit,boolean)" from="lastStepIsForward || (finalHead == null)" to="lastStepIsForward" />
    <mutant id="mutant_1212" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="true" />
    <mutant id="mutant_2543" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="true" />
    <mutant id="mutant_3875" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="true" />
    <mutant id="mutant_1213" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="false" />
    <mutant id="mutant_2544" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="false" />
    <mutant id="mutant_3874" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="(newHead) == null" />
    <mutant id="mutant_1210" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="(ti != null) || ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" />
    <mutant id="mutant_2541" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="false" />
    <mutant id="mutant_3873" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="(newHead) != null" />
    <mutant id="mutant_1211" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g')" />
    <mutant id="mutant_2542" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="currentLooseRef.isSymbolic()" />
    <mutant id="mutant_3872" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="false" />
    <mutant id="mutant_3871" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="true" />
    <mutant id="mutant_2540" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="true" />
    <mutant id="mutant_3870" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="((newHead) != null) || ((step.getAction()) != (RebaseTodoLine.Action.PICK))" />
    <mutant id="mutant_1218" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="true" />
    <mutant id="mutant_2549" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="true" />
    <mutant id="mutant_1219" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="false" />
    <mutant id="mutant_1216" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="(org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't'" />
    <mutant id="mutant_2547" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="(clr_oid != null) || (clr_oid.equals(packedRef.getObjectId()))" />
    <mutant id="mutant_3879" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((operation) == (RebaseCommand.Operation.BEGIN)) &amp;&amp; ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" to="((operation) == (RebaseCommand.Operation.BEGIN)) || ((mergeResult.getMergeStatus()) == (MergeResult.MergeStatus.FAILED))" />
    <mutant id="mutant_1217" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" to="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) || ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')" />
    <mutant id="mutant_2548" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(clr_oid != null) &amp;&amp; (clr_oid.equals(packedRef.getObjectId()))" to="clr_oid != null" />
    <mutant id="mutant_3878" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="((newHead) == null) || (!amendExists)" />
    <mutant id="mutant_1214" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') || ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" />
    <mutant id="mutant_2545" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="currentLooseRef == null" />
    <mutant id="mutant_3877" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="!amendExists" />
    <mutant id="mutant_1215" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i'))" to="((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')" />
    <mutant id="mutant_2546" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(currentLooseRef == null) || (currentLooseRef.isSymbolic())" to="(currentLooseRef == null) &amp;&amp; (currentLooseRef.isSymbolic())" />
    <mutant id="mutant_3876" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) == null) &amp;&amp; (!amendExists)" to="false" />
    <mutant id="mutant_1201" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) || (untracked.isEmpty())" />
    <mutant id="mutant_2532" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="((last != curr) || (lastNotifiedModCnt.compareAndSet(last, curr)))" />
    <mutant id="mutant_3864" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="stopAfterInitialization" />
    <mutant id="mutant_1202" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="true" />
    <mutant id="mutant_2533" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="true" />
    <mutant id="mutant_3863" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="(commit.getParentCount()) == 1" />
    <mutant id="mutant_2530" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="(!(file.delete())) || (file.isFile())" />
    <mutant id="mutant_3862" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="preserveMerges" />
    <mutant id="mutant_1200" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty()))" to="(modified.isEmpty())" />
    <mutant id="mutant_2531" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(java.io.File,int)" from="(!(file.delete())) &amp;&amp; (file.isFile())" to="!(file.delete())" />
    <mutant id="mutant_3861" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="false" />
    <mutant id="mutant_3860" viable="true" in="org.eclipse.jgit.api.RebaseCommand.calculatePickList(org.eclipse.jgit.revwalk.RevCommit)" from="(preserveMerges) || ((commit.getParentCount()) == 1)" to="true" />
    <mutant id="mutant_1209" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="false" />
    <mutant id="mutant_1207" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="ti != null" />
    <mutant id="mutant_2538" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) || (last != 0)" />
    <mutant id="mutant_1208" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="true" />
    <mutant id="mutant_2539" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="last != 0" />
    <mutant id="mutant_3869" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((newHead) != null) &amp;&amp; ((step.getAction()) != (RebaseTodoLine.Action.PICK))" to="(step.getAction()) != (RebaseTodoLine.Action.PICK)" />
    <mutant id="mutant_1205" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="untracked.isEmpty()" />
    <mutant id="mutant_2536" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="(last != curr)" />
    <mutant id="mutant_3868" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="false" />
    <mutant id="mutant_1206" viable="true" in="org.eclipse.jgit.lib.IndexDiff.isEntryGitLink(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(ti != null) &amp;&amp; ((ti.getEntryRawMode()) == (FileMode.GITLINK.getBits()))" to="(ti.getEntryRawMode()) == (FileMode.GITLINK.getBits())" />
    <mutant id="mutant_2537" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))) &amp;&amp; (last != 0)" to="(last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr))" />
    <mutant id="mutant_3867" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="true" />
    <mutant id="mutant_1203" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="false" />
    <mutant id="mutant_2534" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="false" />
    <mutant id="mutant_3866" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="(stopAfterInitialization) &amp;&amp; (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" />
    <mutant id="mutant_1204" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())) &amp;&amp; (untracked.isEmpty())" to="((((added.isEmpty()) &amp;&amp; (changed.isEmpty())) &amp;&amp; (removed.isEmpty())) &amp;&amp; (missing.isEmpty())) &amp;&amp; (modified.isEmpty())" />
    <mutant id="mutant_2535" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.fireRefsChanged()" from="((last != curr) &amp;&amp; (lastNotifiedModCnt.compareAndSet(last, curr)))" to="(lastNotifiedModCnt.compareAndSet(last, curr))" />
    <mutant id="mutant_3865" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="(stopAfterInitialization) || (!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit)))" to="!(walk.isMergedInto(walk.parseCommit(repo.resolve(org.eclipse.jgit.lib.Constants.HEAD)), upstreamCommit))" />
    <mutant id="mutant_1281" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="(emailB == ptr) &amp;&amp; ((raw[(emailB - 1)]) != '&lt;')" />
    <mutant id="mutant_1282" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB == ptr) || ((raw[(emailB - 1)]) != '&lt;')" to="emailB == ptr" />
    <mutant id="mutant_1280" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="false" />
    <mutant id="mutant_1278" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="bPos &lt; bEnd" />
    <mutant id="mutant_1279" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="true" />
    <mutant id="mutant_1276" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="(aPos &lt; aEnd) || (bPos &lt; bEnd)" />
    <mutant id="mutant_1277" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(aPos &lt; aEnd) &amp;&amp; (bPos &lt; bEnd)" to="aPos &lt; aEnd" />
    <mutant id="mutant_1274" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="'A' &lt;= b" />
    <mutant id="mutant_1275" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="b &lt;= 'Z'" />
    <mutant id="mutant_1272" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="false" />
    <mutant id="mutant_1273" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="('A' &lt;= b) || (b &lt;= 'Z')" />
    <mutant id="mutant_1270" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="b &lt;= '9'" />
    <mutant id="mutant_1271" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('A' &lt;= b) &amp;&amp; (b &lt;= 'Z')" to="true" />
    <mutant id="mutant_1267" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="'1' &lt;= b" />
    <mutant id="mutant_2598" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="!(dir.isDirectory())" />
    <mutant id="mutant_1268" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="true" />
    <mutant id="mutant_2599" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="true" />
    <mutant id="mutant_1265" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="(dots == 1) || space" />
    <mutant id="mutant_2596" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) &amp;&amp; (log.isFile())" />
    <mutant id="mutant_1266" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="('1' &lt;= b) || (b &lt;= '9')" />
    <mutant id="mutant_2597" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="(!(dir.mkdirs())) &amp;&amp; (!(dir.isDirectory()))" to="!(dir.mkdirs())" />
    <mutant id="mutant_1263" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="true" />
    <mutant id="mutant_2594" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="true" />
    <mutant id="mutant_1264" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="false" />
    <mutant id="mutant_2595" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="false" />
    <mutant id="mutant_1261" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="(p == (ptr + 2)) || ((dots == 1) || space)" />
    <mutant id="mutant_2592" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="log.isFile()" />
    <mutant id="mutant_1262" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(p == (ptr + 2)) &amp;&amp; ((dots == 1) || space)" to="p == (ptr + 2)" />
    <mutant id="mutant_2593" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))) || (log.isFile())" to="(forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" />
    <mutant id="mutant_1269" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isPositiveDigit(byte)" from="('1' &lt;= b) &amp;&amp; (b &lt;= '9')" to="false" />
    <mutant id="mutant_2590" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" />
    <mutant id="mutant_1260" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="(dots == 1)" />
    <mutant id="mutant_2591" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="(forceWrite)" />
    <mutant id="mutant_1256" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="((dots == 1) &amp;&amp; space)" />
    <mutant id="mutant_2587" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="((forceWrite) &amp;&amp; ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" />
    <mutant id="mutant_1257" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="true" />
    <mutant id="mutant_2588" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="true" />
    <mutant id="mutant_1254" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="(g == 4) || ignorable" />
    <mutant id="mutant_2585" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="((isLogAllRefUpdates()) || (shouldAutoCreateLog(refName)))" />
    <mutant id="mutant_1255" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="g == 4" />
    <mutant id="mutant_2586" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="(shouldAutoCreateLog(refName))" />
    <mutant id="mutant_1252" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="true" />
    <mutant id="mutant_2583" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="false" />
    <mutant id="mutant_1253" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="false" />
    <mutant id="mutant_2584" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="(isLogAllRefUpdates())" />
    <mutant id="mutant_1250" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="((raw[(ptr + 1)]) == ((byte)(187))) || ((raw[(ptr + 2)]) == ((byte)(191)))" />
    <mutant id="mutant_2581" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="false" />
    <mutant id="mutant_1251" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(g == 4) &amp;&amp; ignorable" to="ignorable" />
    <mutant id="mutant_2582" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName)))" to="true" />
    <mutant id="mutant_1258" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="false" />
    <mutant id="mutant_2589" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.log(java.lang.String,byte[])" from="((forceWrite) || ((isLogAllRefUpdates()) &amp;&amp; (shouldAutoCreateLog(refName))))" to="false" />
    <mutant id="mutant_1259" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="((dots == 1) || space)" to="space" />
    <mutant id="mutant_2580" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="true" />
    <mutant id="mutant_1245" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="1 &lt;= c" />
    <mutant id="mutant_2576" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="(refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" />
    <mutant id="mutant_1246" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="(raw[(ptr + 2)]) == ((byte)(191))" />
    <mutant id="mutant_2577" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) &amp;&amp; (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" />
    <mutant id="mutant_1243" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="true" />
    <mutant id="mutant_2574" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_1244" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="false" />
    <mutant id="mutant_2575" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) &amp;&amp; (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" />
    <mutant id="mutant_1241" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="(1 &lt;= c) || (c &lt;= 31)" />
    <mutant id="mutant_2572" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="true" />
    <mutant id="mutant_1242" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isInvalidOnWindows(byte)" from="(1 &lt;= c) &amp;&amp; (c &lt;= 31)" to="c &lt;= 31" />
    <mutant id="mutant_2573" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)))" to="false" />
    <mutant id="mutant_2570" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) &amp;&amp; (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_1240" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) &amp;&amp; ((buf[(p + 4)]) == '1')" to="(((((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[p])) == 'g') &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 1)])) == 'i')) &amp;&amp; ((org.eclipse.jgit.lib.ObjectChecker.toLower(buf[(p + 2)])) == 't')) &amp;&amp; ((buf[(p + 3)]) == '~')) || ((buf[(p + 4)]) == '1')" />
    <mutant id="mutant_2571" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="(refName.equals(org.eclipse.jgit.lib.Constants.HEAD))" />
    <mutant id="mutant_1249" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="(raw[(ptr + 1)]) == ((byte)(187))" />
    <mutant id="mutant_1247" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="true" />
    <mutant id="mutant_2578" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" />
    <mutant id="mutant_1248" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="((raw[(ptr + 1)]) == ((byte)(187))) &amp;&amp; ((raw[(ptr + 2)]) == ((byte)(191)))" to="false" />
    <mutant id="mutant_2579" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.shouldAutoCreateLog(java.lang.String)" from="(((refName.equals(org.eclipse.jgit.lib.Constants.HEAD)) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))) || (refName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))) || (refName.equals(org.eclipse.jgit.lib.Constants.R_STASH))" to="refName.equals(org.eclipse.jgit.lib.Constants.R_STASH)" />
    <mutant id="mutant_1083" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="true" />
    <mutant id="mutant_1084" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="false" />
    <mutant id="mutant_1081" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="false" />
    <mutant id="mutant_1082" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) &amp;&amp; ((typeString[(position + 4)]) != endMark)" />
    <mutant id="mutant_1080" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="true" />
    <mutant id="mutant_1078" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="((typeString[(position + 3)]) != 'e')" />
    <mutant id="mutant_1079" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="((typeString[(position + 2)]) != 'e')" />
    <mutant id="mutant_1076" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="(typeString[(position + 3)]) != endMark" />
    <mutant id="mutant_1077" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e'))" to="(((typeString[(position + 2)]) != 'e') &amp;&amp; ((typeString[(position + 3)]) != 'e'))" />
    <mutant id="mutant_1074" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="true" />
    <mutant id="mutant_1075" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="false" />
    <mutant id="mutant_1072" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="(typeString[(position + 2)]) != 'g'" />
    <mutant id="mutant_1073" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((typeString[(position + 2)]) != 'g') || ((typeString[(position + 3)]) != endMark)" to="((typeString[(position + 2)]) != 'g') &amp;&amp; ((typeString[(position + 3)]) != endMark)" />
    <mutant id="mutant_1070" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')" />
    <mutant id="mutant_1071" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) &amp;&amp; ((typeString[(position + 6)]) != endMark)" />
    <mutant id="mutant_1069" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="false" />
    <mutant id="mutant_1067" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="(typeString[(position + 6)]) != endMark" />
    <mutant id="mutant_2398" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="(newLoose) == null" />
    <mutant id="mutant_1068" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't')) || ((typeString[(position + 6)]) != endMark)" to="true" />
    <mutant id="mutant_2399" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="true" />
    <mutant id="mutant_1065" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" />
    <mutant id="mutant_2396" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="(id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0" />
    <mutant id="mutant_1066" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="((typeString[(position + 5)]) != 't')" />
    <mutant id="mutant_2397" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="(p &lt; max) || ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" />
    <mutant id="mutant_1063" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="true" />
    <mutant id="mutant_2394" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="false" />
    <mutant id="mutant_1064" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="false" />
    <mutant id="mutant_2395" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="p &lt; max" />
    <mutant id="mutant_1061" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) &amp;&amp; ((typeString[(position + 4)]) != 'i'))" />
    <mutant id="mutant_2392" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="(id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0" />
    <mutant id="mutant_1062" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) || ((typeString[(position + 5)]) != 't'))" to="((((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i')) &amp;&amp; ((typeString[(position + 5)]) != 't'))" />
    <mutant id="mutant_2393" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(p))) == 0)" to="true" />
    <mutant id="mutant_2390" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="true" />
    <mutant id="mutant_1060" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="false" />
    <mutant id="mutant_2391" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="false" />
    <mutant id="mutant_1058" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="((typeString[(position + 4)]) != 'i')" />
    <mutant id="mutant_2389" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="(0 &lt; p) || ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" />
    <mutant id="mutant_1059" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="true" />
    <mutant id="mutant_1056" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="((typeString[(position + 3)]) != 'm')" />
    <mutant id="mutant_2387" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="(levelOne &gt; 0) || (base == (fanoutTable[(levelOne - 1)]))" />
    <mutant id="mutant_1057" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm')) || ((typeString[(position + 4)]) != 'i'))" to="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" />
    <mutant id="mutant_2388" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset((p - 1)))) == 0)" to="0 &lt; p" />
    <mutant id="mutant_1054" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="false" />
    <mutant id="mutant_2385" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="false" />
    <mutant id="mutant_1055" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" />
    <mutant id="mutant_2386" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="base == (fanoutTable[(levelOne - 1)])" />
    <mutant id="mutant_1052" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) &amp;&amp; ((typeString[(position + 3)]) != 'm'))" />
    <mutant id="mutant_2383" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="levelOne &gt; 0" />
    <mutant id="mutant_1053" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm')) || ((typeString[(position + 3)]) != 'm'))" to="true" />
    <mutant id="mutant_2384" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (fanoutTable[(levelOne - 1)]))" to="true" />
    <mutant id="mutant_1050" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="false" />
    <mutant id="mutant_2381" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="p &lt; max" />
    <mutant id="mutant_1051" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="((typeString[(position + 2)]) != 'm')" />
    <mutant id="mutant_2382" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="(id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0" />
    <mutant id="mutant_2380" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="false" />
    <mutant id="mutant_1047" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="((typeString[(position + 1)]) != 'o')" />
    <mutant id="mutant_2378" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="(p &lt; max) || ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" />
    <mutant id="mutant_1048" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="(((typeString[(position + 1)]) != 'o') &amp;&amp; ((typeString[(position + 2)]) != 'm'))" />
    <mutant id="mutant_2379" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p &lt; max) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(p))) == 0)" to="true" />
    <mutant id="mutant_1045" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="(typeString[(position + 4)]) != endMark" />
    <mutant id="mutant_2376" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="false" />
    <mutant id="mutant_1046" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')" />
    <mutant id="mutant_2377" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="(id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0" />
    <mutant id="mutant_1043" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="true" />
    <mutant id="mutant_2374" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="0 &lt; p" />
    <mutant id="mutant_1044" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="false" />
    <mutant id="mutant_2375" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="true" />
    <mutant id="mutant_1041" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) &amp;&amp; ((typeString[(position + 3)]) != 'b'))" />
    <mutant id="mutant_2372" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="base == (idxHeader[(levelOne - 1)])" />
    <mutant id="mutant_1042" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) || ((typeString[(position + 4)]) != endMark)" to="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b')) &amp;&amp; ((typeString[(position + 4)]) != endMark)" />
    <mutant id="mutant_2373" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(0 &lt; p) &amp;&amp; ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" to="(0 &lt; p) || ((id.prefixCompare(data, org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset((p - 1)))) == 0)" />
    <mutant id="mutant_1049" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'o') || ((typeString[(position + 2)]) != 'm'))" to="true" />
    <mutant id="mutant_1098" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="(treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode())" />
    <mutant id="mutant_1099" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="true" />
    <mutant id="mutant_1096" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) || ((modeBits &amp; 73) != 0)" />
    <mutant id="mutant_1097" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="(!(treeIterator.idEqual(dirCacheIterator))) &amp;&amp; ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" />
    <mutant id="mutant_1094" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="true" />
    <mutant id="mutant_1095" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="false" />
    <mutant id="mutant_1092" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="(modeBits &amp; 73) != 0" />
    <mutant id="mutant_1093" viable="true" in="org.eclipse.jgit.lib.FileMode$4.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) != 0)" to="(modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)" />
    <mutant id="mutant_1090" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="false" />
    <mutant id="mutant_1091" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="(modeBits &amp; 73) == 0" />
    <mutant id="mutant_1089" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="true" />
    <mutant id="mutant_1087" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="(modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)" />
    <mutant id="mutant_1088" viable="true" in="org.eclipse.jgit.lib.FileMode$3.equals(int)" from="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) &amp;&amp; ((modeBits &amp; 73) == 0)" to="((modeBits &amp; (FileMode.TYPE_MASK)) == (FileMode.TYPE_FILE)) || ((modeBits &amp; 73) == 0)" />
    <mutant id="mutant_1085" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="(typeString[(position + 4)]) != endMark" />
    <mutant id="mutant_1086" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')) || ((typeString[(position + 4)]) != endMark)" to="((typeString[(position + 2)]) != 'e') || ((typeString[(position + 3)]) != 'e')" />
    <mutant id="mutant_7220" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="(i &lt; (a.length())) || (i &lt; (b.length()))" />
    <mutant id="mutant_7222" viable="false" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="true" />
    <mutant id="mutant_7221" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="i &lt; (a.length())" />
    <mutant id="mutant_7213" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="stringValue == null" />
    <mutant id="mutant_7212" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="((packedIdx) &lt; (packed.size())) || ((looseIdx) &lt; (loose.size()))" />
    <mutant id="mutant_7215" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="(stringValue == null) &amp;&amp; ((stringValue.length()) == 0)" />
    <mutant id="mutant_7214" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="(stringValue.length()) == 0" />
    <mutant id="mutant_7217" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="false" />
    <mutant id="mutant_7216" viable="true" in="org.eclipse.jgit.util.StringUtils.isEmptyOrNull(java.lang.String)" from="(stringValue == null) || ((stringValue.length()) == 0)" to="true" />
    <mutant id="mutant_7219" viable="false" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="false" />
    <mutant id="mutant_7218" viable="false" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="true" />
    <mutant id="mutant_7211" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="false" />
    <mutant id="mutant_7210" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="true" />
    <mutant id="mutant_7209" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="(packedIdx) &lt; (packed.size())" />
    <mutant id="mutant_7202" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="((a != null) || (b != null))" />
    <mutant id="mutant_7201" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="(b != null)" />
    <mutant id="mutant_7204" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="AnyObjectId.equals(a, b)" />
    <mutant id="mutant_7203" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="((a != null) &amp;&amp; (b != null)) || (AnyObjectId.equals(a, b))" />
    <mutant id="mutant_7206" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="false" />
    <mutant id="mutant_7205" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="true" />
    <mutant id="mutant_7208" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator.peek()" from="((packedIdx) &lt; (packed.size())) &amp;&amp; ((looseIdx) &lt; (loose.size()))" to="(looseIdx) &lt; (loose.size())" />
    <mutant id="mutant_7207" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null)) &amp;&amp; (AnyObjectId.equals(a, b))" to="(a != null) &amp;&amp; (b != null)" />
    <mutant id="mutant_7200" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="(a != null)" />
    <mutant id="mutant_7260" viable="false" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="false" />
    <mutant id="mutant_7262" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="true" />
    <mutant id="mutant_7261" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="((i + 1) &lt; (buf.length)) || ((in.charAt((i + 1))) == '\n')" />
    <mutant id="mutant_7264" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="(in.charAt((i + 1))) == '\n'" />
    <mutant id="mutant_7263" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="false" />
    <mutant id="mutant_7266" viable="true" in="org.eclipse.jgit.util.SystemReader.isMacOS()" from="(&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName))" to="true" />
    <mutant id="mutant_7265" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="((i + 1) &lt; (buf.length)) &amp;&amp; ((in.charAt((i + 1))) == '\n')" to="(i + 1) &lt; (buf.length)" />
    <mutant id="mutant_7257" viable="false" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="str == null" />
    <mutant id="mutant_7256" viable="false" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="(str == null) &amp;&amp; ((strLen = str.length()) == 0)" />
    <mutant id="mutant_7259" viable="true" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="true" />
    <mutant id="mutant_7258" viable="true" in="org.eclipse.jgit.util.StringUtils.capitalize(java.lang.String)" from="(str == null) || ((strLen = str.length()) == 0)" to="(strLen = str.length()) == 0" />
    <mutant id="mutant_7251" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" />
    <mutant id="mutant_7250" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))" />
    <mutant id="mutant_7253" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))" />
    <mutant id="mutant_7252" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue)" />
    <mutant id="mutant_7255" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="false" />
    <mutant id="mutant_7254" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;off&quot;, stringValue))" to="true" />
    <mutant id="mutant_7246" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" />
    <mutant id="mutant_7245" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue))" />
    <mutant id="mutant_7248" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="true" />
    <mutant id="mutant_7247" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" />
    <mutant id="mutant_7249" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;0&quot;, stringValue)))" to="false" />
    <mutant id="mutant_7240" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" />
    <mutant id="mutant_7242" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="false" />
    <mutant id="mutant_7241" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="true" />
    <mutant id="mutant_7244" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" />
    <mutant id="mutant_7243" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;no&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;false&quot;, stringValue))" />
    <mutant id="mutant_7235" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" />
    <mutant id="mutant_7234" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="false" />
    <mutant id="mutant_7237" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="true" />
    <mutant id="mutant_7236" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue)" />
    <mutant id="mutant_7239" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))" />
    <mutant id="mutant_7238" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;on&quot;, stringValue))" to="false" />
    <mutant id="mutant_7231" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue))" />
    <mutant id="mutant_7230" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="false" />
    <mutant id="mutant_7233" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="true" />
    <mutant id="mutant_7232" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" to="(((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;1&quot;, stringValue)))" />
    <mutant id="mutant_7224" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="(i &lt; (a.length())) || (i &lt; (b.length()))" />
    <mutant id="mutant_7223" viable="false" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="false" />
    <mutant id="mutant_7226" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue))" />
    <mutant id="mutant_7225" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(i &lt; (a.length())) &amp;&amp; (i &lt; (b.length()))" to="i &lt; (a.length())" />
    <mutant id="mutant_7228" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="(org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue))" />
    <mutant id="mutant_7227" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) &amp;&amp; (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" />
    <mutant id="mutant_7229" viable="true" in="org.eclipse.jgit.util.StringUtils.toBooleanOrNull(java.lang.String)" from="((org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;yes&quot;, stringValue)) || (org.eclipse.jgit.util.StringUtils.equalsIgnoreCase(&quot;true&quot;, stringValue)))" to="true" />
    <mutant id="mutant_7293" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="true" />
    <mutant id="mutant_7292" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="(charsetGuess != null) || ((charsetGuess.length) != ((getParentCount()) + 1))" />
    <mutant id="mutant_7295" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="(ptr &lt; tab) || ((buf[(tab - 1)]) != '\t')" />
    <mutant id="mutant_7294" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="false" />
    <mutant id="mutant_7297" viable="false" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="true" />
    <mutant id="mutant_7296" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="(buf[(tab - 1)]) != '\t'" />
    <mutant id="mutant_7299" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="ptr &lt; tab" />
    <mutant id="mutant_7298" viable="false" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(ptr &lt; tab) &amp;&amp; ((buf[(tab - 1)]) != '\t')" to="false" />
    <mutant id="mutant_7291" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="(charsetGuess.length) != ((getParentCount()) + 1)" />
    <mutant id="mutant_7290" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="(charsetGuess != null) &amp;&amp; ((charsetGuess.length) != ((getParentCount()) + 1))" to="charsetGuess != null" />
    <mutant id="mutant_7289" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="(buf[ptr++]) != '-'" />
    <mutant id="mutant_7282" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="true" />
    <mutant id="mutant_7281" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="(buf[ptr++]) != ' '" />
    <mutant id="mutant_7284" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="(ptr == end) &amp;&amp; ((buf[ptr++]) != ' ')" />
    <mutant id="mutant_7283" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="false" />
    <mutant id="mutant_7286" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="ptr == end" />
    <mutant id="mutant_7285" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="(ptr == end) &amp;&amp; ((buf[ptr++]) != '-')" />
    <mutant id="mutant_7288" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="false" />
    <mutant id="mutant_7287" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != '-')" to="true" />
    <mutant id="mutant_7280" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr == end) || ((buf[ptr++]) != ' ')" to="ptr == end" />
    <mutant id="mutant_7279" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="(ptr &lt; end) || ((buf[ptr]) == '@')" />
    <mutant id="mutant_7278" viable="false" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="false" />
    <mutant id="mutant_7271" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="(changeType) != (DiffEntry.ChangeType.MODIFY)" />
    <mutant id="mutant_7270" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="(newMode) != (oldMode)" />
    <mutant id="mutant_7273" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="false" />
    <mutant id="mutant_7272" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="true" />
    <mutant id="mutant_7275" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="(buf[ptr]) == '@'" />
    <mutant id="mutant_7274" viable="true" in="org.eclipse.jgit.patch.FileHeader.hasMetaDataChanges()" from="((changeType) != (DiffEntry.ChangeType.MODIFY)) || ((newMode) != (oldMode))" to="((changeType) != (DiffEntry.ChangeType.MODIFY)) &amp;&amp; ((newMode) != (oldMode))" />
    <mutant id="mutant_7277" viable="false" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="true" />
    <mutant id="mutant_7276" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr &lt; end) &amp;&amp; ((buf[ptr]) == '@')" to="ptr &lt; end" />
    <mutant id="mutant_7268" viable="true" in="org.eclipse.jgit.util.SystemReader.isMacOS()" from="(&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName))" to="(&quot;Mac OS X&quot;.equals(osDotName)) &amp;&amp; (&quot;Darwin&quot;.equals(osDotName))" />
    <mutant id="mutant_7267" viable="true" in="org.eclipse.jgit.util.SystemReader.isMacOS()" from="(&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName))" to="false" />
    <mutant id="mutant_7269" viable="true" in="org.eclipse.jgit.util.SystemReader.isMacOS()" from="(&quot;Mac OS X&quot;.equals(osDotName)) || (&quot;Darwin&quot;.equals(osDotName))" to="&quot;Mac OS X&quot;.equals(osDotName)" />
    <mutant id="mutant_2400" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="false" />
    <mutant id="mutant_3732" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="true" />
    <mutant id="mutant_2401" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="(curIdx) &lt; (curLoose.size())" />
    <mutant id="mutant_3731" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="((author) == null) || (!(amend))" />
    <mutant id="mutant_3730" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="!(amend)" />
    <mutant id="mutant_2408" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="(newLoose) == null" />
    <mutant id="mutant_2409" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="(cur != n) || ((newLoose) == null)" />
    <mutant id="mutant_3739" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="(state == (RepositoryState.SAFE)) || ((message) == null)" />
    <mutant id="mutant_2406" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) || (prefix.endsWith(&quot;/&quot;))" />
    <mutant id="mutant_3738" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="false" />
    <mutant id="mutant_2407" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)" />
    <mutant id="mutant_3737" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="true" />
    <mutant id="mutant_2404" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="false" />
    <mutant id="mutant_3736" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="state == (RepositoryState.MERGING_RESOLVED)" />
    <mutant id="mutant_2405" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="prefix.endsWith(&quot;/&quot;)" />
    <mutant id="mutant_3735" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="isMergeDuringRebase(state)" />
    <mutant id="mutant_2402" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((newLoose) == null) &amp;&amp; ((curIdx) &lt; (curLoose.size()))" to="((newLoose) == null) || ((curIdx) &lt; (curLoose.size()))" />
    <mutant id="mutant_3734" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="(state == (RepositoryState.MERGING_RESOLVED)) &amp;&amp; (isMergeDuringRebase(state))" />
    <mutant id="mutant_2403" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="(prefix.startsWith(org.eclipse.jgit.lib.Constants.R_REFS)) &amp;&amp; (prefix.endsWith(&quot;/&quot;))" to="true" />
    <mutant id="mutant_3733" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="false" />
    <mutant id="mutant_3721" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="headId == null" />
    <mutant id="mutant_3720" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="false" />
    <mutant id="mutant_3729" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="((author) == null) &amp;&amp; (!(amend))" to="(author) == null" />
    <mutant id="mutant_3728" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="false" />
    <mutant id="mutant_3727" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="true" />
    <mutant id="mutant_3726" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="state == (RepositoryState.MERGING_RESOLVED)" />
    <mutant id="mutant_3725" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="isMergeDuringRebase(state)" />
    <mutant id="mutant_3724" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(state == (RepositoryState.MERGING_RESOLVED)) || (isMergeDuringRebase(state))" to="(state == (RepositoryState.MERGING_RESOLVED)) &amp;&amp; (isMergeDuringRebase(state))" />
    <mutant id="mutant_3723" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="(headId == null) || (amend)" />
    <mutant id="mutant_3722" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="amend" />
    <mutant id="mutant_3719" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(headId == null) &amp;&amp; (amend)" to="true" />
    <mutant id="mutant_3710" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="true" />
    <mutant id="mutant_3718" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="(repo.getWorkTree()) != null" />
    <mutant id="mutant_3717" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="false" />
    <mutant id="mutant_3716" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="true" />
    <mutant id="mutant_3715" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="(all) &amp;&amp; (!(repo.isBare()))" />
    <mutant id="mutant_3714" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare()))) &amp;&amp; ((repo.getWorkTree()) != null)" to="((all) &amp;&amp; (!(repo.isBare()))) || ((repo.getWorkTree()) != null)" />
    <mutant id="mutant_3713" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="(!(repo.isBare()))" />
    <mutant id="mutant_3712" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="((all) || (!(repo.isBare())))" />
    <mutant id="mutant_3711" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="false" />
    <mutant id="mutant_3709" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((all) &amp;&amp; (!(repo.isBare())))" to="(all)" />
    <mutant id="mutant_3708" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="emptyCommit || (hTree != null)" />
    <mutant id="mutant_3707" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="emptyCommit" />
    <mutant id="mutant_3706" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="false" />
    <mutant id="mutant_3705" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="true" />
    <mutant id="mutant_3704" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (hTree != null)" to="hTree != null" />
    <mutant id="mutant_3703" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode()))" />
    <mutant id="mutant_3702" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="emptyCommit" />
    <mutant id="mutant_3701" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="false" />
    <mutant id="mutant_3700" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="true" />
    <mutant id="mutant_1113" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="false" />
    <mutant id="mutant_2444" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="false" />
    <mutant id="mutant_3776" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="false" />
    <mutant id="mutant_1114" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!(isEntryGitLink(treeIterator))" />
    <mutant id="mutant_2445" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')" />
    <mutant id="mutant_3775" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="true" />
    <mutant id="mutant_1111" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))" />
    <mutant id="mutant_2442" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="(buf[4]) == ' '" />
    <mutant id="mutant_3774" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="(out) != null" />
    <mutant id="mutant_1112" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="true" />
    <mutant id="mutant_2443" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="true" />
    <mutant id="mutant_3773" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="((name) == null) &amp;&amp; (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" />
    <mutant id="mutant_2440" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) || ((buf[3]) == ':'))" />
    <mutant id="mutant_3772" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="(name) == null" />
    <mutant id="mutant_1110" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)" />
    <mutant id="mutant_2441" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" />
    <mutant id="mutant_3771" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))" />
    <mutant id="mutant_3770" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="false" />
    <mutant id="mutant_1119" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="false" />
    <mutant id="mutant_1117" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(!(isEntryGitLink(dirCacheIterator))) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" />
    <mutant id="mutant_2448" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="resolvedRef != null" />
    <mutant id="mutant_1118" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="true" />
    <mutant id="mutant_2449" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="true" />
    <mutant id="mutant_3779" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="(gitDir != null) || (!(gitDir.equals(directory)))" />
    <mutant id="mutant_1115" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)" />
    <mutant id="mutant_2446" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) &amp;&amp; ((buf[4]) == ' ')" to="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':')) || ((buf[4]) == ' ')" />
    <mutant id="mutant_3778" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="((out) != null) || (!(showNameAndStatusOnly))" />
    <mutant id="mutant_1116" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(treeIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(!(isEntryGitLink(treeIterator))) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" />
    <mutant id="mutant_2447" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="(resolvedRef.getObjectId()) != null" />
    <mutant id="mutant_3777" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((out) != null) &amp;&amp; (!(showNameAndStatusOnly))" to="!(showNameAndStatusOnly)" />
    <mutant id="mutant_1102" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="true" />
    <mutant id="mutant_2433" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="false" />
    <mutant id="mutant_3765" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) &amp;&amp; ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" />
    <mutant id="mutant_1103" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="false" />
    <mutant id="mutant_2434" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) || ((buf[2]) == 'f'))" />
    <mutant id="mutant_3764" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="(upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK)" />
    <mutant id="mutant_1100" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="false" />
    <mutant id="mutant_2431" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="((buf[1]) == 'e')" />
    <mutant id="mutant_3763" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="exists || (force)" />
    <mutant id="mutant_1101" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(treeIterator.idEqual(dirCacheIterator))) || ((treeIterator.getEntryRawMode()) != (dirCacheIterator.getEntryRawMode()))" to="!(treeIterator.idEqual(dirCacheIterator))" />
    <mutant id="mutant_2432" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="true" />
    <mutant id="mutant_3762" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="exists" />
    <mutant id="mutant_3761" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="false" />
    <mutant id="mutant_2430" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="false" />
    <mutant id="mutant_3760" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="true" />
    <mutant id="mutant_1108" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="true" />
    <mutant id="mutant_2439" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="false" />
    <mutant id="mutant_1109" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="false" />
    <mutant id="mutant_1106" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="((!(isEntryGitLink(treeIterator))) &amp;&amp; (!(isEntryGitLink(dirCacheIterator))))" />
    <mutant id="mutant_2437" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="((buf[3]) == ':')" />
    <mutant id="mutant_3769" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" to="true" />
    <mutant id="mutant_1107" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator)))) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" />
    <mutant id="mutant_2438" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f')) &amp;&amp; ((buf[3]) == ':'))" to="true" />
    <mutant id="mutant_3768" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="(upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)" />
    <mutant id="mutant_1104" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="(!(isEntryGitLink(treeIterator)))" />
    <mutant id="mutant_2435" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="((buf[2]) == 'f')" />
    <mutant id="mutant_3767" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="false" />
    <mutant id="mutant_1105" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(treeIterator))) || (!(isEntryGitLink(dirCacheIterator))))" to="(!(isEntryGitLink(dirCacheIterator)))" />
    <mutant id="mutant_2436" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="((((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e')) &amp;&amp; ((buf[2]) == 'f'))" to="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" />
    <mutant id="mutant_3766" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.SET_UPSTREAM)) || ((upstreamMode) == (CreateBranchCommand.SetupUpstreamMode.TRACK))" to="true" />
    <mutant id="mutant_2422" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="idx &lt; (loose.size())" />
    <mutant id="mutant_3754" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) &amp;&amp; (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" />
    <mutant id="mutant_2423" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="loose.get(idx).getName().startsWith(prefix)" />
    <mutant id="mutant_3753" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="exists" />
    <mutant id="mutant_2420" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="true" />
    <mutant id="mutant_3752" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="false" />
    <mutant id="mutant_2421" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="false" />
    <mutant id="mutant_3751" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="true" />
    <mutant id="mutant_3750" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="(!(force)) || exists" />
    <mutant id="mutant_2428" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="((buf[0]) == 'r')" />
    <mutant id="mutant_2429" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="true" />
    <mutant id="mutant_3759" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="exists &amp;&amp; (force)" to="force" />
    <mutant id="mutant_2426" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="false" />
    <mutant id="mutant_3758" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES)" />
    <mutant id="mutant_2427" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isSymRef(byte[],int)" from="(((buf[0]) == 'r') &amp;&amp; ((buf[1]) == 'e'))" to="(((buf[0]) == 'r') || ((buf[1]) == 'e'))" />
    <mutant id="mutant_3757" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="false" />
    <mutant id="mutant_2424" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="(idx &lt; (loose.size())) || (loose.get(idx).getName().startsWith(prefix))" />
    <mutant id="mutant_3756" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="true" />
    <mutant id="mutant_2425" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (loose.size())) &amp;&amp; (loose.get(idx).getName().startsWith(prefix))" to="true" />
    <mutant id="mutant_3755" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)) || (startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_REMOTES))" to="startPointFullName.startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)" />
    <mutant id="mutant_2411" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="false" />
    <mutant id="mutant_3743" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="state == (RepositoryState.SAFE)" />
    <mutant id="mutant_2412" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="cur != n" />
    <mutant id="mutant_3742" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="(message) == null" />
    <mutant id="mutant_3741" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="false" />
    <mutant id="mutant_2410" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanOne(java.lang.String)" from="(cur != n) &amp;&amp; ((newLoose) == null)" to="true" />
    <mutant id="mutant_3740" viable="true" in="org.eclipse.jgit.api.CommitCommand.processOptions(org.eclipse.jgit.lib.RepositoryState,org.eclipse.jgit.revwalk.RevWalk)" from="(state == (RepositoryState.SAFE)) &amp;&amp; ((message) == null)" to="true" />
    <mutant id="mutant_2419" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="(idx &lt; (packed.size())) || (packed.get(idx).getName().startsWith(prefix))" />
    <mutant id="mutant_2417" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="idx &lt; (packed.size())" />
    <mutant id="mutant_3749" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(!(force)) &amp;&amp; exists" to="!(force)" />
    <mutant id="mutant_2418" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(idx &lt; (packed.size())) &amp;&amp; (packed.get(idx).getName().startsWith(prefix))" to="packed.get(idx).getName().startsWith(prefix)" />
    <mutant id="mutant_3748" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="false" />
    <mutant id="mutant_2415" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(loose.contains(needle)) || (packed.contains(needle))" to="true" />
    <mutant id="mutant_3747" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="true" />
    <mutant id="mutant_2416" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(loose.contains(needle)) || (packed.contains(needle))" to="false" />
    <mutant id="mutant_3746" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)" />
    <mutant id="mutant_2413" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(loose.contains(needle)) || (packed.contains(needle))" to="loose.contains(needle)" />
    <mutant id="mutant_3745" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="refToCheck != null" />
    <mutant id="mutant_2414" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(loose.contains(needle)) || (packed.contains(needle))" to="(loose.contains(needle)) &amp;&amp; (packed.contains(needle))" />
    <mutant id="mutant_3744" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="(refToCheck != null) &amp;&amp; (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="(refToCheck != null) || (refToCheck.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_1160" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="false" />
    <mutant id="mutant_2491" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="detach || (ref.isSymbolic())" />
    <mutant id="mutant_1161" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="(smid.getChanged().isEmpty())" />
    <mutant id="mutant_2492" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="((!(needle.contains(&quot;/&quot;))) &amp;&amp; (&quot;&quot;.equals(prefix)))" to="(!(needle.contains(&quot;/&quot;)))" />
    <mutant id="mutant_2490" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="detach" />
    <mutant id="mutant_1157" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) || (smid.getChanged().isEmpty()))" />
    <mutant id="mutant_2488" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="true" />
    <mutant id="mutant_1158" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" />
    <mutant id="mutant_2489" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="false" />
    <mutant id="mutant_1155" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="false" />
    <mutant id="mutant_2486" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="(packedRefs.compareAndSet(curList, newList)) || (!(curList.id.equals(newList.id)))" />
    <mutant id="mutant_1156" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="(smid.getAdded().isEmpty())" />
    <mutant id="mutant_2487" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newUpdate(java.lang.String,boolean)" from="detach &amp;&amp; (ref.isSymbolic())" to="ref.isSymbolic()" />
    <mutant id="mutant_1153" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED))" />
    <mutant id="mutant_2484" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="true" />
    <mutant id="mutant_1154" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="true" />
    <mutant id="mutant_2485" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="false" />
    <mutant id="mutant_1151" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="false" />
    <mutant id="mutant_2482" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="!(curList.id.equals(newList.id))" />
    <mutant id="mutant_1152" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty()))" to="(((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) || (smid.getAdded().isEmpty()))" />
    <mutant id="mutant_2483" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getPackedRefs()" from="(packedRefs.compareAndSet(curList, newList)) &amp;&amp; (!(curList.id.equals(newList.id)))" to="packedRefs.compareAndSet(curList, newList)" />
    <mutant id="mutant_1159" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((((ignoreSubmoduleMode) == (SubmoduleWalk.IgnoreSubmoduleMode.UNTRACKED)) &amp;&amp; (smid.getAdded().isEmpty())) &amp;&amp; (smid.getChanged().isEmpty()))" to="true" />
    <mutant id="mutant_2480" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="true" />
    <mutant id="mutant_1150" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="true" />
    <mutant id="mutant_2481" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="false" />
    <mutant id="mutant_1146" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="(!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))" />
    <mutant id="mutant_2477" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="0 &lt; n" />
    <mutant id="mutant_1147" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="subHead != null" />
    <mutant id="mutant_2478" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="Character.isWhitespace(buf[(n - 1)])" />
    <mutant id="mutant_1144" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY))" />
    <mutant id="mutant_2475" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) || (ref.getTarget().getObjectId().equals(id))" />
    <mutant id="mutant_1145" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) &amp;&amp; (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" />
    <mutant id="mutant_2476" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="(ref != null) &amp;&amp; (!(ref.isSymbolic()))" />
    <mutant id="mutant_1142" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="true" />
    <mutant id="mutant_2473" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="true" />
    <mutant id="mutant_1143" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator)))) || (((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="false" />
    <mutant id="mutant_2474" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="false" />
    <mutant id="mutant_1140" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="false" />
    <mutant id="mutant_2471" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="false" />
    <mutant id="mutant_1141" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" />
    <mutant id="mutant_2472" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic()))) &amp;&amp; (ref.getTarget().getObjectId().equals(id))" to="ref.getTarget().getObjectId().equals(id)" />
    <mutant id="mutant_1148" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="(subHead != null) || (!(subHead.equals(smw.getObjectId())))" />
    <mutant id="mutant_2479" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="(0 &lt; n) || (Character.isWhitespace(buf[(n - 1)]))" />
    <mutant id="mutant_1149" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(subHead != null) &amp;&amp; (!(subHead.equals(smw.getObjectId())))" to="!(subHead.equals(smw.getObjectId()))" />
    <mutant id="mutant_2470" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="true" />
    <mutant id="mutant_1135" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="(!(isEntryGitLink(dirCacheIterator)))" />
    <mutant id="mutant_2466" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="(ref != null) &amp;&amp; (ref.isSymbolic())" />
    <mutant id="mutant_3798" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="((skip) &gt; (-1)) || ((maxCount) &gt; (-1))" />
    <mutant id="mutant_1136" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="((!(isEntryGitLink(dirCacheIterator))) &amp;&amp; (!(isEntryGitLink(workingTreeIterator))))" />
    <mutant id="mutant_2467" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="(!(ref.isSymbolic()))" />
    <mutant id="mutant_3797" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="(skip) &gt; (-1)" />
    <mutant id="mutant_1133" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="false" />
    <mutant id="mutant_2464" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="true" />
    <mutant id="mutant_3796" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="(maxCount) &gt; (-1)" />
    <mutant id="mutant_1134" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="(!(isEntryGitLink(workingTreeIterator)))" />
    <mutant id="mutant_2465" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="false" />
    <mutant id="mutant_3795" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="false" />
    <mutant id="mutant_1131" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!(isEntryGitLink(dirCacheIterator))" />
    <mutant id="mutant_2462" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="ref.getTarget().getName().equals(target)" />
    <mutant id="mutant_3794" viable="true" in="org.eclipse.jgit.api.LogCommand.call()" from="((skip) &gt; (-1)) &amp;&amp; ((maxCount) &gt; (-1))" to="true" />
    <mutant id="mutant_1132" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((!(isEntryGitLink(dirCacheIterator))) || (!(isEntryGitLink(workingTreeIterator))))" to="true" />
    <mutant id="mutant_2463" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic())) &amp;&amp; (ref.getTarget().getName().equals(target))" to="((ref != null) &amp;&amp; (ref.isSymbolic())) || (ref.getTarget().getName().equals(target))" />
    <mutant id="mutant_3793" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD)" />
    <mutant id="mutant_2460" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="true" />
    <mutant id="mutant_3792" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="(head != null) || (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" />
    <mutant id="mutant_1130" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)" />
    <mutant id="mutant_2461" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="false" />
    <mutant id="mutant_3791" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="head != null" />
    <mutant id="mutant_1139" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="true" />
    <mutant id="mutant_1137" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" />
    <mutant id="mutant_2468" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="(ref != null)" />
    <mutant id="mutant_1138" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY)))" to="((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.DIRTY))" />
    <mutant id="mutant_2469" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (!(ref.isSymbolic())))" to="((ref != null) || (!(ref.isSymbolic())))" />
    <mutant id="mutant_3799" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(revWalk.isMergedInto(headCommit, srcCommit)) &amp;&amp; ((fastForwardMode) != (MergeCommand.FastForwardMode.NO_FF))" to="revWalk.isMergedInto(headCommit, srcCommit)" />
    <mutant id="mutant_3790" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="false" />
    <mutant id="mutant_1124" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="true" />
    <mutant id="mutant_2455" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="true" />
    <mutant id="mutant_3787" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="false" />
    <mutant id="mutant_1125" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="false" />
    <mutant id="mutant_2456" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="false" />
    <mutant id="mutant_3786" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="true" />
    <mutant id="mutant_1122" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="workingTreeIterator != null" />
    <mutant id="mutant_2453" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="Character.isWhitespace(buf[(n - 1)])" />
    <mutant id="mutant_3785" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="gitDir != null" />
    <mutant id="mutant_1123" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="!(workingTreeIterator.isEntryIgnored())" />
    <mutant id="mutant_2454" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="(0 &lt; n) || (Character.isWhitespace(buf[(n - 1)]))" />
    <mutant id="mutant_3784" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="gitDir.equals(directory)" />
    <mutant id="mutant_1120" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL)" />
    <mutant id="mutant_2451" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="(resolvedRef != null) || ((resolvedRef.getObjectId()) != null)" />
    <mutant id="mutant_3783" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="false" />
    <mutant id="mutant_1121" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="!(isEntryGitLink(dirCacheIterator))" />
    <mutant id="mutant_2452" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(0 &lt; n) &amp;&amp; (Character.isWhitespace(buf[(n - 1)]))" to="0 &lt; n" />
    <mutant id="mutant_3782" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="true" />
    <mutant id="mutant_3781" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="!(gitDir.equals(directory))" />
    <mutant id="mutant_2450" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRefs(java.lang.String)" from="(resolvedRef != null) &amp;&amp; ((resolvedRef.getObjectId()) != null)" to="false" />
    <mutant id="mutant_3780" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="gitDir != null" />
    <mutant id="mutant_1128" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="true" />
    <mutant id="mutant_2459" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="((ref != null) || (ref.isSymbolic()))" />
    <mutant id="mutant_1129" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="false" />
    <mutant id="mutant_1126" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(workingTreeIterator != null) &amp;&amp; (!(workingTreeIterator.isEntryIgnored()))" to="(workingTreeIterator != null) || (!(workingTreeIterator.isEntryIgnored()))" />
    <mutant id="mutant_2457" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="(ref != null)" />
    <mutant id="mutant_3789" viable="true" in="org.eclipse.jgit.api.ListBranchCommand.call()" from="(head != null) &amp;&amp; (head.getLeaf().getName().equals(org.eclipse.jgit.lib.Constants.HEAD))" to="true" />
    <mutant id="mutant_1127" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(!(isEntryGitLink(dirCacheIterator))) || ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" to="(!(isEntryGitLink(dirCacheIterator))) &amp;&amp; ((ignoreSubmoduleMode) != (SubmoduleWalk.IgnoreSubmoduleMode.ALL))" />
    <mutant id="mutant_2458" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="((ref != null) &amp;&amp; (ref.isSymbolic()))" to="(ref.isSymbolic())" />
    <mutant id="mutant_3788" viable="true" in="org.eclipse.jgit.api.InitCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="(gitDir != null) || (gitDir.equals(directory))" />
    <mutant id="mutant_2293" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="(oldPackIndex) == null" />
    <mutant id="mutant_2294" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="true" />
    <mutant id="mutant_2291" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="true" />
    <mutant id="mutant_2292" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="false" />
    <mutant id="mutant_2290" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="!(Arrays.equals(origDigest.digest(), origHash))" />
    <mutant id="mutant_2288" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="(!(Arrays.equals(origDigest.digest(), origHash))) &amp;&amp; (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" />
    <mutant id="mutant_2289" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(!(Arrays.equals(origDigest.digest(), origHash))) || (!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest())))" to="!(Arrays.equals(tailDigest2.digest(), this.tailDigest.digest()))" />
    <mutant id="mutant_2286" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="false" />
    <mutant id="mutant_2287" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="tmpPack.exists()" />
    <mutant id="mutant_2284" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) || (tmpPack.exists())" />
    <mutant id="mutant_2285" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="true" />
    <mutant id="mutant_2282" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="(!(tmpPack.delete()))" />
    <mutant id="mutant_2283" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))) &amp;&amp; (tmpPack.exists())" to="((tmpPack) != null) &amp;&amp; (!(tmpPack.delete()))" />
    <mutant id="mutant_2280" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="((tmpPack) != null)" />
    <mutant id="mutant_2281" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="(((tmpPack) != null) || (!(tmpPack.delete())))" />
    <mutant id="mutant_2279" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="false" />
    <mutant id="mutant_2277" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="tmpIdx.exists()" />
    <mutant id="mutant_2278" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpPack) != null) &amp;&amp; (!(tmpPack.delete())))" to="true" />
    <mutant id="mutant_2275" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="true" />
    <mutant id="mutant_2276" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="false" />
    <mutant id="mutant_2273" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))" />
    <mutant id="mutant_2274" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) &amp;&amp; (tmpIdx.exists())" to="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete()))) || (tmpIdx.exists())" />
    <mutant id="mutant_2271" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="(((tmpIdx) != null) || (!(tmpIdx.delete())))" />
    <mutant id="mutant_2272" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="(!(tmpIdx.delete()))" />
    <mutant id="mutant_2270" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="false" />
    <mutant id="mutant_2268" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="((tmpIdx) != null)" />
    <mutant id="mutant_2269" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.cleanupTemporaryFiles()" from="(((tmpIdx) != null) &amp;&amp; (!(tmpIdx.delete())))" to="true" />
    <mutant id="mutant_3599" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="(path.equals(ignored))" />
    <mutant id="mutant_2266" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) || (!(packDir.exists()))" />
    <mutant id="mutant_3598" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="(exact || (path.equals(ignored)))" />
    <mutant id="mutant_2267" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="(!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))" />
    <mutant id="mutant_3597" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="false" />
    <mutant id="mutant_2264" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="true" />
    <mutant id="mutant_3596" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="true" />
    <mutant id="mutant_2265" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="false" />
    <mutant id="mutant_3595" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored)))" to="exact" />
    <mutant id="mutant_2262" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="(!(packDir.mkdir()))" />
    <mutant id="mutant_3594" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="paths.isEmpty()" />
    <mutant id="mutant_2263" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir()))) &amp;&amp; (!(packDir.exists()))" to="!(packDir.exists())" />
    <mutant id="mutant_3593" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="false" />
    <mutant id="mutant_2260" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="true" />
    <mutant id="mutant_3592" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="true" />
    <mutant id="mutant_2261" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="false" />
    <mutant id="mutant_3591" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="(paths.isEmpty()) &amp;&amp; (paths.contains(dir))" />
    <mutant id="mutant_3590" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(dir))" to="paths.contains(dir)" />
    <mutant id="mutant_2257" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="(!(keepEmpty)) || ((getObjectCount()) == 0)" />
    <mutant id="mutant_3589" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="paths.isEmpty()" />
    <mutant id="mutant_2258" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="(!(packDir.exists()))" />
    <mutant id="mutant_3588" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="paths.contains(file)" />
    <mutant id="mutant_2255" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="false" />
    <mutant id="mutant_3587" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="false" />
    <mutant id="mutant_2256" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="(getObjectCount()) == 0" />
    <mutant id="mutant_3586" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="true" />
    <mutant id="mutant_2253" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="!(keepEmpty)" />
    <mutant id="mutant_3585" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(paths.isEmpty()) || (paths.contains(file))" to="(paths.isEmpty()) &amp;&amp; (paths.contains(file))" />
    <mutant id="mutant_2254" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(!(keepEmpty)) &amp;&amp; ((getObjectCount()) == 0)" to="true" />
    <mutant id="mutant_3584" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="fs.isSymLink(f)" />
    <mutant id="mutant_2251" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="false" />
    <mutant id="mutant_3583" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="fs.isFile(f)" />
    <mutant id="mutant_2252" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="(out) != null" />
    <mutant id="mutant_3582" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="false" />
    <mutant id="mutant_2259" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((!(packDir.exists())) &amp;&amp; (!(packDir.mkdir())))" to="((!(packDir.exists())) || (!(packDir.mkdir())))" />
    <mutant id="mutant_2299" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="((entry) == null) || (it.hasNext())" />
    <mutant id="mutant_2297" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="(bitmap != null) &amp;&amp; ((oldPackIndex) == null)" />
    <mutant id="mutant_2298" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="(entry) == null" />
    <mutant id="mutant_2295" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="false" />
    <mutant id="mutant_2296" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper.getBitmap(org.eclipse.jgit.lib.AnyObjectId)" from="(bitmap != null) || ((oldPackIndex) == null)" to="bitmap != null" />
    <mutant id="mutant_7101" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="(ptr &lt; sz) || (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" />
    <mutant id="mutant_7100" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r')" />
    <mutant id="mutant_7141" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="false" />
    <mutant id="mutant_7140" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="true" />
    <mutant id="mutant_7143" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="(b[ptr]) != '\n'" />
    <mutant id="mutant_7142" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="(c == chrA) &amp;&amp; (c == '\n')" />
    <mutant id="mutant_7145" viable="false" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="false" />
    <mutant id="mutant_7144" viable="false" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="true" />
    <mutant id="mutant_7136" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="false" />
    <mutant id="mutant_7135" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="true" />
    <mutant id="mutant_7138" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="c == '\n'" />
    <mutant id="mutant_7137" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="(r &lt; 0) &amp;&amp; (last &lt; 0)" />
    <mutant id="mutant_7139" viable="true" in="org.eclipse.jgit.util.RawParseUtils.prevLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="c == chrA" />
    <mutant id="mutant_7130" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="(b[ptr]) == ' '" />
    <mutant id="mutant_7132" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="ptr &lt; sz" />
    <mutant id="mutant_7131" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="(ptr &lt; sz) || ((b[ptr]) == ' ')" />
    <mutant id="mutant_7134" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="r &lt; 0" />
    <mutant id="mutant_7133" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(r &lt; 0) || (last &lt; 0)" to="last &lt; 0" />
    <mutant id="mutant_7125" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="true" />
    <mutant id="mutant_7124" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="c == chrA" />
    <mutant id="mutant_7127" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="(c == chrA) &amp;&amp; (c == '\n')" />
    <mutant id="mutant_7126" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="false" />
    <mutant id="mutant_7129" viable="false" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="false" />
    <mutant id="mutant_7128" viable="false" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="true" />
    <mutant id="mutant_7121" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="pos &gt;= 0" />
    <mutant id="mutant_7120" viable="false" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="false" />
    <mutant id="mutant_7123" viable="true" in="org.eclipse.jgit.util.RawParseUtils.nextLF(byte[],int,char)" from="(c == chrA) || (c == '\n')" to="c == '\n'" />
    <mutant id="mutant_7122" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="(raw[pos]) != ch" />
    <mutant id="mutant_7114" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="(raw[pos]) == ' '" />
    <mutant id="mutant_7113" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="(pos &gt;= 0) || ((raw[pos]) == ' ')" />
    <mutant id="mutant_7116" viable="false" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="false" />
    <mutant id="mutant_7115" viable="false" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="true" />
    <mutant id="mutant_7118" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="(pos &gt;= 0) || ((raw[pos]) != ch)" />
    <mutant id="mutant_7117" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) == ' ')" to="pos &gt;= 0" />
    <mutant id="mutant_7119" viable="false" in="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(byte[],char,int)" from="(pos &gt;= 0) &amp;&amp; ((raw[pos]) != ch)" to="true" />
    <mutant id="mutant_7110" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="true" />
    <mutant id="mutant_7112" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="ptr &gt; start" />
    <mutant id="mutant_7111" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="false" />
    <mutant id="mutant_7103" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="(b[(ptr - 1)]) == '\n'" />
    <mutant id="mutant_7102" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="ptr &lt; sz" />
    <mutant id="mutant_7105" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="false" />
    <mutant id="mutant_7104" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="true" />
    <mutant id="mutant_7107" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="(ptr &gt; start) || ((b[(ptr - 1)]) == '\n')" />
    <mutant id="mutant_7106" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\n')" to="ptr &gt; start" />
    <mutant id="mutant_7109" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="(ptr &gt; start) || ((b[(ptr - 1)]) == '\r')" />
    <mutant id="mutant_7108" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &gt; start) &amp;&amp; ((b[(ptr - 1)]) == '\r')" to="(b[(ptr - 1)]) == '\r'" />
    <mutant id="mutant_7183" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="a != b" />
    <mutant id="mutant_7182" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="((emailB - 2) &gt;= nameB) || ((raw[(emailB - 2)]) == ' ')" />
    <mutant id="mutant_7185" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b))" />
    <mutant id="mutant_7184" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="(a != b) || (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" />
    <mutant id="mutant_7187" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="false" />
    <mutant id="mutant_4909" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="ref != null" />
    <mutant id="mutant_7186" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.neq(byte,byte)" from="(a != b) &amp;&amp; (a != (org.eclipse.jgit.util.RawSubStringPattern.lc(b)))" to="true" />
    <mutant id="mutant_4908" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="!(isAllowNonFastForwards())" />
    <mutant id="mutant_7189" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos])" />
    <mutant id="mutant_4907" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="(!(isAllowBranchDeletes())) || (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_7188" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="(++matchPos) &lt;= maxPos" />
    <mutant id="mutant_7181" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="false" />
    <mutant id="mutant_7180" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="true" />
    <mutant id="mutant_4906" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="false" />
    <mutant id="mutant_4905" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="true" />
    <mutant id="mutant_7179" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="(raw[(emailB - 2)]) == ' '" />
    <mutant id="mutant_4904" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)" />
    <mutant id="mutant_4903" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(isAllowBranchDeletes())) &amp;&amp; (ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="!(isAllowBranchDeletes())" />
    <mutant id="mutant_4902" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="(objectChecker) != null" />
    <mutant id="mutant_4901" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="(!check) || ((objectChecker) != null)" />
    <mutant id="mutant_4900" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="false" />
    <mutant id="mutant_7172" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="(emailE &gt;= ((raw.length) - 1))" />
    <mutant id="mutant_7171" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="false" />
    <mutant id="mutant_7174" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="false" />
    <mutant id="mutant_7173" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="true" />
    <mutant id="mutant_7176" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="(emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')" />
    <mutant id="mutant_7175" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) &amp;&amp; ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" />
    <mutant id="mutant_7178" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB - 2) &gt;= nameB) &amp;&amp; ((raw[(emailB - 2)]) == ' ')" to="(emailB - 2) &gt;= nameB" />
    <mutant id="mutant_7177" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n')) || ((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="(emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;')" />
    <mutant id="mutant_7170" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="true" />
    <mutant id="mutant_7169" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="((emailE &gt;= ((raw.length) - 1)) || ((raw[(emailE - 1)]) != '&gt;'))" />
    <mutant id="mutant_7168" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailE &gt;= ((raw.length) - 1)) &amp;&amp; ((raw[(emailE - 1)]) != '&gt;'))" to="((raw[(emailE - 1)]) != '&gt;')" />
    <mutant id="mutant_7161" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="(ptr &lt; sz) || ((b[ptr]) == ' ')" />
    <mutant id="mutant_7160" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="(b[ptr]) == ' '" />
    <mutant id="mutant_7163" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="(emailB &gt;= (raw.length))" />
    <mutant id="mutant_7162" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="ptr &lt; sz" />
    <mutant id="mutant_7165" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="false" />
    <mutant id="mutant_7164" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="true" />
    <mutant id="mutant_7167" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="((raw[emailB]) == '\n')" />
    <mutant id="mutant_7166" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((emailB &gt;= (raw.length)) || ((raw[emailB]) == '\n'))" to="((emailB &gt;= (raw.length)) &amp;&amp; ((raw[emailB]) == '\n'))" />
    <mutant id="mutant_7158" viable="false" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="true" />
    <mutant id="mutant_7157" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="false" />
    <mutant id="mutant_7159" viable="false" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == ' ')" to="false" />
    <mutant id="mutant_7150" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="false" />
    <mutant id="mutant_7152" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="ptr &lt; sz" />
    <mutant id="mutant_7151" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="(ptr &lt; sz) || ((b[ptr]) == '\n')" />
    <mutant id="mutant_7154" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET))" />
    <mutant id="mutant_7153" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="(!(defcs.equals(cs))) || (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" />
    <mutant id="mutant_7156" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="true" />
    <mutant id="mutant_7155" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(!(defcs.equals(cs))) &amp;&amp; (!(defcs.equals(org.eclipse.jgit.lib.Constants.CHARSET)))" to="!(defcs.equals(cs))" />
    <mutant id="mutant_7147" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="ptr &lt; sz" />
    <mutant id="mutant_7146" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) != '\n')" to="(ptr &lt; sz) || ((b[ptr]) != '\n')" />
    <mutant id="mutant_7149" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="true" />
    <mutant id="mutant_7148" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == '\n')" to="(b[ptr]) == '\n'" />
    <mutant id="mutant_3611" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="true" />
    <mutant id="mutant_4942" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="!(Repository.isValidRefName(cmd.getRefName()))" />
    <mutant id="mutant_3610" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="(branchesToClone) != null" />
    <mutant id="mutant_4941" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) &amp;&amp; (!(Repository.isValidRefName(cmd.getRefName())))" />
    <mutant id="mutant_4940" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))" />
    <mutant id="mutant_3619" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="master != null" />
    <mutant id="mutant_3618" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="master.getObjectId().equals(idHEAD.getObjectId())" />
    <mutant id="mutant_4949" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="true" />
    <mutant id="mutant_3617" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="false" />
    <mutant id="mutant_4948" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="lf &lt; cnt" />
    <mutant id="mutant_3616" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="true" />
    <mutant id="mutant_4947" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="(hdrbuf[lf]) != '\n'" />
    <mutant id="mutant_3615" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="(master != null) &amp;&amp; (master.getObjectId().equals(idHEAD.getObjectId()))" to="(master != null) || (master.getObjectId().equals(idHEAD.getObjectId()))" />
    <mutant id="mutant_4946" viable="false" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="false" />
    <mutant id="mutant_3614" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="(branchesToClone.size()) &gt; 0" />
    <mutant id="mutant_4945" viable="false" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="true" />
    <mutant id="mutant_3613" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="((branchesToClone) != null) || ((branchesToClone.size()) &gt; 0)" />
    <mutant id="mutant_4944" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="(lf &lt; cnt) || ((hdrbuf[lf]) != '\n')" />
    <mutant id="mutant_3612" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((branchesToClone) != null) &amp;&amp; ((branchesToClone.size()) &gt; 0)" to="false" />
    <mutant id="mutant_4943" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) != '\n')" to="lf &lt; cnt" />
    <mutant id="mutant_3609" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="exact &amp;&amp; (path.equals(ignored))" />
    <mutant id="mutant_3600" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="(path.startsWith(ignored))" />
    <mutant id="mutant_4931" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="false" />
    <mutant id="mutant_4930" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="true" />
    <mutant id="mutant_3608" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="(exact &amp;&amp; (path.equals(ignored))) &amp;&amp; ((!exact) &amp;&amp; (path.startsWith(ignored)))" />
    <mutant id="mutant_4939" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="false" />
    <mutant id="mutant_3607" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="false" />
    <mutant id="mutant_4938" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(!(cmd.getRefName().startsWith(org.eclipse.jgit.lib.Constants.R_REFS))) || (!(Repository.isValidRefName(cmd.getRefName())))" to="true" />
    <mutant id="mutant_3606" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="true" />
    <mutant id="mutant_4937" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="(cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)" />
    <mutant id="mutant_3605" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="(exact &amp;&amp; (path.equals(ignored))) || ((!exact) &amp;&amp; (path.startsWith(ignored)))" to="(!exact) &amp;&amp; (path.startsWith(ignored))" />
    <mutant id="mutant_4936" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="false" />
    <mutant id="mutant_3604" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="(!exact)" />
    <mutant id="mutant_4935" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="true" />
    <mutant id="mutant_3603" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="((!exact) || (path.startsWith(ignored)))" />
    <mutant id="mutant_4934" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) || (!(isAllowNonFastForwards()))" />
    <mutant id="mutant_3602" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="false" />
    <mutant id="mutant_4933" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((cmd.getType()) == (ReceiveCommand.Type.UPDATE_NONFASTFORWARD)) &amp;&amp; (!(isAllowNonFastForwards()))" to="!(isAllowNonFastForwards())" />
    <mutant id="mutant_3601" viable="true" in="org.eclipse.jgit.api.CleanCommand.filterIgnorePaths(java.util.Set,java.util.Set,boolean)" from="((!exact) &amp;&amp; (path.startsWith(ignored)))" to="true" />
    <mutant id="mutant_4932" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="oldObj instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_4929" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) || (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" />
    <mutant id="mutant_4920" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" />
    <mutant id="mutant_4928" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(oldObj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (newObj instanceof org.eclipse.jgit.revwalk.RevCommit)" to="newObj instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_4927" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="false" />
    <mutant id="mutant_4926" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="true" />
    <mutant id="mutant_4925" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))" />
    <mutant id="mutant_4924" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="!(ref.getObjectId().equals(cmd.getOldId()))" />
    <mutant id="mutant_4923" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) &amp;&amp; (!(ref.getObjectId().equals(cmd.getOldId())))" to="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId())))) || (!(ref.getObjectId().equals(cmd.getOldId())))" />
    <mutant id="mutant_4922" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="false" />
    <mutant id="mutant_4921" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="true" />
    <mutant id="mutant_7194" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="key instanceof java.lang.String" />
    <mutant id="mutant_7193" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="(key instanceof java.lang.String) || (val instanceof org.eclipse.jgit.lib.Ref)" />
    <mutant id="mutant_7196" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="false" />
    <mutant id="mutant_7195" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="true" />
    <mutant id="mutant_7198" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="true" />
    <mutant id="mutant_7197" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="(key instanceof java.lang.String) &amp;&amp; (val instanceof org.eclipse.jgit.lib.Ref)" to="val instanceof org.eclipse.jgit.lib.Ref" />
    <mutant id="mutant_4919" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="(!(ObjectId.zeroId().equals(cmd.getOldId())))" />
    <mutant id="mutant_4918" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) &amp;&amp; (!(ObjectId.zeroId().equals(cmd.getOldId()))))" to="((((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null)) || (!(ObjectId.zeroId().equals(cmd.getOldId()))))" />
    <mutant id="mutant_7199" viable="true" in="org.eclipse.jgit.util.RefMap$Ent.equals(java.lang.Object)" from="((a != null) &amp;&amp; (b != null))" to="false" />
    <mutant id="mutant_7190" viable="false" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="true" />
    <mutant id="mutant_7192" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="((++matchPos) &lt;= maxPos) || (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" />
    <mutant id="mutant_7191" viable="false" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="((++matchPos) &lt;= maxPos) &amp;&amp; (org.eclipse.jgit.util.RawSubStringPattern.neq(first, text[matchPos]))" to="false" />
    <mutant id="mutant_4917" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="((cmd.getType()) == (ReceiveCommand.Type.DELETE))" />
    <mutant id="mutant_4916" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="false" />
    <mutant id="mutant_4915" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="true" />
    <mutant id="mutant_4914" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="(ref != null)" />
    <mutant id="mutant_4913" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) &amp;&amp; (ref != null))" to="(((cmd.getType()) == (ReceiveCommand.Type.DELETE)) || (ref != null))" />
    <mutant id="mutant_4912" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="false" />
    <mutant id="mutant_4911" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="true" />
    <mutant id="mutant_4910" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.validateCommands()" from="(ref != null) &amp;&amp; (!(isAllowNonFastForwards()))" to="(ref != null) || (!(isAllowNonFastForwards()))" />
    <mutant id="mutant_2323" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="((bitmapIdx) == null) || (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" />
    <mutant id="mutant_3655" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="gitDir != null" />
    <mutant id="mutant_4986" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="askFor.containsKey(obj)" />
    <mutant id="mutant_2324" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="(bitmapIdx) == null" />
    <mutant id="mutant_3654" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="(gitDir != null) || (!(gitDir.equals(directory)))" />
    <mutant id="mutant_4985" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="false" />
    <mutant id="mutant_2321" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="true" />
    <mutant id="mutant_3653" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="false" />
    <mutant id="mutant_4984" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="true" />
    <mutant id="mutant_2322" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="false" />
    <mutant id="mutant_3652" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="true" />
    <mutant id="mutant_4983" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="(askFor.containsKey(obj)) &amp;&amp; (transport.local.hasObject(obj))" />
    <mutant id="mutant_3651" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="(head.getObjectId()) == null" />
    <mutant id="mutant_4982" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) || (commandLine.startsWith(command))" />
    <mutant id="mutant_2320" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="invalidBitmap" />
    <mutant id="mutant_3650" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="(head == null) &amp;&amp; ((head.getObjectId()) == null)" />
    <mutant id="mutant_4981" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="(((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')" />
    <mutant id="mutant_4980" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="commandLine.startsWith(command)" />
    <mutant id="mutant_2329" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="0 &lt; offset" />
    <mutant id="mutant_2327" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX)" />
    <mutant id="mutant_3659" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="gitDir.equals(directory)" />
    <mutant id="mutant_2328" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!(isCorrupt(offset))" />
    <mutant id="mutant_3658" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="false" />
    <mutant id="mutant_4989" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="(ref.getObjectId()) != null" />
    <mutant id="mutant_2325" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="true" />
    <mutant id="mutant_3657" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="true" />
    <mutant id="mutant_4988" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="ref != null" />
    <mutant id="mutant_2326" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="((bitmapIdx) == null) &amp;&amp; (hasExt(org.eclipse.jgit.internal.storage.pack.PackExt.BITMAP_INDEX))" to="false" />
    <mutant id="mutant_3656" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (!(gitDir.equals(directory)))" to="!(gitDir.equals(directory))" />
    <mutant id="mutant_4987" viable="true" in="org.eclipse.jgit.transport.FetchProcess.expandAutoFollowTags()" from="(askFor.containsKey(obj)) || (transport.local.hasObject(obj))" to="transport.local.hasObject(obj)" />
    <mutant id="mutant_2312" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="r || ((activeCopyRawData) == 0)" />
    <mutant id="mutant_3644" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="((gitDir) != null) &amp;&amp; (gitDir.exists())" />
    <mutant id="mutant_4975" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="true" />
    <mutant id="mutant_2313" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="!(isCorrupt(offset))" />
    <mutant id="mutant_3643" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="(((gitDir) != null) &amp;&amp; (gitDir.exists())) || ((gitDir.listFiles().length) != 0)" />
    <mutant id="mutant_4974" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="((commandLine.charAt(command.length())) == ' ')" />
    <mutant id="mutant_2310" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="false" />
    <mutant id="mutant_3642" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="(gitDir.listFiles().length) != 0" />
    <mutant id="mutant_4973" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="(((command.length()) + 1) &lt; (commandLine.length()))" />
    <mutant id="mutant_2311" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="r" />
    <mutant id="mutant_3641" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="false" />
    <mutant id="mutant_4972" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="(instruction != null) || ((instruction.length()) &gt; 0)" />
    <mutant id="mutant_3640" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists())) &amp;&amp; ((gitDir.listFiles().length) != 0)" to="true" />
    <mutant id="mutant_4971" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="instruction != null" />
    <mutant id="mutant_4970" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="false" />
    <mutant id="mutant_2318" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="(invalid) &amp;&amp; (invalidBitmap)" />
    <mutant id="mutant_2319" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getBitmapIndex()" from="(invalid) || (invalidBitmap)" to="invalid" />
    <mutant id="mutant_3649" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="(head == null) || ((head.getObjectId()) == null)" to="head == null" />
    <mutant id="mutant_2316" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="false" />
    <mutant id="mutant_3648" viable="true" in="org.eclipse.jgit.api.CloneCommand.addMergeConfig(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.Ref)" from="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" to="false" />
    <mutant id="mutant_4979" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="false" />
    <mutant id="mutant_2317" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="(0 &lt; offset) || (!(isCorrupt(offset)))" />
    <mutant id="mutant_3647" viable="true" in="org.eclipse.jgit.api.CloneCommand.addMergeConfig(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.Ref)" from="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" to="true" />
    <mutant id="mutant_4978" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' ')) &amp;&amp; (commandLine.startsWith(command))" to="true" />
    <mutant id="mutant_2314" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="0 &lt; offset" />
    <mutant id="mutant_3646" viable="true" in="org.eclipse.jgit.api.CloneCommand.addMergeConfig(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.Ref)" from="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" to="ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)" />
    <mutant id="mutant_4977" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="((((command.length()) + 1) &lt; (commandLine.length())) || ((commandLine.charAt(command.length())) == ' '))" />
    <mutant id="mutant_2315" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.hasObject(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="true" />
    <mutant id="mutant_3645" viable="true" in="org.eclipse.jgit.api.CloneCommand.addMergeConfig(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.Ref)" from="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) || (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" to="(ConfigConstants.CONFIG_KEY_ALWAYS.equals(autosetupRebase)) &amp;&amp; (ConfigConstants.CONFIG_KEY_REMOTE.equals(autosetupRebase))" />
    <mutant id="mutant_4976" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((((command.length()) + 1) &lt; (commandLine.length())) &amp;&amp; ((commandLine.charAt(command.length())) == ' '))" to="false" />
    <mutant id="mutant_2301" viable="false" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="false" />
    <mutant id="mutant_3633" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="false" />
    <mutant id="mutant_4964" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="v.getValue()" />
    <mutant id="mutant_2302" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="it.hasNext()" />
    <mutant id="mutant_3632" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="true" />
    <mutant id="mutant_4963" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="provider.get(uri, v)" />
    <mutant id="mutant_3631" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="((directory) != null) &amp;&amp; (directory.exists())" />
    <mutant id="mutant_4962" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="((r.getObjectId()) != null) || (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_2300" viable="false" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexRemapper$1.hasNext()" from="((entry) == null) &amp;&amp; (it.hasNext())" to="true" />
    <mutant id="mutant_3630" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="(((directory) != null) &amp;&amp; (directory.exists())) || ((directory.listFiles().length) != 0)" />
    <mutant id="mutant_4961" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="false" />
    <mutant id="mutant_4960" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="true" />
    <mutant id="mutant_2309" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="true" />
    <mutant id="mutant_2307" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="(packDataChecksum.length) != 20" />
    <mutant id="mutant_3639" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="(gitDir.exists())" />
    <mutant id="mutant_2308" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endWindowCache()" from="r &amp;&amp; ((activeCopyRawData) == 0)" to="(activeCopyRawData) == 0" />
    <mutant id="mutant_3638" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="false" />
    <mutant id="mutant_4969" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="true" />
    <mutant id="mutant_2305" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="true" />
    <mutant id="mutant_3637" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="true" />
    <mutant id="mutant_4968" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptKeyboardInteractive(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])" from="(instruction != null) &amp;&amp; ((instruction.length()) &gt; 0)" to="(instruction.length()) &gt; 0" />
    <mutant id="mutant_2306" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="false" />
    <mutant id="mutant_3636" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="(((gitDir) != null) || (gitDir.exists()))" />
    <mutant id="mutant_4967" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="(provider.get(uri, v)) || (v.getValue())" />
    <mutant id="mutant_2303" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="bitmaps == null" />
    <mutant id="mutant_3635" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((gitDir) != null) &amp;&amp; (gitDir.exists()))" to="((gitDir) != null)" />
    <mutant id="mutant_4966" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="false" />
    <mutant id="mutant_2304" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexWriterV1.write(org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder,byte[])" from="(bitmaps == null) || ((packDataChecksum.length) != 20)" to="(bitmaps == null) &amp;&amp; ((packDataChecksum.length) != 20)" />
    <mutant id="mutant_3634" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists())) &amp;&amp; ((directory.listFiles().length) != 0)" to="(directory.listFiles().length) != 0" />
    <mutant id="mutant_4965" viable="true" in="org.eclipse.jgit.transport.CredentialsProviderUserInfo.promptYesNo(java.lang.String)" from="(provider.get(uri, v)) &amp;&amp; (v.getValue())" to="true" />
    <mutant id="mutant_3622" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="true" />
    <mutant id="mutant_4953" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="Repository.isValidRefName(name)" />
    <mutant id="mutant_3621" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="(directory) == null" />
    <mutant id="mutant_4952" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="(hdrbuf[lf]) == '\n'" />
    <mutant id="mutant_3620" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="((directory) == null) || ((gitDir) == null)" />
    <mutant id="mutant_4951" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="(lf &lt; cnt) || ((hdrbuf[lf]) == '\n')" />
    <mutant id="mutant_4950" viable="true" in="org.eclipse.jgit.transport.BundleFetchConnection.readLine(byte[])" from="(lf &lt; cnt) &amp;&amp; ((hdrbuf[lf]) == '\n')" to="false" />
    <mutant id="mutant_3629" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="(directory.exists())" />
    <mutant id="mutant_3628" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="((directory) != null)" />
    <mutant id="mutant_4959" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)" />
    <mutant id="mutant_3627" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="false" />
    <mutant id="mutant_4958" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(org.eclipse.jgit.lib.Ref)" from="((r.getObjectId()) != null) &amp;&amp; (r.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" to="(r.getObjectId()) != null" />
    <mutant id="mutant_3626" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="true" />
    <mutant id="mutant_4957" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="(Repository.isValidRefName(name)) &amp;&amp; (Constants.HEAD.equals(name))" />
    <mutant id="mutant_3625" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="(((directory) != null) &amp;&amp; (directory.exists()))" to="(((directory) != null) || (directory.exists()))" />
    <mutant id="mutant_4956" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="false" />
    <mutant id="mutant_3624" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="(gitDir) == null" />
    <mutant id="mutant_4955" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="true" />
    <mutant id="mutant_3623" viable="true" in="org.eclipse.jgit.api.CloneCommand.init(org.eclipse.jgit.transport.URIish)" from="((directory) == null) &amp;&amp; ((gitDir) == null)" to="false" />
    <mutant id="mutant_4954" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="(Repository.isValidRefName(name)) || (Constants.HEAD.equals(name))" to="Constants.HEAD.equals(name)" />
    <mutant id="mutant_2370" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="true" />
    <mutant id="mutant_1040" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="false" />
    <mutant id="mutant_2371" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="false" />
    <mutant id="mutant_1036" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="((typeString[(position + 2)]) != 'o')" />
    <mutant id="mutant_2367" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="(vers != 2) || (vers != 3)" />
    <mutant id="mutant_3699" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="emptyCommit &amp;&amp; (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="emptyCommit || (((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" />
    <mutant id="mutant_1037" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="((typeString[(position + 3)]) != 'b')" />
    <mutant id="mutant_2368" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="levelOne &gt; 0" />
    <mutant id="mutant_3698" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="(((hTree == null) || (!(hTree.idEqual(fTree)))) &amp;&amp; ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" />
    <mutant id="mutant_1034" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="true" />
    <mutant id="mutant_2365" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="false" />
    <mutant id="mutant_3697" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="((hTree == null) || (!(hTree.idEqual(fTree))))" />
    <mutant id="mutant_1035" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="false" />
    <mutant id="mutant_2366" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="vers != 2" />
    <mutant id="mutant_3696" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="false" />
    <mutant id="mutant_1032" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="((typeString[(position + 1)]) != 'l')" />
    <mutant id="mutant_2363" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="vers != 3" />
    <mutant id="mutant_3695" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="true" />
    <mutant id="mutant_1033" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" to="(((typeString[(position + 1)]) != 'l') &amp;&amp; ((typeString[(position + 2)]) != 'o'))" />
    <mutant id="mutant_2364" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="(vers != 2) &amp;&amp; (vers != 3)" to="true" />
    <mutant id="mutant_3694" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(((hTree == null) || (!(hTree.idEqual(fTree)))) || ((hTree.getEntryRawMode()) != (fTree.getEntryRawMode())))" to="((hTree.getEntryRawMode()) != (fTree.getEntryRawMode()))" />
    <mutant id="mutant_1030" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="false" />
    <mutant id="mutant_2361" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="(activeWindows) == 0" />
    <mutant id="mutant_3693" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="((hTree == null) &amp;&amp; (!(hTree.idEqual(fTree))))" />
    <mutant id="mutant_1031" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="(bb.hasArray()) || ((bb.arrayOffset()) == 0)" />
    <mutant id="mutant_2362" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="(--(activeCopyRawData)) == 0" />
    <mutant id="mutant_3692" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="(hTree == null)" />
    <mutant id="mutant_1038" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="(((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o'))" />
    <mutant id="mutant_2369" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne &gt; 0) &amp;&amp; (base == (idxHeader[(levelOne - 1)]))" to="(levelOne &gt; 0) || (base == (idxHeader[(levelOne - 1)]))" />
    <mutant id="mutant_1039" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="((((typeString[(position + 1)]) != 'l') || ((typeString[(position + 2)]) != 'o')) || ((typeString[(position + 3)]) != 'b'))" to="true" />
    <mutant id="mutant_3691" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="false" />
    <mutant id="mutant_2360" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="false" />
    <mutant id="mutant_3690" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="true" />
    <mutant id="mutant_1025" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="(baseState) != null" />
    <mutant id="mutant_2356" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="true" />
    <mutant id="mutant_3688" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="(hTree != null) &amp;&amp; (fTree.idEqual(hTree))" />
    <mutant id="mutant_1026" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="recursive || ((baseState) != null)" />
    <mutant id="mutant_2357" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="false" />
    <mutant id="mutant_3687" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) &amp;&amp; ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" />
    <mutant id="mutant_1023" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="true" />
    <mutant id="mutant_2354" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="validate || ((crc2.getValue()) != expectedCRC)" />
    <mutant id="mutant_3686" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="false" />
    <mutant id="mutant_1024" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="false" />
    <mutant id="mutant_2355" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="(crc2.getValue()) != expectedCRC" />
    <mutant id="mutant_3685" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="true" />
    <mutant id="mutant_1021" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="false" />
    <mutant id="mutant_2352" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="(inf.getBytesRead()) != dataLength" />
    <mutant id="mutant_3684" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))) || ((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="(dcTree != null) &amp;&amp; (fTree.idEqual(dcTree))" />
    <mutant id="mutant_1022" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="recursive &amp;&amp; ((baseState) != null)" to="recursive" />
    <mutant id="mutant_2353" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; ((crc2.getValue()) != expectedCRC)" to="validate" />
    <mutant id="mutant_3683" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="((hTree != null) || (fTree.idEqual(hTree)))" />
    <mutant id="mutant_2350" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="false" />
    <mutant id="mutant_3682" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="(fTree.idEqual(hTree))" />
    <mutant id="mutant_1020" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="true" />
    <mutant id="mutant_2351" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="!(inf.finished())" />
    <mutant id="mutant_3681" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="false" />
    <mutant id="mutant_1029" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="true" />
    <mutant id="mutant_1027" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="(bb.arrayOffset()) == 0" />
    <mutant id="mutant_2358" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="((--(activeCopyRawData)) == 0) || ((activeWindows) == 0)" />
    <mutant id="mutant_1028" viable="true" in="org.eclipse.jgit.lib.Constants.encode(java.lang.String)" from="(bb.hasArray()) &amp;&amp; ((bb.arrayOffset()) == 0)" to="bb.hasArray()" />
    <mutant id="mutant_2359" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.endCopyAsIs()" from="((--(activeCopyRawData)) == 0) &amp;&amp; ((activeWindows) == 0)" to="true" />
    <mutant id="mutant_3689" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree == null) || (!(hTree.idEqual(fTree))))" to="(!(hTree.idEqual(fTree)))" />
    <mutant id="mutant_3680" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="true" />
    <mutant id="mutant_1014" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="true" />
    <mutant id="mutant_2345" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="false" />
    <mutant id="mutant_3677" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="(dcTree != null)" />
    <mutant id="mutant_1015" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="false" />
    <mutant id="mutant_2346" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="idx().hasCRC32Support()" />
    <mutant id="mutant_3676" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="false" />
    <mutant id="mutant_1012" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="aSubsection != null" />
    <mutant id="mutant_2343" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="validate" />
    <mutant id="mutant_3675" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="true" />
    <mutant id="mutant_1013" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="(aSubsection != null) || (bSubsection == null)" />
    <mutant id="mutant_2344" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="true" />
    <mutant id="mutant_3674" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="(fTree.idEqual(dcTree))" />
    <mutant id="mutant_1010" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="true" />
    <mutant id="mutant_2341" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="false" />
    <mutant id="mutant_3673" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="(dcTree != null) &amp;&amp; (hTree != null)" />
    <mutant id="mutant_1011" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="false" />
    <mutant id="mutant_2342" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="(activeWindows) == 0" />
    <mutant id="mutant_3672" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="dcTree != null" />
    <mutant id="mutant_3671" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="false" />
    <mutant id="mutant_2340" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="true" />
    <mutant id="mutant_3670" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="true" />
    <mutant id="mutant_1018" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="((line.section) != null) || ((line.name) != null)" />
    <mutant id="mutant_2349" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="true" />
    <mutant id="mutant_1019" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="(line.section) != null" />
    <mutant id="mutant_1016" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection != null) &amp;&amp; (bSubsection == null)" to="bSubsection == null" />
    <mutant id="mutant_2347" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="validate &amp;&amp; (idx().hasCRC32Support())" to="validate || (idx().hasCRC32Support())" />
    <mutant id="mutant_3679" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((hTree != null) &amp;&amp; (fTree.idEqual(hTree)))" to="(hTree != null)" />
    <mutant id="mutant_1017" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.sort(java.util.List)" from="((line.section) != null) &amp;&amp; ((line.name) != null)" to="(line.name) != null" />
    <mutant id="mutant_2348" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(!(inf.finished())) || ((inf.getBytesRead()) != dataLength)" to="(!(inf.finished())) &amp;&amp; ((inf.getBytesRead()) != dataLength)" />
    <mutant id="mutant_3678" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="((dcTree != null) &amp;&amp; (fTree.idEqual(dcTree)))" to="((dcTree != null) || (fTree.idEqual(dcTree)))" />
    <mutant id="mutant_1003" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="(names.containsKey(n)) &amp;&amp; (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" />
    <mutant id="mutant_2334" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="true" />
    <mutant id="mutant_3666" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="false" />
    <mutant id="mutant_4997" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="!(askFor.isEmpty())" />
    <mutant id="mutant_1004" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="names.containsKey(n)" />
    <mutant id="mutant_2335" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="false" />
    <mutant id="mutant_3665" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="true" />
    <mutant id="mutant_4996" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="(!(askFor.isEmpty())) || (!(askForIsComplete()))" />
    <mutant id="mutant_1001" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="(org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))" />
    <mutant id="mutant_2332" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="(0 &lt; offset) || (!(isCorrupt(offset)))" />
    <mutant id="mutant_3664" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="state != (RepositoryState.REBASING_MERGE)" />
    <mutant id="mutant_4995" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="false" />
    <mutant id="mutant_1002" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n))" />
    <mutant id="mutant_2333" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="(delta != null) &amp;&amp; (sz &lt; (curs.getStreamFileThreshold()))" />
    <mutant id="mutant_3663" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="(gitDir != null) || (gitDir.equals(directory))" />
    <mutant id="mutant_4994" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="true" />
    <mutant id="mutant_2330" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="true" />
    <mutant id="mutant_3662" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="false" />
    <mutant id="mutant_4993" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(!(askFor.isEmpty())) &amp;&amp; (!(askForIsComplete()))" to="!(askForIsComplete())" />
    <mutant id="mutant_1000" viable="true" in="org.eclipse.jgit.lib.ConfigLine.match(java.lang.String,java.lang.String,java.lang.String)" from="((org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(section, aSection)) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqSameCase(subsection, aSubsection))) &amp;&amp; (org.eclipse.jgit.lib.ConfigLine.eqIgnoreCase(name, aKey))" to="false" />
    <mutant id="mutant_2331" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.get(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt; offset) &amp;&amp; (!(isCorrupt(offset)))" to="false" />
    <mutant id="mutant_3661" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="true" />
    <mutant id="mutant_4992" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="false" />
    <mutant id="mutant_3660" viable="true" in="org.eclipse.jgit.api.CloneCommand.validateDirs(java.io.File,java.io.File,boolean)" from="(gitDir != null) &amp;&amp; (gitDir.equals(directory))" to="gitDir != null" />
    <mutant id="mutant_4991" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="true" />
    <mutant id="mutant_4990" viable="true" in="org.eclipse.jgit.transport.FetchProcess.createUpdate(org.eclipse.jgit.transport.RefSpec,org.eclipse.jgit.lib.ObjectId)" from="(ref != null) &amp;&amp; ((ref.getObjectId()) != null)" to="(ref != null) || ((ref.getObjectId()) != null)" />
    <mutant id="mutant_1009" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="aSubsection == null" />
    <mutant id="mutant_1007" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="(aSubsection == null) || (bSubsection != null)" />
    <mutant id="mutant_2338" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="((++(activeCopyRawData)) == 1) || ((activeWindows) == 0)" />
    <mutant id="mutant_1008" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.compare2(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(aSubsection == null) &amp;&amp; (bSubsection != null)" to="bSubsection != null" />
    <mutant id="mutant_2339" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.beginCopyAsIs(org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((++(activeCopyRawData)) == 1) &amp;&amp; ((activeWindows) == 0)" to="(++(activeCopyRawData)) == 1" />
    <mutant id="mutant_3669" viable="true" in="org.eclipse.jgit.api.CommitCommand.createTemporaryIndex(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.revwalk.RevWalk)" from="(dcTree != null) || (hTree != null)" to="hTree != null" />
    <mutant id="mutant_1005" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="true" />
    <mutant id="mutant_2336" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="delta != null" />
    <mutant id="mutant_3668" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="state != (RepositoryState.REBASING_INTERACTIVE)" />
    <mutant id="mutant_4999" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="true" />
    <mutant id="mutant_1006" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot$CaseFoldingSet.contains(java.lang.Object)" from="(names.containsKey(n)) || (names.containsKey(org.eclipse.jgit.util.StringUtils.toLowerCase(n)))" to="false" />
    <mutant id="mutant_2337" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(delta != null) || (sz &lt; (curs.getStreamFileThreshold()))" to="sz &lt; (curs.getStreamFileThreshold())" />
    <mutant id="mutant_3667" viable="true" in="org.eclipse.jgit.api.CommitCommand.isMergeDuringRebase(org.eclipse.jgit.lib.RepositoryState)" from="(state != (RepositoryState.REBASING_INTERACTIVE)) &amp;&amp; (state != (RepositoryState.REBASING_MERGE))" to="(state != (RepositoryState.REBASING_INTERACTIVE)) || (state != (RepositoryState.REBASING_MERGE))" />
    <mutant id="mutant_4998" viable="true" in="org.eclipse.jgit.transport.FetchProcess.executeImp(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.transport.FetchResult)" from="(tagopt == (TagOpt.AUTO_FOLLOW)) &amp;&amp; (!(additionalTags.isEmpty()))" to="(tagopt == (TagOpt.AUTO_FOLLOW)) || (!(additionalTags.isEmpty()))" />
    <mutant id="mutant_2172" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="false" />
    <mutant id="mutant_2173" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="(shallowFile) == null" />
    <mutant id="mutant_2170" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="old != (scanPacks(old))" />
    <mutant id="mutant_2171" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="true" />
    <mutant id="mutant_2169" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="(!trustFolderStat) || (old.snapshot.isModified(packDirectory))" />
    <mutant id="mutant_2167" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="false" />
    <mutant id="mutant_3499" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null)" />
    <mutant id="mutant_2168" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) &amp;&amp; (old != (scanPacks(old)))" to="((!trustFolderStat) || (old.snapshot.isModified(packDirectory))) || (old != (scanPacks(old)))" />
    <mutant id="mutant_3498" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="(f != null)" />
    <mutant id="mutant_2165" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="((!trustFolderStat) &amp;&amp; (old.snapshot.isModified(packDirectory)))" />
    <mutant id="mutant_3497" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="false" />
    <mutant id="mutant_2166" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="true" />
    <mutant id="mutant_3496" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="true" />
    <mutant id="mutant_2163" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="(!trustFolderStat)" />
    <mutant id="mutant_3495" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null))" to="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) || (f != null))" />
    <mutant id="mutant_2164" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.searchPacksAgain(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!trustFolderStat) || (old.snapshot.isModified(packDirectory)))" to="(old.snapshot.isModified(packDirectory))" />
    <mutant id="mutant_3494" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="(groups != null) || ((groups.length()) &gt; 0)" />
    <mutant id="mutant_2161" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="false" />
    <mutant id="mutant_3493" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="groups != null" />
    <mutant id="mutant_2162" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) &amp;&amp; (hasLooseInSelfOrAlternate(objectId))" />
    <mutant id="mutant_3492" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="false" />
    <mutant id="mutant_3491" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="true" />
    <mutant id="mutant_2160" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="true" />
    <mutant id="mutant_3490" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)" from="(groups != null) &amp;&amp; ((groups.length()) &gt; 0)" to="(groups.length()) &gt; 0" />
    <mutant id="mutant_2158" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="(unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))" />
    <mutant id="mutant_2159" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId))) || (hasLooseInSelfOrAlternate(objectId))" to="hasLooseInSelfOrAlternate(objectId)" />
    <mutant id="mutant_3489" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="false" />
    <mutant id="mutant_2156" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="false" />
    <mutant id="mutant_3488" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="true" />
    <mutant id="mutant_2157" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="(unpackedObjectCache.isUnpacked(objectId))" />
    <mutant id="mutant_3487" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="(path.length()) == 0" />
    <mutant id="mutant_2154" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="(hasPackedInSelfOrAlternate(objectId))" />
    <mutant id="mutant_3486" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="((path) == null) &amp;&amp; ((path.length()) == 0)" />
    <mutant id="mutant_2155" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="true" />
    <mutant id="mutant_3485" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((path) == null) || ((path.length()) == 0)" to="(path) == null" />
    <mutant id="mutant_2152" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="(!(ref.exists())) &amp;&amp; (deleteRef())" />
    <mutant id="mutant_3484" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="((uri) == null) &amp;&amp; ((uri.length()) == 0)" />
    <mutant id="mutant_2153" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.has(org.eclipse.jgit.lib.AnyObjectId)" from="((unpackedObjectCache.isUnpacked(objectId)) || (hasPackedInSelfOrAlternate(objectId)))" to="((unpackedObjectCache.isUnpacked(objectId)) &amp;&amp; (hasPackedInSelfOrAlternate(objectId)))" />
    <mutant id="mutant_3483" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="false" />
    <mutant id="mutant_107" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="false" />
    <mutant id="mutant_108" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="(o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0)" />
    <mutant id="mutant_109" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="(min == null) &amp;&amp; ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" />
    <mutant id="mutant_103" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="((o != null) || ((o.compareTo(min)) &lt; 0))" />
    <mutant id="mutant_104" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="(o != null)" />
    <mutant id="mutant_105" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="min == null" />
    <mutant id="mutant_106" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="true" />
    <mutant id="mutant_2150" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="true" />
    <mutant id="mutant_3482" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="true" />
    <mutant id="mutant_2151" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="false" />
    <mutant id="mutant_3481" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="(uri) == null" />
    <mutant id="mutant_3480" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((uri) == null) || ((uri.length()) == 0)" to="(uri.length()) == 0" />
    <mutant id="mutant_2147" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="(getFormat()) == (StoredObjectRepresentation.PACK_DELTA)" />
    <mutant id="mutant_3479" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="plusGroups.contains(&quot;all&quot;)" />
    <mutant id="mutant_2148" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="deleteRef()" />
    <mutant id="mutant_3478" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="plusGroups.isEmpty()" />
    <mutant id="mutant_2145" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="((baseId) == null) || ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" />
    <mutant id="mutant_3477" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="false" />
    <mutant id="mutant_2146" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="(baseId) == null" />
    <mutant id="mutant_3476" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="true" />
    <mutant id="mutant_2143" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="true" />
    <mutant id="mutant_3475" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.inGroups(org.eclipse.jgit.gitrepo.RepoProject)" from="(plusGroups.isEmpty()) || (plusGroups.contains(&quot;all&quot;))" to="(plusGroups.isEmpty()) &amp;&amp; (plusGroups.contains(&quot;all&quot;))" />
    <mutant id="mutant_2144" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalObjectRepresentation.getDeltaBase()" from="((baseId) == null) &amp;&amp; ((getFormat()) == (StoredObjectRepresentation.PACK_DELTA))" to="false" />
    <mutant id="mutant_3474" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="groups.equals(&quot;default&quot;)" />
    <mutant id="mutant_2141" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="false" />
    <mutant id="mutant_3473" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="(groups == null) || ((groups.length()) == 0)" />
    <mutant id="mutant_2142" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="position &lt; (sizeInBits)" />
    <mutant id="mutant_3472" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="false" />
    <mutant id="mutant_100" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="((o.compareTo(min)) &lt; 0)" />
    <mutant id="mutant_101" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="true" />
    <mutant id="mutant_102" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((o != null) &amp;&amp; ((o.compareTo(min)) &lt; 0))" to="false" />
    <mutant id="mutant_2149" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.commit()" from="(!(ref.exists())) || (deleteRef())" to="!(ref.exists())" />
    <mutant id="mutant_118" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="true" />
    <mutant id="mutant_119" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="false" />
    <mutant id="mutant_114" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="(t != null)" />
    <mutant id="mutant_115" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="(t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0)" />
    <mutant id="mutant_116" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="(min == null) &amp;&amp; ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" />
    <mutant id="mutant_117" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="(min == null) || ((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="min == null" />
    <mutant id="mutant_3471" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="true" />
    <mutant id="mutant_2140" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="true" />
    <mutant id="mutant_3470" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0)) || (groups.equals(&quot;default&quot;))" to="((groups == null) || ((groups.length()) == 0)) &amp;&amp; (groups.equals(&quot;default&quot;))" />
    <mutant id="mutant_2136" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="b &lt; (inflated.length)" />
    <mutant id="mutant_3468" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="true" />
    <mutant id="mutant_4799" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="(checkReceivedObjects) || (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" />
    <mutant id="mutant_2137" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0" />
    <mutant id="mutant_3467" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="((groups == null) &amp;&amp; ((groups.length()) == 0))" />
    <mutant id="mutant_4798" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_2134" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="true" />
    <mutant id="mutant_3466" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="((groups.length()) == 0)" />
    <mutant id="mutant_4797" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="(checkReceivedObjects) || (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" />
    <mutant id="mutant_2135" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="false" />
    <mutant id="mutant_3465" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="(groups == null)" />
    <mutant id="mutant_4796" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="false" />
    <mutant id="mutant_2132" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="block == positionBlock" />
    <mutant id="mutant_3464" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="(lastIndex &gt;= 0) || ((baseUrl.charAt(lastIndex)) == '/')" />
    <mutant id="mutant_4795" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="true" />
    <mutant id="mutant_2133" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.get(int)" from="(b &lt; (inflated.length)) &amp;&amp; (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" to="(b &lt; (inflated.length)) || (((inflated[b]) &amp; (InflatingBitSet.mask(position))) != 0)" />
    <mutant id="mutant_3463" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="(baseUrl.charAt(lastIndex)) == '/'" />
    <mutant id="mutant_4794" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false)" />
    <mutant id="mutant_2130" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="true" />
    <mutant id="mutant_3462" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="false" />
    <mutant id="mutant_4793" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowLeadingZeroFileMode&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_2131" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="false" />
    <mutant id="mutant_3461" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="true" />
    <mutant id="mutant_4792" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="!(capableDeleteRefs)" />
    <mutant id="mutant_110" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="((t != null) || ((t.compareTo(min)) &lt; 0))" />
    <mutant id="mutant_111" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="((t.compareTo(min)) &lt; 0)" />
    <mutant id="mutant_112" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="true" />
    <mutant id="mutant_113" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.min(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note)" from="((t != null) &amp;&amp; ((t.compareTo(min)) &lt; 0))" to="false" />
    <mutant id="mutant_2138" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="((nextPosition) &lt;= position) || (position &lt; (sizeInBits))" />
    <mutant id="mutant_2139" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.maybeContains(int)" from="((nextPosition) &lt;= position) &amp;&amp; (position &lt; (sizeInBits))" to="(nextPosition) &lt;= position" />
    <mutant id="mutant_3469" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="((groups == null) || ((groups.length()) == 0))" to="false" />
    <mutant id="mutant_129" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) || (isHex())" />
    <mutant id="mutant_125" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="isHex()" />
    <mutant id="mutant_126" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="(pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_127" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="true" />
    <mutant id="mutant_128" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathLen) == ((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))) &amp;&amp; (isHex())" to="false" />
    <mutant id="mutant_121" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="true" />
    <mutant id="mutant_122" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="false" />
    <mutant id="mutant_123" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="((getNameLength()) == 2) || (isTree())" />
    <mutant id="mutant_124" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="isTree()" />
    <mutant id="mutant_120" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((getNameLength()) == 2) &amp;&amp; (isTree())" to="(getNameLength()) == 2" />
    <mutant id="mutant_136" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="true" />
    <mutant id="mutant_137" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="false" />
    <mutant id="mutant_138" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="(((getNameLength()) == 2) &amp;&amp; (isHex())) || (isTree())" />
    <mutant id="mutant_139" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="isTree()" />
    <mutant id="mutant_2198" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="(forReuse.isEmpty())" />
    <mutant id="mutant_2199" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="true" />
    <mutant id="mutant_2196" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="!(indexName.endsWith(&quot;.idx&quot;))" />
    <mutant id="mutant_2197" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="((indexName.length()) != 49) &amp;&amp; (!(indexName.endsWith(&quot;.idx&quot;)))" />
    <mutant id="mutant_132" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="((getNameLength()) == 2)" />
    <mutant id="mutant_133" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="true" />
    <mutant id="mutant_134" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="false" />
    <mutant id="mutant_135" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex())) &amp;&amp; (isTree())" to="((getNameLength()) == 2) &amp;&amp; (isHex())" />
    <mutant id="mutant_130" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="(isHex())" />
    <mutant id="mutant_131" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="(((getNameLength()) == 2) &amp;&amp; (isHex()))" to="(((getNameLength()) == 2) || (isHex()))" />
    <mutant id="mutant_147" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="true" />
    <mutant id="mutant_148" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="false" />
    <mutant id="mutant_149" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="((start) &lt;= c) || (c &lt;= (end))" />
    <mutant id="mutant_2194" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="true" />
    <mutant id="mutant_2195" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="false" />
    <mutant id="mutant_2192" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="(!createDuplicate) || (has(id))" />
    <mutant id="mutant_2193" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) != 49) || (!(indexName.endsWith(&quot;.idx&quot;)))" to="(indexName.length()) != 49" />
    <mutant id="mutant_2190" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="true" />
    <mutant id="mutant_2191" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="false" />
    <mutant id="mutant_2189" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="has(id)" />
    <mutant id="mutant_2187" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="(!createDuplicate) || (has(id))" />
    <mutant id="mutant_2188" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="!createDuplicate" />
    <mutant id="mutant_2185" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="true" />
    <mutant id="mutant_2186" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="false" />
    <mutant id="mutant_143" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="false" />
    <mutant id="mutant_144" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="foundCharClass" />
    <mutant id="mutant_145" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="c &lt;= (end)" />
    <mutant id="mutant_146" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead$CharacterRange.matches(char)" from="((start) &lt;= c) &amp;&amp; (c &lt;= (end))" to="(start) &lt;= c" />
    <mutant id="mutant_140" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="foundCharClass || ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" />
    <mutant id="mutant_141" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="(charClassStartMatcher.start()) &lt; possibleGroupEnd" />
    <mutant id="mutant_142" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="foundCharClass &amp;&amp; ((charClassStartMatcher.start()) &lt; possibleGroupEnd)" to="true" />
    <mutant id="mutant_158" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="(region.getLengthA()) == 1" />
    <mutant id="mutant_159" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="(region.getLengthB()) == 1" />
    <mutant id="mutant_2183" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="!createDuplicate" />
    <mutant id="mutant_2184" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertUnpackedObject(java.io.File,org.eclipse.jgit.lib.ObjectId,boolean)" from="(!createDuplicate) &amp;&amp; (has(id))" to="has(id)" />
    <mutant id="mutant_2181" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="false" />
    <mutant id="mutant_2182" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="(shallowFileSnapshot) == null" />
    <mutant id="mutant_2180" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="true" />
    <mutant id="mutant_2178" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="shallowFileSnapshot.isModified(shallowFile)" />
    <mutant id="mutant_2179" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFileSnapshot) == null) || (shallowFileSnapshot.isModified(shallowFile))" to="((shallowFileSnapshot) == null) &amp;&amp; (shallowFileSnapshot.isModified(shallowFile))" />
    <mutant id="mutant_2176" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="false" />
    <mutant id="mutant_2177" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="!(shallowFile.isFile())" />
    <mutant id="mutant_2174" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="((shallowFile) == null) &amp;&amp; (!(shallowFile.isFile()))" />
    <mutant id="mutant_2175" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.getShallowCommits()" from="((shallowFile) == null) || (!(shallowFile.isFile()))" to="true" />
    <mutant id="mutant_154" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="(characterClass.charAt(1)) == '-'" />
    <mutant id="mutant_155" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="((region.getLengthA()) == 1) || ((region.getLengthB()) == 1)" />
    <mutant id="mutant_156" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="true" />
    <mutant id="mutant_157" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((region.getLengthA()) == 1) &amp;&amp; ((region.getLengthB()) == 1)" to="false" />
    <mutant id="mutant_150" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="((characterClass.length()) == 3) || ((characterClass.charAt(1)) == '-')" />
    <mutant id="mutant_151" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="(characterClass.length()) == 3" />
    <mutant id="mutant_152" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="true" />
    <mutant id="mutant_153" viable="true" in="org.eclipse.jgit.fnmatch.GroupHead(java.lang.String,java.lang.String)" from="((characterClass.length()) == 3) &amp;&amp; ((characterClass.charAt(1)) == '-')" to="false" />
    <mutant id="mutant_169" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString)" />
    <mutant id="mutant_160" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="(last.endB) &lt; (b.size())" />
    <mutant id="mutant_165" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) &amp;&amp; (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" />
    <mutant id="mutant_166" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="true" />
    <mutant id="mutant_167" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="false" />
    <mutant id="mutant_168" viable="true" in="org.eclipse.jgit.diff.DiffConfig.parseRenameDetectionType(java.lang.String)" from="(StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)) || (StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPIES, renameString))" to="StringUtils.equalsIgnoreCase(org.eclipse.jgit.lib.ConfigConstants.CONFIG_RENAMELIMIT_COPY, renameString)" />
    <mutant id="mutant_161" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="true" />
    <mutant id="mutant_162" viable="false" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="false" />
    <mutant id="mutant_163" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="((last.endB) &lt; (b.size())) || (cmp.equals(b, last.beginB, b, last.endB))" />
    <mutant id="mutant_164" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((last.endB) &lt; (b.size())) &amp;&amp; (cmp.equals(b, last.beginB, b, last.endB))" to="cmp.equals(b, last.beginB, b, last.endB)" />
    <mutant id="mutant_170" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="includeTrees || (walk.isRecursive())" />
    <mutant id="mutant_171" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="walk.isRecursive()" />
    <mutant id="mutant_176" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="false" />
    <mutant id="mutant_177" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="markTreeFilters != null" />
    <mutant id="mutant_178" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="(markTreeFilters != null) || ((markTreeFilters.length) &gt; 0)" />
    <mutant id="mutant_179" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="(markTreeFilters.length) &gt; 0" />
    <mutant id="mutant_172" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="true" />
    <mutant id="mutant_173" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="false" />
    <mutant id="mutant_174" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isRecursive())" to="includeTrees" />
    <mutant id="mutant_175" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="(markTreeFilters != null) &amp;&amp; ((markTreeFilters.length) &gt; 0)" to="true" />
    <mutant id="mutant_180" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="walk.isSubtree()" />
    <mutant id="mutant_181" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="includeTrees || (walk.isSubtree())" />
    <mutant id="mutant_182" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="true" />
    <mutant id="mutant_187" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="false" />
    <mutant id="mutant_188" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="(edit.getEndB()) &lt;= b" />
    <mutant id="mutant_189" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="(edit.getEndA()) &lt;= a" />
    <mutant id="mutant_183" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="false" />
    <mutant id="mutant_184" viable="true" in="org.eclipse.jgit.diff.DiffEntry.scan(org.eclipse.jgit.treewalk.TreeWalk,boolean,org.eclipse.jgit.treewalk.filter.TreeFilter[])" from="includeTrees &amp;&amp; (walk.isSubtree())" to="includeTrees" />
    <mutant id="mutant_185" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="((edit.getEndA()) &lt;= a) || ((edit.getEndB()) &lt;= b)" />
    <mutant id="mutant_186" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.end(org.eclipse.jgit.diff.Edit,int,int)" from="((edit.getEndA()) &lt;= a) &amp;&amp; ((edit.getEndB()) &lt;= b)" to="true" />
    <mutant id="mutant_190" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.ADD)" />
    <mutant id="mutant_191" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="true" />
    <mutant id="mutant_192" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="false" />
    <mutant id="mutant_193" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) || (ent.getNewPath().equals(oldPath))" />
    <mutant id="mutant_198" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="((line + 1) == (text.size())) || (text.isMissingNewlineAtEnd())" />
    <mutant id="mutant_199" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="(line + 1) == (text.size())" />
    <mutant id="mutant_194" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isAdd(java.util.List)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.ADD)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="ent.getNewPath().equals(oldPath)" />
    <mutant id="mutant_195" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="text.isMissingNewlineAtEnd()" />
    <mutant id="mutant_196" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="true" />
    <mutant id="mutant_197" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="((line + 1) == (text.size())) &amp;&amp; (text.isMissingNewlineAtEnd())" to="false" />
    <mutant id="mutant_7020" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)]))" to="&quot;second&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7022" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7021" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7024" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="(key.length()) == 0" />
    <mutant id="mutant_7023" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="key == null" />
    <mutant id="mutant_7015" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)]))" to="(&quot;minute&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;minutes&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_7014" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7017" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7016" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)]))" to="&quot;minute&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7019" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;second&quot;.equals(parts[(i + 1)])) || (&quot;seconds&quot;.equals(parts[(i + 1)]))" to="(&quot;second&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;seconds&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_7018" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;minute&quot;.equals(parts[(i + 1)])) || (&quot;minutes&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7011" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)]))" to="(&quot;hour&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;hours&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_7010" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7013" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7012" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;hour&quot;.equals(parts[(i + 1)])) || (&quot;hours&quot;.equals(parts[(i + 1)]))" to="&quot;hour&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7004" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)]))" to="&quot;week&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7003" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)]))" to="(&quot;week&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;weeks&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_7006" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7005" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;week&quot;.equals(parts[(i + 1)])) || (&quot;weeks&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7008" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)]))" to="&quot;day&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7007" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)]))" to="(&quot;day&quot;.equals(parts[(i + 1)])) &amp;&amp; (&quot;days&quot;.equals(parts[(i + 1)]))" />
    <mutant id="mutant_7009" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;day&quot;.equals(parts[(i + 1)])) || (&quot;days&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7000" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)]))" to="&quot;month&quot;.equals(parts[(i + 1)])" />
    <mutant id="mutant_7002" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)]))" to="false" />
    <mutant id="mutant_7001" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(&quot;month&quot;.equals(parts[(i + 1)])) || (&quot;months&quot;.equals(parts[(i + 1)]))" to="true" />
    <mutant id="mutant_7062" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="'0' &lt;= c" />
    <mutant id="mutant_7061" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="false" />
    <mutant id="mutant_7064" viable="false" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="true" />
    <mutant id="mutant_7063" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="start &lt; end" />
    <mutant id="mutant_7066" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="(start &lt; end) || (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" />
    <mutant id="mutant_7065" viable="false" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="false" />
    <mutant id="mutant_7068" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="start &lt;= ptr" />
    <mutant id="mutant_7067" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimLeadingWhitespace(byte[],int,int)" from="(start &lt; end) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start]))" to="org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[start])" />
    <mutant id="mutant_7060" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="true" />
    <mutant id="mutant_7059" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="('0' &lt;= c) || (c &lt;= '7')" />
    <mutant id="mutant_7058" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="('0' &lt;= c) &amp;&amp; (c &lt;= '7')" to="c &lt;= '7'" />
    <mutant id="mutant_7051" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="true" />
    <mutant id="mutant_7050" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) || ((in[(inEnd - 1)]) == '\&quot;')" />
    <mutant id="mutant_7053" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="true" />
    <mutant id="mutant_7052" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="false" />
    <mutant id="mutant_7055" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="inPtr &lt; inEnd" />
    <mutant id="mutant_7054" viable="false" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="false" />
    <mutant id="mutant_7057" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="n &lt; 3" />
    <mutant id="mutant_7056" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(n &lt; 3) &amp;&amp; (inPtr &lt; inEnd)" to="(n &lt; 3) || (inPtr &lt; inEnd)" />
    <mutant id="mutant_7048" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="(2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')" />
    <mutant id="mutant_7047" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="((in[inPtr]) == '\&quot;')" />
    <mutant id="mutant_7049" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;')) &amp;&amp; ((in[(inEnd - 1)]) == '\&quot;')" to="(in[(inEnd - 1)]) == '\&quot;'" />
    <mutant id="mutant_7040" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="true" />
    <mutant id="mutant_7042" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="inquote &amp;&amp; (ip == ie)" />
    <mutant id="mutant_7041" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="false" />
    <mutant id="mutant_7044" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="((2 &lt;= (inEnd - inPtr)) || ((in[inPtr]) == '\&quot;'))" />
    <mutant id="mutant_7043" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="(2 &lt;= (inEnd - inPtr))" />
    <mutant id="mutant_7046" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="false" />
    <mutant id="mutant_7045" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="((2 &lt;= (inEnd - inPtr)) &amp;&amp; ((in[inPtr]) == '\&quot;'))" to="true" />
    <mutant id="mutant_7037" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="(getExitCode()) != 0" />
    <mutant id="mutant_7036" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="false" />
    <mutant id="mutant_7039" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="inquote" />
    <mutant id="mutant_7038" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="inquote || (ip == ie)" to="ip == ie" />
    <mutant id="mutant_7031" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="(r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0" />
    <mutant id="mutant_7030" viable="false" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="false" />
    <mutant id="mutant_7033" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="((getStatus()) == (ProcessResult.Status.OK)) || ((getExitCode()) != 0)" />
    <mutant id="mutant_7032" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) || (len &lt; (dst.length))" />
    <mutant id="mutant_7035" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="true" />
    <mutant id="mutant_7034" viable="true" in="org.eclipse.jgit.util.ProcessResult.isExecutedWithError()" from="((getStatus()) == (ProcessResult.Status.OK)) &amp;&amp; ((getExitCode()) != 0)" to="(getStatus()) == (ProcessResult.Status.OK)" />
    <mutant id="mutant_7026" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="false" />
    <mutant id="mutant_7025" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="true" />
    <mutant id="mutant_7028" viable="false" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="len &lt; (dst.length)" />
    <mutant id="mutant_7027" viable="true" in="org.eclipse.jgit.util.HttpSupport.encode(java.lang.StringBuilder,java.lang.String)" from="(key == null) || ((key.length()) == 0)" to="(key == null) &amp;&amp; ((key.length()) == 0)" />
    <mutant id="mutant_7029" viable="false" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((r = fd.read(dst, off, ((dst.length) - off))) &gt;= 0) &amp;&amp; (len &lt; (dst.length))" to="true" />
    <mutant id="mutant_4821" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="((isCheckReceivedObjects()) &amp;&amp; (isCheckReferencedObjectsAreReachable()))" />
    <mutant id="mutant_4820" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="false" />
    <mutant id="mutant_4829" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="true" />
    <mutant id="mutant_4828" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="(line != null)" />
    <mutant id="mutant_4827" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="!(getClientShallowCommits().isEmpty())" />
    <mutant id="mutant_4826" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) &amp;&amp; (!(getClientShallowCommits().isEmpty()))" />
    <mutant id="mutant_4825" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="false" />
    <mutant id="mutant_4824" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="true" />
    <mutant id="mutant_4823" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())) || (!(getClientShallowCommits().isEmpty()))" to="(isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable())" />
    <mutant id="mutant_4822" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="(isCheckReferencedObjectsAreReachable())" />
    <mutant id="mutant_7095" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="false" />
    <mutant id="mutant_7094" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="true" />
    <mutant id="mutant_7097" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="((b[ptr]) != '\r')" />
    <mutant id="mutant_7096" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="(((b[ptr]) != '\n') || ((b[ptr]) != '\r'))" />
    <mutant id="mutant_7099" viable="false" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="false" />
    <mutant id="mutant_7098" viable="false" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr &lt; sz) &amp;&amp; (((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="true" />
    <mutant id="mutant_4819" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="true" />
    <mutant id="mutant_7091" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="(ptr &lt; sz) || ((b[ptr]) == 'a')" />
    <mutant id="mutant_7090" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="(b[ptr]) == 'a'" />
    <mutant id="mutant_7093" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(((b[ptr]) != '\n') &amp;&amp; ((b[ptr]) != '\r'))" to="((b[ptr]) != '\n')" />
    <mutant id="mutant_7092" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="ptr &lt; sz" />
    <mutant id="mutant_4810" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="(checkReceivedObjects) || (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" />
    <mutant id="mutant_4818" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.needCheckConnectivity()" from="((isCheckReceivedObjects()) || (isCheckReferencedObjectsAreReachable()))" to="(isCheckReceivedObjects())" />
    <mutant id="mutant_4817" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="(cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)" />
    <mutant id="mutant_4816" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="(cmd.getResult()) != (ReceiveCommand.Result.OK)" />
    <mutant id="mutant_4815" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="false" />
    <mutant id="mutant_4814" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="true" />
    <mutant id="mutant_4813" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.anyRejects()" from="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) &amp;&amp; ((cmd.getResult()) != (ReceiveCommand.Result.OK))" to="((cmd.getResult()) != (ReceiveCommand.Result.NOT_ATTEMPTED)) || ((cmd.getResult()) != (ReceiveCommand.Result.OK))" />
    <mutant id="mutant_4812" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="false" />
    <mutant id="mutant_4811" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="true" />
    <mutant id="mutant_7084" viable="false" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="false" />
    <mutant id="mutant_7083" viable="false" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="true" />
    <mutant id="mutant_7086" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(ptr &lt; sz) || ((b[ptr]) == 'p')" />
    <mutant id="mutant_7085" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(b[ptr]) == 'p'" />
    <mutant id="mutant_7088" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="true" />
    <mutant id="mutant_7087" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="ptr &lt; sz" />
    <mutant id="mutant_4809" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false)" />
    <mutant id="mutant_4808" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForMacOS&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_7089" viable="true" in="org.eclipse.jgit.util.RawParseUtils.committer(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'a')" to="false" />
    <mutant id="mutant_7080" viable="true" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(b[ptr]) == 'p'" />
    <mutant id="mutant_7082" viable="true" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="ptr &lt; sz" />
    <mutant id="mutant_7081" viable="true" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(ptr &lt; sz) || ((b[ptr]) == 'p')" />
    <mutant id="mutant_4807" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="false" />
    <mutant id="mutant_4806" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="true" />
    <mutant id="mutant_4805" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false)" />
    <mutant id="mutant_4804" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="(checkReceivedObjects) || (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" />
    <mutant id="mutant_4803" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;safeForWindows&quot;, false))" to="checkReceivedObjects" />
    <mutant id="mutant_4802" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false)" />
    <mutant id="mutant_4801" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="false" />
    <mutant id="mutant_4800" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$ReceiveConfig(org.eclipse.jgit.lib.Config)" from="(checkReceivedObjects) &amp;&amp; (config.getBoolean(&quot;fsck&quot;, &quot;allowInvalidPersonIdent&quot;, false))" to="true" />
    <mutant id="mutant_7073" viable="false" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="true" />
    <mutant id="mutant_7072" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr])" />
    <mutant id="mutant_7075" viable="true" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(b[ptr]) == 'p'" />
    <mutant id="mutant_7074" viable="false" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="false" />
    <mutant id="mutant_7077" viable="true" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="ptr &lt; sz" />
    <mutant id="mutant_7076" viable="true" in="org.eclipse.jgit.util.RawParseUtils.author(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="(ptr &lt; sz) || ((b[ptr]) == 'p')" />
    <mutant id="mutant_7079" viable="false" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="false" />
    <mutant id="mutant_7078" viable="false" in="org.eclipse.jgit.util.RawParseUtils.commitMessage(byte[],int)" from="(ptr &lt; sz) &amp;&amp; ((b[ptr]) == 'p')" to="true" />
    <mutant id="mutant_7071" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="(start &lt;= ptr) || (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" />
    <mutant id="mutant_7070" viable="false" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="false" />
    <mutant id="mutant_7069" viable="false" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="(start &lt;= ptr) &amp;&amp; (org.eclipse.jgit.util.RawCharUtil.isWhitespace(raw[ptr]))" to="true" />
    <mutant id="mutant_2202" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="(!foundNew)" />
    <mutant id="mutant_3534" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="(oldValue == null) || (newValue == null)" />
    <mutant id="mutant_4865" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="(!(sideBand)) || ((msgOut) != null)" />
    <mutant id="mutant_2203" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="((!foundNew) &amp;&amp; (forReuse.isEmpty())) || (snapshot.equals(old.snapshot))" />
    <mutant id="mutant_3533" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="false" />
    <mutant id="mutant_4864" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="!(sideBand)" />
    <mutant id="mutant_2200" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="false" />
    <mutant id="mutant_3532" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="true" />
    <mutant id="mutant_4863" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="(msgOut) != null" />
    <mutant id="mutant_2201" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty()))" to="((!foundNew) || (forReuse.isEmpty()))" />
    <mutant id="mutant_3531" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="oldValue == null" />
    <mutant id="mutant_4862" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="false" />
    <mutant id="mutant_3530" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.replace(java.util.concurrent.ConcurrentMap,K,V,V)" from="(oldValue == null) &amp;&amp; (newValue == null)" to="newValue == null" />
    <mutant id="mutant_4861" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="true" />
    <mutant id="mutant_4860" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="(o instanceof org.eclipse.jgit.revwalk.RevBlob) || (!(db.hasObject(o)))" />
    <mutant id="mutant_2208" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="(((p.length()) != 50) &amp;&amp; (!(p.startsWith(&quot;pack-&quot;))))" />
    <mutant id="mutant_2209" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="true" />
    <mutant id="mutant_3539" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="((startCommit) == null) || ((startPoint) == null)" />
    <mutant id="mutant_2206" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="snapshot.equals(old.snapshot)" />
    <mutant id="mutant_3538" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="(startPoint) == null" />
    <mutant id="mutant_4869" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="true" />
    <mutant id="mutant_2207" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="(!foundNew) &amp;&amp; (forReuse.isEmpty())" />
    <mutant id="mutant_3537" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="(startCommit) == null" />
    <mutant id="mutant_4868" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="(allowQuiet) || (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" />
    <mutant id="mutant_2204" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="true" />
    <mutant id="mutant_3536" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="false" />
    <mutant id="mutant_4867" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="false" />
    <mutant id="mutant_2205" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((!foundNew) &amp;&amp; (forReuse.isEmpty())) &amp;&amp; (snapshot.equals(old.snapshot))" to="false" />
    <mutant id="mutant_3535" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.isCheckoutIndex()" from="((startCommit) == null) &amp;&amp; ((startPoint) == null)" to="true" />
    <mutant id="mutant_4866" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.close()" from="(!(sideBand)) &amp;&amp; ((msgOut) != null)" to="true" />
    <mutant id="mutant_3523" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="(!(update))" />
    <mutant id="mutant_4854" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="true" />
    <mutant id="mutant_3522" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="((FileMode.GITLINK) == (c.getEntryFileMode()))" />
    <mutant id="mutant_4853" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) || (!(providedObjects.contains(c)))" />
    <mutant id="mutant_3521" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="false" />
    <mutant id="mutant_4852" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_3520" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="true" />
    <mutant id="mutant_4851" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(providedObjects != null)" />
    <mutant id="mutant_4850" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="((providedObjects != null) || (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" />
    <mutant id="mutant_3529" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="(c != null) || ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" />
    <mutant id="mutant_3528" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="false" />
    <mutant id="mutant_4859" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="!(db.hasObject(o))" />
    <mutant id="mutant_3527" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="true" />
    <mutant id="mutant_4858" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(o instanceof org.eclipse.jgit.revwalk.RevBlob) &amp;&amp; (!(db.hasObject(o)))" to="o instanceof org.eclipse.jgit.revwalk.RevBlob" />
    <mutant id="mutant_3526" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="(!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode()))" />
    <mutant id="mutant_4857" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="!(providedObjects.contains(c))" />
    <mutant id="mutant_3525" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(c != null) &amp;&amp; ((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="c != null" />
    <mutant id="mutant_4856" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="(providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_3524" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((!(update)) || ((FileMode.GITLINK) == (c.getEntryFileMode())))" to="((!(update)) &amp;&amp; ((FileMode.GITLINK) == (c.getEntryFileMode())))" />
    <mutant id="mutant_4855" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(providedObjects.contains(c)))" to="false" />
    <mutant id="mutant_3512" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="true" />
    <mutant id="mutant_4843" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="!(baseObjects.isEmpty())" />
    <mutant id="mutant_3511" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="((c.getDirCacheEntry()) == null)" />
    <mutant id="mutant_4842" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="sideBand" />
    <mutant id="mutant_3510" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="((c == null) &amp;&amp; ((c.getDirCacheEntry()) == null))" />
    <mutant id="mutant_4841" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="(sideBand) || (!(quiet))" />
    <mutant id="mutant_4840" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="!(quiet)" />
    <mutant id="mutant_3519" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="(c == null) || ((c.getDirCacheEntry()) == null)" />
    <mutant id="mutant_3518" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="false" />
    <mutant id="mutant_4849" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="false" />
    <mutant id="mutant_3517" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="true" />
    <mutant id="mutant_4848" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="((providedObjects != null) &amp;&amp; (!(c.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="true" />
    <mutant id="mutant_3516" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="!(c.getDirCacheEntry().isAssumeValid())" />
    <mutant id="mutant_4847" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="(baseObjects != null) || (!(baseObjects.isEmpty()))" />
    <mutant id="mutant_3515" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null)) || (!(c.getDirCacheEntry().isAssumeValid()))" to="((c == null) || ((c.getDirCacheEntry()) == null)) &amp;&amp; (!(c.getDirCacheEntry().isAssumeValid()))" />
    <mutant id="mutant_4846" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="baseObjects != null" />
    <mutant id="mutant_3514" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="(c == null)" />
    <mutant id="mutant_4845" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="false" />
    <mutant id="mutant_3513" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((c == null) || ((c.getDirCacheEntry()) == null))" to="false" />
    <mutant id="mutant_4844" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(baseObjects != null) &amp;&amp; (!(baseObjects.isEmpty()))" to="true" />
    <mutant id="mutant_3501" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="true" />
    <mutant id="mutant_4832" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="(!(line.isEmpty()))" />
    <mutant id="mutant_3500" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)" />
    <mutant id="mutant_4831" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="((line != null) || (!(line.isEmpty())))" />
    <mutant id="mutant_4830" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty())))" to="false" />
    <mutant id="mutant_3509" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="((update) || ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" />
    <mutant id="mutant_3508" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null)" />
    <mutant id="mutant_4839" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="false" />
    <mutant id="mutant_3507" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="(update)" />
    <mutant id="mutant_4838" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.checkConnectivity()" from="(sideBand) &amp;&amp; (!(quiet))" to="true" />
    <mutant id="mutant_3506" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="false" />
    <mutant id="mutant_4837" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="((line != null) &amp;&amp; (!(line.isEmpty()))) || ((line.charAt(((line.length()) - 1))) == '\n')" />
    <mutant id="mutant_3505" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="((update) &amp;&amp; ((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null))" to="true" />
    <mutant id="mutant_4836" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="false" />
    <mutant id="mutant_3504" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) || (f.isEntryIgnored())" />
    <mutant id="mutant_4835" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="true" />
    <mutant id="mutant_3503" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="f.isEntryIgnored()" />
    <mutant id="mutant_4834" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="(line != null) &amp;&amp; (!(line.isEmpty()))" />
    <mutant id="mutant_3502" viable="true" in="org.eclipse.jgit.api.AddCommand.call()" from="(((tw.getTree(0, org.eclipse.jgit.dircache.DirCacheIterator.class)) == null) &amp;&amp; (f != null)) &amp;&amp; (f.isEntryIgnored())" to="false" />
    <mutant id="mutant_4833" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line != null) &amp;&amp; (!(line.isEmpty()))) &amp;&amp; ((line.charAt(((line.length()) - 1))) == '\n')" to="(line.charAt(((line.length()) - 1))) == '\n'" />
    <mutant id="mutant_3581" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="true" />
    <mutant id="mutant_2250" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="true" />
    <mutant id="mutant_3580" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(fs.isFile(f)) || (fs.isSymLink(f))" to="(fs.isFile(f)) &amp;&amp; (fs.isSymLink(f))" />
    <mutant id="mutant_2246" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="false" />
    <mutant id="mutant_3578" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) || (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" />
    <mutant id="mutant_2247" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="idx.exists()" />
    <mutant id="mutant_3577" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="false" />
    <mutant id="mutant_2244" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="(idx.exists()) || (idx.isFile())" />
    <mutant id="mutant_3576" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="true" />
    <mutant id="mutant_2245" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="true" />
    <mutant id="mutant_3575" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)" />
    <mutant id="mutant_2242" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="false" />
    <mutant id="mutant_3574" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="(!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" />
    <mutant id="mutant_2243" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(idx.exists()) &amp;&amp; (idx.isFile())" to="idx.isFile()" />
    <mutant id="mutant_3573" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="((name) == null)" />
    <mutant id="mutant_2240" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="(matches.size()) == oldSize" />
    <mutant id="mutant_3572" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="(((name) == null) &amp;&amp; (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" />
    <mutant id="mutant_2241" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="true" />
    <mutant id="mutant_3571" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="false" />
    <mutant id="mutant_2248" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="((out) != null) || (out.getChannel().isOpen())" />
    <mutant id="mutant_2249" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((out) != null) &amp;&amp; (out.getChannel().isOpen())" to="out.getChannel().isOpen()" />
    <mutant id="mutant_3579" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan)) &amp;&amp; (((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name)))))" />
    <mutant id="mutant_3570" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((name) == null) || (!(Repository.isValidRefName(((org.eclipse.jgit.lib.Constants.R_HEADS) + (name))))))" to="true" />
    <mutant id="mutant_2235" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG)" />
    <mutant id="mutant_3567" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="(orphan)" />
    <mutant id="mutant_4898" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="!check" />
    <mutant id="mutant_2236" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="true" />
    <mutant id="mutant_3566" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" />
    <mutant id="mutant_4897" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="(objectChecker) == null" />
    <mutant id="mutant_2233" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="((e.getMessage()) != null) || (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" />
    <mutant id="mutant_3565" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) &amp;&amp; (orphan))" />
    <mutant id="mutant_4896" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="false" />
    <mutant id="mutant_2234" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="(e.getMessage()) != null" />
    <mutant id="mutant_3564" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="(!(checkoutAllPaths))" />
    <mutant id="mutant_4895" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="true" />
    <mutant id="mutant_2231" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="true" />
    <mutant id="mutant_3563" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="((!(checkoutAllPaths)) || (paths.isEmpty()))" />
    <mutant id="mutant_4894" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="check || ((objectChecker) == null)" />
    <mutant id="mutant_2232" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="false" />
    <mutant id="mutant_3562" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="(paths.isEmpty())" />
    <mutant id="mutant_4893" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="check &amp;&amp; ((objectChecker) == null)" to="check" />
    <mutant id="mutant_3561" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="false" />
    <mutant id="mutant_4892" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="(head != null) || (head.isSymbolic())" />
    <mutant id="mutant_2230" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) &amp;&amp; (e instanceof org.eclipse.jgit.errors.PackInvalidException)" />
    <mutant id="mutant_3560" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty()))" to="true" />
    <mutant id="mutant_4891" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head != null" />
    <mutant id="mutant_2239" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="searchPacksAgain(pList)" />
    <mutant id="mutant_2237" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="((e.getMessage()) != null) &amp;&amp; (e.getMessage().toLowerCase().contains(org.eclipse.jgit.internal.storage.file.ObjectDirectory.STALE_FILE_HANDLE_MSG))" to="false" />
    <mutant id="mutant_3569" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="false" />
    <mutant id="mutant_2238" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((matches.size()) == oldSize) &amp;&amp; (searchPacksAgain(pList))" to="((matches.size()) == oldSize) || (searchPacksAgain(pList))" />
    <mutant id="mutant_3568" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="(((!(checkoutAllPaths)) &amp;&amp; (paths.isEmpty())) || (orphan))" to="true" />
    <mutant id="mutant_4899" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setCheckReceivedObjects(boolean)" from="(!check) &amp;&amp; ((objectChecker) != null)" to="true" />
    <mutant id="mutant_4890" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="false" />
    <mutant id="mutant_2224" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="false" />
    <mutant id="mutant_3556" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="!(isCheckoutIndex())" />
    <mutant id="mutant_4887" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="line.startsWith(&quot;shallow &quot;)" />
    <mutant id="mutant_2225" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="(alt != null) || (alternates.compareAndSet(alt, null))" />
    <mutant id="mutant_3555" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="(checkoutStage) != null" />
    <mutant id="mutant_4886" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="(line.length()) &gt;= 48" />
    <mutant id="mutant_2222" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="packList.compareAndSet(packs, ObjectDirectory.NO_PACKS)" />
    <mutant id="mutant_3554" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="false" />
    <mutant id="mutant_4885" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="false" />
    <mutant id="mutant_2223" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="true" />
    <mutant id="mutant_3553" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="true" />
    <mutant id="mutant_4884" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="true" />
    <mutant id="mutant_2220" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="false" />
    <mutant id="mutant_3552" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="(ref != null) || (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" />
    <mutant id="mutant_4883" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.recvCommands()" from="((line.length()) &gt;= 48) &amp;&amp; (line.startsWith(&quot;shallow &quot;))" to="((line.length()) &gt;= 48) || (line.startsWith(&quot;shallow &quot;))" />
    <mutant id="mutant_2221" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="packs != (ObjectDirectory.NO_PACKS)" />
    <mutant id="mutant_3551" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="ref != null" />
    <mutant id="mutant_4882" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="!(isExpectDataAfterPackFooter())" />
    <mutant id="mutant_3550" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(ref != null) &amp;&amp; (!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS)))" to="!(ref.getName().startsWith(org.eclipse.jgit.lib.Constants.R_HEADS))" />
    <mutant id="mutant_4881" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="false" />
    <mutant id="mutant_4880" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="true" />
    <mutant id="mutant_2228" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="e instanceof org.eclipse.jgit.errors.PackInvalidException" />
    <mutant id="mutant_2229" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.handlePackError(java.io.IOException,org.eclipse.jgit.internal.storage.file.PackFile)" from="(e instanceof org.eclipse.jgit.errors.CorruptObjectException) || (e instanceof org.eclipse.jgit.errors.PackInvalidException)" to="e instanceof org.eclipse.jgit.errors.CorruptObjectException" />
    <mutant id="mutant_3559" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="false" />
    <mutant id="mutant_2226" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="alternates.compareAndSet(alt, null)" />
    <mutant id="mutant_3558" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="true" />
    <mutant id="mutant_4889" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="true" />
    <mutant id="mutant_2227" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(alt != null) &amp;&amp; (alternates.compareAndSet(alt, null))" to="alt != null" />
    <mutant id="mutant_3557" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.checkOptions()" from="((checkoutStage) != null) &amp;&amp; (!(isCheckoutIndex()))" to="((checkoutStage) != null) || (!(isCheckoutIndex()))" />
    <mutant id="mutant_4888" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.setAdvertisedRefs(java.util.Map,java.util.Set)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head.isSymbolic()" />
    <mutant id="mutant_2213" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="!(p.endsWith(&quot;.pack&quot;))" />
    <mutant id="mutant_3545" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="true" />
    <mutant id="mutant_4876" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="(sideBand) || (!(quiet))" />
    <mutant id="mutant_2214" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="true" />
    <mutant id="mutant_3544" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="(checkoutAllPaths) &amp;&amp; (!(paths.isEmpty()))" />
    <mutant id="mutant_4875" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="!(quiet)" />
    <mutant id="mutant_2211" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="(!(p.startsWith(&quot;pack-&quot;)))" />
    <mutant id="mutant_3543" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="false" />
    <mutant id="mutant_4874" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="false" />
    <mutant id="mutant_2212" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="((p.length()) != 50)" />
    <mutant id="mutant_3542" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="true" />
    <mutant id="mutant_4873" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="true" />
    <mutant id="mutant_3541" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="checkoutAllPaths" />
    <mutant id="mutant_4872" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET)" />
    <mutant id="mutant_2210" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;))))" to="false" />
    <mutant id="mutant_3540" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(checkoutAllPaths) || (!(paths.isEmpty()))" to="!(paths.isEmpty())" />
    <mutant id="mutant_4871" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="allowQuiet" />
    <mutant id="mutant_4870" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.enableCapabilities()" from="(allowQuiet) &amp;&amp; (isCapabilityEnabled(org.eclipse.jgit.transport.GitProtocolConstants.CAPABILITY_QUIET))" to="false" />
    <mutant id="mutant_2219" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="true" />
    <mutant id="mutant_2217" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))" />
    <mutant id="mutant_3549" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="(startCommit) == null" />
    <mutant id="mutant_2218" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.close()" from="(packs != (ObjectDirectory.NO_PACKS)) &amp;&amp; (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" to="(packs != (ObjectDirectory.NO_PACKS)) || (packList.compareAndSet(packs, ObjectDirectory.NO_PACKS))" />
    <mutant id="mutant_3548" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="(startPoint) == null" />
    <mutant id="mutant_4879" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="!(biDirectionalPipe)" />
    <mutant id="mutant_2215" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="false" />
    <mutant id="mutant_3547" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="((startPoint) == null) || ((startCommit) == null)" />
    <mutant id="mutant_4878" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((!(biDirectionalPipe)) &amp;&amp; (!(isExpectDataAfterPackFooter())))" to="((!(biDirectionalPipe)) || (!(isExpectDataAfterPackFooter())))" />
    <mutant id="mutant_2216" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) || (!(p.endsWith(&quot;.pack&quot;)))" to="(((p.length()) != 50) || (!(p.startsWith(&quot;pack-&quot;)))) &amp;&amp; (!(p.endsWith(&quot;.pack&quot;)))" />
    <mutant id="mutant_3546" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((startPoint) == null) &amp;&amp; ((startCommit) == null)" to="false" />
    <mutant id="mutant_4877" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(sideBand) &amp;&amp; (!(quiet))" to="sideBand" />
    <mutant id="mutant_2051" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="r1 == null" />
    <mutant id="mutant_3383" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="false" />
    <mutant id="mutant_2052" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="(r1 == null) &amp;&amp; (r2 == null)" />
    <mutant id="mutant_3382" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="true" />
    <mutant id="mutant_3381" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) || ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" />
    <mutant id="mutant_2050" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="false" />
    <mutant id="mutant_3380" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="((matcher == (PathMatcher.WILD)) || (i &gt; 0))" />
    <mutant id="mutant_2048" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="r2 == null" />
    <mutant id="mutant_2049" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.equals(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(r1 == null) || (r2 == null)" to="true" />
    <mutant id="mutant_3379" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="(matcher == (PathMatcher.WILD))" />
    <mutant id="mutant_2046" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="on" />
    <mutant id="mutant_3378" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="false" />
    <mutant id="mutant_2047" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="!off" />
    <mutant id="mutant_3377" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="true" />
    <mutant id="mutant_2044" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="true" />
    <mutant id="mutant_3376" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0))" to="(i &gt; 0)" />
    <mutant id="mutant_2045" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="false" />
    <mutant id="mutant_3375" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="!assumeDirectory" />
    <mutant id="mutant_2042" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) || (getDirectory().getName().startsWith(&quot;.&quot;))" />
    <mutant id="mutant_3374" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="(dirOnly) || (!assumeDirectory)" />
    <mutant id="mutant_2043" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="on &amp;&amp; (!off)" to="on || (!off)" />
    <mutant id="mutant_3373" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="false" />
    <mutant id="mutant_2040" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="true" />
    <mutant id="mutant_3372" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="true" />
    <mutant id="mutant_2041" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="false" />
    <mutant id="mutant_3371" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="dirOnly" />
    <mutant id="mutant_3370" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="!(beginning)" />
    <mutant id="mutant_2037" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="(!(isBare()))" />
    <mutant id="mutant_3369" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="(!(beginning)) || hasSlash" />
    <mutant id="mutant_2038" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="(hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))" />
    <mutant id="mutant_3368" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="false" />
    <mutant id="mutant_4699" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="(aPos &lt; aLen) || (bPos &lt; bLen)" />
    <mutant id="mutant_2035" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="false" />
    <mutant id="mutant_3367" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="true" />
    <mutant id="mutant_4698" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="(eOff &lt; eLen) || (aOff &lt; aLen)" />
    <mutant id="mutant_2036" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="(hideDotFiles != (CoreConfig.HideDotFiles.FALSE))" />
    <mutant id="mutant_3366" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; hasSlash" to="hasSlash" />
    <mutant id="mutant_4697" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="eOff &lt; eLen" />
    <mutant id="mutant_2033" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) || (!(isBare())))" />
    <mutant id="mutant_3365" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="(beginning) || (!hasSlash)" />
    <mutant id="mutant_4696" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="aOff &lt; aLen" />
    <mutant id="mutant_2034" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare())))" to="true" />
    <mutant id="mutant_3364" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="false" />
    <mutant id="mutant_4695" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="false" />
    <mutant id="mutant_2031" viable="false" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="false" />
    <mutant id="mutant_3363" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="true" />
    <mutant id="mutant_4694" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree.contains(byte[],int,int)" from="(eOff &lt; eLen) &amp;&amp; (aOff &lt; aLen)" to="true" />
    <mutant id="mutant_2032" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="(openByteCount) &gt; (maxByteCount)" />
    <mutant id="mutant_3362" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="!hasSlash" />
    <mutant id="mutant_4693" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="(DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0" />
    <mutant id="mutant_2039" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((hideDotFiles != (CoreConfig.HideDotFiles.FALSE)) &amp;&amp; (!(isBare()))) &amp;&amp; (getDirectory().getName().startsWith(&quot;.&quot;))" to="getDirectory().getName().startsWith(&quot;.&quot;)" />
    <mutant id="mutant_3361" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(beginning) &amp;&amp; (!hasSlash)" to="beginning" />
    <mutant id="mutant_4692" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="alreadySorted &amp;&amp; (i &gt; 0)" />
    <mutant id="mutant_2030" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="true" />
    <mutant id="mutant_3360" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="match || ((matcher + 1) == (matchers.size()))" />
    <mutant id="mutant_4691" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="false" />
    <mutant id="mutant_4690" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="true" />
    <mutant id="mutant_2026" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="false" />
    <mutant id="mutant_3358" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="true" />
    <mutant id="mutant_4689" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0)) &amp;&amp; ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" to="(alreadySorted &amp;&amp; (i &gt; 0)) || ((DirCacheTree.TREE_CMP.compare(children[(i - 1)], children[i])) &gt; 0)" />
    <mutant id="mutant_2027" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="((e.provider) == pack) || ((e.position) == position)" />
    <mutant id="mutant_3357" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="(matcher + 1) == (matchers.size())" />
    <mutant id="mutant_4688" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="alreadySorted" />
    <mutant id="mutant_2024" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="(e.position) == position" />
    <mutant id="mutant_3356" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="match" />
    <mutant id="mutant_4687" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="false" />
    <mutant id="mutant_2025" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="true" />
    <mutant id="mutant_3355" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="!assumeDirectory" />
    <mutant id="mutant_4686" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="true" />
    <mutant id="mutant_2022" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) || (neededPos &lt; (end))" />
    <mutant id="mutant_3354" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="(dirOnly) || (!assumeDirectory)" />
    <mutant id="mutant_4685" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="(i &gt; 0)" />
    <mutant id="mutant_2023" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.get(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((e.provider) == pack) &amp;&amp; ((e.position) == position)" to="(e.provider) == pack" />
    <mutant id="mutant_3353" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="false" />
    <mutant id="mutant_4684" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(alreadySorted &amp;&amp; (i &gt; 0))" to="(alreadySorted || (i &gt; 0))" />
    <mutant id="mutant_2020" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="true" />
    <mutant id="mutant_3352" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="true" />
    <mutant id="mutant_4683" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; aLen" />
    <mutant id="mutant_2021" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="false" />
    <mutant id="mutant_3351" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(dirOnly) &amp;&amp; (!assumeDirectory)" to="dirOnly" />
    <mutant id="mutant_4682" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="cPos &lt; bLen" />
    <mutant id="mutant_2028" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="(lruTail) != null" />
    <mutant id="mutant_2029" viable="true" in="org.eclipse.jgit.internal.storage.file.DeltaBaseCache.releaseMemory()" from="((openByteCount) &gt; (maxByteCount)) &amp;&amp; ((lruTail) != null)" to="((openByteCount) &gt; (maxByteCount)) || ((lruTail) != null)" />
    <mutant id="mutant_3359" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="match &amp;&amp; ((matcher + 1) == (matchers.size()))" to="false" />
    <mutant id="mutant_3350" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="(matchers.get(matcher)) == (PathMatcher.WILD)" />
    <mutant id="mutant_4681" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="(cPos &lt; aLen) || (cPos &lt; bLen)" />
    <mutant id="mutant_4680" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="false" />
    <mutant id="mutant_2015" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="true" />
    <mutant id="mutant_3347" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="true" />
    <mutant id="mutant_4678" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="(Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0" />
    <mutant id="mutant_2016" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="false" />
    <mutant id="mutant_3346" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="(matcher &lt; ((matchers.size()) - 1)) || ((matchers.get(matcher)) == (PathMatcher.WILD))" />
    <mutant id="mutant_4677" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="false" />
    <mutant id="mutant_2013" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="((start) &lt;= neededPos)" />
    <mutant id="mutant_3345" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="matcher == ((matchers.size()) - 2)" />
    <mutant id="mutant_4676" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="true" />
    <mutant id="mutant_2014" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="((pack) == neededFile)" />
    <mutant id="mutant_3344" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="false" />
    <mutant id="mutant_4675" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="((getLength()) == 0) || ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" />
    <mutant id="mutant_2011" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="false" />
    <mutant id="mutant_3343" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="true" />
    <mutant id="mutant_4674" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="((getLength()) == 0) &amp;&amp; ((Constants.EMPTY_BLOB_ID.compareTo(info, base)) != 0)" to="(getLength()) == 0" />
    <mutant id="mutant_2012" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="(ii.hasNext()) || ((ii.next()) &lt; (indexObjectCount))" />
    <mutant id="mutant_3342" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="(matchers.get((matcher + 1))) == (PathMatcher.WILD)" />
    <mutant id="mutant_4673" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="3 &lt; stage" />
    <mutant id="mutant_3341" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher == ((matchers.size()) - 2)) &amp;&amp; ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" to="(matcher == ((matchers.size()) - 2)) || ((matchers.get((matcher + 1))) == (PathMatcher.WILD))" />
    <mutant id="mutant_4672" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="stage &lt; 0" />
    <mutant id="mutant_2010" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="true" />
    <mutant id="mutant_3340" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="(org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0" />
    <mutant id="mutant_4671" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="false" />
    <mutant id="mutant_2019" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="neededPos &lt; (end)" />
    <mutant id="mutant_2017" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos))" to="(((pack) == neededFile) || ((start) &lt;= neededPos))" />
    <mutant id="mutant_3349" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="matcher &lt; ((matchers.size()) - 1)" />
    <mutant id="mutant_2018" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.contains(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)) &amp;&amp; (neededPos &lt; (end))" to="((pack) == neededFile) &amp;&amp; ((start) &lt;= neededPos)" />
    <mutant id="mutant_3348" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher &lt; ((matchers.size()) - 1)) &amp;&amp; ((matchers.get(matcher)) == (PathMatcher.WILD))" to="false" />
    <mutant id="mutant_4679" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="(cPos &lt; aLen) &amp;&amp; (cPos &lt; bLen)" to="true" />
    <mutant id="mutant_2095" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="(tmpPack != null) || (tmpPack.exists())" />
    <mutant id="mutant_2096" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="tmpPack != null" />
    <mutant id="mutant_2093" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="true" />
    <mutant id="mutant_2094" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="false" />
    <mutant id="mutant_2091" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="false" />
    <mutant id="mutant_2092" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="storage == (Ref.Storage.LOOSE_PACKED)" />
    <mutant id="mutant_2090" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="true" />
    <mutant id="mutant_2088" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="storage == (Ref.Storage.PACKED)" />
    <mutant id="mutant_2089" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.PACKED)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="(storage == (Ref.Storage.PACKED)) &amp;&amp; (storage == (Ref.Storage.LOOSE_PACKED))" />
    <mutant id="mutant_2086" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="storage == (Ref.Storage.LOOSE)" />
    <mutant id="mutant_2087" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="storage == (Ref.Storage.LOOSE_PACKED)" />
    <mutant id="mutant_2084" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="true" />
    <mutant id="mutant_2085" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="false" />
    <mutant id="mutant_2082" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout.length) &gt; 0" />
    <mutant id="mutant_2083" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(storage == (Ref.Storage.LOOSE)) || (storage == (Ref.Storage.LOOSE_PACKED))" to="(storage == (Ref.Storage.LOOSE)) &amp;&amp; (storage == (Ref.Storage.LOOSE_PACKED))" />
    <mutant id="mutant_2080" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="false" />
    <mutant id="mutant_2081" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout != null) || ((fanout.length) &gt; 0)" />
    <mutant id="mutant_2079" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="true" />
    <mutant id="mutant_2077" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="(expireAgeMillis) == (-1)" />
    <mutant id="mutant_2078" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="fanout != null" />
    <mutant id="mutant_2075" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="true" />
    <mutant id="mutant_2076" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="false" />
    <mutant id="mutant_2073" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="(expire) == null" />
    <mutant id="mutant_2074" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="((expire) == null) &amp;&amp; ((expireAgeMillis) == (-1))" to="((expire) == null) || ((expireAgeMillis) == (-1))" />
    <mutant id="mutant_2071" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="false" />
    <mutant id="mutant_2072" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="oldId != null" />
    <mutant id="mutant_2070" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="true" />
    <mutant id="mutant_2068" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="!(ObjectId.zeroId().equals(oldId))" />
    <mutant id="mutant_2069" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(oldId != null) &amp;&amp; (!(ObjectId.zeroId().equals(oldId)))" to="(oldId != null) || (!(ObjectId.zeroId().equals(oldId)))" />
    <mutant id="mutant_3399" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="(pattern.indexOf('?')) != (-1)" />
    <mutant id="mutant_2066" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="(newId != null) || (!(ObjectId.zeroId().equals(newId)))" />
    <mutant id="mutant_3398" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="((pattern.indexOf('?')) != (-1)) &amp;&amp; ((pattern.indexOf('\\')) != (-1))" />
    <mutant id="mutant_2067" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="!(ObjectId.zeroId().equals(newId))" />
    <mutant id="mutant_3397" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="false" />
    <mutant id="mutant_2064" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="true" />
    <mutant id="mutant_3396" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="true" />
    <mutant id="mutant_2065" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="false" />
    <mutant id="mutant_3395" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(java.lang.String)" from="((pattern.indexOf('?')) != (-1)) || ((pattern.indexOf('\\')) != (-1))" to="(pattern.indexOf('\\')) != (-1)" />
    <mutant id="mutant_2062" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="(rlEntries == null) &amp;&amp; (rlEntries.isEmpty())" />
    <mutant id="mutant_3394" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="slashIdx &gt; 0" />
    <mutant id="mutant_2063" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(newId != null) &amp;&amp; (!(ObjectId.zeroId().equals(newId)))" to="newId != null" />
    <mutant id="mutant_3393" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="false" />
    <mutant id="mutant_2060" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="false" />
    <mutant id="mutant_3392" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="true" />
    <mutant id="mutant_2061" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="rlEntries.isEmpty()" />
    <mutant id="mutant_3391" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="slashIdx &lt; ((pattern.length()) - 1)" />
    <mutant id="mutant_3390" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="(slashIdx &gt; 0) &amp;&amp; (slashIdx &lt; ((pattern.length()) - 1))" to="(slashIdx &gt; 0) || (slashIdx &lt; ((pattern.length()) - 1))" />
    <mutant id="mutant_2059" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="true" />
    <mutant id="mutant_2057" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="false" />
    <mutant id="mutant_3389" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createNameMatcher0(java.lang.String,java.lang.Character,boolean)" from="(WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment))" to="WildMatcher.WILDMATCH.equals(segment)" />
    <mutant id="mutant_2058" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.listRefLogObjects(org.eclipse.jgit.lib.Ref,long)" from="(rlEntries == null) || (rlEntries.isEmpty())" to="rlEntries == null" />
    <mutant id="mutant_3388" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createNameMatcher0(java.lang.String,java.lang.Character,boolean)" from="(WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment))" to="false" />
    <mutant id="mutant_2055" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="(ref.getObjectId()) == null" />
    <mutant id="mutant_3387" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createNameMatcher0(java.lang.String,java.lang.Character,boolean)" from="(WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment))" to="true" />
    <mutant id="mutant_2056" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="true" />
    <mutant id="mutant_3386" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createNameMatcher0(java.lang.String,java.lang.Character,boolean)" from="(WildMatcher.WILDMATCH.equals(segment)) || (WildMatcher.WILDMATCH2.equals(segment))" to="(WildMatcher.WILDMATCH.equals(segment)) &amp;&amp; (WildMatcher.WILDMATCH2.equals(segment))" />
    <mutant id="mutant_2053" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="(ref.isSymbolic()) &amp;&amp; ((ref.getObjectId()) == null)" />
    <mutant id="mutant_3385" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="(matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD)" />
    <mutant id="mutant_2054" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.repack()" from="(ref.isSymbolic()) || ((ref.getObjectId()) == null)" to="ref.isSymbolic()" />
    <mutant id="mutant_3384" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)) &amp;&amp; ((matchers.get(((matchers.size()) - 1))) == (PathMatcher.WILD))" to="(matcher == (PathMatcher.WILD)) &amp;&amp; (i &gt; 0)" />
    <mutant id="mutant_2099" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="(oldPack.getPackFile().lastModified()) &lt; expireDate" />
    <mutant id="mutant_2097" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpPack != null) &amp;&amp; (tmpPack.exists())" to="tmpPack.exists()" />
    <mutant id="mutant_2098" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="(!(oldPack.shouldBeKept())) || ((oldPack.getPackFile().lastModified()) &lt; expireDate)" />
    <mutant id="mutant_4709" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="(pathOff &gt; 0) || (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" />
    <mutant id="mutant_4700" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="aPos &lt; aLen" />
    <mutant id="mutant_4708" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="((entrySpan) &gt;= 0) || ((cIdx + (entrySpan)) &lt;= cCnt)" />
    <mutant id="mutant_4707" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="(entrySpan) &gt;= 0" />
    <mutant id="mutant_4706" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="false" />
    <mutant id="mutant_4705" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="true" />
    <mutant id="mutant_4704" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((entrySpan) &gt;= 0) &amp;&amp; ((cIdx + (entrySpan)) &lt;= cCnt)" to="(cIdx + (entrySpan)) &lt;= cCnt" />
    <mutant id="mutant_4703" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="bPos &lt; bLen" />
    <mutant id="mutant_4702" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="false" />
    <mutant id="mutant_4701" viable="false" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="(aPos &lt; aLen) &amp;&amp; (bPos &lt; bLen)" to="true" />
    <mutant id="mutant_3413" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="true" />
    <mutant id="mutant_4744" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="true" />
    <mutant id="mutant_3412" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="(!ignoreFirstLast) &amp;&amp; ((start != 0) &amp;&amp; (start != (s.length())))" />
    <mutant id="mutant_4743" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="(avail.isEmpty()) || (name.equals(&quot;capabilities^{}&quot;))" />
    <mutant id="mutant_3411" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="!ignoreFirstLast" />
    <mutant id="mutant_4742" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="(outNeedsEnd) || ((out) != null)" />
    <mutant id="mutant_3410" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="(start != 0) &amp;&amp; (start != (s.length()))" />
    <mutant id="mutant_4741" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="false" />
    <mutant id="mutant_4740" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="true" />
    <mutant id="mutant_3419" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="((pattern.length()) &gt; 0) || ((pattern.charAt(((pattern.length()) - 1))) == c)" />
    <mutant id="mutant_3418" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="false" />
    <mutant id="mutant_4749" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="(multiAck) != (GitProtocolConstants.MultiAck.DETAILED)" />
    <mutant id="mutant_3417" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="true" />
    <mutant id="mutant_4748" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="statelessRPC" />
    <mutant id="mutant_3416" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="(pattern.charAt(((pattern.length()) - 1))) == c" />
    <mutant id="mutant_4747" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="avail.isEmpty()" />
    <mutant id="mutant_3415" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) &gt; 0) &amp;&amp; ((pattern.charAt(((pattern.length()) - 1))) == c)" to="(pattern.length()) &gt; 0" />
    <mutant id="mutant_4746" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="name.equals(&quot;capabilities^{}&quot;)" />
    <mutant id="mutant_3414" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="(!ignoreFirstLast) || ((start != 0) &amp;&amp; (start != (s.length())))" to="false" />
    <mutant id="mutant_4745" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(avail.isEmpty()) &amp;&amp; (name.equals(&quot;capabilities^{}&quot;))" to="false" />
    <mutant id="mutant_3402" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="((pattern.indexOf('*')) != (-1)) &amp;&amp; (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" />
    <mutant id="mutant_4733" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="a != null" />
    <mutant id="mutant_3401" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="false" />
    <mutant id="mutant_4732" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="!(prefix.endsWith(&quot;/&quot;))" />
    <mutant id="mutant_3400" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="true" />
    <mutant id="mutant_4731" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="((prefix.length()) &gt; 0) || (!(prefix.endsWith(&quot;/&quot;)))" />
    <mutant id="mutant_4730" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="false" />
    <mutant id="mutant_3409" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="(start != 0)" />
    <mutant id="mutant_3408" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="((start != 0) || (start != (s.length())))" />
    <mutant id="mutant_4739" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="(out) != null" />
    <mutant id="mutant_3407" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="false" />
    <mutant id="mutant_4738" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.endOut()" from="(outNeedsEnd) &amp;&amp; ((out) != null)" to="outNeedsEnd" />
    <mutant id="mutant_3406" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="true" />
    <mutant id="mutant_4737" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="UserAgent.hasAgent(remoteCapablities)" />
    <mutant id="mutant_3405" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.count(java.lang.String,char,boolean)" from="((start != 0) &amp;&amp; (start != (s.length())))" to="(start != (s.length()))" />
    <mutant id="mutant_4736" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="false" />
    <mutant id="mutant_3404" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="(pattern.indexOf('*')) != (-1)" />
    <mutant id="mutant_4735" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="true" />
    <mutant id="mutant_3403" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.isWildCard(java.lang.String)" from="((pattern.indexOf('*')) != (-1)) || (org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern))" to="org.eclipse.jgit.ignore.internal.Strings.isComplexWildcard(pattern)" />
    <mutant id="mutant_4734" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.addUserAgentCapability(java.lang.StringBuilder)" from="(a != null) &amp;&amp; (UserAgent.hasAgent(remoteCapablities))" to="(a != null) || (UserAgent.hasAgent(remoteCapablities))" />
    <mutant id="mutant_4722" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="tmp != null" />
    <mutant id="mutant_4721" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="false" />
    <mutant id="mutant_4720" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="true" />
    <mutant id="mutant_4729" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="true" />
    <mutant id="mutant_4728" viable="true" in="org.eclipse.jgit.transport.AmazonS3.list(java.lang.String,java.lang.String)" from="((prefix.length()) &gt; 0) &amp;&amp; (!(prefix.endsWith(&quot;/&quot;)))" to="(prefix.length()) &gt; 0" />
    <mutant id="mutant_4727" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="nameLC.startsWith(&quot;x-amz-&quot;)" />
    <mutant id="mutant_4726" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="AmazonS3.SIGNED_HEADERS.contains(nameLC)" />
    <mutant id="mutant_4725" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="false" />
    <mutant id="mutant_4724" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="true" />
    <mutant id="mutant_4723" viable="true" in="org.eclipse.jgit.transport.AmazonS3.isSignedHeader(java.lang.String)" from="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) || (nameLC.startsWith(&quot;x-amz-&quot;))" to="(AmazonS3.SIGNED_HEADERS.contains(nameLC)) &amp;&amp; (nameLC.startsWith(&quot;x-amz-&quot;))" />
    <mutant id="mutant_4711" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="false" />
    <mutant id="mutant_4710" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="true" />
    <mutant id="mutant_4719" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="(tmp.length()) &gt; 0" />
    <mutant id="mutant_4718" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(tmp != null) &amp;&amp; ((tmp.length()) &gt; 0)" to="(tmp != null) || ((tmp.length()) &gt; 0)" />
    <mutant id="mutant_4717" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name))" to="(&quot;Key&quot;.equals(name)) &amp;&amp; (&quot;IsTruncated&quot;.equals(name))" />
    <mutant id="mutant_4716" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name))" to="false" />
    <mutant id="mutant_4715" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name))" to="true" />
    <mutant id="mutant_4714" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(&quot;Key&quot;.equals(name)) || (&quot;IsTruncated&quot;.equals(name))" to="&quot;Key&quot;.equals(name)" />
    <mutant id="mutant_4713" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="pathOff &gt; 0" />
    <mutant id="mutant_4712" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff &gt; 0) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff)))" to="!(org.eclipse.jgit.dircache.DirCacheTree.peq(firstPath, currPath, pathOff))" />
    <mutant id="mutant_3460" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex &gt;= 0) &amp;&amp; ((baseUrl.charAt(lastIndex)) == '/')" to="lastIndex &gt;= 0" />
    <mutant id="mutant_4791" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="(!(capableDeleteRefs)) || (rru.isDelete())" />
    <mutant id="mutant_4790" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="false" />
    <mutant id="mutant_2125" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="false" />
    <mutant id="mutant_3457" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="false" />
    <mutant id="mutant_4788" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="rru.isDelete()" />
    <mutant id="mutant_2126" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="position &gt;= (sizeInBits)" />
    <mutant id="mutant_3456" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="true" />
    <mutant id="mutant_4787" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="false" />
    <mutant id="mutant_2123" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="position &lt;= (nextPosition)" />
    <mutant id="mutant_3455" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) || (!(txt.equals(&quot;/&quot;)))" />
    <mutant id="mutant_4786" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="true" />
    <mutant id="mutant_2124" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="true" />
    <mutant id="mutant_3454" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(((txt.length()) &gt; 0) || (!(txt.startsWith(&quot;#&quot;))))" />
    <mutant id="mutant_4785" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="resultsPending &gt; 0" />
    <mutant id="mutant_2121" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout != null) || ((fanout.length) &gt; 0)" />
    <mutant id="mutant_3453" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="(!(txt.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_4784" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="(resultsPending &gt; 0) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" />
    <mutant id="mutant_2122" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout.length) &gt; 0" />
    <mutant id="mutant_3452" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="false" />
    <mutant id="mutant_4783" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(resultsPending &gt; 0) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="(multiAck) != (GitProtocolConstants.MultiAck.OFF)" />
    <mutant id="mutant_3451" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="true" />
    <mutant id="mutant_4782" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="(!receivedReady) &amp;&amp; (!(noDone))" />
    <mutant id="mutant_2120" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="false" />
    <mutant id="mutant_3450" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;))))" to="((txt.length()) &gt; 0)" />
    <mutant id="mutant_4781" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="false" />
    <mutant id="mutant_2129" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="(word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0" />
    <mutant id="mutant_2127" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(position &lt;= (nextPosition)) || (position &gt;= (sizeInBits))" to="(position &lt;= (nextPosition)) &amp;&amp; (position &gt;= (sizeInBits))" />
    <mutant id="mutant_3459" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))" />
    <mutant id="mutant_2128" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(block == positionBlock) &amp;&amp; ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" to="(block == positionBlock) || ((word &amp; (org.eclipse.jgit.internal.storage.file.InflatingBitSet.mask(position))) != 0)" />
    <mutant id="mutant_3458" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.parse(java.io.InputStream)" from="(((txt.length()) &gt; 0) &amp;&amp; (!(txt.startsWith(&quot;#&quot;)))) &amp;&amp; (!(txt.equals(&quot;/&quot;)))" to="!(txt.equals(&quot;/&quot;))" />
    <mutant id="mutant_4789" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.writeCommands(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(capableDeleteRefs)) &amp;&amp; (rru.isDelete())" to="true" />
    <mutant id="mutant_4780" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="true" />
    <mutant id="mutant_2114" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="lastPackedRefs.isEmpty()" />
    <mutant id="mutant_3446" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="(lookBehind == '[') &amp;&amp; (!ignoreLastBracket)" />
    <mutant id="mutant_4777" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="receivedContinue || (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" />
    <mutant id="mutant_2115" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="true" />
    <mutant id="mutant_3445" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) &amp;&amp; (lookBehind == '^')" />
    <mutant id="mutant_4776" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="false" />
    <mutant id="mutant_2112" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout.length) &gt; 0" />
    <mutant id="mutant_3444" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="((lookBehind == '[') || (!ignoreLastBracket))" />
    <mutant id="mutant_4775" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="true" />
    <mutant id="mutant_2113" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="((lastPackedRefs) == null) &amp;&amp; (lastPackedRefs.isEmpty())" />
    <mutant id="mutant_3443" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="(lookBehind == '[')" />
    <mutant id="mutant_4774" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES)" />
    <mutant id="mutant_2110" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="false" />
    <mutant id="mutant_3442" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="false" />
    <mutant id="mutant_4773" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="receivedContinue &amp;&amp; (havesSinceLastContinue &gt; (BasePackFetchConnection.MAX_HAVES))" to="receivedContinue" />
    <mutant id="mutant_2111" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="(fanout != null) || ((fanout.length) &gt; 0)" />
    <mutant id="mutant_3441" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="true" />
    <mutant id="mutant_4772" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="!(statelessRPC)" />
    <mutant id="mutant_3440" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket))" to="(!ignoreLastBracket)" />
    <mutant id="mutant_4771" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="(havesSent == 32) || (!(statelessRPC))" />
    <mutant id="mutant_4770" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="false" />
    <mutant id="mutant_2118" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="fanout != null" />
    <mutant id="mutant_2119" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="true" />
    <mutant id="mutant_3449" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="lookBehind == '^'" />
    <mutant id="mutant_2116" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="false" />
    <mutant id="mutant_3448" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="false" />
    <mutant id="mutant_4779" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="!receivedReady" />
    <mutant id="mutant_2117" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((lastPackedRefs) == null) || (lastPackedRefs.isEmpty())" to="(lastPackedRefs) == null" />
    <mutant id="mutant_3447" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((lookBehind == '[') &amp;&amp; (!ignoreLastBracket)) || (lookBehind == '^')" to="true" />
    <mutant id="mutant_4778" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(!receivedReady) || (!(noDone))" to="!(noDone)" />
    <mutant id="mutant_2103" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="!(ref.isSymbolic())" />
    <mutant id="mutant_3435" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="true" />
    <mutant id="mutant_4766" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="false" />
    <mutant id="mutant_2104" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="(!(ref.isSymbolic())) || (ref.getStorage().isLoose())" />
    <mutant id="mutant_3434" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') || (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" />
    <mutant id="mutant_4765" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="true" />
    <mutant id="mutant_2101" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="false" />
    <mutant id="mutant_3433" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="false" />
    <mutant id="mutant_4764" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="c.has(ADVERTISED)" />
    <mutant id="mutant_2102" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="!(oldPack.shouldBeKept())" />
    <mutant id="mutant_3432" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="true" />
    <mutant id="mutant_4763" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="!(c.has(COMMON))" />
    <mutant id="mutant_3431" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="(org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '['" />
    <mutant id="mutant_4762" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) || (!(obj.has(STATE)))" />
    <mutant id="mutant_2100" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.deleteOldPacks(java.util.Collection,java.util.Collection)" from="(!(oldPack.shouldBeKept())) &amp;&amp; ((oldPack.getPackFile().lastModified()) &lt; expireDate)" to="true" />
    <mutant id="mutant_3430" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((org.eclipse.jgit.ignore.internal.Strings.lookBehind(sb)) == '[') &amp;&amp; (java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i)))" to="java.lang.Character.isLetter(org.eclipse.jgit.ignore.internal.Strings.lookAhead(pattern, i))" />
    <mutant id="mutant_4761" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="!(obj.has(STATE))" />
    <mutant id="mutant_4760" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="(statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))" />
    <mutant id="mutant_2109" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="true" />
    <mutant id="mutant_2107" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="ref.getStorage().isLoose()" />
    <mutant id="mutant_3439" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="lookAhead == '['" />
    <mutant id="mutant_2108" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(fanout != null) &amp;&amp; ((fanout.length) &gt; 0)" to="fanout != null" />
    <mutant id="mutant_3438" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="(lookAhead == ']') &amp;&amp; (lookAhead == '[')" />
    <mutant id="mutant_4769" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="true" />
    <mutant id="mutant_2105" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="true" />
    <mutant id="mutant_3437" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="lookAhead == ']'" />
    <mutant id="mutant_4768" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(havesSent == 32) &amp;&amp; (!(statelessRPC))" to="havesSent == 32" />
    <mutant id="mutant_2106" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.packRefs()" from="(!(ref.isSymbolic())) &amp;&amp; (ref.getStorage().isLoose())" to="false" />
    <mutant id="mutant_3436" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="(lookAhead == ']') || (lookAhead == '[')" to="false" />
    <mutant id="mutant_4767" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(c.has(ADVERTISED)) &amp;&amp; (!(c.has(COMMON)))" to="(c.has(ADVERTISED)) || (!(c.has(COMMON)))" />
    <mutant id="mutant_3424" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="false" />
    <mutant id="mutant_4755" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="true" />
    <mutant id="mutant_3423" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="true" />
    <mutant id="mutant_4754" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="(anr == (PacketLineIn.AckNackResult.ACK_COMMON))" />
    <mutant id="mutant_3422" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="in_brackets &gt; 0" />
    <mutant id="mutant_4753" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="(statelessRPC)" />
    <mutant id="mutant_3421" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="seenEscape &amp;&amp; (in_brackets &gt; 0)" />
    <mutant id="mutant_4752" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="false" />
    <mutant id="mutant_3420" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="seenEscape" />
    <mutant id="mutant_4751" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="true" />
    <mutant id="mutant_4750" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.enableCapabilities()" from="(statelessRPC) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" to="(statelessRPC) || ((multiAck) != (GitProtocolConstants.MultiAck.DETAILED))" />
    <mutant id="mutant_3429" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="false" />
    <mutant id="mutant_3428" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="true" />
    <mutant id="mutant_4759" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="false" />
    <mutant id="mutant_3427" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="in_brackets &gt; 0" />
    <mutant id="mutant_4758" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON))) &amp;&amp; (!(obj.has(STATE)))" to="true" />
    <mutant id="mutant_3426" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="seenEscape &amp;&amp; (in_brackets &gt; 0)" />
    <mutant id="mutant_4757" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="((statelessRPC) || (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" />
    <mutant id="mutant_3425" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="seenEscape || (in_brackets &gt; 0)" to="seenEscape" />
    <mutant id="mutant_4756" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="((statelessRPC) &amp;&amp; (anr == (PacketLineIn.AckNackResult.ACK_COMMON)))" to="false" />
    <mutant id="mutant_327" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="true" />
    <mutant id="mutant_328" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="false" />
    <mutant id="mutant_329" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="(a.hashes[ai]) == (b.hashes[bi])" />
    <mutant id="mutant_323" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="true" />
    <mutant id="mutant_324" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="false" />
    <mutant id="mutant_325" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="((a.hashes[ai]) == (b.hashes[bi])) || (cmp.equals(a.base, ai, b.base, bi))" />
    <mutant id="mutant_326" viable="true" in="org.eclipse.jgit.diff.HashedSequenceComparator.equals(org.eclipse.jgit.diff.HashedSequence,int,org.eclipse.jgit.diff.HashedSequence,int)" from="((a.hashes[ai]) == (b.hashes[bi])) &amp;&amp; (cmp.equals(a.base, ai, b.base, bi))" to="cmp.equals(a.base, ai, b.base, bi)" />
    <mutant id="mutant_3262" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="((base != null) &amp;&amp; (!(base.isWritten()))) || (!(base.isEdge()))" />
    <mutant id="mutant_4593" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="(f != null) || (!(f.isEntryIgnored()))" />
    <mutant id="mutant_3261" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="((base != null) || (!(base.isWritten())))" />
    <mutant id="mutant_4592" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="f != null" />
    <mutant id="mutant_3260" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="(!(base.isWritten()))" />
    <mutant id="mutant_4591" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="false" />
    <mutant id="mutant_4590" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="true" />
    <mutant id="mutant_3259" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="false" />
    <mutant id="mutant_3258" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="true" />
    <mutant id="mutant_4589" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (!(f.isEntryIgnored()))" to="!(f.isEntryIgnored())" />
    <mutant id="mutant_3257" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten())))" to="(base != null)" />
    <mutant id="mutant_4588" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="(ffMask == 15) &amp;&amp; (f != null)" />
    <mutant id="mutant_3256" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="!(o.isEdge())" />
    <mutant id="mutant_4587" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="false" />
    <mutant id="mutant_3255" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="false" />
    <mutant id="mutant_4586" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="true" />
    <mutant id="mutant_3254" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="true" />
    <mutant id="mutant_4585" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="((ffMask == 15) &amp;&amp; (f != null)) || (FileMode.TREE.equals(f.getEntryFileMode()))" />
    <mutant id="mutant_3253" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="!(o.doNotAttemptDelta())" />
    <mutant id="mutant_4584" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null)) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode()))" to="FileMode.TREE.equals(f.getEntryFileMode())" />
    <mutant id="mutant_3252" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(!(o.isEdge())) &amp;&amp; (!(o.doNotAttemptDelta()))" to="(!(o.isEdge())) || (!(o.doNotAttemptDelta()))" />
    <mutant id="mutant_4583" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="(f != null)" />
    <mutant id="mutant_320" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="(beginA) == (endA)" />
    <mutant id="mutant_321" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="((beginA) == (endA)) || ((beginB) == (endB))" />
    <mutant id="mutant_322" viable="true" in="org.eclipse.jgit.diff.Edit.isEmpty()" from="((beginA) == (endA)) &amp;&amp; ((beginB) == (endB))" to="(beginB) == (endB)" />
    <mutant id="mutant_338" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="(((region.beginA) &lt; as) || ((region.beginB) &lt; bs))" />
    <mutant id="mutant_339" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="((region.beginA) &lt; as)" />
    <mutant id="mutant_334" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="(r.getLengthB()) == 1" />
    <mutant id="mutant_335" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="((region.beginB) &lt; bs)" />
    <mutant id="mutant_336" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="true" />
    <mutant id="mutant_337" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs))" to="false" />
    <mutant id="mutant_3251" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="(otp.isReuseAsIs()) || (!(otp.isDeltaRepresentation()))" />
    <mutant id="mutant_4582" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="false" />
    <mutant id="mutant_3250" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="false" />
    <mutant id="mutant_4581" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="true" />
    <mutant id="mutant_4580" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="((ffMask == 15) || (f != null))" />
    <mutant id="mutant_3248" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="!(otp.isDeltaRepresentation())" />
    <mutant id="mutant_4579" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask == 15) &amp;&amp; (f != null))" to="(ffMask == 15)" />
    <mutant id="mutant_3247" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="otp.isReuseAsIs()" />
    <mutant id="mutant_4578" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="((ffMask &amp; 546) == 0) || ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" />
    <mutant id="mutant_3246" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="false" />
    <mutant id="mutant_4577" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="false" />
    <mutant id="mutant_3245" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="true" />
    <mutant id="mutant_4576" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="true" />
    <mutant id="mutant_3244" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="config.isReuseObjects()" />
    <mutant id="mutant_4575" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="(f == null) || (FileMode.TREE.equals(f.getEntryFileMode()))" />
    <mutant id="mutant_3243" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="nFmt == (StoredObjectRepresentation.PACK_WHOLE)" />
    <mutant id="mutant_4574" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) == 0) &amp;&amp; ((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="(ffMask &amp; 546) == 0" />
    <mutant id="mutant_3242" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) &amp;&amp; (config.isReuseObjects())" to="(nFmt == (StoredObjectRepresentation.PACK_WHOLE)) || (config.isReuseObjects())" />
    <mutant id="mutant_4573" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="((f == null) &amp;&amp; (FileMode.TREE.equals(f.getEntryFileMode())))" />
    <mutant id="mutant_3241" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="false" />
    <mutant id="mutant_4572" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="false" />
    <mutant id="mutant_330" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="((r.getLengthA()) == 1) || ((r.getLengthB()) == 1)" />
    <mutant id="mutant_331" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="true" />
    <mutant id="mutant_332" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="false" />
    <mutant id="mutant_333" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diff(org.eclipse.jgit.diff.Edit)" from="((r.getLengthA()) == 1) &amp;&amp; ((r.getLengthB()) == 1)" to="(r.getLengthA()) == 1" />
    <mutant id="mutant_3249" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(otp.isReuseAsIs()) &amp;&amp; (!(otp.isDeltaRepresentation()))" to="true" />
    <mutant id="mutant_349" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="(ae &lt; (region.endA))" />
    <mutant id="mutant_345" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="((ae &lt; (region.endA)) || (be &lt; (region.endB)))" />
    <mutant id="mutant_346" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="true" />
    <mutant id="mutant_347" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="false" />
    <mutant id="mutant_348" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB)))" to="(be &lt; (region.endB))" />
    <mutant id="mutant_3240" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="true" />
    <mutant id="mutant_4571" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="true" />
    <mutant id="mutant_4570" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="(FileMode.TREE.equals(f.getEntryFileMode()))" />
    <mutant id="mutant_3237" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="have(ptr, baseId)" />
    <mutant id="mutant_4568" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="(f != null) || (f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_3236" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="!(ptr.isEdge())" />
    <mutant id="mutant_4567" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="f.isModified(dce, true, this.walk.getObjectReader())" />
    <mutant id="mutant_3235" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="false" />
    <mutant id="mutant_4566" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="f != null" />
    <mutant id="mutant_3234" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="true" />
    <mutant id="mutant_4565" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="false" />
    <mutant id="mutant_3233" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="ptr != null" />
    <mutant id="mutant_4564" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="true" />
    <mutant id="mutant_3232" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(ptr != null) &amp;&amp; (!(ptr.isEdge()))" to="(ptr != null) || (!(ptr.isEdge()))" />
    <mutant id="mutant_4563" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="isModifiedSubtree_IndexWorkingtree(name)" />
    <mutant id="mutant_3231" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="false" />
    <mutant id="mutant_4562" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="f != null" />
    <mutant id="mutant_3230" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="true" />
    <mutant id="mutant_4561" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="false" />
    <mutant id="mutant_341" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) || (cmp.equals(a, (as - 1), b, (bs - 1)))" />
    <mutant id="mutant_5892" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="false" />
    <mutant id="mutant_342" viable="false" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="true" />
    <mutant id="mutant_5893" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="((s != null) || ((p.length()) &gt;= 2))" />
    <mutant id="mutant_343" viable="false" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="false" />
    <mutant id="mutant_5894" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" />
    <mutant id="mutant_344" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)" />
    <mutant id="mutant_5895" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="true" />
    <mutant id="mutant_5896" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="false" />
    <mutant id="mutant_5897" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="((p.charAt(0)) == '/')" />
    <mutant id="mutant_3239" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="(thin) || (have(ptr, baseId))" />
    <mutant id="mutant_5898" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/'))" to="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) || ((p.charAt(0)) == '/'))" />
    <mutant id="mutant_340" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(((region.beginA) &lt; as) &amp;&amp; ((region.beginB) &lt; bs)) &amp;&amp; (cmp.equals(a, (as - 1), b, (bs - 1)))" to="cmp.equals(a, (as - 1), b, (bs - 1))" />
    <mutant id="mutant_3238" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="(thin) &amp;&amp; (have(ptr, baseId))" to="thin" />
    <mutant id="mutant_4569" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (FileMode.TREE.equals(f.getEntryFileMode())))" to="(f == null)" />
    <mutant id="mutant_5899" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) || ((p.charAt(1)) == '~')" />
    <mutant id="mutant_356" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="(lcs.getLengthA()) &lt; (ae - as)" />
    <mutant id="mutant_357" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="((lcs.getLengthA()) &lt; (ae - as)) &amp;&amp; (rc &lt; (cnt))" />
    <mutant id="mutant_358" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="true" />
    <mutant id="mutant_5890" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="((p.length()) &gt;= 2)" />
    <mutant id="mutant_359" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="false" />
    <mutant id="mutant_5891" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="true" />
    <mutant id="mutant_4560" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="true" />
    <mutant id="mutant_3226" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="(nFmt == (StoredObjectRepresentation.PACK_DELTA))" />
    <mutant id="mutant_4557" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="(ffMask &amp; 546) != 0" />
    <mutant id="mutant_5889" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((s != null) &amp;&amp; ((p.length()) &gt;= 2))" to="(s != null)" />
    <mutant id="mutant_3225" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) || (reuseDeltas))" />
    <mutant id="mutant_4556" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="((ffMask &amp; 546) != 0) || ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" />
    <mutant id="mutant_3224" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="false" />
    <mutant id="mutant_4555" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="false" />
    <mutant id="mutant_3223" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="true" />
    <mutant id="mutant_4554" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="true" />
    <mutant id="mutant_3222" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas))" to="(reuseDeltas)" />
    <mutant id="mutant_4553" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) &amp;&amp; ((ffMask &amp; 3840) == 3328))" />
    <mutant id="mutant_3221" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="config.isReuseDeltas()" />
    <mutant id="mutant_4552" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="((ffMask &amp; 3840) == 3328)" />
    <mutant id="mutant_3220" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="(config.isReuseDeltas()) || (config.getCutDeltaChains())" />
    <mutant id="mutant_4551" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" />
    <mutant id="mutant_4550" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="false" />
    <mutant id="mutant_352" viable="false" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="true" />
    <mutant id="mutant_5881" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" />
    <mutant id="mutant_353" viable="false" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="false" />
    <mutant id="mutant_5882" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="true" />
    <mutant id="mutant_354" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) || (cmp.equals(a, ae, b, be))" />
    <mutant id="mutant_5883" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="false" />
    <mutant id="mutant_355" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((lcs.getLengthA()) &lt; (ae - as)) || (rc &lt; (cnt))" to="rc &lt; (cnt)" />
    <mutant id="mutant_5884" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" />
    <mutant id="mutant_5885" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="true" />
    <mutant id="mutant_3229" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="reuseDeltaFor(otp)" />
    <mutant id="mutant_5886" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="false" />
    <mutant id="mutant_350" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="cmp.equals(a, ae, b, be)" />
    <mutant id="mutant_3228" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="(nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)" />
    <mutant id="mutant_4559" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (isModifiedSubtree_IndexWorkingtree(name))" to="(f != null) || (isModifiedSubtree_IndexWorkingtree(name))" />
    <mutant id="mutant_5887" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) || ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" />
    <mutant id="mutant_351" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="((ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))) &amp;&amp; (cmp.equals(a, ae, b, be))" to="(ae &lt; (region.endA)) &amp;&amp; (be &lt; (region.endB))" />
    <mutant id="mutant_3227" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.select(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation)" from="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) &amp;&amp; (reuseDeltaFor(otp))" to="((nFmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (reuseDeltas)) || (reuseDeltaFor(otp))" />
    <mutant id="mutant_4558" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((ffMask &amp; 546) != 0) &amp;&amp; ((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328)" />
    <mutant id="mutant_5888" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')) &amp;&amp; ((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':')" />
    <mutant id="mutant_367" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="false" />
    <mutant id="mutant_368" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="k &gt; (forward.endK)" />
    <mutant id="mutant_369" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="(k &lt; (forward.beginK)) &amp;&amp; (k &gt; (forward.endK))" />
    <mutant id="mutant_3299" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" />
    <mutant id="mutant_3298" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="false" />
    <mutant id="mutant_3297" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="true" />
    <mutant id="mutant_3296" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="((nextIn &gt; 0) &amp;&amp; (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" />
    <mutant id="mutant_363" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="(hasCommon) || ((maxChainLength) &lt; (cnt))" />
    <mutant id="mutant_364" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="hasCommon" />
    <mutant id="mutant_365" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="k &lt; (forward.beginK)" />
    <mutant id="mutant_366" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(k &lt; (forward.beginK)) || (k &gt; (forward.endK))" to="true" />
    <mutant id="mutant_360" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="true" />
    <mutant id="mutant_361" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="false" />
    <mutant id="mutant_362" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(hasCommon) &amp;&amp; ((maxChainLength) &lt; (cnt))" to="(maxChainLength) &lt; (cnt)" />
    <mutant id="mutant_378" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="true" />
    <mutant id="mutant_379" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="false" />
    <mutant id="mutant_3295" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="false" />
    <mutant id="mutant_3294" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="true" />
    <mutant id="mutant_3293" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="(((c.getParentCount()) &lt;= 1) || (nextIn &gt; (-(minCommits))))" />
    <mutant id="mutant_3292" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="(nextIn &gt; (-(minCommits)))" />
    <mutant id="mutant_3291" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" to="((c.getParentCount()) &lt;= 1)" />
    <mutant id="mutant_3290" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty()))" to="false" />
    <mutant id="mutant_3289" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty()))" to="true" />
    <mutant id="mutant_3288" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty()))" to="(!(edgeObjects.isEmpty())) &amp;&amp; (!(cachedPacks.isEmpty()))" />
    <mutant id="mutant_3287" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(!(edgeObjects.isEmpty())) || (!(cachedPacks.isEmpty()))" to="!(edgeObjects.isEmpty())" />
    <mutant id="mutant_3286" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="config.isDeltaCompress()" />
    <mutant id="mutant_3285" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="false" />
    <mutant id="mutant_374" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="(k + x) &gt; (beginB)" />
    <mutant id="mutant_375" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="(k + x) &lt;= (beginB)" />
    <mutant id="mutant_376" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="(x &lt;= (beginA)) &amp;&amp; ((k + x) &lt;= (beginB))" />
    <mutant id="mutant_377" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(x &lt;= (beginA)) || ((k + x) &lt;= (beginB))" to="x &lt;= (beginA)" />
    <mutant id="mutant_370" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="(x &gt; (beginA)) || ((k + x) &gt; (beginB))" />
    <mutant id="mutant_371" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="true" />
    <mutant id="mutant_372" viable="false" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="false" />
    <mutant id="mutant_373" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x &gt; (beginA)) &amp;&amp; ((k + x) &gt; (beginB))" to="x &gt; (beginA)" />
    <mutant id="mutant_389" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="(k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right))" />
    <mutant id="mutant_3284" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="true" />
    <mutant id="mutant_3283" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="needSearchForReuse" />
    <mutant id="mutant_3282" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="needSearchForReuse &amp;&amp; (config.isDeltaCompress())" to="needSearchForReuse || (config.isDeltaCompress())" />
    <mutant id="mutant_3281" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty()))" />
    <mutant id="mutant_3280" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="false" />
    <mutant id="mutant_3279" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="true" />
    <mutant id="mutant_380" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="(k &gt; (prevBeginK))" />
    <mutant id="mutant_3278" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="(reuseSupport) != null" />
    <mutant id="mutant_3277" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseSupport) != null) &amp;&amp; (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="((reuseSupport) != null) || (((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" />
    <mutant id="mutant_3276" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="((reuseDeltas) || (config.isReuseObjects()))" />
    <mutant id="mutant_3275" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="(((reuseDeltas) || (config.isReuseObjects())) &amp;&amp; (!(cachedPacks.isEmpty())))" />
    <mutant id="mutant_3274" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="false" />
    <mutant id="mutant_385" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="(k &gt;= (prevEndK)) &amp;&amp; ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" />
    <mutant id="mutant_386" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="true" />
    <mutant id="mutant_387" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="false" />
    <mutant id="mutant_388" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k &gt;= (prevEndK)) || ((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="k &gt;= (prevEndK)" />
    <mutant id="mutant_381" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="(isBetter(left, right))" />
    <mutant id="mutant_382" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="((k &gt; (prevBeginK)) || (isBetter(left, right)))" />
    <mutant id="mutant_383" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="true" />
    <mutant id="mutant_384" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((k &gt; (prevBeginK)) &amp;&amp; (isBetter(left, right)))" to="false" />
    <mutant id="mutant_3273" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="true" />
    <mutant id="mutant_3272" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(((reuseDeltas) || (config.isReuseObjects())) || (!(cachedPacks.isEmpty())))" to="(!(cachedPacks.isEmpty()))" />
    <mutant id="mutant_3271" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="false" />
    <mutant id="mutant_3270" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="true" />
    <mutant id="mutant_3269" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="(reuseDeltas)" />
    <mutant id="mutant_390" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="true" />
    <mutant id="mutant_3268" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="((reuseDeltas) &amp;&amp; (config.isReuseObjects()))" />
    <mutant id="mutant_4599" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="m == null" />
    <mutant id="mutant_391" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="false" />
    <mutant id="mutant_3267" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="((reuseDeltas) || (config.isReuseObjects()))" to="(config.isReuseObjects())" />
    <mutant id="mutant_4598" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode()))" />
    <mutant id="mutant_3266" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="(base != null) &amp;&amp; (!(base.isWritten()))" />
    <mutant id="mutant_4597" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="mId == null" />
    <mutant id="mutant_3265" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="!(base.isEdge())" />
    <mutant id="mutant_4596" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="false" />
    <mutant id="mutant_3264" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="false" />
    <mutant id="mutant_4595" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="true" />
    <mutant id="mutant_3263" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBase(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((base != null) &amp;&amp; (!(base.isWritten()))) &amp;&amp; (!(base.isEdge()))" to="true" />
    <mutant id="mutant_4594" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(mId == null) || (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" to="(mId == null) &amp;&amp; (!(equalIdAndMode(mId, mMode, f.getEntryObjectId(), f.getEntryFileMode())))" />
    <mutant id="mutant_396" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="true" />
    <mutant id="mutant_397" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="false" />
    <mutant id="mutant_398" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="k &gt; (endK)" />
    <mutant id="mutant_399" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="(k &lt; (beginK)) &amp;&amp; (k &gt; (endK))" />
    <mutant id="mutant_392" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="y1 &gt; y2" />
    <mutant id="mutant_393" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="(x1 &gt; x2) &amp;&amp; (y1 &gt; y2)" />
    <mutant id="mutant_394" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.makeEdit(long,long)" from="(x1 &gt; x2) || (y1 &gt; y2)" to="x1 &gt; x2" />
    <mutant id="mutant_395" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getX(int,int)" from="(k &lt; (beginK)) || (k &gt; (endK))" to="k &lt; (beginK)" />
    <mutant id="mutant_5919" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="(URIish.reservedChars.get(b))" />
    <mutant id="mutant_5911" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="false" />
    <mutant id="mutant_5912" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="((b &lt;= 32) &amp;&amp; (encodeNonAscii &amp;&amp; (b &gt; 127)))" />
    <mutant id="mutant_5913" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="(encodeNonAscii &amp;&amp; (b &gt; 127))" />
    <mutant id="mutant_5914" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) &amp;&amp; (b == '%'))" />
    <mutant id="mutant_5915" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="true" />
    <mutant id="mutant_5916" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="false" />
    <mutant id="mutant_5917" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" />
    <mutant id="mutant_5918" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%'))" to="(b == '%')" />
    <mutant id="mutant_5910" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="true" />
    <mutant id="mutant_5908" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="encodeNonAscii" />
    <mutant id="mutant_5909" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127)))" to="(b &lt;= 32)" />
    <mutant id="mutant_5900" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="true" />
    <mutant id="mutant_5901" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="false" />
    <mutant id="mutant_5902" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')" />
    <mutant id="mutant_5903" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((s != null) &amp;&amp; ((p.length()) &gt;= 2)) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(1)) == '~')" to="(p.charAt(1)) == '~'" />
    <mutant id="mutant_5904" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="true" />
    <mutant id="mutant_5905" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="false" />
    <mutant id="mutant_5906" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="(b &gt; 127)" />
    <mutant id="mutant_5907" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(encodeNonAscii &amp;&amp; (b &gt; 127))" to="(encodeNonAscii || (b &gt; 127))" />
    <mutant id="mutant_4623" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="(f != null) || (f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_5955" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="true" />
    <mutant id="mutant_4622" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="f.isModified(dce, true, this.walk.getObjectReader())" />
    <mutant id="mutant_5956" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="false" />
    <mutant id="mutant_4621" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="f != null" />
    <mutant id="mutant_5957" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K)" />
    <mutant id="mutant_4620" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="false" />
    <mutant id="mutant_5958" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)" />
    <mutant id="mutant_5959" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="(depth) &gt; 0" />
    <mutant id="mutant_4629" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="((!(equalIdAndMode(hId, hMode, mId, mMode))) || (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" />
    <mutant id="mutant_4628" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="FileMode.TREE.equals(iMode)" />
    <mutant id="mutant_5950" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="URIish.LOCAL_FILE.matcher(s).matches()" />
    <mutant id="mutant_4627" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="!(FileMode.TREE.equals(f.getEntryFileMode()))" />
    <mutant id="mutant_5951" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="true" />
    <mutant id="mutant_4626" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="false" />
    <mutant id="mutant_5952" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="false" />
    <mutant id="mutant_4625" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="true" />
    <mutant id="mutant_5953" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="(&quot;file&quot;.equals(scheme)) &amp;&amp; (URIish.LOCAL_FILE.matcher(s).matches())" />
    <mutant id="mutant_4624" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(FileMode.TREE.equals(f.getEntryFileMode()))) &amp;&amp; (FileMode.TREE.equals(iMode))" to="(!(FileMode.TREE.equals(f.getEntryFileMode()))) || (FileMode.TREE.equals(iMode))" />
    <mutant id="mutant_5954" viable="false" in="org.eclipse.jgit.transport.UploadPack.isSideBand()" from="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) || (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" to="(options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND)) &amp;&amp; (options.contains(org.eclipse.jgit.transport.GitProtocolConstants.OPTION_SIDE_BAND_64K))" />
    <mutant id="mutant_4612" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="false" />
    <mutant id="mutant_5944" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="&quot;&quot;.equals(getPath())" />
    <mutant id="mutant_4611" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="true" />
    <mutant id="mutant_5945" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="(&quot;&quot;.equals(getPath())) &amp;&amp; ((getPath()) == null)" />
    <mutant id="mutant_4610" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="((f == null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_5946" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="(getPath()) == null" />
    <mutant id="mutant_5947" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="true" />
    <mutant id="mutant_5948" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;&quot;.equals(getPath())) || ((getPath()) == null)" to="false" />
    <mutant id="mutant_5949" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;file&quot;.equals(scheme)) || (URIish.LOCAL_FILE.matcher(s).matches())" to="&quot;file&quot;.equals(scheme)" />
    <mutant id="mutant_4619" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" to="true" />
    <mutant id="mutant_4618" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="false" />
    <mutant id="mutant_4617" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="true" />
    <mutant id="mutant_4616" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="dce != null" />
    <mutant id="mutant_5940" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="(getPort()) &gt; 0" />
    <mutant id="mutant_4615" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="(dce != null) || ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_5941" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="((getScheme()) != null) || ((getPort()) &gt; 0)" />
    <mutant id="mutant_4614" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f == null) || (f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_5942" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="true" />
    <mutant id="mutant_4613" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_5943" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="false" />
    <mutant id="mutant_4601" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" />
    <mutant id="mutant_5933" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="false" />
    <mutant id="mutant_4600" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="(m == null) &amp;&amp; (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" />
    <mutant id="mutant_5934" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="(getUser().length()) &gt; 0" />
    <mutant id="mutant_5935" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="true" />
    <mutant id="mutant_5936" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="false" />
    <mutant id="mutant_5937" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="(getUser()) != null" />
    <mutant id="mutant_5938" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getUser()) != null) &amp;&amp; ((getUser().length()) &gt; 0)" to="((getUser()) != null) || ((getUser().length()) &gt; 0)" />
    <mutant id="mutant_5939" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="((getScheme()) != null) &amp;&amp; ((getPort()) &gt; 0)" to="(getScheme()) != null" />
    <mutant id="mutant_4609" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f == null) || (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f == null)" />
    <mutant id="mutant_4608" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="false" />
    <mutant id="mutant_4607" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="true" />
    <mutant id="mutant_4606" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="walk.isDirectoryFileConflict()" />
    <mutant id="mutant_4605" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="m == null" />
    <mutant id="mutant_4604" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) &amp;&amp; (walk.isDirectoryFileConflict())" to="(m == null) || (walk.isDirectoryFileConflict())" />
    <mutant id="mutant_5930" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="(getPass()) != null" />
    <mutant id="mutant_4603" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="false" />
    <mutant id="mutant_5931" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="includePassword" />
    <mutant id="mutant_4602" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(m == null) || (!(isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)))" to="true" />
    <mutant id="mutant_5932" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="true" />
    <mutant id="mutant_5922" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="(escapeReservedChars || (URIish.reservedChars.get(b)))" />
    <mutant id="mutant_5923" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="escapeReservedChars" />
    <mutant id="mutant_5924" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b))" />
    <mutant id="mutant_5925" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')" />
    <mutant id="mutant_5926" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="true" />
    <mutant id="mutant_5927" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="false" />
    <mutant id="mutant_5928" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) || (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="(((b &lt;= 32) || (encodeNonAscii &amp;&amp; (b &gt; 127))) || (b == '%')) &amp;&amp; (escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" />
    <mutant id="mutant_5929" viable="true" in="org.eclipse.jgit.transport.URIish.format(boolean,boolean)" from="includePassword &amp;&amp; ((getPass()) != null)" to="includePassword || ((getPass()) != null)" />
    <mutant id="mutant_5920" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="true" />
    <mutant id="mutant_5921" viable="true" in="org.eclipse.jgit.transport.URIish.escape(java.lang.String,boolean,boolean)" from="(escapeReservedChars &amp;&amp; (URIish.reservedChars.get(b)))" to="false" />
    <mutant id="mutant_4670" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="true" />
    <mutant id="mutant_2004" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="(0 &lt;= position) || (bitset.contains(position))" />
    <mutant id="mutant_3336" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))" />
    <mutant id="mutant_4667" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="false" />
    <mutant id="mutant_5999" viable="false" in="org.eclipse.jgit.transport.UploadPack.findSymrefs(org.eclipse.jgit.transport.RefAdvertiser,java.util.Map)" from="(head != null) &amp;&amp; (head.isSymbolic())" to="head.isSymbolic()" />
    <mutant id="mutant_2005" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="true" />
    <mutant id="mutant_3335" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="((end &gt; 0) &amp;&amp; (end != (path.length()))) &amp;&amp; assumeDirectory" />
    <mutant id="mutant_4666" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="true" />
    <mutant id="mutant_2002" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="((toAdd) != null) &amp;&amp; ((toRemove) != null)" />
    <mutant id="mutant_3334" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="assumeDirectory" />
    <mutant id="mutant_4665" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="(entryPath.endsWith(&quot;/&quot;)) &amp;&amp; ((entryPath.length()) == 0)" />
    <mutant id="mutant_2003" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="0 &lt;= position" />
    <mutant id="mutant_3333" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="(end &gt; 0) &amp;&amp; (end != (path.length()))" />
    <mutant id="mutant_4664" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="(entryPath.length()) == 0" />
    <mutant id="mutant_2000" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="false" />
    <mutant id="mutant_3332" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="false" />
    <mutant id="mutant_4663" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="!(parentFile.equals(repo.getWorkTree()))" />
    <mutant id="mutant_2001" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.xor(com.googlecode.javaewah.EWAHCompressedBitmap)" from="((toAdd) != null) || ((toRemove) != null)" to="(toRemove) != null" />
    <mutant id="mutant_3331" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length()))) || assumeDirectory" to="true" />
    <mutant id="mutant_4662" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="false" />
    <mutant id="mutant_3330" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="(end != (path.length()))" />
    <mutant id="mutant_4661" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="true" />
    <mutant id="mutant_4660" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="(parentFile != null) || (!(parentFile.equals(repo.getWorkTree())))" />
    <mutant id="mutant_5991" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="(!didOkToGiveUp)" />
    <mutant id="mutant_5992" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="true" />
    <mutant id="mutant_5993" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="false" />
    <mutant id="mutant_5994" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="true" />
    <mutant id="mutant_2008" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="ii.hasNext()" />
    <mutant id="mutant_5995" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="false" />
    <mutant id="mutant_2009" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.removeAllOrNone(org.eclipse.jgit.internal.storage.file.PackBitmapIndex)" from="(ii.hasNext()) &amp;&amp; ((ii.next()) &lt; (indexObjectCount))" to="(ii.next()) &lt; (indexObjectCount)" />
    <mutant id="mutant_3339" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="false" />
    <mutant id="mutant_5996" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) || (okToGiveUp())" />
    <mutant id="mutant_2006" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="false" />
    <mutant id="mutant_3338" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="true" />
    <mutant id="mutant_4669" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="(stage &lt; 0) || (3 &lt; stage)" to="(stage &lt; 0) &amp;&amp; (3 &lt; stage)" />
    <mutant id="mutant_5997" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="okToGiveUp()" />
    <mutant id="mutant_2007" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$CompressedBitmapBuilder.contains(org.eclipse.jgit.lib.AnyObjectId)" from="(0 &lt;= position) &amp;&amp; (bitset.contains(position))" to="bitset.contains(position)" />
    <mutant id="mutant_3337" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.isSimplePathWithSegments(java.lang.String)" from="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) &amp;&amp; ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" to="(!(org.eclipse.jgit.ignore.internal.Strings.isWildCard(path))) || ((org.eclipse.jgit.ignore.internal.Strings.count(path, slash, true)) &gt; 0)" />
    <mutant id="mutant_4668" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="(entryPath.endsWith(&quot;/&quot;)) || ((entryPath.length()) == 0)" to="entryPath.endsWith(&quot;/&quot;)" />
    <mutant id="mutant_5998" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)) &amp;&amp; (okToGiveUp())" to="((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp)" />
    <mutant id="mutant_5990" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="((multiAck) == (GitProtocolConstants.MultiAck.DETAILED))" />
    <mutant id="mutant_3325" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="end != (path.length())" />
    <mutant id="mutant_4656" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="true" />
    <mutant id="mutant_5988" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="(c.getCommitTime()) &lt; (oldestTime)" />
    <mutant id="mutant_3324" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="!(beginning)" />
    <mutant id="mutant_4655" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="dce != null" />
    <mutant id="mutant_5989" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) &amp;&amp; (!didOkToGiveUp))" to="(((multiAck) == (GitProtocolConstants.MultiAck.DETAILED)) || (!didOkToGiveUp))" />
    <mutant id="mutant_3323" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="false" />
    <mutant id="mutant_4654" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="(dce != null) || ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_3322" viable="false" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="true" />
    <mutant id="mutant_4653" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="((f != null) || (f.isModified(dce, true, this.walk.getObjectReader())))" />
    <mutant id="mutant_3321" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="(!(beginning)) &amp;&amp; (end != (path.length()))" to="(!(beginning)) || (end != (path.length()))" />
    <mutant id="mutant_4652" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_3320" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="pattern.equals(other.pattern)" />
    <mutant id="mutant_4651" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f != null)" />
    <mutant id="mutant_4650" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="false" />
    <mutant id="mutant_5980" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="false" />
    <mutant id="mutant_5981" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="wantAll.isEmpty()" />
    <mutant id="mutant_5982" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="(wantAll.isEmpty()) || (!(wantIds.isEmpty()))" />
    <mutant id="mutant_5983" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="!(wantIds.isEmpty())" />
    <mutant id="mutant_3329" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="false" />
    <mutant id="mutant_5984" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="(oldestTime) == 0" />
    <mutant id="mutant_3328" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="true" />
    <mutant id="mutant_4659" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.removeEmptyParents(java.io.File)" from="(parentFile != null) &amp;&amp; (!(parentFile.equals(repo.getWorkTree())))" to="parentFile != null" />
    <mutant id="mutant_5985" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="((oldestTime) == 0) &amp;&amp; ((c.getCommitTime()) &lt; (oldestTime))" />
    <mutant id="mutant_3327" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="(end &gt; 0)" />
    <mutant id="mutant_4658" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="(f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader()))" />
    <mutant id="mutant_5986" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="true" />
    <mutant id="mutant_3326" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,boolean)" from="((end &gt; 0) &amp;&amp; (end != (path.length())))" to="((end &gt; 0) || (end != (path.length())))" />
    <mutant id="mutant_4657" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; ((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="false" />
    <mutant id="mutant_5987" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((oldestTime) == 0) || ((c.getCommitTime()) &lt; (oldestTime))" to="false" />
    <mutant id="mutant_305" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="((this.beginA) == (e.beginA))" />
    <mutant id="mutant_306" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="true" />
    <mutant id="mutant_307" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="false" />
    <mutant id="mutant_308" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="(((this.beginA) == (e.beginA)) || ((this.endA) == (e.endA)))" />
    <mutant id="mutant_301" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="true" />
    <mutant id="mutant_302" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="false" />
    <mutant id="mutant_303" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="on" />
    <mutant id="mutant_304" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="(renameDetector) == null" />
    <mutant id="mutant_309" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" to="((this.endA) == (e.endA))" />
    <mutant id="mutant_3314" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="true" />
    <mutant id="mutant_4645" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="dce != null" />
    <mutant id="mutant_5977" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="true" />
    <mutant id="mutant_3313" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="(fmt == (StoredObjectRepresentation.PACK_DELTA)) &amp;&amp; (fmt == (StoredObjectRepresentation.PACK_WHOLE))" />
    <mutant id="mutant_4644" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="FileMode.GITLINK.equals(dce.getFileMode())" />
    <mutant id="mutant_5978" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="false" />
    <mutant id="mutant_3312" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="fmt == (StoredObjectRepresentation.PACK_DELTA)" />
    <mutant id="mutant_4643" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))" />
    <mutant id="mutant_5979" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(wantAll.isEmpty()) &amp;&amp; (!(wantIds.isEmpty()))" to="true" />
    <mutant id="mutant_3311" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="fmt == (StoredObjectRepresentation.PACK_WHOLE)" />
    <mutant id="mutant_4642" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)" />
    <mutant id="mutant_3310" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="ro instanceof org.eclipse.jgit.revwalk.RevCommit" />
    <mutant id="mutant_4641" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="false" />
    <mutant id="mutant_4640" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="true" />
    <mutant id="mutant_5970" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="true" />
    <mutant id="mutant_5971" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="false" />
    <mutant id="mutant_300" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.setDetectRenames(boolean)" from="on &amp;&amp; ((renameDetector) == null)" to="on || ((renameDetector) == null)" />
    <mutant id="mutant_3319" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="((dirOnly) == (other.dirOnly)) || (pattern.equals(other.pattern))" />
    <mutant id="mutant_5972" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="noDone" />
    <mutant id="mutant_3318" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="false" />
    <mutant id="mutant_4649" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (f.isModified(dce, true, this.walk.getObjectReader())))" to="true" />
    <mutant id="mutant_5973" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="sentReady" />
    <mutant id="mutant_3317" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="true" />
    <mutant id="mutant_4648" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="(dce != null) || (FileMode.GITLINK.equals(dce.getFileMode()))" />
    <mutant id="mutant_5974" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="line.startsWith(&quot;have &quot;)" />
    <mutant id="mutant_3316" viable="true" in="org.eclipse.jgit.ignore.internal.AbstractMatcher.equals(java.lang.Object)" from="((dirOnly) == (other.dirOnly)) &amp;&amp; (pattern.equals(other.pattern))" to="(dirOnly) == (other.dirOnly)" />
    <mutant id="mutant_4647" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="false" />
    <mutant id="mutant_5975" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="(line.startsWith(&quot;have &quot;)) || ((line.length()) == 45)" />
    <mutant id="mutant_3315" viable="true" in="org.eclipse.jgit.internal.storage.pack.StoredObjectRepresentation.wasDeltaAttempted()" from="(fmt == (StoredObjectRepresentation.PACK_DELTA)) || (fmt == (StoredObjectRepresentation.PACK_WHOLE))" to="false" />
    <mutant id="mutant_4646" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dce != null) &amp;&amp; (FileMode.GITLINK.equals(dce.getFileMode()))" to="true" />
    <mutant id="mutant_5976" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(line.startsWith(&quot;have &quot;)) &amp;&amp; ((line.length()) == 45)" to="(line.length()) == 45" />
    <mutant id="mutant_316" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="(this.endB) == (e.endB)" />
    <mutant id="mutant_317" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="true" />
    <mutant id="mutant_318" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="false" />
    <mutant id="mutant_319" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) || ((this.endB) == (e.endB))" />
    <mutant id="mutant_312" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="true" />
    <mutant id="mutant_313" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="false" />
    <mutant id="mutant_314" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) || ((this.beginB) == (e.beginB)))" />
    <mutant id="mutant_315" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))) &amp;&amp; ((this.endB) == (e.endB))" to="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB))" />
    <mutant id="mutant_3303" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="true" />
    <mutant id="mutant_4634" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="(!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))" />
    <mutant id="mutant_5966" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="false" />
    <mutant id="mutant_3302" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="!mustPick" />
    <mutant id="mutant_4633" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))" />
    <mutant id="mutant_5967" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="(commonBase.isEmpty()) &amp;&amp; ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" />
    <mutant id="mutant_3301" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="(!mustPick) || ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" />
    <mutant id="mutant_4632" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="false" />
    <mutant id="mutant_5968" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="commonBase.isEmpty()" />
    <mutant id="mutant_3300" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="(nextIn &gt; 0)" />
    <mutant id="mutant_4631" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="true" />
    <mutant id="mutant_5969" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(noDone) &amp;&amp; (sentReady)" to="(noDone) || (sentReady)" />
    <mutant id="mutant_4630" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree)))" to="(!(equalIdAndMode(hId, hMode, mId, mMode)))" />
    <mutant id="mutant_310" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="(((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA)))" />
    <mutant id="mutant_3309" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="false" />
    <mutant id="mutant_5960" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="(!(biDirectionalPipe)) || ((depth) &gt; 0)" />
    <mutant id="mutant_311" viable="true" in="org.eclipse.jgit.diff.Edit.equals(java.lang.Object)" from="((((this.beginA) == (e.beginA)) &amp;&amp; ((this.endA) == (e.endA))) &amp;&amp; ((this.beginB) == (e.beginB)))" to="((this.beginB) == (e.beginB))" />
    <mutant id="mutant_3308" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="true" />
    <mutant id="mutant_4639" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="(!(isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) || (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" />
    <mutant id="mutant_5961" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="!(biDirectionalPipe)" />
    <mutant id="mutant_3307" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) || (!(reuseBitmap.contains(ro)))" />
    <mutant id="mutant_4638" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree)" />
    <mutant id="mutant_5962" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="true" />
    <mutant id="mutant_3306" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(ro instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (!(reuseBitmap.contains(ro)))" to="!(reuseBitmap.contains(ro))" />
    <mutant id="mutant_4637" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="false" />
    <mutant id="mutant_5963" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(!(biDirectionalPipe)) &amp;&amp; ((depth) &gt; 0)" to="false" />
    <mutant id="mutant_3305" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="(nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits))))" />
    <mutant id="mutant_4636" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="true" />
    <mutant id="mutant_5964" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="(multiAck) != (GitProtocolConstants.MultiAck.OFF)" />
    <mutant id="mutant_3304" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(!mustPick) &amp;&amp; ((nextIn &gt; 0) || (((c.getParentCount()) &lt;= 1) &amp;&amp; (nextIn &gt; (-(minCommits)))))" to="false" />
    <mutant id="mutant_4635" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" to="((!(equalIdAndMode(hId, hMode, mId, mMode))) &amp;&amp; (isModified_IndexTree(name, iId, iMode, hId, hMode, headCommitTree))) || (isModified_IndexTree(name, iId, iMode, mId, mMode, mergeCommitTree))" />
    <mutant id="mutant_5965" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(commonBase.isEmpty()) || ((multiAck) != (GitProtocolConstants.MultiAck.OFF))" to="true" />
    <mutant id="mutant_206" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="(combineB(edits, end))" />
    <mutant id="mutant_207" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="true" />
    <mutant id="mutant_208" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="false" />
    <mutant id="mutant_209" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="(combineA(edits, end))" />
    <mutant id="mutant_202" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="true" />
    <mutant id="mutant_203" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="false" />
    <mutant id="mutant_204" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) &amp;&amp; ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" />
    <mutant id="mutant_205" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="((combineA(edits, end)) || (combineB(edits, end)))" to="((combineA(edits, end)) &amp;&amp; (combineB(edits, end)))" />
    <mutant id="mutant_3141" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="!putTagTargets" />
    <mutant id="mutant_4472" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="(dcIt == null) &amp;&amp; (treeIt == null)" />
    <mutant id="mutant_3140" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="(!putTagTargets) || (4096 &lt; commitCnt)" />
    <mutant id="mutant_4471" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="false" />
    <mutant id="mutant_4470" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="true" />
    <mutant id="mutant_3138" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="true" />
    <mutant id="mutant_4469" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="dcIt == null" />
    <mutant id="mutant_3137" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="4096 &lt; commitCnt" />
    <mutant id="mutant_4468" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last))" />
    <mutant id="mutant_3136" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="false" />
    <mutant id="mutant_4467" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="false" />
    <mutant id="mutant_3135" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="true" />
    <mutant id="mutant_4466" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="true" />
    <mutant id="mutant_3134" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) || (!(exclude(p)))" />
    <mutant id="mutant_4465" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="(last != null) || (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" />
    <mutant id="mutant_3133" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="(!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_4464" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(last != null) &amp;&amp; (!(org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(r, last)))" to="last != null" />
    <mutant id="mutant_3132" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(exclude(p)))" to="!(exclude(p))" />
    <mutant id="mutant_4463" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="repo.getFS().exists(file)" />
    <mutant id="mutant_3131" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_4462" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="!(file.delete())" />
    <mutant id="mutant_5793" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="!(getSchemes().contains(uri.getScheme()))" />
    <mutant id="mutant_5794" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="!(getSchemes().isEmpty())" />
    <mutant id="mutant_200" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)" />
    <mutant id="mutant_5795" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="(uri.getUser().length()) == 0" />
    <mutant id="mutant_201" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isRename(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getChangeType()) == (DiffEntry.ChangeType.RENAME)) || ((ent.getChangeType()) == (DiffEntry.ChangeType.COPY))" to="(ent.getChangeType()) == (DiffEntry.ChangeType.COPY)" />
    <mutant id="mutant_5796" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="(uri.getUser()) == null" />
    <mutant id="mutant_5797" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="((uri.getUser()) == null) &amp;&amp; ((uri.getUser().length()) == 0)" />
    <mutant id="mutant_5798" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="true" />
    <mutant id="mutant_5799" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) == null) || ((uri.getUser().length()) == 0)" to="false" />
    <mutant id="mutant_3139" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!putTagTargets) &amp;&amp; (4096 &lt; commitCnt)" to="false" />
    <mutant id="mutant_217" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="true" />
    <mutant id="mutant_218" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="false" />
    <mutant id="mutant_219" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="id.isComplete()" />
    <mutant id="mutant_213" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="true" />
    <mutant id="mutant_214" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="false" />
    <mutant id="mutant_5790" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="(!(getSchemes().isEmpty())) || (!(getSchemes().contains(uri.getScheme())))" />
    <mutant id="mutant_215" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="(id.isComplete()) || ((db) != null)" />
    <mutant id="mutant_5791" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="true" />
    <mutant id="mutant_216" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(id.isComplete()) &amp;&amp; ((db) != null)" to="(db) != null" />
    <mutant id="mutant_5792" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(!(getSchemes().isEmpty())) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" to="false" />
    <mutant id="mutant_3130" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="false" />
    <mutant id="mutant_4461" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="(!(file.delete())) || (repo.getFS().exists(file))" />
    <mutant id="mutant_4460" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="false" />
    <mutant id="mutant_3127" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!(p.has(added)))" />
    <mutant id="mutant_4458" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="dc == null" />
    <mutant id="mutant_3126" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="have.contains(e.getObjectId())" />
    <mutant id="mutant_4457" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="(dc.getEntryCount()) == 0" />
    <mutant id="mutant_3125" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="false" />
    <mutant id="mutant_4456" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="(dc == null) &amp;&amp; ((dc.getEntryCount()) == 0)" />
    <mutant id="mutant_3124" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="true" />
    <mutant id="mutant_4455" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="false" />
    <mutant id="mutant_3123" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="(ignoreMissingUninteresting) || (have.contains(e.getObjectId()))" />
    <mutant id="mutant_4454" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(dc == null) || ((dc.getEntryCount()) == 0)" to="true" />
    <mutant id="mutant_3122" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(ignoreMissingUninteresting) &amp;&amp; (have.contains(e.getObjectId()))" to="ignoreMissingUninteresting" />
    <mutant id="mutant_4453" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="ceStage == 0" />
    <mutant id="mutant_3121" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="!(shallowPack)" />
    <mutant id="mutant_4452" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="false" />
    <mutant id="mutant_3120" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="false" />
    <mutant id="mutant_4451" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="true" />
    <mutant id="mutant_5782" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openFetch()" from="(!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up)))" to="!(&quot;git-upload-pack&quot;.equals(up))" />
    <mutant id="mutant_210" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="(combineA(edits, end)) || (combineB(edits, end))" />
    <mutant id="mutant_5783" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openFetch()" from="(!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up)))" to="(!(&quot;git-upload-pack&quot;.equals(up))) || (!(&quot;git upload-pack&quot;.equals(up)))" />
    <mutant id="mutant_211" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="end &lt; (edits.size())" />
    <mutant id="mutant_5784" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openFetch()" from="(!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up)))" to="true" />
    <mutant id="mutant_212" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="(end &lt; (edits.size())) &amp;&amp; ((combineA(edits, end)) || (combineB(edits, end)))" to="(end &lt; (edits.size())) || ((combineA(edits, end)) || (combineB(edits, end)))" />
    <mutant id="mutant_5785" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openFetch()" from="(!(&quot;git-upload-pack&quot;.equals(up))) &amp;&amp; (!(&quot;git upload-pack&quot;.equals(up)))" to="false" />
    <mutant id="mutant_5786" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openPush()" from="(!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp)))" to="!(&quot;git-receive-pack&quot;.equals(rp))" />
    <mutant id="mutant_5787" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openPush()" from="(!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp)))" to="true" />
    <mutant id="mutant_3129" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="true" />
    <mutant id="mutant_5788" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openPush()" from="(!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp)))" to="false" />
    <mutant id="mutant_3128" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((!(p.has(added))) &amp;&amp; (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="((!(p.has(added))) || (!(p.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" />
    <mutant id="mutant_4459" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(!(file.delete())) &amp;&amp; (repo.getFS().exists(file))" to="true" />
    <mutant id="mutant_5789" viable="true" in="org.eclipse.jgit.transport.TransportLocal.openPush()" from="(!(&quot;git-receive-pack&quot;.equals(rp))) &amp;&amp; (!(&quot;git receive-pack&quot;.equals(rp)))" to="(!(&quot;git-receive-pack&quot;.equals(rp))) || (!(&quot;git receive-pack&quot;.equals(rp)))" />
    <mutant id="mutant_228" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="ent.getNewPath().equals(oldPath)" />
    <mutant id="mutant_229" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="org.eclipse.jgit.diff.DiffFormatter.isRename(ent)" />
    <mutant id="mutant_224" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="(pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter" />
    <mutant id="mutant_225" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) || (ent.getNewPath().equals(oldPath))" />
    <mutant id="mutant_226" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="true" />
    <mutant id="mutant_5780" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="true" />
    <mutant id="mutant_227" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.updateFollowFilter(java.util.List)" from="(org.eclipse.jgit.diff.DiffFormatter.isRename(ent)) &amp;&amp; (ent.getNewPath().equals(oldPath))" to="false" />
    <mutant id="mutant_5781" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="false" />
    <mutant id="mutant_4450" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="peStage == 0" />
    <mutant id="mutant_3116" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())" />
    <mutant id="mutant_4447" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="dceStage == 0" />
    <mutant id="mutant_5779" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)" />
    <mutant id="mutant_3115" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks) == null) || ((excludeInPacks.length) == 0)" />
    <mutant id="mutant_4446" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="false" />
    <mutant id="mutant_3114" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="false" />
    <mutant id="mutant_4445" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="true" />
    <mutant id="mutant_3113" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="true" />
    <mutant id="mutant_4444" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="peStage == 0" />
    <mutant id="mutant_3112" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty())) || (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" />
    <mutant id="mutant_4443" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="(sorted) || ((entryCnt) &gt; 0)" />
    <mutant id="mutant_3111" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks.length) == 0)" />
    <mutant id="mutant_4442" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="(entryCnt) &gt; 0" />
    <mutant id="mutant_3110" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks) == null)" />
    <mutant id="mutant_4441" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="false" />
    <mutant id="mutant_4440" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="true" />
    <mutant id="mutant_220" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) || (isAdd(files))" />
    <mutant id="mutant_5771" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) &amp;&amp; ((uri.getHost()) != null))" />
    <mutant id="mutant_221" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="true" />
    <mutant id="mutant_5772" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((uri.getScheme()) != null)" />
    <mutant id="mutant_222" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="false" />
    <mutant id="mutant_5773" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(((uri.getScheme()) != null) || (!(getSchemes().contains(uri.getScheme()))))" />
    <mutant id="mutant_223" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.scan(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathFilter) instanceof org.eclipse.jgit.revwalk.FollowFilter) &amp;&amp; (isAdd(files))" to="isAdd(files)" />
    <mutant id="mutant_5774" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="true" />
    <mutant id="mutant_5775" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="false" />
    <mutant id="mutant_3119" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="true" />
    <mutant id="mutant_5776" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="(!(getSchemes().contains(uri.getScheme())))" />
    <mutant id="mutant_3118" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="useBitmaps" />
    <mutant id="mutant_4449" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(peStage == 0) || (ceStage == 0)" to="(peStage == 0) &amp;&amp; (ceStage == 0)" />
    <mutant id="mutant_5777" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) &amp;&amp; (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" />
    <mutant id="mutant_3117" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(!(shallowPack)) &amp;&amp; (useBitmaps)" to="(!(shallowPack)) || (useBitmaps)" />
    <mutant id="mutant_4448" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(peStage == 0) || (dceStage == 0)" to="(peStage == 0) &amp;&amp; (dceStage == 0)" />
    <mutant id="mutant_5778" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null)) || (((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme()))))" to="((uri.getScheme()) != null) &amp;&amp; (!(getSchemes().contains(uri.getScheme())))" />
    <mutant id="mutant_239" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="(ent.getOldId()) == null" />
    <mutant id="mutant_235" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="(ent.getNewId()) == null" />
    <mutant id="mutant_236" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="true" />
    <mutant id="mutant_237" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="false" />
    <mutant id="mutant_238" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) == null) || ((ent.getNewId()) == null)" to="((ent.getOldId()) == null) &amp;&amp; ((ent.getNewId()) == null)" />
    <mutant id="mutant_5770" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="false" />
    <mutant id="mutant_3105" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="(have.isEmpty())" />
    <mutant id="mutant_4436" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="(entryCnt) &gt; 0" />
    <mutant id="mutant_5768" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="((uri.getHost()) != null)" />
    <mutant id="mutant_3104" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="false" />
    <mutant id="mutant_4435" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="(repository) != null" />
    <mutant id="mutant_5769" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="true" />
    <mutant id="mutant_3103" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="true" />
    <mutant id="mutant_4434" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="((repository) != null) || ((entryCnt) &gt; 0)" />
    <mutant id="mutant_3102" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) || (have.isEmpty()))" />
    <mutant id="mutant_4433" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="(entry.isSmudged()) || (iIter.idEqual(fIter))" />
    <mutant id="mutant_3101" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="(!(shallowPack))" />
    <mutant id="mutant_4432" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="entry.isSmudged()" />
    <mutant id="mutant_3100" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" to="((config.isBuildBitmaps()) || (!(shallowPack)))" />
    <mutant id="mutant_4431" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="false" />
    <mutant id="mutant_4430" viable="true" in="org.eclipse.jgit.dircache.DirCache.updateSmudgedEntries()" from="(entry.isSmudged()) &amp;&amp; (iIter.idEqual(fIter))" to="true" />
    <mutant id="mutant_231" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="false" />
    <mutant id="mutant_5760" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="false" />
    <mutant id="mutant_232" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="((ent.getOldMode()) == (FileMode.GITLINK)) &amp;&amp; ((ent.getNewMode()) == (FileMode.GITLINK))" />
    <mutant id="mutant_5761" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" to="((uri.getUser()) != null)" />
    <mutant id="mutant_233" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="(ent.getOldMode()) == (FileMode.GITLINK)" />
    <mutant id="mutant_5762" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) &amp;&amp; ((uri.getPass()) != null))" />
    <mutant id="mutant_234" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="(ent.getNewMode()) == (FileMode.GITLINK)" />
    <mutant id="mutant_5763" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="((uri.getPass()) != null)" />
    <mutant id="mutant_3109" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="false" />
    <mutant id="mutant_5764" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="true" />
    <mutant id="mutant_3108" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="true" />
    <mutant id="mutant_4439" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(sorted) &amp;&amp; ((entryCnt) &gt; 0)" to="sorted" />
    <mutant id="mutant_5765" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="false" />
    <mutant id="mutant_3107" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(((excludeInPacks) == null) &amp;&amp; ((excludeInPacks.length) == 0))" />
    <mutant id="mutant_4438" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="false" />
    <mutant id="mutant_5766" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" to="((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null))" />
    <mutant id="mutant_230" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldMode()) == (FileMode.GITLINK)) || ((ent.getNewMode()) == (FileMode.GITLINK))" to="true" />
    <mutant id="mutant_3106" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack))) &amp;&amp; (have.isEmpty()))" to="((config.isBuildBitmaps()) &amp;&amp; (!(shallowPack)))" />
    <mutant id="mutant_4437" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((repository) != null) &amp;&amp; ((entryCnt) &gt; 0)" to="true" />
    <mutant id="mutant_5767" viable="true" in="org.eclipse.jgit.transport.TransportLocal$1.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null)) || ((uri.getHost()) != null))" to="(((((uri.getPath()) == null) || ((uri.getPort()) &gt; 0)) || ((uri.getUser()) != null)) || ((uri.getPass()) != null))" />
    <mutant id="mutant_246" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="true" />
    <mutant id="mutant_247" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="false" />
    <mutant id="mutant_248" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" />
    <mutant id="mutant_249" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) &amp;&amp; (RawText.isBinary(aRaw)))" />
    <mutant id="mutant_3185" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="shallowPack" />
    <mutant id="mutant_3184" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="false" />
    <mutant id="mutant_3183" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="true" />
    <mutant id="mutant_3182" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="(shallowPack) || (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" />
    <mutant id="mutant_3181" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks) == null) || ((excludeInPacks.length) == 0)" />
    <mutant id="mutant_3180" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="false" />
    <mutant id="mutant_3179" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="true" />
    <mutant id="mutant_3178" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) || (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" />
    <mutant id="mutant_3177" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))) &amp;&amp; (((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate))" />
    <mutant id="mutant_3176" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks.length) == 0)" />
    <mutant id="mutant_3175" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="((excludeInPacks) == null)" />
    <mutant id="mutant_242" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="false" />
    <mutant id="mutant_243" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="((aRaw == (DiffFormatter.BINARY)) &amp;&amp; (bRaw == (DiffFormatter.BINARY)))" />
    <mutant id="mutant_244" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="(bRaw == (DiffFormatter.BINARY))" />
    <mutant id="mutant_245" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw)))" to="(RawText.isBinary(aRaw))" />
    <mutant id="mutant_240" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="(aRaw == (DiffFormatter.BINARY))" />
    <mutant id="mutant_241" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY)))" to="true" />
    <mutant id="mutant_257" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="false" />
    <mutant id="mutant_258" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator" />
    <mutant id="mutant_259" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="a instanceof org.eclipse.jgit.dircache.DirCacheIterator" />
    <mutant id="mutant_3174" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="false" />
    <mutant id="mutant_3173" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="true" />
    <mutant id="mutant_3172" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((excludeInPacks) == null) || ((excludeInPacks.length) == 0))" to="(((excludeInPacks) == null) &amp;&amp; ((excludeInPacks.length) == 0))" />
    <mutant id="mutant_3171" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="(!(reuseValidate))" />
    <mutant id="mutant_3170" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) || (!(reuseValidate)))" />
    <mutant id="mutant_3169" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" />
    <mutant id="mutant_3168" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="false" />
    <mutant id="mutant_4499" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="(h != null) || (!(FileMode.TREE.equals(h.getEntryFileMode())))" />
    <mutant id="mutant_3167" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="(((useCachedPacks) &amp;&amp; ((reuseSupport) != null)) &amp;&amp; (!(reuseValidate)))" to="true" />
    <mutant id="mutant_4498" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="fs.supportsExecute()" />
    <mutant id="mutant_3166" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="false" />
    <mutant id="mutant_4497" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="false" />
    <mutant id="mutant_3165" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="true" />
    <mutant id="mutant_4496" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="true" />
    <mutant id="mutant_3164" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="((reuseSupport) != null)" />
    <mutant id="mutant_4495" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="opt.isFileMode()" />
    <mutant id="mutant_253" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="false" />
    <mutant id="mutant_254" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="RawText.isBinary(bRaw)" />
    <mutant id="mutant_255" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) || (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" />
    <mutant id="mutant_256" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.dircache.DirCacheIterator) &amp;&amp; (b instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator)" to="true" />
    <mutant id="mutant_250" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) &amp;&amp; (RawText.isBinary(bRaw))" />
    <mutant id="mutant_251" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))" />
    <mutant id="mutant_252" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.createFormatResult(org.eclipse.jgit.diff.DiffEntry)" from="(((aRaw == (DiffFormatter.BINARY)) || (bRaw == (DiffFormatter.BINARY))) || (RawText.isBinary(aRaw))) || (RawText.isBinary(bRaw))" to="true" />
    <mutant id="mutant_268" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="false" />
    <mutant id="mutant_269" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="(aCur &lt; aEnd) &amp;&amp; (bCur &lt; bEnd)" />
    <mutant id="mutant_3163" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="((useCachedPacks) || ((reuseSupport) != null))" />
    <mutant id="mutant_4494" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(opt.isFileMode()) &amp;&amp; (fs.supportsExecute())" to="(opt.isFileMode()) || (fs.supportsExecute())" />
    <mutant id="mutant_3162" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPackUsingBitmaps(org.eclipse.jgit.internal.storage.pack.PackWriterBitmapWalker,java.util.Set,java.util.Set)" from="((useCachedPacks) &amp;&amp; ((reuseSupport) != null))" to="(useCachedPacks)" />
    <mutant id="mutant_4493" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="(entry.getFileMode()) == (FileMode.SYMLINK)" />
    <mutant id="mutant_3161" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="!(baseTrees.isEmpty())" />
    <mutant id="mutant_4492" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="((entry.getFileMode()) == (FileMode.SYMLINK)) || ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" />
    <mutant id="mutant_3160" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="false" />
    <mutant id="mutant_4491" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="false" />
    <mutant id="mutant_4490" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="true" />
    <mutant id="mutant_3159" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="true" />
    <mutant id="mutant_3158" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="(thin) || (!(baseTrees.isEmpty()))" />
    <mutant id="mutant_4489" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="((entry.getFileMode()) == (FileMode.SYMLINK)) &amp;&amp; ((opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE))" to="(opt.getSymLinks()) == (CoreConfig.SymLinks.TRUE)" />
    <mutant id="mutant_3157" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(thin) &amp;&amp; (!(baseTrees.isEmpty()))" to="thin" />
    <mutant id="mutant_4488" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="FileMode.TREE.equals(iMode)" />
    <mutant id="mutant_3156" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_4487" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="false" />
    <mutant id="mutant_3155" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) || (!(obj.has(added)))" />
    <mutant id="mutant_4486" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="true" />
    <mutant id="mutant_3154" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="false" />
    <mutant id="mutant_4485" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="(iId == null) || (ObjectId.zeroId().equals(iId))" />
    <mutant id="mutant_3153" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="true" />
    <mutant id="mutant_4484" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="(FileMode.TREE.equals(iMode)) &amp;&amp; ((iId == null) || (ObjectId.zeroId().equals(iId)))" to="(FileMode.TREE.equals(iMode)) || ((iId == null) || (ObjectId.zeroId().equals(iId)))" />
    <mutant id="mutant_264" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="false" />
    <mutant id="mutant_265" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="aCur &lt; aEnd" />
    <mutant id="mutant_266" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="bCur &lt; bEnd" />
    <mutant id="mutant_267" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; aEnd) || (bCur &lt; bEnd)" to="true" />
    <mutant id="mutant_260" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator" />
    <mutant id="mutant_261" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="b instanceof org.eclipse.jgit.dircache.DirCacheIterator" />
    <mutant id="mutant_262" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) || (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" />
    <mutant id="mutant_263" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.getDiffTreeFilterFor(org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(a instanceof org.eclipse.jgit.treewalk.WorkingTreeIterator) &amp;&amp; (b instanceof org.eclipse.jgit.dircache.DirCacheIterator)" to="true" />
    <mutant id="mutant_279" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)" />
    <mutant id="mutant_3152" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))) &amp;&amp; (!(obj.has(added)))" to="!(obj.has(added))" />
    <mutant id="mutant_4483" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="((iId == null) &amp;&amp; (ObjectId.zeroId().equals(iId)))" />
    <mutant id="mutant_3151" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING)))" />
    <mutant id="mutant_4482" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="(ObjectId.zeroId().equals(iId))" />
    <mutant id="mutant_3150" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" />
    <mutant id="mutant_4481" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="(iId == null)" />
    <mutant id="mutant_4480" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="false" />
    <mutant id="mutant_3149" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="false" />
    <mutant id="mutant_3148" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="true" />
    <mutant id="mutant_4479" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModified_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.FileMode,org.eclipse.jgit.lib.ObjectId)" from="((iId == null) || (ObjectId.zeroId().equals(iId)))" to="true" />
    <mutant id="mutant_3147" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) &amp;&amp; (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" to="(((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include))) || (!(obj.has(org.eclipse.jgit.revwalk.RevFlag.UNINTERESTING))))" />
    <mutant id="mutant_4478" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="(dcIt == null) &amp;&amp; (wtIt == null)" />
    <mutant id="mutant_270" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="aCur &lt; (curEdit.getBeginA())" />
    <mutant id="mutant_3146" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="false" />
    <mutant id="mutant_4477" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="false" />
    <mutant id="mutant_3145" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="true" />
    <mutant id="mutant_4476" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="true" />
    <mutant id="mutant_3144" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) || (obj.has(include)))" />
    <mutant id="mutant_4475" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="wtIt == null" />
    <mutant id="mutant_3143" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="(obj.has(include))" />
    <mutant id="mutant_4474" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexWorkingtree(java.lang.String)" from="(dcIt == null) || (wtIt == null)" to="dcIt == null" />
    <mutant id="mutant_3142" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((obj instanceof org.eclipse.jgit.revwalk.RevCommit) &amp;&amp; (obj.has(include)))" to="(obj instanceof org.eclipse.jgit.revwalk.RevCommit)" />
    <mutant id="mutant_4473" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isModifiedSubtree_IndexTree(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="(dcIt == null) || (treeIt == null)" to="treeIt == null" />
    <mutant id="mutant_275" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) || ((++curIdx) &lt; (edits.size()))" />
    <mutant id="mutant_276" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="true" />
    <mutant id="mutant_277" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="false" />
    <mutant id="mutant_278" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(org.eclipse.jgit.diff.DiffFormatter.end(curEdit, aCur, bCur)) &amp;&amp; ((++curIdx) &lt; (edits.size()))" to="(++curIdx) &lt; (edits.size())" />
    <mutant id="mutant_271" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="true" />
    <mutant id="mutant_272" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="false" />
    <mutant id="mutant_273" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="(endIdx + 1) &lt; curIdx" />
    <mutant id="mutant_274" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(aCur &lt; (curEdit.getBeginA())) || ((endIdx + 1) &lt; curIdx)" to="(aCur &lt; (curEdit.getBeginA())) &amp;&amp; ((endIdx + 1) &lt; curIdx)" />
    <mutant id="mutant_280" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="(type == (DiffEntry.ChangeType.MODIFY))" />
    <mutant id="mutant_281" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="true" />
    <mutant id="mutant_286" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="true" />
    <mutant id="mutant_287" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="false" />
    <mutant id="mutant_288" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="(type == (DiffEntry.ChangeType.RENAME))" />
    <mutant id="mutant_289" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" />
    <mutant id="mutant_282" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="false" />
    <mutant id="mutant_283" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="(type == (DiffEntry.ChangeType.COPY))" />
    <mutant id="mutant_284" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY)))" to="((type == (DiffEntry.ChangeType.MODIFY)) &amp;&amp; (type == (DiffEntry.ChangeType.COPY)))" />
    <mutant id="mutant_285" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME)))" to="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) &amp;&amp; (type == (DiffEntry.ChangeType.RENAME)))" />
    <mutant id="mutant_290" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))" />
    <mutant id="mutant_291" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="!(oldMode.equals(newMode))" />
    <mutant id="mutant_292" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="true" />
    <mutant id="mutant_297" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="true" />
    <mutant id="mutant_298" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="false" />
    <mutant id="mutant_299" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="!(ent.getOldId().equals(ent.getNewId()))" />
    <mutant id="mutant_293" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="false" />
    <mutant id="mutant_294" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) &amp;&amp; (!(oldMode.equals(newMode)))" to="(((type == (DiffEntry.ChangeType.MODIFY)) || (type == (DiffEntry.ChangeType.COPY))) || (type == (DiffEntry.ChangeType.RENAME))) || (!(oldMode.equals(newMode)))" />
    <mutant id="mutant_295" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="(ent.getOldId()) != null" />
    <mutant id="mutant_296" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((ent.getOldId()) != null) &amp;&amp; (!(ent.getOldId().equals(ent.getNewId())))" to="((ent.getOldId()) != null) || (!(ent.getOldId().equals(ent.getNewId())))" />
    <mutant id="mutant_3199" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="false" />
    <mutant id="mutant_3198" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="true" />
    <mutant id="mutant_3197" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="(DeltaIndex.BLKSZ) &lt; sz" />
    <mutant id="mutant_3196" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="otp != null" />
    <mutant id="mutant_3195" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="false" />
    <mutant id="mutant_3194" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="true" />
    <mutant id="mutant_3193" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="otp.isEdge()" />
    <mutant id="mutant_3192" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="(otp != null) || (otp.isEdge())" />
    <mutant id="mutant_3191" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="otp != null" />
    <mutant id="mutant_3190" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="false" />
    <mutant id="mutant_3189" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="true" />
    <mutant id="mutant_3188" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="otp.isEdge()" />
    <mutant id="mutant_3187" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(otp != null) &amp;&amp; (otp.isEdge())" to="(otp != null) || (otp.isEdge())" />
    <mutant id="mutant_3186" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.preparePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(shallowPack) &amp;&amp; (!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk))" to="!(walk instanceof org.eclipse.jgit.revwalk.DepthWalk.ObjectWalk)" />
    <mutant id="mutant_4502" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="false" />
    <mutant id="mutant_5834" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="((uri.getPort()) &gt; 0) || (!(canHave.contains(TransportProtocol.URIishField.PORT)))" />
    <mutant id="mutant_4501" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="true" />
    <mutant id="mutant_5835" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="(uri.getPath()) != null" />
    <mutant id="mutant_4500" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="h != null" />
    <mutant id="mutant_5836" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="true" />
    <mutant id="mutant_5837" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="false" />
    <mutant id="mutant_5838" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="!(canHave.contains(TransportProtocol.URIishField.PATH))" />
    <mutant id="mutant_5839" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PATH)))" to="((uri.getPath()) != null) || (!(canHave.contains(TransportProtocol.URIishField.PATH)))" />
    <mutant id="mutant_4509" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="true" />
    <mutant id="mutant_4508" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="m != null" />
    <mutant id="mutant_4507" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="!(FileMode.TREE.equals(m.getEntryFileMode()))" />
    <mutant id="mutant_4506" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="false" />
    <mutant id="mutant_5830" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="!(canHave.contains(TransportProtocol.URIishField.PORT))" />
    <mutant id="mutant_4505" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="true" />
    <mutant id="mutant_5831" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="(uri.getPort()) &gt; 0" />
    <mutant id="mutant_4504" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(m != null) &amp;&amp; (!(FileMode.TREE.equals(m.getEntryFileMode())))" to="(m != null) || (!(FileMode.TREE.equals(m.getEntryFileMode())))" />
    <mutant id="mutant_5832" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="true" />
    <mutant id="mutant_4503" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.conflict(java.lang.String,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.treewalk.AbstractTreeIterator,org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(h != null) &amp;&amp; (!(FileMode.TREE.equals(h.getEntryFileMode())))" to="!(FileMode.TREE.equals(h.getEntryFileMode()))" />
    <mutant id="mutant_5833" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPort()) &gt; 0) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PORT)))" to="false" />
    <mutant id="mutant_5823" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="false" />
    <mutant id="mutant_5824" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="((uri.getPass()) != null) || (!(canHave.contains(TransportProtocol.URIishField.PASS)))" />
    <mutant id="mutant_5825" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="(uri.getHost()) != null" />
    <mutant id="mutant_5826" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="true" />
    <mutant id="mutant_5827" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="false" />
    <mutant id="mutant_5828" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="!(canHave.contains(TransportProtocol.URIishField.HOST))" />
    <mutant id="mutant_5829" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.HOST)))" to="((uri.getHost()) != null) || (!(canHave.contains(TransportProtocol.URIishField.HOST)))" />
    <mutant id="mutant_5820" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="!(canHave.contains(TransportProtocol.URIishField.PASS))" />
    <mutant id="mutant_5821" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="(uri.getPass()) != null" />
    <mutant id="mutant_5822" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.PASS)))" to="true" />
    <mutant id="mutant_5812" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="true" />
    <mutant id="mutant_5813" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="false" />
    <mutant id="mutant_5814" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="((uri.getPath()) == null) &amp;&amp; ((uri.getPath().length()) == 0)" />
    <mutant id="mutant_5815" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="!(canHave.contains(TransportProtocol.URIishField.USER))" />
    <mutant id="mutant_5816" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="true" />
    <mutant id="mutant_5817" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="false" />
    <mutant id="mutant_5818" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="((uri.getUser()) != null) || (!(canHave.contains(TransportProtocol.URIishField.USER)))" />
    <mutant id="mutant_5819" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getUser()) != null) &amp;&amp; (!(canHave.contains(TransportProtocol.URIishField.USER)))" to="(uri.getUser()) != null" />
    <mutant id="mutant_5810" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="(uri.getPath().length()) == 0" />
    <mutant id="mutant_5811" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPath()) == null) || ((uri.getPath().length()) == 0)" to="(uri.getPath()) == null" />
    <mutant id="mutant_5809" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="false" />
    <mutant id="mutant_5801" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="(uri.getPass()) == null" />
    <mutant id="mutant_5802" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="true" />
    <mutant id="mutant_5803" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="false" />
    <mutant id="mutant_5804" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="((uri.getPass()) == null) &amp;&amp; ((uri.getPass().length()) == 0)" />
    <mutant id="mutant_5805" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="((uri.getHost()) == null) &amp;&amp; ((uri.getHost().length()) == 0)" />
    <mutant id="mutant_5806" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="(uri.getHost().length()) == 0" />
    <mutant id="mutant_5807" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="(uri.getHost()) == null" />
    <mutant id="mutant_5808" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getHost()) == null) || ((uri.getHost().length()) == 0)" to="true" />
    <mutant id="mutant_5800" viable="true" in="org.eclipse.jgit.transport.TransportProtocol.canHandle(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.lib.Repository,java.lang.String)" from="((uri.getPass()) == null) || ((uri.getPass().length()) == 0)" to="(uri.getPass().length()) == 0" />
    <mutant id="mutant_5880" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" />
    <mutant id="mutant_3215" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="true" />
    <mutant id="mutant_4546" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="false" />
    <mutant id="mutant_5878" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="((p.charAt(1)) &gt;= 'a')" />
    <mutant id="mutant_3214" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="threads &lt;= 1" />
    <mutant id="mutant_4545" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="true" />
    <mutant id="mutant_5879" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) || (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" to="((((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z')) &amp;&amp; (((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z')))" />
    <mutant id="mutant_3213" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="(threads &lt;= 1) &amp;&amp; (cnt &lt;= (config.getDeltaSearchWindowSize()))" />
    <mutant id="mutant_4544" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="((ffMask &amp; 240) == 208)" />
    <mutant id="mutant_3212" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="cnt &lt;= (config.getDeltaSearchWindowSize())" />
    <mutant id="mutant_4543" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="false" />
    <mutant id="mutant_3211" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="(!(list[i].isEdge())) || (list[i].isDeltaRepresentation())" />
    <mutant id="mutant_4542" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="true" />
    <mutant id="mutant_3210" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="!(list[i].isEdge())" />
    <mutant id="mutant_4541" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="h == null" />
    <mutant id="mutant_4540" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="(i == null) &amp;&amp; (m == null)" />
    <mutant id="mutant_5870" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="(((p.charAt(1)) &gt;= 'A') || ((p.charAt(1)) &lt;= 'Z'))" />
    <mutant id="mutant_5871" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="true" />
    <mutant id="mutant_5872" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="false" />
    <mutant id="mutant_5873" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="((p.charAt(1)) &gt;= 'A')" />
    <mutant id="mutant_3219" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="config.getCutDeltaChains()" />
    <mutant id="mutant_5874" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="((p.charAt(1)) &lt;= 'z')" />
    <mutant id="mutant_3218" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="false" />
    <mutant id="mutant_4549" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208)) || ((ffMask &amp; 3840) == 3328))" to="true" />
    <mutant id="mutant_5875" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="(((p.charAt(1)) &gt;= 'a') || ((p.charAt(1)) &lt;= 'z'))" />
    <mutant id="mutant_3217" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(config.isReuseDeltas()) &amp;&amp; (config.getCutDeltaChains())" to="true" />
    <mutant id="mutant_4548" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="((ffMask &amp; 15) == 13)" />
    <mutant id="mutant_5876" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="true" />
    <mutant id="mutant_3216" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(threads &lt;= 1) || (cnt &lt;= (config.getDeltaSearchWindowSize()))" to="false" />
    <mutant id="mutant_4547" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(((ffMask &amp; 15) == 13) || ((ffMask &amp; 240) == 208))" to="(((ffMask &amp; 15) == 13) &amp;&amp; ((ffMask &amp; 240) == 208))" />
    <mutant id="mutant_5877" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'a') &amp;&amp; ((p.charAt(1)) &lt;= 'z'))" to="false" />
    <mutant id="mutant_3204" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="false" />
    <mutant id="mutant_4535" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="(m == null)" />
    <mutant id="mutant_5867" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" />
    <mutant id="mutant_3203" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="true" />
    <mutant id="mutant_4534" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="((i == null) || (m == null))" />
    <mutant id="mutant_5868" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="((p.charAt(2)) == ':')" />
    <mutant id="mutant_3202" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="list[(cnt - 1)].isDoNotDelta()" />
    <mutant id="mutant_4533" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="(i.getDirCacheEntry().getStage()) != 0" />
    <mutant id="mutant_5869" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.charAt(1)) &gt;= 'A') &amp;&amp; ((p.charAt(1)) &lt;= 'Z'))" to="((p.charAt(1)) &lt;= 'Z')" />
    <mutant id="mutant_3201" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="sz &lt; limit" />
    <mutant id="mutant_4532" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) &amp;&amp; ((i.getDirCacheEntry().getStage()) != 0)" />
    <mutant id="mutant_3200" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((DeltaIndex.BLKSZ) &lt; sz) &amp;&amp; (sz &lt; limit)" to="((DeltaIndex.BLKSZ) &lt; sz) || (sz &lt; limit)" />
    <mutant id="mutant_4531" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="false" />
    <mutant id="mutant_4530" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="true" />
    <mutant id="mutant_5860" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="(((p.length()) &gt;= 3) || ((p.charAt(0)) == '/'))" />
    <mutant id="mutant_5861" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="true" />
    <mutant id="mutant_3209" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="false" />
    <mutant id="mutant_5862" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="false" />
    <mutant id="mutant_3208" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="true" />
    <mutant id="mutant_4539" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null)) &amp;&amp; (h == null)" to="((i == null) &amp;&amp; (m == null)) || (h == null)" />
    <mutant id="mutant_5863" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="((p.charAt(0)) == '/')" />
    <mutant id="mutant_3207" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(!(list[i].isEdge())) &amp;&amp; (list[i].isDeltaRepresentation())" to="list[i].isDeltaRepresentation()" />
    <mutant id="mutant_4538" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="false" />
    <mutant id="mutant_5864" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) || ((p.charAt(2)) == ':'))" />
    <mutant id="mutant_3206" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="0 &lt; cnt" />
    <mutant id="mutant_4537" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="true" />
    <mutant id="mutant_5865" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="true" />
    <mutant id="mutant_3205" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(0 &lt; cnt) &amp;&amp; (list[(cnt - 1)].isDoNotDelta())" to="(0 &lt; cnt) || (list[(cnt - 1)].isDoNotDelta())" />
    <mutant id="mutant_4536" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((i == null) &amp;&amp; (m == null))" to="(i == null)" />
    <mutant id="mutant_5866" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="((((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/')) &amp;&amp; ((p.charAt(2)) == ':'))" to="false" />
    <mutant id="mutant_4524" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="f == null" />
    <mutant id="mutant_5856" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="false" />
    <mutant id="mutant_4523" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="false" />
    <mutant id="mutant_5857" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="a == null" />
    <mutant id="mutant_4522" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="true" />
    <mutant id="mutant_5858" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="b == null" />
    <mutant id="mutant_4521" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="!(f.isEntryIgnored())" />
    <mutant id="mutant_5859" viable="true" in="org.eclipse.jgit.transport.URIish.cleanLeadingSlashes(java.lang.String,java.lang.String)" from="(((p.length()) &gt;= 3) &amp;&amp; ((p.charAt(0)) == '/'))" to="((p.length()) &gt;= 3)" />
    <mutant id="mutant_4520" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="(f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))" />
    <mutant id="mutant_5850" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n))" to="(&quot;.&quot;.equals(n)) &amp;&amp; (&quot;..&quot;.equals(n))" />
    <mutant id="mutant_4529" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())) || ((i.getDirCacheEntry().getStage()) != 0)" to="f.isModified(i.getDirCacheEntry(), true, this.walk.getObjectReader())" />
    <mutant id="mutant_5851" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n))" to="true" />
    <mutant id="mutant_4528" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="false" />
    <mutant id="mutant_5852" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n))" to="false" />
    <mutant id="mutant_4527" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="true" />
    <mutant id="mutant_5853" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(&quot;.&quot;.equals(n)) || (&quot;..&quot;.equals(n))" to="&quot;.&quot;.equals(n)" />
    <mutant id="mutant_4526" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="(f == null) &amp;&amp; (!(m.idEqual(i)))" />
    <mutant id="mutant_5854" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="(a == null) &amp;&amp; (b == null)" />
    <mutant id="mutant_4525" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="(f == null) || (!(m.idEqual(i)))" to="!(m.idEqual(i))" />
    <mutant id="mutant_5855" viable="true" in="org.eclipse.jgit.transport.URIish.eq(java.lang.String,java.lang.String)" from="(a == null) || (b == null)" to="true" />
    <mutant id="mutant_4513" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="(e != null) || (!(FileMode.TREE.equals(e.getFileMode())))" />
    <mutant id="mutant_5845" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="r != null" />
    <mutant id="mutant_4512" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="!(FileMode.TREE.equals(e.getFileMode()))" />
    <mutant id="mutant_5846" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="true" />
    <mutant id="mutant_4511" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="e != null" />
    <mutant id="mutant_5847" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="false" />
    <mutant id="mutant_4510" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.keep(org.eclipse.jgit.dircache.DirCacheEntry)" from="(e != null) &amp;&amp; (!(FileMode.TREE.equals(e.getFileMode())))" to="false" />
    <mutant id="mutant_5848" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="(r != null) || ((r.getStorage()) == (Ref.Storage.PACKED))" />
    <mutant id="mutant_5849" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.loose(org.eclipse.jgit.lib.Ref)" from="(r != null) &amp;&amp; ((r.getStorage()) == (Ref.Storage.PACKED))" to="(r.getStorage()) == (Ref.Storage.PACKED)" />
    <mutant id="mutant_4519" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) &amp;&amp; (!(f.isEntryIgnored()))" to="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode())))) || (!(f.isEntryIgnored()))" />
    <mutant id="mutant_4518" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="(!(FileMode.TREE.equals(f.getEntryFileMode())))" />
    <mutant id="mutant_5840" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!(n.endsWith(&quot;.pack&quot;))" />
    <mutant id="mutant_4517" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="(f != null)" />
    <mutant id="mutant_5841" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="true" />
    <mutant id="mutant_4516" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="false" />
    <mutant id="mutant_5842" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="false" />
    <mutant id="mutant_4515" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="true" />
    <mutant id="mutant_5843" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="!(n.startsWith(&quot;pack-&quot;))" />
    <mutant id="mutant_4514" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.processEntry(org.eclipse.jgit.treewalk.CanonicalTreeParser,org.eclipse.jgit.dircache.DirCacheBuildIterator,org.eclipse.jgit.treewalk.WorkingTreeIterator)" from="((f != null) &amp;&amp; (!(FileMode.TREE.equals(f.getEntryFileMode()))))" to="((f != null) || (!(FileMode.TREE.equals(f.getEntryFileMode()))))" />
    <mutant id="mutant_5844" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(!(n.startsWith(&quot;pack-&quot;))) || (!(n.endsWith(&quot;.pack&quot;)))" to="(!(n.startsWith(&quot;pack-&quot;))) &amp;&amp; (!(n.endsWith(&quot;.pack&quot;)))" />
  </mutants>
</mutation>
