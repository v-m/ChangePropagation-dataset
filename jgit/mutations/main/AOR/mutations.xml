<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="AOR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="2250174">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_11073" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="(userId)" />
    <mutant id="mutant_11074" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) % (userId))" />
    <mutant id="mutant_11075" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" />
    <mutant id="mutant_11076" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) / (userId))" />
    <mutant id="mutant_11077" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) - (userId))" />
    <mutant id="mutant_11078" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) - &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11079" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) / &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11070" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) * &quot; userId=\&quot;&quot;)" />
    <mutant id="mutant_11071" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11072" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) * (userId))" />
    <mutant id="mutant_11084" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) * &quot; &quot;)" />
    <mutant id="mutant_11085" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_11086" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) % &quot; &quot;)" />
    <mutant id="mutant_11087" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) - &quot; &quot;)" />
    <mutant id="mutant_11088" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11089" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) / &quot; &quot;)" />
    <mutant id="mutant_11080" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="&quot;\&quot;,&quot;" />
    <mutant id="mutant_11081" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) * &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11082" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) % &quot;\&quot;,&quot;)" />
    <mutant id="mutant_11083" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;)" to="((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId))" />
    <mutant id="mutant_11059" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) % (raw))" />
    <mutant id="mutant_11051" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="((getClass().getSimpleName()) % &quot;[raw=\&quot;&quot;)" />
    <mutant id="mutant_12382" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_11052" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="(getClass().getSimpleName())" />
    <mutant id="mutant_12383" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_11053" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="((getClass().getSimpleName()) * &quot;[raw=\&quot;&quot;)" />
    <mutant id="mutant_12384" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_11054" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" />
    <mutant id="mutant_12385" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_11055" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="(raw)" />
    <mutant id="mutant_12386" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_11056" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) * (raw))" />
    <mutant id="mutant_12387" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_11057" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) - (raw))" />
    <mutant id="mutant_12388" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_11058" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) / (raw))" />
    <mutant id="mutant_12389" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="1" />
    <mutant id="mutant_12380" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_11050" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="((getClass().getSimpleName()) / &quot;[raw=\&quot;&quot;)" />
    <mutant id="mutant_12381" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_11062" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="&quot;\&quot;,&quot;" />
    <mutant id="mutant_12393" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) / 1)" />
    <mutant id="mutant_11063" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) % &quot;\&quot;,&quot;)" />
    <mutant id="mutant_12394" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) % 1)" />
    <mutant id="mutant_11064" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="(((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw))" />
    <mutant id="mutant_12395" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="(&quot;JGit/&quot; - (org.eclipse.jgit.transport.UserAgent.computeVersion()))" />
    <mutant id="mutant_11065" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) * &quot;\&quot;,&quot;)" />
    <mutant id="mutant_12396" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="(&quot;JGit/&quot; % (org.eclipse.jgit.transport.UserAgent.computeVersion()))" />
    <mutant id="mutant_11066" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) % &quot; userId=\&quot;&quot;)" />
    <mutant id="mutant_12397" viable="true" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="org.eclipse.jgit.transport.UserAgent.computeVersion()" />
    <mutant id="mutant_11067" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) / &quot; userId=\&quot;&quot;)" />
    <mutant id="mutant_12398" viable="true" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="&quot;JGit/&quot;" />
    <mutant id="mutant_11068" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) - &quot; userId=\&quot;&quot;)" />
    <mutant id="mutant_12399" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="(&quot;JGit/&quot; * (org.eclipse.jgit.transport.UserAgent.computeVersion()))" />
    <mutant id="mutant_11069" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;)" to="&quot; userId=\&quot;&quot;" />
    <mutant id="mutant_12390" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) * 1)" />
    <mutant id="mutant_11060" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) - &quot;\&quot;,&quot;)" />
    <mutant id="mutant_12391" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) + 1)" />
    <mutant id="mutant_11061" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;)" to="((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) / &quot;\&quot;,&quot;)" />
    <mutant id="mutant_12392" viable="true" in="org.eclipse.jgit.transport.UserAgent.clean(java.lang.String)" from="((b.length()) - 1)" to="b.length()" />
    <mutant id="mutant_11095" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) - (fmt.format(java.lang.Long.valueOf(when))))" />
    <mutant id="mutant_11096" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) % &quot;]&quot;" />
    <mutant id="mutant_11097" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_11098" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))" />
    <mutant id="mutant_11099" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) * &quot;]&quot;" />
    <mutant id="mutant_11090" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) * (fmt.format(java.lang.Long.valueOf(when))))" />
    <mutant id="mutant_11091" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="(fmt.format(java.lang.Long.valueOf(when)))" />
    <mutant id="mutant_11092" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) % (fmt.format(java.lang.Long.valueOf(when))))" />
    <mutant id="mutant_11093" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;)" />
    <mutant id="mutant_11094" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when))))" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) / (fmt.format(java.lang.Long.valueOf(when))))" />
    <mutant id="mutant_9201" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9202" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="&quot;\'&quot;" />
    <mutant id="mutant_9200" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - &quot;\'&quot;)" />
    <mutant id="mutant_9241" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_14907" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="a &gt;&gt;&gt; 1" />
    <mutant id="mutant_9242" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="(plural % &quot; &quot;)" />
    <mutant id="mutant_14906" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) - 2" />
    <mutant id="mutant_14909" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="b &gt;&gt;&gt; 1" />
    <mutant id="mutant_9240" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="(plural / &quot; &quot;)" />
    <mutant id="mutant_14908" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="(a &gt;&gt;&gt; 1) + (b &gt;&gt;&gt; 1)" />
    <mutant id="mutant_9245" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="StringUtils.join(names, &quot;, &quot;, &quot; and &quot;)" />
    <mutant id="mutant_9246" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="(plural + &quot; &quot;) % (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" />
    <mutant id="mutant_9243" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="(plural * &quot; &quot;)" />
    <mutant id="mutant_9244" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="(plural + &quot; &quot;) - (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" />
    <mutant id="mutant_14901" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="2" />
    <mutant id="mutant_14900" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) - 3)" />
    <mutant id="mutant_14903" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) + 2" />
    <mutant id="mutant_14902" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) * 2" />
    <mutant id="mutant_14905" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((entries.length) + 16) * 3" />
    <mutant id="mutant_14904" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) % 2" />
    <mutant id="mutant_9238" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="(plural - &quot; &quot;)" />
    <mutant id="mutant_9239" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;)" to="plural" />
    <mutant id="mutant_9236" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="(singular + &quot; &quot;) % (names.get(0))" />
    <mutant id="mutant_9237" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="names.get(0)" />
    <mutant id="mutant_9230" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="(singular / &quot; &quot;)" />
    <mutant id="mutant_14918" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="(a &amp; 1) + (b &amp; 1)" />
    <mutant id="mutant_9231" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="(singular * &quot; &quot;)" />
    <mutant id="mutant_14917" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="(a &amp; 1) % (b &amp; 1)" />
    <mutant id="mutant_14919" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_9234" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="singular + &quot; &quot;" />
    <mutant id="mutant_9235" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="(singular + &quot; &quot;) - (names.get(0))" />
    <mutant id="mutant_9232" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="(singular + &quot; &quot;) * (names.get(0))" />
    <mutant id="mutant_9233" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;) + (names.get(0))" to="(singular + &quot; &quot;) / (names.get(0))" />
    <mutant id="mutant_14910" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="(a &gt;&gt;&gt; 1) * (b &gt;&gt;&gt; 1)" />
    <mutant id="mutant_14912" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="(a &gt;&gt;&gt; 1) / (b &gt;&gt;&gt; 1)" />
    <mutant id="mutant_14911" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &gt;&gt;&gt; 1) - (b &gt;&gt;&gt; 1)" to="(a &gt;&gt;&gt; 1) % (b &gt;&gt;&gt; 1)" />
    <mutant id="mutant_14914" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="a &amp; 1" />
    <mutant id="mutant_14913" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="(a &amp; 1) * (b &amp; 1)" />
    <mutant id="mutant_14916" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="(a &amp; 1) / (b &amp; 1)" />
    <mutant id="mutant_14915" viable="true" in="org.eclipse.jgit.util.NB.compareUInt32(int,int)" from="(a &amp; 1) - (b &amp; 1)" to="b &amp; 1" />
    <mutant id="mutant_9227" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="(singular % &quot; &quot;)" />
    <mutant id="mutant_9228" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9225" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="(&quot; into &quot; - targetShortName)" />
    <mutant id="mutant_9226" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="singular" />
    <mutant id="mutant_9229" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(singular + &quot; &quot;)" to="(singular - &quot; &quot;)" />
    <mutant id="mutant_9220" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="&quot; into &quot;" />
    <mutant id="mutant_9223" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="(&quot; into &quot; % targetShortName)" />
    <mutant id="mutant_9224" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="(&quot; into &quot; * targetShortName)" />
    <mutant id="mutant_9221" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="(&quot; into &quot; / targetShortName)" />
    <mutant id="mutant_9222" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot; into &quot; + targetShortName)" to="targetShortName" />
    <mutant id="mutant_9216" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) - (Constants.MASTER))" />
    <mutant id="mutant_9217" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) % (Constants.MASTER))" />
    <mutant id="mutant_9214" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.R_HEADS" />
    <mutant id="mutant_9215" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) * (Constants.MASTER))" />
    <mutant id="mutant_9218" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) / (Constants.MASTER))" />
    <mutant id="mutant_9219" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.MASTER" />
    <mutant id="mutant_9212" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="((&quot;\'&quot; + (ref.getName())) - &quot;\'&quot;)" />
    <mutant id="mutant_9213" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="((&quot;\'&quot; + (ref.getName())) % &quot;\'&quot;)" />
    <mutant id="mutant_9210" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_9211" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="(&quot;\'&quot; + (ref.getName()))" />
    <mutant id="mutant_9205" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="(&quot;\'&quot; / (ref.getName()))" />
    <mutant id="mutant_9206" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="(&quot;\'&quot; % (ref.getName()))" />
    <mutant id="mutant_9203" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="(&quot;\'&quot; * (ref.getName()))" />
    <mutant id="mutant_9204" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="(&quot;\'&quot; - (ref.getName()))" />
    <mutant id="mutant_9209" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="((&quot;\'&quot; + (ref.getName())) / &quot;\'&quot;)" />
    <mutant id="mutant_9207" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (ref.getName()))" to="(ref.getName())" />
    <mutant id="mutant_9208" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (ref.getName())) + &quot;\'&quot;)" to="((&quot;\'&quot; + (ref.getName())) * &quot;\'&quot;)" />
    <mutant id="mutant_9285" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="((entryCnt) % 16)" />
    <mutant id="mutant_9286" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) % 3)" />
    <mutant id="mutant_13619" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_9283" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="((entryCnt) * 16)" />
    <mutant id="mutant_9284" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="((entryCnt) / 16)" />
    <mutant id="mutant_9289" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) + 3)" />
    <mutant id="mutant_9287" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="3" />
    <mutant id="mutant_9288" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="((entryCnt) + 16)" />
    <mutant id="mutant_13612" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="1" />
    <mutant id="mutant_14943" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_13611" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="(lastDot % 1)" />
    <mutant id="mutant_14942" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_13614" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="pathLen" />
    <mutant id="mutant_14945" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_13613" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_14944" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_9281" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="(entryCnt)" />
    <mutant id="mutant_13616" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_14947" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_9282" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="16" />
    <mutant id="mutant_13615" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_14946" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_13618" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="1" />
    <mutant id="mutant_14949" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_9280" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) + 16)" to="((entryCnt) - 16)" />
    <mutant id="mutant_13617" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) + 1)" to="((pathLen) - 1)" />
    <mutant id="mutant_14948" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_13610" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="(lastDot / 1)" />
    <mutant id="mutant_14941" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_14940" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_9274" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="(toBeDeleted.size()) / 1" />
    <mutant id="mutant_9275" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="1" />
    <mutant id="mutant_9272" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="(callDepth * 1)" />
    <mutant id="mutant_9273" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="(callDepth - 1)" />
    <mutant id="mutant_9278" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="toBeDeleted.size()" />
    <mutant id="mutant_9279" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="(toBeDeleted.size()) + 1" />
    <mutant id="mutant_9276" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="(toBeDeleted.size()) % 1" />
    <mutant id="mutant_9277" viable="true" in="org.eclipse.jgit.merge.ResolveMerger.checkout()" from="(toBeDeleted.size()) - 1" to="(toBeDeleted.size()) * 1" />
    <mutant id="mutant_13623" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="((pathLen) + 1)" />
    <mutant id="mutant_14954" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_13622" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_14953" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_13625" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_14956" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_13624" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="1" />
    <mutant id="mutant_14955" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_9270" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="(callDepth % 1)" />
    <mutant id="mutant_13627" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_14958" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_9271" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="(callDepth / 1)" />
    <mutant id="mutant_13626" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="pathLen" />
    <mutant id="mutant_14957" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_13629" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="((pathLen) - 1)" />
    <mutant id="mutant_13628" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) + 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_14959" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_14950" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_13621" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_14952" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_13620" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(byte[])" from="((pathLen) - 1)" to="pathLen" />
    <mutant id="mutant_14951" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_9269" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="1" />
    <mutant id="mutant_9263" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="1000L" />
    <mutant id="mutant_14929" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_9264" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="((time + 1) % 1000L)" />
    <mutant id="mutant_14928" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_9261" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="(time % 1)" />
    <mutant id="mutant_9262" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="(time + 1)" />
    <mutant id="mutant_9267" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="((time + 1) + 1000L)" />
    <mutant id="mutant_9268" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.getBaseCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,int)" from="(callDepth + 1)" to="callDepth" />
    <mutant id="mutant_9265" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="((time + 1) - 1000L)" />
    <mutant id="mutant_9266" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="((time + 1) * 1000L)" to="((time + 1) / 1000L)" />
    <mutant id="mutant_14921" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_14920" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_14923" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_14922" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_14925" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_9260" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="time" />
    <mutant id="mutant_14924" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_14927" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_14926" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_9258" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="(time - 1)" />
    <mutant id="mutant_9259" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="(time * 1)" />
    <mutant id="mutant_9252" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="name" />
    <mutant id="mutant_13609" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="(lastDot - 1)" />
    <mutant id="mutant_9253" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="(name - &quot;@JGit&quot;)" />
    <mutant id="mutant_13608" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="lastDot" />
    <mutant id="mutant_14939" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_9250" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="&quot;@JGit&quot;" />
    <mutant id="mutant_9251" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="(name / &quot;@JGit&quot;)" />
    <mutant id="mutant_9256" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="1" />
    <mutant id="mutant_9257" viable="true" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(time + 1)" to="(time / 1)" />
    <mutant id="mutant_9254" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="(name % &quot;@JGit&quot;)" />
    <mutant id="mutant_9255" viable="false" in="org.eclipse.jgit.merge.RecursiveMerger.mockAuthor(java.util.List)" from="(name + &quot;@JGit&quot;)" to="(name * &quot;@JGit&quot;)" />
    <mutant id="mutant_13601" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="&quot;SkipWorkTree(&quot; + (treeIdx)" />
    <mutant id="mutant_14932" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_13600" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="(&quot;SkipWorkTree(&quot; + (treeIdx)) % &quot;)&quot;" />
    <mutant id="mutant_14931" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_13603" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="(&quot;SkipWorkTree(&quot; + (treeIdx)) * &quot;)&quot;" />
    <mutant id="mutant_14934" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_13602" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="(&quot;SkipWorkTree(&quot; + (treeIdx)) - &quot;)&quot;" />
    <mutant id="mutant_14933" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_13605" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_14936" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_13604" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx)) + &quot;)&quot;" to="(&quot;SkipWorkTree(&quot; + (treeIdx)) / &quot;)&quot;" />
    <mutant id="mutant_14935" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_13607" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="(lastDot * 1)" />
    <mutant id="mutant_14938" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_13606" viable="true" in="org.eclipse.jgit.treewalk.filter.TreeFilter.toString()" from="(lastDot + 1)" to="1" />
    <mutant id="mutant_14937" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt16(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_14930" viable="true" in="org.eclipse.jgit.util.NB.decodeInt32(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_9249" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="plural + &quot; &quot;" />
    <mutant id="mutant_9247" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="(plural + &quot; &quot;) / (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" />
    <mutant id="mutant_9248" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.joinNames(java.util.List,java.lang.String,java.lang.String)" from="(plural + &quot; &quot;) + (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" to="(plural + &quot; &quot;) * (StringUtils.join(names, &quot;, &quot;, &quot; and &quot;))" />
    <mutant id="mutant_12324" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="msg" />
    <mutant id="mutant_13656" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="pathLen" />
    <mutant id="mutant_14987" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_12325" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="(&quot;ERR &quot; * msg)" />
    <mutant id="mutant_13655" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="((pathLen) % 16)" />
    <mutant id="mutant_14986" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_12326" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="(&quot;ERR &quot; - msg)" />
    <mutant id="mutant_13658" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="16" />
    <mutant id="mutant_14989" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_12327" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="(&quot;ERR &quot; / msg)" />
    <mutant id="mutant_13657" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="((pathLen) * 16)" />
    <mutant id="mutant_14988" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_12328" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="(&quot;ERR &quot; % msg)" />
    <mutant id="mutant_12329" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="((&quot;ERR &quot; + msg) / &quot;\n&quot;)" />
    <mutant id="mutant_13659" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="((pathLen) + 16)" />
    <mutant id="mutant_13650" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) + 1)" />
    <mutant id="mutant_14981" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="7" />
    <mutant id="mutant_14980" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="(offset % 7)" />
    <mutant id="mutant_12320" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="(&quot;unshallow &quot; % (c.name()))" />
    <mutant id="mutant_13652" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) / 1)" />
    <mutant id="mutant_14983" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="(offset / 7)" />
    <mutant id="mutant_12321" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="(&quot;unshallow &quot; / (c.name()))" />
    <mutant id="mutant_13651" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="pathOffset" />
    <mutant id="mutant_14982" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="offset" />
    <mutant id="mutant_12322" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="(&quot;unshallow &quot; * (c.name()))" />
    <mutant id="mutant_13654" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="((pathLen) - 16)" to="((pathLen) / 16)" />
    <mutant id="mutant_14985" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_12323" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="(&quot;ERR &quot; + msg)" to="&quot;ERR &quot;" />
    <mutant id="mutant_13653" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) * 1)" />
    <mutant id="mutant_14984" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="(offset * 7)" />
    <mutant id="mutant_11004" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="(&quot;&quot; + ((char)(lineBuffer[0])))" />
    <mutant id="mutant_12335" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; % (fail.getMessage()))" />
    <mutant id="mutant_13667" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="pathLen" />
    <mutant id="mutant_14998" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_11005" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) / ((char)(lineBuffer[1])))" />
    <mutant id="mutant_12336" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="&quot;ERR &quot;" />
    <mutant id="mutant_13666" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="(pathLen) + (pathOffset)" />
    <mutant id="mutant_14997" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_11006" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" />
    <mutant id="mutant_12337" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="fail.getMessage()" />
    <mutant id="mutant_13669" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="(pathLen) % (pathOffset)" />
    <mutant id="mutant_11007" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="((char)(lineBuffer[2]))" />
    <mutant id="mutant_12338" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; * (fail.getMessage()))" />
    <mutant id="mutant_13668" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="(pathLen) * (pathOffset)" />
    <mutant id="mutant_14999" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_11008" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) % ((char)(lineBuffer[2])))" />
    <mutant id="mutant_12339" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; - (fail.getMessage()))" />
    <mutant id="mutant_11009" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) * ((char)(lineBuffer[2])))" />
    <mutant id="mutant_14990" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_13661" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="hash &gt;&gt;&gt; 2" />
    <mutant id="mutant_14992" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_12330" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="((&quot;ERR &quot; + msg) - &quot;\n&quot;)" />
    <mutant id="mutant_13660" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) * (c &lt;&lt; 24)" />
    <mutant id="mutant_14991" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_11000" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="((char)(lineBuffer[1]))" />
    <mutant id="mutant_12331" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="((&quot;ERR &quot; + msg) * &quot;\n&quot;)" />
    <mutant id="mutant_13663" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) % (c &lt;&lt; 24)" />
    <mutant id="mutant_14994" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_11001" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) * ((char)(lineBuffer[1])))" />
    <mutant id="mutant_12332" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="(&quot;ERR &quot; + msg)" />
    <mutant id="mutant_13662" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) / (c &lt;&lt; 24)" />
    <mutant id="mutant_14993" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_11002" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) % ((char)(lineBuffer[1])))" />
    <mutant id="mutant_12333" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="((&quot;ERR &quot; + msg) % &quot;\n&quot;)" />
    <mutant id="mutant_13665" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) - (c &lt;&lt; 24)" />
    <mutant id="mutant_14996" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_11003" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1])))" to="((&quot;&quot; + ((char)(lineBuffer[0]))) - ((char)(lineBuffer[1])))" />
    <mutant id="mutant_12334" viable="false" in="org.eclipse.jgit.transport.UploadPack.reportErrorDuringNegotiate(java.lang.String)" from="((&quot;ERR &quot; + msg) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13664" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getEntryPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="c &lt;&lt; 24" />
    <mutant id="mutant_14995" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_12302" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; % (id.name()))" />
    <mutant id="mutant_13634" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_14965" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="(offset % 4)" />
    <mutant id="mutant_12303" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(id.name())" />
    <mutant id="mutant_13633" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_14964" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="offset" />
    <mutant id="mutant_12304" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; / (id.name()))" />
    <mutant id="mutant_13636" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="1" />
    <mutant id="mutant_14967" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="(offset - 5)" />
    <mutant id="mutant_12305" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) * &quot; ready\n&quot;)" />
    <mutant id="mutant_13635" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="((pathLen) + 1)" />
    <mutant id="mutant_14966" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="(offset * 4)" />
    <mutant id="mutant_12306" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="&quot; ready\n&quot;" />
    <mutant id="mutant_13638" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="p.pathLen" />
    <mutant id="mutant_14969" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="offset" />
    <mutant id="mutant_12307" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(&quot;ACK &quot; + (id.name()))" />
    <mutant id="mutant_13637" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="(p.pathLen) % 1" />
    <mutant id="mutant_14968" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="5" />
    <mutant id="mutant_12308" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) - &quot; ready\n&quot;)" />
    <mutant id="mutant_12309" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) / &quot; ready\n&quot;)" />
    <mutant id="mutant_13639" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="(p.pathLen) * 1" />
    <mutant id="mutant_13630" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="1" />
    <mutant id="mutant_14961" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="(offset / 4)" />
    <mutant id="mutant_14960" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_12300" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_13632" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="pathLen" />
    <mutant id="mutant_14963" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="4" />
    <mutant id="mutant_12301" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; - (id.name()))" />
    <mutant id="mutant_13631" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(java.lang.String)" from="((pathLen) - 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_14962" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 4)" to="(offset - 4)" />
    <mutant id="mutant_9296" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) - 2" />
    <mutant id="mutant_9297" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) * 2" />
    <mutant id="mutant_9294" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) % 2" />
    <mutant id="mutant_9295" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="((entryCnt) + 16) * 3" />
    <mutant id="mutant_9298" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="((entryCnt) - cnt)" />
    <mutant id="mutant_9299" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="(entryCnt)" />
    <mutant id="mutant_12313" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="(&quot;shallow &quot; - (o.name()))" />
    <mutant id="mutant_13645" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="pathOffset" />
    <mutant id="mutant_14976" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="offset" />
    <mutant id="mutant_12314" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="(&quot;shallow &quot; / (o.name()))" />
    <mutant id="mutant_13644" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) + 1)" />
    <mutant id="mutant_14975" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="6" />
    <mutant id="mutant_12315" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="o.name()" />
    <mutant id="mutant_13647" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) * 1)" />
    <mutant id="mutant_14978" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="(offset / 6)" />
    <mutant id="mutant_12316" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="(&quot;shallow &quot; % (o.name()))" />
    <mutant id="mutant_13646" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) / 1)" />
    <mutant id="mutant_14977" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="(offset * 6)" />
    <mutant id="mutant_9292" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) + 2" />
    <mutant id="mutant_12317" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="(&quot;unshallow &quot; - (c.name()))" />
    <mutant id="mutant_13649" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="1" />
    <mutant id="mutant_9293" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3) / 2" to="2" />
    <mutant id="mutant_12318" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="c.name()" />
    <mutant id="mutant_13648" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) % 1)" />
    <mutant id="mutant_14979" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 7)" to="(offset - 7)" />
    <mutant id="mutant_9290" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) / 3)" />
    <mutant id="mutant_12319" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;unshallow &quot; + (c.name()))" to="&quot;unshallow &quot;" />
    <mutant id="mutant_9291" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) - 3)" />
    <mutant id="mutant_14970" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="(offset % 5)" />
    <mutant id="mutant_13641" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="(p.pathLen) - 1" />
    <mutant id="mutant_14972" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="(offset * 5)" />
    <mutant id="mutant_12310" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) % &quot; ready\n&quot;)" />
    <mutant id="mutant_13640" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="(p.pathLen) + 1" to="(p.pathLen) / 1" />
    <mutant id="mutant_14971" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 5)" to="(offset / 5)" />
    <mutant id="mutant_12311" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="(&quot;shallow &quot; * (o.name()))" />
    <mutant id="mutant_13643" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="1" />
    <mutant id="mutant_14974" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="(offset % 6)" />
    <mutant id="mutant_12312" viable="false" in="org.eclipse.jgit.transport.UploadPack.processShallow()" from="(&quot;shallow &quot; + (o.name()))" to="&quot;shallow &quot;" />
    <mutant id="mutant_13642" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="((pathOffset) - 1)" to="((pathOffset) % 1)" />
    <mutant id="mutant_14973" viable="true" in="org.eclipse.jgit.util.NB.decodeInt64(byte[],int)" from="(offset + 6)" to="(offset - 6)" />
    <mutant id="mutant_11037" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="1" />
    <mutant id="mutant_12368" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (err.getMessage())) % &quot;\n&quot;)" />
    <mutant id="mutant_11038" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="(emailBegin * 1)" />
    <mutant id="mutant_12369" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13699" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) * &quot;[&quot;)" />
    <mutant id="mutant_11039" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="(emailBegin % 1)" />
    <mutant id="mutant_12360" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="&quot;ERR &quot;" />
    <mutant id="mutant_13692" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) + (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11030" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="(when + 1000)" />
    <mutant id="mutant_12361" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="(err.getMessage())" />
    <mutant id="mutant_13691" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode)" />
    <mutant id="mutant_11031" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="(when - 1000)" />
    <mutant id="mutant_12362" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="(&quot;ERR &quot; * (err.getMessage()))" />
    <mutant id="mutant_13694" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) * (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11032" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="when" />
    <mutant id="mutant_12363" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="(&quot;ERR &quot; - (err.getMessage()))" />
    <mutant id="mutant_13693" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) % (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11033" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="(when * 1000)" />
    <mutant id="mutant_12364" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="(&quot;ERR &quot; / (err.getMessage()))" />
    <mutant id="mutant_13696" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) % &quot;[&quot;)" />
    <mutant id="mutant_11034" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="1000" />
    <mutant id="mutant_12365" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="(&quot;ERR &quot; + (err.getMessage()))" />
    <mutant id="mutant_13695" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)" />
    <mutant id="mutant_11035" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent(java.lang.String,long,int)" from="(when / 1000)" to="(when % 1000)" />
    <mutant id="mutant_12366" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (err.getMessage())) * &quot;\n&quot;)" />
    <mutant id="mutant_13698" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(getClass().getSimpleName())" />
    <mutant id="mutant_11036" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="(emailBegin - 1)" />
    <mutant id="mutant_12367" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (err.getMessage())) - &quot;\n&quot;)" />
    <mutant id="mutant_13697" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="&quot;[&quot;" />
    <mutant id="mutant_13690" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) / (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11048" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="((getClass().getSimpleName()) - &quot;[raw=\&quot;&quot;)" />
    <mutant id="mutant_12379" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_11049" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;)" to="&quot;[raw=\&quot;&quot;" />
    <mutant id="mutant_11040" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="(emailBegin / 1)" />
    <mutant id="mutant_12371" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) % &quot;-Timer&quot;)" />
    <mutant id="mutant_11041" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getEmailAddress()" from="(emailBegin + 1)" to="emailBegin" />
    <mutant id="mutant_12372" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) / &quot;-Timer&quot;)" />
    <mutant id="mutant_11042" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="1" />
    <mutant id="mutant_12373" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) * &quot;-Timer&quot;)" />
    <mutant id="mutant_11043" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="(nameEnd * 1)" />
    <mutant id="mutant_12374" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="&quot;-Timer&quot;" />
    <mutant id="mutant_11044" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="(nameEnd - 1)" />
    <mutant id="mutant_12375" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) - &quot;-Timer&quot;)" />
    <mutant id="mutant_11045" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="(nameEnd % 1)" />
    <mutant id="mutant_12376" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="caller.getName()" />
    <mutant id="mutant_11046" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="nameEnd" />
    <mutant id="mutant_12377" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_11047" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.getName()" from="(nameEnd + 1)" to="(nameEnd / 1)" />
    <mutant id="mutant_12378" viable="false" in="org.eclipse.jgit.transport.UploadPack.upload(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_12370" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="((&quot;ERR &quot; + (err.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (err.getMessage())) / &quot;\n&quot;)" />
    <mutant id="mutant_11015" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) - ((char)(lineBuffer[3])))" />
    <mutant id="mutant_12346" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13678" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((a[aPos]) &amp; 255) * (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11016" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) % ((char)(lineBuffer[3])))" />
    <mutant id="mutant_12347" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; - (Integer.toHexString(eof)))" />
    <mutant id="mutant_13677" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) % ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11017" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) / ((char)(lineBuffer[3])))" />
    <mutant id="mutant_12348" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; % (Integer.toHexString(eof)))" />
    <mutant id="mutant_11018" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="(len * 1)" />
    <mutant id="mutant_12349" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="&quot;\\x&quot;" />
    <mutant id="mutant_13679" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode)" />
    <mutant id="mutant_11019" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="1" />
    <mutant id="mutant_13670" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="(pathLen) / (pathOffset)" />
    <mutant id="mutant_12340" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; / (fail.getMessage()))" />
    <mutant id="mutant_13672" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) * ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11010" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) - ((char)(lineBuffer[2])))" />
    <mutant id="mutant_12341" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what / &quot;\n&quot;)" />
    <mutant id="mutant_13671" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getNameLength()" from="(pathLen) - (pathOffset)" to="pathOffset" />
    <mutant id="mutant_11011" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) / ((char)(lineBuffer[2])))" />
    <mutant id="mutant_12342" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="what" />
    <mutant id="mutant_13674" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(a[aPos]) &amp; 255" />
    <mutant id="mutant_11012" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="((char)(lineBuffer[3]))" />
    <mutant id="mutant_12343" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what * &quot;\n&quot;)" />
    <mutant id="mutant_13673" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) / ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11013" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="(((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2])))" />
    <mutant id="mutant_12344" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what - &quot;\n&quot;)" />
    <mutant id="mutant_13676" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) + ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11014" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) + ((char)(lineBuffer[3])))" to="((((&quot;&quot; + ((char)(lineBuffer[0]))) + ((char)(lineBuffer[1]))) + ((char)(lineBuffer[2]))) * ((char)(lineBuffer[3])))" />
    <mutant id="mutant_12345" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what % &quot;\n&quot;)" />
    <mutant id="mutant_13675" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(b[bPos]) &amp; 255" />
    <mutant id="mutant_11026" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="4" />
    <mutant id="mutant_12357" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="(pw.getStatistics().getMessage()) * '\n'" />
    <mutant id="mutant_13689" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)" />
    <mutant id="mutant_11027" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="((packet.length) / 4)" />
    <mutant id="mutant_12358" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="'\n'" />
    <mutant id="mutant_13688" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="(b[bPos]) &amp; 255" />
    <mutant id="mutant_11028" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="packet.length" />
    <mutant id="mutant_12359" viable="false" in="org.eclipse.jgit.transport.UploadPack.service()" from="(&quot;ERR &quot; + (err.getMessage()))" to="(&quot;ERR &quot; % (err.getMessage()))" />
    <mutant id="mutant_11029" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="((packet.length) - 4)" />
    <mutant id="mutant_13681" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((a[aPos]) &amp; 255) % (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_12350" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; * (Integer.toHexString(eof)))" />
    <mutant id="mutant_13680" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((a[aPos]) &amp; 255) / (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11020" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="len" />
    <mutant id="mutant_12351" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="Integer.toHexString(eof)" />
    <mutant id="mutant_13683" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="(a[aPos]) &amp; 255" />
    <mutant id="mutant_11021" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_12352" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; / (Integer.toHexString(eof)))" />
    <mutant id="mutant_13682" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="((a[aPos]) &amp; 255) - (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" to="((a[aPos]) &amp; 255) + (org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(bMode))" />
    <mutant id="mutant_11022" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_12353" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="(pw.getStatistics().getMessage()) - '\n'" />
    <mutant id="mutant_13685" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) * ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11023" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readString()" from="(len - 1)" to="(len + 1)" />
    <mutant id="mutant_12354" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="pw.getStatistics().getMessage()" />
    <mutant id="mutant_13684" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) % ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11024" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="((packet.length) % 4)" />
    <mutant id="mutant_12355" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="(pw.getStatistics().getMessage()) / '\n'" />
    <mutant id="mutant_13687" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) / ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11025" viable="true" in="org.eclipse.jgit.transport.PacketLineOut.writePacket(byte[])" from="((packet.length) + 4)" to="((packet.length) * 4)" />
    <mutant id="mutant_12356" viable="false" in="org.eclipse.jgit.transport.UploadPack.sendPack(boolean)" from="(pw.getStatistics().getMessage()) + '\n'" to="(pw.getStatistics().getMessage()) % '\n'" />
    <mutant id="mutant_13686" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.pathCompare(byte[],int,int,int,int)" from="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) - ((b[bPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.AbstractTreeIterator.lastPathChar(mode)) + ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_11194" viable="true" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="s" />
    <mutant id="mutant_11195" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s / &quot;\n&quot;)" />
    <mutant id="mutant_11196" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s - &quot;\n&quot;)" />
    <mutant id="mutant_11197" viable="true" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_11198" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="((ref.getName()) % &quot;^{}&quot;)" />
    <mutant id="mutant_11199" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="((ref.getName()) - &quot;^{}&quot;)" />
    <mutant id="mutant_11190" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s - &quot;\n&quot;)" />
    <mutant id="mutant_11191" viable="true" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_11192" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s * &quot;\n&quot;)" />
    <mutant id="mutant_11193" viable="false" in="org.eclipse.jgit.transport.ReceivePack$3.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s % &quot;\n&quot;)" />
    <mutant id="mutant_11172" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) * &quot; &quot;)" />
    <mutant id="mutant_11173" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) / &quot; &quot;)" />
    <mutant id="mutant_11174" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;" />
    <mutant id="mutant_11175" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) / (getRefName())" />
    <mutant id="mutant_11176" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) % (getRefName())" />
    <mutant id="mutant_11177" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) * (getRefName())" />
    <mutant id="mutant_11178" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="getRefName()" />
    <mutant id="mutant_11179" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) + (getRefName())" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;) - (getRefName())" />
    <mutant id="mutant_11170" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) - &quot; &quot;)" />
    <mutant id="mutant_11171" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" />
    <mutant id="mutant_11183" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s / &quot;\n&quot;)" />
    <mutant id="mutant_11184" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s - &quot;\n&quot;)" />
    <mutant id="mutant_11185" viable="true" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_11186" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s * &quot;\n&quot;)" />
    <mutant id="mutant_11187" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s % &quot;\n&quot;)" />
    <mutant id="mutant_11188" viable="true" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="s" />
    <mutant id="mutant_11189" viable="false" in="org.eclipse.jgit.transport.ReceivePack$2.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s / &quot;\n&quot;)" />
    <mutant id="mutant_11180" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s * &quot;\n&quot;)" />
    <mutant id="mutant_11181" viable="false" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s % &quot;\n&quot;)" />
    <mutant id="mutant_11182" viable="true" in="org.eclipse.jgit.transport.ReceivePack$1.sendString(java.lang.String)" from="(s + &quot;\n&quot;)" to="s" />
    <mutant id="mutant_9120" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="commonSuffix" />
    <mutant id="mutant_9121" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB * commonSuffix)" />
    <mutant id="mutant_9124" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="theirsBeginB" />
    <mutant id="mutant_9125" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB * commonPrefix)" />
    <mutant id="mutant_9122" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB + commonSuffix)" />
    <mutant id="mutant_9123" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="oursEndB" />
    <mutant id="mutant_9117" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="oursBeginB" />
    <mutant id="mutant_9118" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB / commonSuffix)" />
    <mutant id="mutant_9115" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB * commonPrefix)" />
    <mutant id="mutant_9116" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB / commonPrefix)" />
    <mutant id="mutant_9119" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB % commonSuffix)" />
    <mutant id="mutant_13708" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) * &quot;]&quot;" />
    <mutant id="mutant_9110" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB / commonPrefix)" />
    <mutant id="mutant_13707" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) / (getEntryPathString()))" />
    <mutant id="mutant_13709" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) % &quot;]&quot;" />
    <mutant id="mutant_9113" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB - commonPrefix)" />
    <mutant id="mutant_9114" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="commonPrefix" />
    <mutant id="mutant_9111" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="oursBeginB" />
    <mutant id="mutant_9112" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB % commonPrefix)" />
    <mutant id="mutant_13700" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) - &quot;[&quot;)" />
    <mutant id="mutant_13702" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) % (getEntryPathString()))" />
    <mutant id="mutant_13701" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) / &quot;[&quot;)" />
    <mutant id="mutant_13704" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) * (getEntryPathString()))" />
    <mutant id="mutant_13703" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="(getEntryPathString())" />
    <mutant id="mutant_13706" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="((getClass().getSimpleName()) + &quot;[&quot;)" />
    <mutant id="mutant_13705" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) - (getEntryPathString()))" />
    <mutant id="mutant_9106" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB % commonPrefix)" />
    <mutant id="mutant_9107" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB - commonPrefix)" />
    <mutant id="mutant_9104" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="((theirsEndB - commonSuffix) + 1)" />
    <mutant id="mutant_9105" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="(theirsEndB - commonSuffix)" />
    <mutant id="mutant_9108" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="commonPrefix" />
    <mutant id="mutant_9109" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB * commonPrefix)" />
    <mutant id="mutant_9102" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="((theirsEndB - commonSuffix) * 1)" />
    <mutant id="mutant_9103" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="((theirsEndB - commonSuffix) / 1)" />
    <mutant id="mutant_9100" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="((theirsEndB - commonSuffix) % 1)" />
    <mutant id="mutant_9101" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((theirsEndB - commonSuffix) - 1)" to="1" />
    <mutant id="mutant_9164" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s - &quot;\n&quot;)" />
    <mutant id="mutant_12409" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) * &quot;:&quot;)" />
    <mutant id="mutant_9165" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_9162" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="s" />
    <mutant id="mutant_9163" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s / &quot;\n&quot;)" />
    <mutant id="mutant_9168" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; % (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9169" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(Repository.shortenRefName(ref.getName()))" />
    <mutant id="mutant_9166" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="&quot;\'&quot;" />
    <mutant id="mutant_9167" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; - (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_12401" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="GitProtocolConstants.OPTION_AGENT.length()" />
    <mutant id="mutant_13733" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) / 1" />
    <mutant id="mutant_12402" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="1" />
    <mutant id="mutant_13732" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) - 1" />
    <mutant id="mutant_12403" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="((GitProtocolConstants.OPTION_AGENT.length()) / 1)" />
    <mutant id="mutant_13735" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) % 1" />
    <mutant id="mutant_12404" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="((GitProtocolConstants.OPTION_AGENT.length()) % 1)" />
    <mutant id="mutant_13734" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="1" />
    <mutant id="mutant_9160" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s * &quot;\n&quot;)" />
    <mutant id="mutant_12405" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="((GitProtocolConstants.OPTION_AGENT.length()) * 1)" />
    <mutant id="mutant_13737" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_9161" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeln(java.lang.String)" from="(s + &quot;\n&quot;)" to="(s % &quot;\n&quot;)" />
    <mutant id="mutant_12406" viable="true" in="org.eclipse.jgit.transport.UserAgent.getAgent(java.util.Set,java.lang.String)" from="((GitProtocolConstants.OPTION_AGENT.length()) + 1)" to="((GitProtocolConstants.OPTION_AGENT.length()) - 1)" />
    <mutant id="mutant_13736" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) * 1" />
    <mutant id="mutant_12407" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) - &quot;:&quot;)" />
    <mutant id="mutant_13739" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) / 1" />
    <mutant id="mutant_12408" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) / &quot;:&quot;)" />
    <mutant id="mutant_13738" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) - 1" />
    <mutant id="mutant_13731" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="delta / 1" />
    <mutant id="mutant_12400" viable="false" in="org.eclipse.jgit.transport.UserAgent.computeUserAgent()" from="(&quot;JGit/&quot; + (org.eclipse.jgit.transport.UserAgent.computeVersion()))" to="(&quot;JGit/&quot; / (org.eclipse.jgit.transport.UserAgent.computeVersion()))" />
    <mutant id="mutant_13730" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="delta - 1" />
    <mutant id="mutant_9159" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot;" />
    <mutant id="mutant_9153" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; / (lastConflictingName))" />
    <mutant id="mutant_9154" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; % (lastConflictingName))" />
    <mutant id="mutant_9151" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; - (lastConflictingName))" />
    <mutant id="mutant_9152" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot;" />
    <mutant id="mutant_9157" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; - (lastConflictingName))" />
    <mutant id="mutant_9158" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; / (lastConflictingName))" />
    <mutant id="mutant_9155" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="lastConflictingName" />
    <mutant id="mutant_9156" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictStart(org.eclipse.jgit.merge.MergeChunk)" from="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; + (lastConflictingName))" to="(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt; &quot; * (lastConflictingName))" />
    <mutant id="mutant_12412" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_13744" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_12413" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((i.getClass().getName()) + &quot;:&quot;)" />
    <mutant id="mutant_13743" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_12414" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) / (i.getPromptText()))" />
    <mutant id="mutant_13746" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_12415" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="i.getPromptText()" />
    <mutant id="mutant_13745" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c" />
    <mutant id="mutant_12416" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) % (i.getPromptText()))" />
    <mutant id="mutant_13748" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_9150" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; % (lastConflictingName))" />
    <mutant id="mutant_12417" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) * (i.getPromptText()))" />
    <mutant id="mutant_13747" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_12418" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) - (i.getPromptText()))" />
    <mutant id="mutant_12419" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="prefix" />
    <mutant id="mutant_13749" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="'0'" />
    <mutant id="mutant_13740" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="1" />
    <mutant id="mutant_12410" viable="false" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) % &quot;:&quot;)" />
    <mutant id="mutant_13742" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) * 1" />
    <mutant id="mutant_12411" viable="true" in="org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(i.getClass().getName())" />
    <mutant id="mutant_13741" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.next(int)" from="(Constants.OBJECT_ID_LENGTH) + 1" to="(Constants.OBJECT_ID_LENGTH) % 1" />
    <mutant id="mutant_9148" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; * (lastConflictingName))" />
    <mutant id="mutant_9149" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictEnd()" from="(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &quot; + (lastConflictingName))" to="lastConflictingName" />
    <mutant id="mutant_9142" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="lastConflictingName" />
    <mutant id="mutant_13719" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="pathOffset" />
    <mutant id="mutant_9143" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="&quot;======= &quot; / (lastConflictingName)" />
    <mutant id="mutant_13718" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="((pathLen) / (pathOffset))" />
    <mutant id="mutant_9140" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB + commonSuffix)" />
    <mutant id="mutant_9141" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="oursEndB" />
    <mutant id="mutant_9146" viable="true" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="&quot;======= &quot;" />
    <mutant id="mutant_9147" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="&quot;======= &quot; * (lastConflictingName)" />
    <mutant id="mutant_9144" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="&quot;======= &quot; - (lastConflictingName)" />
    <mutant id="mutant_9145" viable="false" in="org.eclipse.jgit.merge.MergeFormatterPass.writeConflictChange(org.eclipse.jgit.merge.MergeChunk)" from="&quot;======= &quot; + (lastConflictingName)" to="&quot;======= &quot; % (lastConflictingName)" />
    <mutant id="mutant_13711" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())" />
    <mutant id="mutant_13710" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_13713" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) / &quot;]&quot;" />
    <mutant id="mutant_13712" viable="false" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getEntryPathString())) - &quot;]&quot;" />
    <mutant id="mutant_13715" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="pathLen" />
    <mutant id="mutant_13714" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="((pathLen) + (pathOffset))" />
    <mutant id="mutant_13717" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="((pathLen) % (pathOffset))" />
    <mutant id="mutant_13716" viable="true" in="org.eclipse.jgit.treewalk.AbstractTreeIterator.getName(byte[],int)" from="((pathLen) - (pathOffset))" to="((pathLen) * (pathOffset))" />
    <mutant id="mutant_9139" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB * commonSuffix)" />
    <mutant id="mutant_9137" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB % commonSuffix)" />
    <mutant id="mutant_9138" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="commonSuffix" />
    <mutant id="mutant_9131" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="theirsEndB" />
    <mutant id="mutant_9132" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB + commonSuffix)" />
    <mutant id="mutant_13729" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="delta" />
    <mutant id="mutant_9130" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB % commonSuffix)" />
    <mutant id="mutant_9135" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="commonSuffix" />
    <mutant id="mutant_9136" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB / commonSuffix)" />
    <mutant id="mutant_9133" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB * commonSuffix)" />
    <mutant id="mutant_9134" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB / commonSuffix)" />
    <mutant id="mutant_13722" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="(nextPtr) % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_13721" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="(nextPtr) + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_13724" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="(nextPtr) / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_13723" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_13726" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="1" />
    <mutant id="mutant_13725" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="nextPtr" />
    <mutant id="mutant_13728" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="delta * 1" />
    <mutant id="mutant_13727" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.back(int)" from="delta + 1" to="delta % 1" />
    <mutant id="mutant_13720" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.idOffset()" from="(nextPtr) - (Constants.OBJECT_ID_LENGTH)" to="(nextPtr) * (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_9128" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB - commonPrefix)" />
    <mutant id="mutant_9129" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB % commonPrefix)" />
    <mutant id="mutant_9126" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="commonPrefix" />
    <mutant id="mutant_9127" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB / commonPrefix)" />
    <mutant id="mutant_11114" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="1" />
    <mutant id="mutant_12445" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="JGitText.get().unsupportedEncryptionAlgorithm" />
    <mutant id="mutant_13777" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="(pLen * i)" />
    <mutant id="mutant_11115" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="tzBegin * 1" />
    <mutant id="mutant_12446" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="((JGitText.get().unsupportedEncryptionAlgorithm) - v)" />
    <mutant id="mutant_13776" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="pLen" />
    <mutant id="mutant_11116" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="tzBegin / 1" />
    <mutant id="mutant_12447" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="((JGitText.get().unsupportedEncryptionAlgorithm) / v)" />
    <mutant id="mutant_13779" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="(pLen + i)" />
    <mutant id="mutant_11117" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="tzBegin" />
    <mutant id="mutant_12448" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="((JGitText.get().unsupportedEncryptionAlgorithm) % v)" />
    <mutant id="mutant_13778" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="(pLen % i)" />
    <mutant id="mutant_11118" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="tzBegin + 1" />
    <mutant id="mutant_12449" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="((packName.length()) / 5)" />
    <mutant id="mutant_11119" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="tzBegin - 1" to="tzBegin % 1" />
    <mutant id="mutant_13771" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="(cLen % i)" />
    <mutant id="mutant_12440" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="WalkEncryption.JETS3T_CRYPTO_ALG" />
    <mutant id="mutant_13770" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="i" />
    <mutant id="mutant_11110" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="whenBegin" />
    <mutant id="mutant_12441" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(p - (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13773" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="cLen" />
    <mutant id="mutant_11111" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="whenBegin % 1" />
    <mutant id="mutant_12442" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="p" />
    <mutant id="mutant_13772" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="(cLen * i)" />
    <mutant id="mutant_11112" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="whenBegin * 1" />
    <mutant id="mutant_12443" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="v" />
    <mutant id="mutant_13775" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="i" />
    <mutant id="mutant_11113" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="whenBegin / 1" />
    <mutant id="mutant_12444" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="((JGitText.get().unsupportedEncryptionAlgorithm) + v)" to="((JGitText.get().unsupportedEncryptionAlgorithm) * v)" />
    <mutant id="mutant_13774" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(pLen - i)" to="(pLen / i)" />
    <mutant id="mutant_9197" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_9198" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * &quot;\'&quot;)" />
    <mutant id="mutant_9195" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; / (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9196" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) / &quot;\'&quot;)" />
    <mutant id="mutant_9199" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) % &quot;\'&quot;)" />
    <mutant id="mutant_11125" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="(when % 1000L)" />
    <mutant id="mutant_12456" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="packName.substring(0, ((packName.length()) - 5))" />
    <mutant id="mutant_13788" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="(c[ci]) &amp; 255" />
    <mutant id="mutant_9190" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="&quot;\'&quot;" />
    <mutant id="mutant_11126" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="'='" />
    <mutant id="mutant_12457" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="(packName.substring(0, ((packName.length()) - 5))) - &quot;.idx&quot;" />
    <mutant id="mutant_13787" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="(p[ci]) &amp; 255" />
    <mutant id="mutant_11127" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) - '=')" />
    <mutant id="mutant_12458" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="(packName.substring(0, ((packName.length()) - 5))) / &quot;.idx&quot;" />
    <mutant id="mutant_11128" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) / '=')" />
    <mutant id="mutant_12459" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="(packName.substring(0, ((packName.length()) - 5))) % &quot;.idx&quot;" />
    <mutant id="mutant_13789" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="((c[ci]) &amp; 255) / ((p[ci]) &amp; 255)" />
    <mutant id="mutant_9193" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(Repository.shortenRefName(ref.getName()))" />
    <mutant id="mutant_11129" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="(GitProtocolConstants.CAPABILITY_PUSH_CERT)" />
    <mutant id="mutant_9194" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; * (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9191" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; - (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9192" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; % (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_13780" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="n - 1" />
    <mutant id="mutant_12450" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="packName.length()" />
    <mutant id="mutant_13782" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="n / 1" />
    <mutant id="mutant_11120" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="(when / 1000L)" />
    <mutant id="mutant_12451" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="5" />
    <mutant id="mutant_13781" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="1" />
    <mutant id="mutant_11121" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="when" />
    <mutant id="mutant_12452" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="((packName.length()) + 5)" />
    <mutant id="mutant_13784" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="n * 1" />
    <mutant id="mutant_11122" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="(when + 1000L)" />
    <mutant id="mutant_12453" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="((packName.length()) % 5)" />
    <mutant id="mutant_13783" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="n" />
    <mutant id="mutant_11123" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="1000L" />
    <mutant id="mutant_12454" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((packName.length()) - 5)" to="((packName.length()) * 5)" />
    <mutant id="mutant_13786" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="((c[ci]) &amp; 255) % ((p[ci]) &amp; 255)" />
    <mutant id="mutant_11124" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(when * 1000L)" to="(when - 1000L)" />
    <mutant id="mutant_12455" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="(packName.substring(0, ((packName.length()) - 5))) * &quot;.idx&quot;" />
    <mutant id="mutant_13785" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.addTree(org.eclipse.jgit.treewalk.AbstractTreeIterator)" from="n + 1" to="n % 1" />
    <mutant id="mutant_9186" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * &quot;\'&quot;)" />
    <mutant id="mutant_9187" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) % &quot;\'&quot;)" />
    <mutant id="mutant_9184" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) / &quot;\'&quot;)" />
    <mutant id="mutant_9185" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_9188" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - &quot;\'&quot;)" />
    <mutant id="mutant_9189" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_12423" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(prefix * (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13755" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="'0'" />
    <mutant id="mutant_12424" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(prefix - (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13754" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_12425" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(prefix % (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13757" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="ptr - (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_12426" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="prefix" />
    <mutant id="mutant_13756" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="ptr / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_9182" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; * (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_12427" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(prefix * (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13759" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="ptr % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_9183" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; / (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_12428" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(prefix - (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13758" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="ptr * (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_9180" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; % (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_12429" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(prefix / (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_9181" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(Repository.shortenRefName(ref.getName()))" />
    <mutant id="mutant_13751" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c" />
    <mutant id="mutant_12420" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="WalkEncryption.JETS3T_CRYPTO_VER" />
    <mutant id="mutant_13750" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_12421" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(prefix / (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13753" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_12422" viable="false" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(prefix % (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13752" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_9175" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) % &quot;\'&quot;)" />
    <mutant id="mutant_9176" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) - &quot;\'&quot;)" />
    <mutant id="mutant_9173" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_9174" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) * &quot;\'&quot;)" />
    <mutant id="mutant_9179" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; - (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9177" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_9178" viable="true" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="&quot;\'&quot;" />
    <mutant id="mutant_11103" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="1" />
    <mutant id="mutant_12434" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(p * (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13766" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="childPathOffset + 1" />
    <mutant id="mutant_11104" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="(raw.length) % 1" />
    <mutant id="mutant_12435" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(p % (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13765" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="childPathOffset % 1" />
    <mutant id="mutant_11105" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="(raw.length) * 1" />
    <mutant id="mutant_12436" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="p" />
    <mutant id="mutant_13768" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="(cLen + i)" />
    <mutant id="mutant_11106" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="(raw.length) + 1" />
    <mutant id="mutant_12437" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(p * (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13767" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="childPathOffset" />
    <mutant id="mutant_9171" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; / (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_11107" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="raw.length" />
    <mutant id="mutant_12438" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(p % (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_9172" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) + &quot;\'&quot;)" to="((&quot;\'&quot; + (Repository.shortenRefName(ref.getName()))) / &quot;\'&quot;)" />
    <mutant id="mutant_11108" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="1" />
    <mutant id="mutant_12439" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="(p / (WalkEncryption.JETS3T_CRYPTO_ALG))" />
    <mutant id="mutant_13769" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathSuffix(byte[],int)" from="(cLen - i)" to="(cLen / i)" />
    <mutant id="mutant_11109" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="whenBegin - 1" to="whenBegin + 1" />
    <mutant id="mutant_9170" viable="false" in="org.eclipse.jgit.merge.MergeMessageFormatter.format(java.util.List,org.eclipse.jgit.lib.Ref)" from="(&quot;\'&quot; + (Repository.shortenRefName(ref.getName())))" to="(&quot;\'&quot; * (Repository.shortenRefName(ref.getName())))" />
    <mutant id="mutant_13760" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_12430" viable="true" in="org.eclipse.jgit.transport.WalkEncryption$ObjectEncryptionV2.request(java.net.HttpURLConnection,java.lang.String)" from="(prefix + (WalkEncryption.JETS3T_CRYPTO_ALG))" to="WalkEncryption.JETS3T_CRYPTO_ALG" />
    <mutant id="mutant_13762" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="1" />
    <mutant id="mutant_11100" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) - &quot;]&quot;" />
    <mutant id="mutant_12431" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(p / (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13761" viable="true" in="org.eclipse.jgit.treewalk.CanonicalTreeParser.parseEntry()" from="ptr + (Constants.OBJECT_ID_LENGTH)" to="ptr" />
    <mutant id="mutant_11101" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.toString()" from="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) + &quot;]&quot;" to="(((((((((getClass().getSimpleName()) + &quot;[raw=\&quot;&quot;) + (raw)) + &quot;\&quot;,&quot;) + &quot; userId=\&quot;&quot;) + (userId)) + &quot;\&quot;,&quot;) + &quot; &quot;) + (fmt.format(java.lang.Long.valueOf(when)))) / &quot;]&quot;" />
    <mutant id="mutant_12432" viable="false" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="(p - (WalkEncryption.JETS3T_CRYPTO_VER))" />
    <mutant id="mutant_13764" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="childPathOffset * 1" />
    <mutant id="mutant_11102" viable="false" in="org.eclipse.jgit.transport.PushCertificateIdent.parse(java.lang.String)" from="(raw.length) - 1" to="(raw.length) / 1" />
    <mutant id="mutant_12433" viable="true" in="org.eclipse.jgit.transport.WalkEncryption.validateImpl(java.net.HttpURLConnection,java.lang.String,java.lang.String,java.lang.String)" from="(p + (WalkEncryption.JETS3T_CRYPTO_VER))" to="WalkEncryption.JETS3T_CRYPTO_VER" />
    <mutant id="mutant_13763" viable="true" in="org.eclipse.jgit.treewalk.EmptyTreeIterator(org.eclipse.jgit.treewalk.AbstractTreeIterator,byte[],int)" from="childPathOffset - 1" to="childPathOffset / 1" />
    <mutant id="mutant_11158" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" />
    <mutant id="mutant_12489" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="idxName" />
    <mutant id="mutant_11159" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) / &quot; &quot;)" />
    <mutant id="mutant_11150" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="(((getType().name()) + &quot;: &quot;) % (getOldId().name()))" />
    <mutant id="mutant_12481" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="&quot;pack/&quot; * (packName)" />
    <mutant id="mutant_11151" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="(((getType().name()) + &quot;: &quot;) * (getOldId().name()))" />
    <mutant id="mutant_12482" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="&quot;pack/&quot;" />
    <mutant id="mutant_11152" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="(getOldId().name())" />
    <mutant id="mutant_12483" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="&quot;pack/&quot; - (packName)" />
    <mutant id="mutant_11153" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="(((getType().name()) + &quot;: &quot;) - (getOldId().name()))" />
    <mutant id="mutant_12484" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="packName" />
    <mutant id="mutant_11154" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="(((getType().name()) + &quot;: &quot;) / (getOldId().name()))" />
    <mutant id="mutant_12485" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="(&quot;pack/&quot; - (idxName))" />
    <mutant id="mutant_11155" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((getType().name()) + &quot;: &quot;) + (getOldId().name()))" to="((getType().name()) + &quot;: &quot;)" />
    <mutant id="mutant_12486" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="(&quot;pack/&quot; % (idxName))" />
    <mutant id="mutant_11156" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_12487" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="(&quot;pack/&quot; * (idxName))" />
    <mutant id="mutant_11157" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) * &quot; &quot;)" />
    <mutant id="mutant_12488" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="&quot;pack/&quot;" />
    <mutant id="mutant_12480" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="&quot;pack/&quot; % (packName)" />
    <mutant id="mutant_11169" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_11161" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) % &quot; &quot;)" />
    <mutant id="mutant_12492" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="(&quot;Get &quot; * (idxName.substring(0, 12)))" />
    <mutant id="mutant_11162" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) % (getNewId().name()))" />
    <mutant id="mutant_12493" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="(&quot;Get &quot; - (idxName.substring(0, 12)))" />
    <mutant id="mutant_11163" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="(getNewId().name())" />
    <mutant id="mutant_12494" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="(&quot;Get &quot; % (idxName.substring(0, 12)))" />
    <mutant id="mutant_11164" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) / (getNewId().name()))" />
    <mutant id="mutant_12495" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="(idxName.substring(0, 12))" />
    <mutant id="mutant_11165" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) - (getNewId().name()))" />
    <mutant id="mutant_12496" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="&quot;Get &quot;" />
    <mutant id="mutant_11166" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" />
    <mutant id="mutant_12497" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="(&quot;Get &quot; + (idxName.substring(0, 12)))" />
    <mutant id="mutant_11167" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name()))" to="(((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) * (getNewId().name()))" />
    <mutant id="mutant_12498" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="((&quot;Get &quot; + (idxName.substring(0, 12))) / &quot;..idx&quot;)" />
    <mutant id="mutant_11168" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) + &quot; &quot;)" to="((((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;) + (getNewId().name())) % &quot; &quot;)" />
    <mutant id="mutant_12499" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="((&quot;Get &quot; + (idxName.substring(0, 12))) * &quot;..idx&quot;)" />
    <mutant id="mutant_12490" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + (idxName))" to="(&quot;pack/&quot; / (idxName))" />
    <mutant id="mutant_11160" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) + &quot; &quot;)" to="((((getType().name()) + &quot;: &quot;) + (getOldId().name())) - &quot; &quot;)" />
    <mutant id="mutant_12491" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;Get &quot; + (idxName.substring(0, 12)))" to="(&quot;Get &quot; / (idxName.substring(0, 12)))" />
    <mutant id="mutant_11136" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') * nonce" />
    <mutant id="mutant_12467" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="(&quot;walk-&quot; / tn)" />
    <mutant id="mutant_13799" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="((getMode().toString()) + &quot; &quot;) % (getName())" />
    <mutant id="mutant_11137" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') - nonce" />
    <mutant id="mutant_12468" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="(&quot;walk-&quot; % tn)" />
    <mutant id="mutant_13798" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="getName()" />
    <mutant id="mutant_11138" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="header.length()" />
    <mutant id="mutant_12469" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="(&quot;walk-&quot; * tn)" />
    <mutant id="mutant_11139" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="1" />
    <mutant id="mutant_13791" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="((c[ci]) &amp; 255) + ((p[ci]) &amp; 255)" />
    <mutant id="mutant_12460" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(packName.substring(0, ((packName.length()) - 5))) + &quot;.idx&quot;" to="&quot;.idx&quot;" />
    <mutant id="mutant_13790" viable="true" in="org.eclipse.jgit.treewalk.TreeWalk.isPathPrefix(byte[],int)" from="((c[ci]) &amp; 255) - ((p[ci]) &amp; 255)" to="((c[ci]) &amp; 255) * ((p[ci]) &amp; 255)" />
    <mutant id="mutant_11130" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) * '=')" />
    <mutant id="mutant_12461" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="tn.length()" />
    <mutant id="mutant_13793" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="((getMode().toString()) / &quot; &quot;)" />
    <mutant id="mutant_11131" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=')" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) % '=')" />
    <mutant id="mutant_12462" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="((tn.length()) / 4)" />
    <mutant id="mutant_13792" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="((getMode().toString()) % &quot; &quot;)" />
    <mutant id="mutant_11132" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="(GitProtocolConstants.CAPABILITY_PUSH_CERT) + '='" />
    <mutant id="mutant_12463" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="4" />
    <mutant id="mutant_13795" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="((getMode().toString()) * &quot; &quot;)" />
    <mutant id="mutant_11133" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="nonce" />
    <mutant id="mutant_12464" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="((tn.length()) + 4)" />
    <mutant id="mutant_13794" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_11134" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') % nonce" />
    <mutant id="mutant_12465" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="((tn.length()) * 4)" />
    <mutant id="mutant_13797" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="(getMode().toString())" />
    <mutant id="mutant_11135" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.getAdvertiseNonce()" from="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') + nonce" to="((GitProtocolConstants.CAPABILITY_PUSH_CERT) + '=') / nonce" />
    <mutant id="mutant_12466" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((tn.length()) - 4)" to="((tn.length()) % 4)" />
    <mutant id="mutant_13796" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;)" to="((getMode().toString()) - &quot; &quot;)" />
    <mutant id="mutant_11147" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_12478" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="&quot;.walkidx&quot;" />
    <mutant id="mutant_11148" viable="true" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="(getType().name())" />
    <mutant id="mutant_12479" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.downloadPack(org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + (packName)" to="&quot;pack/&quot; / (packName)" />
    <mutant id="mutant_11149" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="((getType().name()) / &quot;: &quot;)" />
    <mutant id="mutant_12470" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="(&quot;walk-&quot; - tn)" />
    <mutant id="mutant_11140" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="((header.length()) / 1)" />
    <mutant id="mutant_12471" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="tn" />
    <mutant id="mutant_11141" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="((header.length()) % 1)" />
    <mutant id="mutant_12472" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="(&quot;walk-&quot; + tn)" to="&quot;walk-&quot;" />
    <mutant id="mutant_11142" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="((header.length()) * 1)" />
    <mutant id="mutant_12473" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="((&quot;walk-&quot; + tn) / &quot;.walkidx&quot;)" />
    <mutant id="mutant_11143" viable="false" in="org.eclipse.jgit.transport.PushCertificateParser.parseHeader(org.eclipse.jgit.transport.PacketLineIn,java.lang.String)" from="((header.length()) + 1)" to="((header.length()) - 1)" />
    <mutant id="mutant_12474" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="((&quot;walk-&quot; + tn) % &quot;.walkidx&quot;)" />
    <mutant id="mutant_11144" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="((getType().name()) - &quot;: &quot;)" />
    <mutant id="mutant_12475" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="(&quot;walk-&quot; + tn)" />
    <mutant id="mutant_11145" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="((getType().name()) * &quot;: &quot;)" />
    <mutant id="mutant_12476" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="((&quot;walk-&quot; + tn) * &quot;.walkidx&quot;)" />
    <mutant id="mutant_11146" viable="false" in="org.eclipse.jgit.transport.ReceiveCommand.toString()" from="((getType().name()) + &quot;: &quot;)" to="((getType().name()) % &quot;: &quot;)" />
    <mutant id="mutant_12477" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack(org.eclipse.jgit.transport.WalkRemoteObjectDatabase,java.lang.String)" from="((&quot;walk-&quot; + tn) + &quot;.walkidx&quot;)" to="((&quot;walk-&quot; + tn) - &quot;.walkidx&quot;)" />
    <mutant id="mutant_11293" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="1" />
    <mutant id="mutant_11294" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="(a % 1)" />
    <mutant id="mutant_11295" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="(a * 1)" />
    <mutant id="mutant_11296" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="(a / 1)" />
    <mutant id="mutant_11297" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="a" />
    <mutant id="mutant_11298" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(a + 1)" to="(a - 1)" />
    <mutant id="mutant_11299" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="(patternA.length()) * (a + 1)" />
    <mutant id="mutant_11290" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="(hc * 31) - (getDestination().hashCode())" />
    <mutant id="mutant_11291" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="hc * 31" />
    <mutant id="mutant_11292" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="(hc * 31) / (getDestination().hashCode())" />
    <mutant id="mutant_1919" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="(patternEnd - 1)" />
    <mutant id="mutant_1917" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) / (value)" />
    <mutant id="mutant_1918" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) * (value)" />
    <mutant id="mutant_1915" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="value" />
    <mutant id="mutant_1916" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) - (value)" />
    <mutant id="mutant_1913" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="((key) + &quot;=&quot;) % (value)" />
    <mutant id="mutant_1914" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;) + (value)" to="(key) + &quot;=&quot;" />
    <mutant id="mutant_1911" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="(key)" />
    <mutant id="mutant_1912" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="((key) * &quot;=&quot;)" />
    <mutant id="mutant_1910" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="((key) % &quot;=&quot;)" />
    <mutant id="mutant_1908" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="((key) - &quot;=&quot;)" />
    <mutant id="mutant_1909" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="&quot;=&quot;" />
    <mutant id="mutant_1906" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="&quot;-&quot; * (key)" />
    <mutant id="mutant_1907" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="((key) + &quot;=&quot;)" to="((key) / &quot;=&quot;)" />
    <mutant id="mutant_1904" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="&quot;-&quot; / (key)" />
    <mutant id="mutant_1905" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="key" />
    <mutant id="mutant_1902" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="&quot;-&quot; % (key)" />
    <mutant id="mutant_1903" viable="false" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="&quot;-&quot; - (key)" />
    <mutant id="mutant_1900" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="prime * result" />
    <mutant id="mutant_1901" viable="true" in="org.eclipse.jgit.attributes.Attribute.toString()" from="&quot;-&quot; + (key)" to="&quot;-&quot;" />
    <mutant id="mutant_1959" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="((type.getSimpleName()) + &quot;[&quot;) + (listener)" />
    <mutant id="mutant_1950" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="((type.getSimpleName()) + &quot;[&quot;)" />
    <mutant id="mutant_1957" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1958" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) * &quot;]&quot;" />
    <mutant id="mutant_1955" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) % &quot;]&quot;" />
    <mutant id="mutant_1956" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) - &quot;]&quot;" />
    <mutant id="mutant_1953" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="(((type.getSimpleName()) + &quot;[&quot;) * (listener))" />
    <mutant id="mutant_1954" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="(((type.getSimpleName()) + &quot;[&quot;) % (listener))" />
    <mutant id="mutant_1951" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="(((type.getSimpleName()) + &quot;[&quot;) - (listener))" />
    <mutant id="mutant_1952" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="(((type.getSimpleName()) + &quot;[&quot;) / (listener))" />
    <mutant id="mutant_13906" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LANE_WIDTH) - p)" />
    <mutant id="mutant_13905" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.laneX(myLane)) / ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_13908" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LANE_WIDTH) + p)" />
    <mutant id="mutant_13907" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="p" />
    <mutant id="mutant_13909" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LANE_WIDTH) % p)" />
    <mutant id="mutant_1948" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="((type.getSimpleName()) / &quot;[&quot;)" />
    <mutant id="mutant_1949" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener))" to="(listener)" />
    <mutant id="mutant_13900" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.laneX(myLane)) * ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_13902" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(myLane)" />
    <mutant id="mutant_13901" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.laneX(myLane)) - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_13904" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH) / 2" />
    <mutant id="mutant_13903" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.laneX(myLane)) + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.laneX(myLane)) % ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_1946" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="((type.getSimpleName()) * &quot;[&quot;)" />
    <mutant id="mutant_1947" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="((type.getSimpleName()) - &quot;[&quot;)" />
    <mutant id="mutant_1944" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="&quot;[&quot;" />
    <mutant id="mutant_1945" viable="true" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="(type.getSimpleName())" />
    <mutant id="mutant_1942" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="(equalsIndex / 1)" />
    <mutant id="mutant_1943" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="((type.getSimpleName()) + &quot;[&quot;)" to="((type.getSimpleName()) % &quot;[&quot;)" />
    <mutant id="mutant_1940" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="(equalsIndex - 1)" />
    <mutant id="mutant_1941" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="(equalsIndex * 1)" />
    <mutant id="mutant_1939" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="(equalsIndex % 1)" />
    <mutant id="mutant_1937" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="equalsIndex" />
    <mutant id="mutant_1938" viable="true" in="org.eclipse.jgit.attributes.AttributesRule.parseAttributes(java.lang.String)" from="(equalsIndex + 1)" to="1" />
    <mutant id="mutant_1935" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="&quot;/&quot; % pattern" />
    <mutant id="mutant_1936" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="&quot;/&quot; / pattern" />
    <mutant id="mutant_1933" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="pattern" />
    <mutant id="mutant_1934" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="&quot;/&quot;" />
    <mutant id="mutant_1931" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="&quot;/&quot; * pattern" />
    <mutant id="mutant_1932" viable="false" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="&quot;/&quot; + pattern" to="&quot;/&quot; - pattern" />
    <mutant id="mutant_1930" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_1928" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_1929" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_1926" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_1927" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_1924" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="patternEnd" />
    <mutant id="mutant_1925" viable="true" in="org.eclipse.jgit.attributes.AttributesRule(java.lang.String,java.lang.String)" from="((pattern.length()) - 1)" to="pattern.length()" />
    <mutant id="mutant_1922" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="(patternEnd % 1)" />
    <mutant id="mutant_1923" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="(patternEnd * 1)" />
    <mutant id="mutant_1920" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="1" />
    <mutant id="mutant_1921" viable="true" in="org.eclipse.jgit.attributes.AttributesNode.parse(java.io.InputStream)" from="(patternEnd + 1)" to="(patternEnd / 1)" />
    <mutant id="mutant_13818" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) + ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_9000" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="editList.size()" />
    <mutant id="mutant_13817" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) * ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_13819" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) % ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_9003" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="endB + (e.getEndA())" />
    <mutant id="mutant_9004" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="endB" />
    <mutant id="mutant_9001" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="((editList.size()) % 1)" />
    <mutant id="mutant_9002" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="endB / (e.getEndA())" />
    <mutant id="mutant_13810" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((a[cPos]) &amp; 255) * (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13812" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2)" />
    <mutant id="mutant_13811" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((a[cPos]) &amp; 255) + (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13814" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(a[cPos]) &amp; 255" />
    <mutant id="mutant_13813" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((a[cPos]) &amp; 255) / (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13816" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) / ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_13815" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="((a[cPos]) &amp; 255) % (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_1993" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="((8 - n) / 4)" />
    <mutant id="mutant_1994" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="(8 - n)" />
    <mutant id="mutant_1991" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="((8 - n) % 4)" />
    <mutant id="mutant_1992" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="4" />
    <mutant id="mutant_1990" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="(8 / n)" />
    <mutant id="mutant_1999" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="(word + 1)" />
    <mutant id="mutant_1997" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="1" />
    <mutant id="mutant_1998" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="(word / 1)" />
    <mutant id="mutant_1995" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="((8 - n) - 4)" />
    <mutant id="mutant_1996" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="((8 - n) * 4)" to="((8 - n) + 4)" />
    <mutant id="mutant_13829" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(sz / 10)" />
    <mutant id="mutant_13828" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(sz * 10)" />
    <mutant id="mutant_13821" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)" />
    <mutant id="mutant_13820" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - ((b[cPos]) &amp; 255)" to="(b[cPos]) &amp; 255" />
    <mutant id="mutant_13823" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) + (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13822" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2)" />
    <mutant id="mutant_13825" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) % (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13824" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) * (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_13827" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)" />
    <mutant id="mutant_13826" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) - (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" to="(org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o1)) / (org.eclipse.jgit.treewalk.WorkingTreeIterator.lastPathChar(o2))" />
    <mutant id="mutant_1982" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="end" />
    <mutant id="mutant_1983" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="(end / p)" />
    <mutant id="mutant_1980" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="(end % p)" />
    <mutant id="mutant_1981" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="(end + p)" />
    <mutant id="mutant_1988" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="(8 + n)" />
    <mutant id="mutant_1989" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="8" />
    <mutant id="mutant_1986" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="(8 * n)" />
    <mutant id="mutant_1987" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="n" />
    <mutant id="mutant_1984" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="(end * p)" />
    <mutant id="mutant_1985" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(8 - n)" to="(8 % n)" />
    <mutant id="mutant_1971" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="((type + &quot;[&quot;) * (repository))" />
    <mutant id="mutant_1972" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="((type + &quot;[&quot;) / (repository))" />
    <mutant id="mutant_1970" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="(repository)" />
    <mutant id="mutant_1979" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.hexUInt32(byte[],int,int)" from="(end - p)" to="p" />
    <mutant id="mutant_1977" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="((type + &quot;[&quot;) + (repository)) - &quot;]&quot;" />
    <mutant id="mutant_1978" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="((type + &quot;[&quot;) + (repository)) % &quot;]&quot;" />
    <mutant id="mutant_1975" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="((type + &quot;[&quot;) + (repository)) * &quot;]&quot;" />
    <mutant id="mutant_1976" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1973" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="(type + &quot;[&quot;) + (repository)" />
    <mutant id="mutant_1974" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository)) + &quot;]&quot;" to="((type + &quot;[&quot;) + (repository)) / &quot;]&quot;" />
    <mutant id="mutant_13807" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(b[cPos]) &amp; 255" />
    <mutant id="mutant_13806" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) % ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_13809" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) / ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_13808" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(a[cPos]) &amp; 255" />
    <mutant id="mutant_13801" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="((getMode().toString()) + &quot; &quot;) - (getName())" />
    <mutant id="mutant_13800" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="((getMode().toString()) + &quot; &quot;) / (getName())" />
    <mutant id="mutant_13803" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="(getMode().toString()) + &quot; &quot;" />
    <mutant id="mutant_13802" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry.toString()" from="((getMode().toString()) + &quot; &quot;) + (getName())" to="((getMode().toString()) + &quot; &quot;) * (getName())" />
    <mutant id="mutant_13805" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) * ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_13804" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator$1.compare(org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry,org.eclipse.jgit.treewalk.WorkingTreeIterator$Entry)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) + ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_1960" viable="false" in="org.eclipse.jgit.events.ListenerHandle.toString()" from="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) + &quot;]&quot;" to="(((type.getSimpleName()) + &quot;[&quot;) + (listener)) / &quot;]&quot;" />
    <mutant id="mutant_1961" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="(type / &quot;[&quot;)" />
    <mutant id="mutant_1968" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="((type + &quot;[&quot;) % (repository))" />
    <mutant id="mutant_1969" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="(type + &quot;[&quot;)" />
    <mutant id="mutant_1966" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="(type - &quot;[&quot;)" />
    <mutant id="mutant_1967" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="((type + &quot;[&quot;) + (repository))" to="((type + &quot;[&quot;) - (repository))" />
    <mutant id="mutant_1964" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="&quot;[&quot;" />
    <mutant id="mutant_1965" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="(type % &quot;[&quot;)" />
    <mutant id="mutant_1962" viable="true" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="type" />
    <mutant id="mutant_1963" viable="false" in="org.eclipse.jgit.events.RepositoryEvent.toString()" from="(type + &quot;[&quot;)" to="(type * &quot;[&quot;)" />
    <mutant id="mutant_9043" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="(theirsEdit.getEndA()) / (oursEdit.getEndA())" />
    <mutant id="mutant_9044" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="(theirsEdit.getEndA()) * (oursEdit.getEndA())" />
    <mutant id="mutant_9041" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="(oursEdit.getBeginA()) % (theirsEdit.getBeginA())" />
    <mutant id="mutant_9042" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="(theirsEdit.getEndA()) + (oursEdit.getEndA())" />
    <mutant id="mutant_9047" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="(oursEdit.getEndA()) + (theirsEdit.getEndA())" />
    <mutant id="mutant_9048" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="(oursEdit.getEndA()) / (theirsEdit.getEndA())" />
    <mutant id="mutant_9045" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="theirsEdit.getEndA()" />
    <mutant id="mutant_9046" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getEndA()) - (oursEdit.getEndA())" to="(theirsEdit.getEndA()) % (oursEdit.getEndA())" />
    <mutant id="mutant_12522" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="(subdir + &quot;/&quot;) % file" />
    <mutant id="mutant_13854" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified + lastModifiedMillis" />
    <mutant id="mutant_12523" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="(subdir + &quot;/&quot;) * file" />
    <mutant id="mutant_13853" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified * lastModifiedMillis" />
    <mutant id="mutant_12524" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="(subdir + &quot;/&quot;) - file" />
    <mutant id="mutant_13856" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified" />
    <mutant id="mutant_12525" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="file" />
    <mutant id="mutant_13855" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified / lastModifiedMillis" />
    <mutant id="mutant_12526" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="subdir + &quot;/&quot;" />
    <mutant id="mutant_13858" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheMillis" />
    <mutant id="mutant_9040" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="(oursEdit.getBeginA()) * (theirsEdit.getBeginA())" />
    <mutant id="mutant_12527" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.R_HEADS" />
    <mutant id="mutant_13857" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified % lastModifiedMillis" />
    <mutant id="mutant_12528" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) * (Constants.MASTER))" />
    <mutant id="mutant_12529" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) - (Constants.MASTER))" />
    <mutant id="mutant_13859" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified % cacheMillis" />
    <mutant id="mutant_13850" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="cacheLastModified * 1000" />
    <mutant id="mutant_12520" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="(subdir % &quot;/&quot;)" />
    <mutant id="mutant_13852" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="lastModifiedMillis" />
    <mutant id="mutant_12521" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;) + file" to="(subdir + &quot;/&quot;) / file" />
    <mutant id="mutant_13851" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="cacheLastModified + 1000" />
    <mutant id="mutant_9038" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="oursEdit.getBeginA()" />
    <mutant id="mutant_9039" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="(oursEdit.getBeginA()) + (theirsEdit.getBeginA())" />
    <mutant id="mutant_9032" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="(theirsEdit.getBeginA()) / (oursEdit.getBeginA())" />
    <mutant id="mutant_9033" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="theirsEdit.getBeginA()" />
    <mutant id="mutant_9030" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="(pos * (cnt - 1))" />
    <mutant id="mutant_9031" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="(pos / (cnt - 1))" />
    <mutant id="mutant_9036" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="(theirsEdit.getBeginA()) % (oursEdit.getBeginA())" />
    <mutant id="mutant_9037" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getBeginA()) - (theirsEdit.getBeginA())" to="(oursEdit.getBeginA()) / (theirsEdit.getBeginA())" />
    <mutant id="mutant_9034" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="(theirsEdit.getBeginA()) + (oursEdit.getBeginA())" />
    <mutant id="mutant_9035" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEdit.getBeginA()) - (oursEdit.getBeginA())" to="(theirsEdit.getBeginA()) * (oursEdit.getBeginA())" />
    <mutant id="mutant_11202" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="ref.getName()" />
    <mutant id="mutant_12533" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="(&quot;ref: &quot; % (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" />
    <mutant id="mutant_13865" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified * lastModifiedMillis" />
    <mutant id="mutant_11203" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="&quot;^{}&quot;" />
    <mutant id="mutant_12534" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="&quot;ref: &quot;" />
    <mutant id="mutant_13864" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="lastModifiedMillis" />
    <mutant id="mutant_11204" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="(from % ':')" />
    <mutant id="mutant_12535" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="(&quot;ref: &quot; * (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" />
    <mutant id="mutant_13867" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified / lastModifiedMillis" />
    <mutant id="mutant_11205" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="(from / ':')" />
    <mutant id="mutant_12536" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="(&quot;ref: &quot; / (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" />
    <mutant id="mutant_13866" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified + lastModifiedMillis" />
    <mutant id="mutant_11206" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="':'" />
    <mutant id="mutant_12537" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="(org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))" />
    <mutant id="mutant_13869" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified % lastModifiedMillis" />
    <mutant id="mutant_11207" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="from" />
    <mutant id="mutant_12538" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" to="(&quot;ref: &quot; - (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates)))" />
    <mutant id="mutant_13868" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified - lastModifiedMillis" to="fileLastModified" />
    <mutant id="mutant_11208" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="(from * ':')" />
    <mutant id="mutant_12539" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) - &quot;\n&quot;" />
    <mutant id="mutant_11209" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="(from + ':')" to="(from - ':')" />
    <mutant id="mutant_13861" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified / cacheMillis" />
    <mutant id="mutant_12530" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) % (Constants.MASTER))" />
    <mutant id="mutant_13860" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified" />
    <mutant id="mutant_11200" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="((ref.getName()) * &quot;^{}&quot;)" />
    <mutant id="mutant_12531" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) / (Constants.MASTER))" />
    <mutant id="mutant_13863" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified + cacheMillis" />
    <mutant id="mutant_11201" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.send(java.util.Map)" from="((ref.getName()) + &quot;^{}&quot;)" to="((ref.getName()) / &quot;^{}&quot;)" />
    <mutant id="mutant_12532" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(java.util.List)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.MASTER" />
    <mutant id="mutant_13862" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified * cacheMillis" />
    <mutant id="mutant_9029" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="(pos % (cnt - 1))" />
    <mutant id="mutant_9027" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="(cnt - 1)" />
    <mutant id="mutant_9028" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="pos" />
    <mutant id="mutant_9021" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="(cnt + 1)" />
    <mutant id="mutant_12508" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="(s.length) + 1024" />
    <mutant id="mutant_9022" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="(cnt / 1)" />
    <mutant id="mutant_12509" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="1024" />
    <mutant id="mutant_13839" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="(bufn / p)" />
    <mutant id="mutant_9020" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="1" />
    <mutant id="mutant_9025" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="(cnt % 1)" />
    <mutant id="mutant_9026" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(pos + (cnt - 1))" to="(pos - (cnt - 1))" />
    <mutant id="mutant_9023" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="(cnt * 1)" />
    <mutant id="mutant_9024" viable="true" in="org.eclipse.jgit.merge.EolAwareOutputStream.write(byte[],int,int)" from="(cnt - 1)" to="cnt" />
    <mutant id="mutant_12500" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="&quot;..idx&quot;" />
    <mutant id="mutant_13832" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(sz - 10)" />
    <mutant id="mutant_12501" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="((&quot;Get &quot; + (idxName.substring(0, 12))) % &quot;..idx&quot;)" />
    <mutant id="mutant_13831" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="sz" />
    <mutant id="mutant_12502" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;Get &quot; + (idxName.substring(0, 12))) + &quot;..idx&quot;)" to="((&quot;Get &quot; + (idxName.substring(0, 12))) - &quot;..idx&quot;)" />
    <mutant id="mutant_13834" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="(bufn % p)" />
    <mutant id="mutant_12503" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="(s.length) * 1024" />
    <mutant id="mutant_13833" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="10" />
    <mutant id="mutant_12504" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="(s.length) - 1024" />
    <mutant id="mutant_13836" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="(bufn * p)" />
    <mutant id="mutant_12505" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="(s.length) % 1024" />
    <mutant id="mutant_13835" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="bufn" />
    <mutant id="mutant_12506" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="1024" />
    <mutant id="mutant_13838" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="(bufn + p)" />
    <mutant id="mutant_12507" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="((int)((s.length) / 1024))" to="s.length" />
    <mutant id="mutant_13837" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="(bufn - p)" to="p" />
    <mutant id="mutant_13830" viable="false" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.computeHash(java.io.InputStream,long)" from="((int)(sz % 10))" to="(sz + 10)" />
    <mutant id="mutant_9018" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="cnt" />
    <mutant id="mutant_9019" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="1 / cnt" />
    <mutant id="mutant_9016" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="1 - cnt" />
    <mutant id="mutant_9017" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="1 % cnt" />
    <mutant id="mutant_9010" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="((r.resultStart) - (r.length))" />
    <mutant id="mutant_12519" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="subdir" />
    <mutant id="mutant_9011" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="((r.resultStart) % (r.length))" />
    <mutant id="mutant_9014" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="1 * cnt" />
    <mutant id="mutant_9015" viable="true" in="org.eclipse.jgit.blame.ReverseWalk$ReverseCommit.addChild(org.eclipse.jgit.blame.ReverseWalk$ReverseCommit)" from="1 + cnt" to="1" />
    <mutant id="mutant_9012" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="r.resultStart" />
    <mutant id="mutant_9013" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="((r.resultStart) * (r.length))" />
    <mutant id="mutant_12511" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt + 1024)" />
    <mutant id="mutant_13843" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="fileLastModified / 1000" />
    <mutant id="mutant_12512" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="cnt" />
    <mutant id="mutant_13842" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="fileLastModified" />
    <mutant id="mutant_12513" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt * 1024)" />
    <mutant id="mutant_13845" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="fileLastModified + 1000" />
    <mutant id="mutant_12514" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt % 1024)" />
    <mutant id="mutant_13844" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="fileLastModified - 1000" />
    <mutant id="mutant_12515" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="(subdir / &quot;/&quot;)" />
    <mutant id="mutant_13847" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="cacheLastModified - 1000" />
    <mutant id="mutant_12516" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_13846" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="cacheLastModified / 1000" />
    <mutant id="mutant_12517" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="(subdir - &quot;/&quot;)" />
    <mutant id="mutant_13849" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="1000" />
    <mutant id="mutant_12518" viable="false" in="org.eclipse.jgit.transport.WalkFetchConnection.downloadObject(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.AnyObjectId)" from="(subdir + &quot;/&quot;)" to="(subdir * &quot;/&quot;)" />
    <mutant id="mutant_13848" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified % 1000" to="cacheLastModified" />
    <mutant id="mutant_13841" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="1000" />
    <mutant id="mutant_12510" viable="true" in="org.eclipse.jgit.transport.WalkFetchConnection$RemotePack.openIndex(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt - 1024)" />
    <mutant id="mutant_13840" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="fileLastModified % 1000" to="fileLastModified * 1000" />
    <mutant id="mutant_9007" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="e.getEndA()" />
    <mutant id="mutant_9008" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="r.length" />
    <mutant id="mutant_9005" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="endB * (e.getEndA())" />
    <mutant id="mutant_9006" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="endB - (e.getEndA())" to="endB % (e.getEndA())" />
    <mutant id="mutant_9009" viable="true" in="org.eclipse.jgit.blame.Region.toString()" from="((r.resultStart) + (r.length))" to="((r.resultStart) / (r.length))" />
    <mutant id="mutant_9087" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="oursEndB" />
    <mutant id="mutant_9088" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="1" />
    <mutant id="mutant_9085" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB * commonSuffix)" />
    <mutant id="mutant_9086" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB + commonSuffix)" />
    <mutant id="mutant_9089" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="((oursEndB - commonSuffix) + 1)" />
    <mutant id="mutant_11235" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_12566" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="file" />
    <mutant id="mutant_13898" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_9080" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB - commonPrefix)" />
    <mutant id="mutant_11236" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_12567" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_13897" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_11237" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12568" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - file)" />
    <mutant id="mutant_11238" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12569" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="&quot;pack-&quot; % (writer.computeName().name())" />
    <mutant id="mutant_13899" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_9083" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB % commonSuffix)" />
    <mutant id="mutant_11239" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_9084" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="commonSuffix" />
    <mutant id="mutant_9081" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB % commonPrefix)" />
    <mutant id="mutant_9082" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEndB - commonSuffix)" to="(oursEndB / commonSuffix)" />
    <mutant id="mutant_13890" viable="false" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="(Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) / 0.5F" />
    <mutant id="mutant_12560" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="((WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.CONFIG))" />
    <mutant id="mutant_13892" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_11230" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="(c * 1)" />
    <mutant id="mutant_12561" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_13891" viable="false" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="(Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) - 0.5F" />
    <mutant id="mutant_11231" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="(c - 1)" />
    <mutant id="mutant_12562" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="((WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.CONFIG))" />
    <mutant id="mutant_13894" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_11232" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="(c % 1)" />
    <mutant id="mutant_12563" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * file)" />
    <mutant id="mutant_13893" viable="false" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="(Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) + 0.5F" />
    <mutant id="mutant_11233" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="c" />
    <mutant id="mutant_12564" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / file)" />
    <mutant id="mutant_13896" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_11234" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12565" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection$1.writeFile(java.lang.String,byte[])" from="((WalkRemoteObjectDatabase.ROOT_DIR) + file)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % file)" />
    <mutant id="mutant_13895" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneC(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_9076" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="theirsBeginB" />
    <mutant id="mutant_9077" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB * commonPrefix)" />
    <mutant id="mutant_9074" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB / commonPrefix)" />
    <mutant id="mutant_9075" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="oursBeginB" />
    <mutant id="mutant_9078" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="commonPrefix" />
    <mutant id="mutant_9079" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsBeginB + commonPrefix)" to="(theirsBeginB / commonPrefix)" />
    <mutant id="mutant_11246" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="(s.length())" />
    <mutant id="mutant_12577" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="&quot;.pack&quot;" />
    <mutant id="mutant_11247" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="1" />
    <mutant id="mutant_12578" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="base / &quot;.pack&quot;" />
    <mutant id="mutant_11248" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="((s.length()) / 1)" />
    <mutant id="mutant_12579" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="base % &quot;.pack&quot;" />
    <mutant id="mutant_11249" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="((s.length()) + 1)" />
    <mutant id="mutant_9072" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="commonPrefix" />
    <mutant id="mutant_9073" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB * commonPrefix)" />
    <mutant id="mutant_9070" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB % commonPrefix)" />
    <mutant id="mutant_9071" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursBeginB + commonPrefix)" to="(oursBeginB - commonPrefix)" />
    <mutant id="mutant_12570" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="&quot;pack-&quot; / (writer.computeName().name())" />
    <mutant id="mutant_11240" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_12571" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="writer.computeName().name()" />
    <mutant id="mutant_11241" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_12572" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="&quot;pack-&quot;" />
    <mutant id="mutant_11242" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="1" />
    <mutant id="mutant_12573" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="&quot;pack-&quot; - (writer.computeName().name())" />
    <mutant id="mutant_11243" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="i" />
    <mutant id="mutant_12574" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack-&quot; + (writer.computeName().name())" to="&quot;pack-&quot; * (writer.computeName().name())" />
    <mutant id="mutant_11244" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_12575" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="base" />
    <mutant id="mutant_11245" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_12576" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="base * &quot;.pack&quot;" />
    <mutant id="mutant_9065" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="theirsEndB - theirsBeginB" />
    <mutant id="mutant_9066" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="minBSize * (theirsEndB - theirsBeginB)" />
    <mutant id="mutant_9063" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="(theirsEndB % theirsBeginB)" />
    <mutant id="mutant_9064" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="minBSize" />
    <mutant id="mutant_9069" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="minBSize % (theirsEndB - theirsBeginB)" />
    <mutant id="mutant_9067" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="minBSize + (theirsEndB - theirsBeginB)" />
    <mutant id="mutant_9068" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="minBSize - (theirsEndB - theirsBeginB)" to="minBSize / (theirsEndB - theirsBeginB)" />
    <mutant id="mutant_11213" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="to" />
    <mutant id="mutant_12544" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="&quot;\n&quot;" />
    <mutant id="mutant_13876" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="((pathOffset) - nameLen)" />
    <mutant id="mutant_11214" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="((from + ':') % to)" />
    <mutant id="mutant_12545" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.HEAD))" />
    <mutant id="mutant_13875" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified + cacheMillis" />
    <mutant id="mutant_11215" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="(from + ':')" />
    <mutant id="mutant_12546" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.HEAD))" />
    <mutant id="mutant_13878" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="((pathOffset) % nameLen)" />
    <mutant id="mutant_11216" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="'='" />
    <mutant id="mutant_12547" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="Constants.HEAD" />
    <mutant id="mutant_13877" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="((pathOffset) * nameLen)" />
    <mutant id="mutant_9061" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="(theirsEndB / theirsBeginB)" />
    <mutant id="mutant_11217" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="(name % '=')" />
    <mutant id="mutant_12548" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.HEAD))" />
    <mutant id="mutant_9062" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="(theirsEndB + theirsBeginB)" />
    <mutant id="mutant_11218" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="name" />
    <mutant id="mutant_12549" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_13879" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="((pathOffset) / nameLen)" />
    <mutant id="mutant_11219" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="(name * '=')" />
    <mutant id="mutant_9060" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="theirsBeginB" />
    <mutant id="mutant_13870" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheMillis" />
    <mutant id="mutant_12540" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))" />
    <mutant id="mutant_13872" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified" />
    <mutant id="mutant_11210" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="((from + ':') / to)" />
    <mutant id="mutant_12541" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) / &quot;\n&quot;" />
    <mutant id="mutant_13871" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified % cacheMillis" />
    <mutant id="mutant_11211" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="((from + ':') * to)" />
    <mutant id="mutant_12542" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) * &quot;\n&quot;" />
    <mutant id="mutant_13874" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified * cacheMillis" />
    <mutant id="mutant_11212" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.addSymref(java.lang.String,java.lang.String)" from="((from + ':') + to)" to="((from + ':') - to)" />
    <mutant id="mutant_12543" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) + &quot;\n&quot;" to="(&quot;ref: &quot; + (org.eclipse.jgit.transport.WalkPushConnection.pickHEAD(updates))) % &quot;\n&quot;" />
    <mutant id="mutant_13873" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.compareMetadata(org.eclipse.jgit.dircache.DirCacheEntry)" from="cacheLastModified - cacheMillis" to="cacheLastModified / cacheMillis" />
    <mutant id="mutant_9054" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursEndB + oursBeginB" />
    <mutant id="mutant_9055" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursBeginB" />
    <mutant id="mutant_9052" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursEndB / oursBeginB" />
    <mutant id="mutant_9053" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursEndB * oursBeginB" />
    <mutant id="mutant_9058" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="(theirsEndB * theirsBeginB)" />
    <mutant id="mutant_9059" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - theirsBeginB)" to="theirsEndB" />
    <mutant id="mutant_9056" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursEndB % oursBeginB" />
    <mutant id="mutant_9057" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="oursEndB - oursBeginB" to="oursEndB" />
    <mutant id="mutant_11224" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="((name + '=') * value)" />
    <mutant id="mutant_12555" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;[core]\n&quot; / &quot;\trepositoryformatversion = 0\n&quot;" />
    <mutant id="mutant_13887" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="nameLen" />
    <mutant id="mutant_11225" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="((name + '=') - value)" />
    <mutant id="mutant_12556" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;\trepositoryformatversion = 0\n&quot;" />
    <mutant id="mutant_13886" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="pathOffset" />
    <mutant id="mutant_11226" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="(name + '=')" />
    <mutant id="mutant_12557" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="((WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.CONFIG))" />
    <mutant id="mutant_13889" viable="false" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="0.5F" />
    <mutant id="mutant_11227" viable="true" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="value" />
    <mutant id="mutant_12558" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="Constants.CONFIG" />
    <mutant id="mutant_13888" viable="false" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.computeDotSize(int)" from="((int)((Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) * 0.5F))" to="(Math.min(h, org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH)) % 0.5F" />
    <mutant id="mutant_9050" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="oursEdit.getEndA()" />
    <mutant id="mutant_11228" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="(c / 1)" />
    <mutant id="mutant_12559" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.CONFIG))" to="((WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.CONFIG))" />
    <mutant id="mutant_9051" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="(oursEdit.getEndA()) % (theirsEdit.getEndA())" />
    <mutant id="mutant_11229" viable="true" in="org.eclipse.jgit.transport.RefSpec(java.lang.String)" from="(c + 1)" to="1" />
    <mutant id="mutant_13881" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="nameLen" />
    <mutant id="mutant_12550" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.HEAD))" />
    <mutant id="mutant_13880" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="((pathOffset) + nameLen)" to="pathOffset" />
    <mutant id="mutant_11220" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="(name - '=')" />
    <mutant id="mutant_12551" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;[core]\n&quot; * &quot;\trepositoryformatversion = 0\n&quot;" />
    <mutant id="mutant_13883" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="(pathOffset) * nameLen" />
    <mutant id="mutant_11221" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="(name + '=')" to="(name / '=')" />
    <mutant id="mutant_12552" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;[core]\n&quot;" />
    <mutant id="mutant_13882" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="(pathOffset) - nameLen" />
    <mutant id="mutant_11222" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="((name + '=') / value)" />
    <mutant id="mutant_12553" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;[core]\n&quot; % &quot;\trepositoryformatversion = 0\n&quot;" />
    <mutant id="mutant_13885" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="(pathOffset) / nameLen" />
    <mutant id="mutant_11223" viable="false" in="org.eclipse.jgit.transport.RefAdvertiser.advertiseCapability(java.lang.String,java.lang.String)" from="((name + '=') + value)" to="((name + '=') % value)" />
    <mutant id="mutant_12554" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.createNewRepository(java.util.List)" from="&quot;[core]\n&quot; + &quot;\trepositoryformatversion = 0\n&quot;" to="&quot;[core]\n&quot; - &quot;\trepositoryformatversion = 0\n&quot;" />
    <mutant id="mutant_13884" viable="true" in="org.eclipse.jgit.treewalk.WorkingTreeIterator.parseEntry()" from="(pathOffset) + nameLen" to="(pathOffset) % nameLen" />
    <mutant id="mutant_9049" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(oursEdit.getEndA()) - (theirsEdit.getEndA())" to="(oursEdit.getEndA()) * (theirsEdit.getEndA())" />
    <mutant id="mutant_11279" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="hc * 31" />
    <mutant id="mutant_11271" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_11272" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_11273" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_11274" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_11275" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="(hc * 31) % (getSource().hashCode())" />
    <mutant id="mutant_11276" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="(hc * 31) * (getSource().hashCode())" />
    <mutant id="mutant_11277" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="getSource().hashCode()" />
    <mutant id="mutant_11278" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="(hc * 31) - (getSource().hashCode())" />
    <mutant id="mutant_11270" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_11282" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_11283" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_11284" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_11285" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_11286" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_11287" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="(hc * 31) % (getDestination().hashCode())" />
    <mutant id="mutant_11288" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="(hc * 31) * (getDestination().hashCode())" />
    <mutant id="mutant_11289" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getDestination().hashCode())" to="getDestination().hashCode()" />
    <mutant id="mutant_11280" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31) + (getSource().hashCode())" to="(hc * 31) / (getSource().hashCode())" />
    <mutant id="mutant_11281" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_11257" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12588" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="(&quot;pack/&quot; * base)" />
    <mutant id="mutant_11258" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="(wildcardIndex * 1)" />
    <mutant id="mutant_12589" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="(&quot;pack/&quot; / base)" />
    <mutant id="mutant_11259" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="(wildcardIndex - 1)" />
    <mutant id="mutant_12580" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="base + &quot;.pack&quot;" to="base - &quot;.pack&quot;" />
    <mutant id="mutant_11250" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="((s.length()) % 1)" />
    <mutant id="mutant_12581" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="packName" />
    <mutant id="mutant_11251" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="((s.length()) - 1)" to="((s.length()) * 1)" />
    <mutant id="mutant_12582" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="&quot;pack/&quot; % packName" />
    <mutant id="mutant_11252" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12583" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="&quot;pack/&quot;" />
    <mutant id="mutant_11253" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_12584" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="&quot;pack/&quot; * packName" />
    <mutant id="mutant_11254" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_12585" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="&quot;pack/&quot; - packName" />
    <mutant id="mutant_11255" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12586" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;pack/&quot; + packName" to="&quot;pack/&quot; / packName" />
    <mutant id="mutant_11256" viable="true" in="org.eclipse.jgit.transport.RefSpec.isValid(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12587" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="base" />
    <mutant id="mutant_9098" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB / commonSuffix)" />
    <mutant id="mutant_9099" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="commonSuffix" />
    <mutant id="mutant_9096" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB + commonSuffix)" />
    <mutant id="mutant_9097" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB * commonSuffix)" />
    <mutant id="mutant_9090" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="((oursEndB - commonSuffix) % 1)" />
    <mutant id="mutant_11268" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="((prefix.length()) % (suffix.length()))" />
    <mutant id="mutant_12599" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="&quot;Put &quot; / (base.substring(0, 12))" />
    <mutant id="mutant_9091" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="((oursEndB - commonSuffix) / 1)" />
    <mutant id="mutant_11269" viable="true" in="org.eclipse.jgit.transport.RefSpec.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_9094" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="(theirsEndB % commonSuffix)" />
    <mutant id="mutant_9095" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="(theirsEndB - commonSuffix)" to="theirsEndB" />
    <mutant id="mutant_9092" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="(oursEndB - commonSuffix)" />
    <mutant id="mutant_9093" viable="true" in="org.eclipse.jgit.merge.MergeAlgorithm.merge(org.eclipse.jgit.diff.SequenceComparator,S,S,S)" from="((oursEndB - commonSuffix) - 1)" to="((oursEndB - commonSuffix) * 1)" />
    <mutant id="mutant_11260" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="1" />
    <mutant id="mutant_12591" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="&quot;pack/&quot;" />
    <mutant id="mutant_11261" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="(wildcardIndex % 1)" />
    <mutant id="mutant_12592" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="(&quot;pack/&quot; - base)" />
    <mutant id="mutant_11262" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="(wildcardIndex / 1)" />
    <mutant id="mutant_12593" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="(&quot;pack/&quot; + base) * &quot;.idx&quot;" />
    <mutant id="mutant_11263" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="(wildcardIndex + 1)" to="wildcardIndex" />
    <mutant id="mutant_12594" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="(&quot;pack/&quot; + base) / &quot;.idx&quot;" />
    <mutant id="mutant_11264" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="(prefix.length())" />
    <mutant id="mutant_12595" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="(&quot;pack/&quot; + base) - &quot;.idx&quot;" />
    <mutant id="mutant_11265" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="((prefix.length()) * (suffix.length()))" />
    <mutant id="mutant_12596" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="(&quot;pack/&quot; + base) % &quot;.idx&quot;" />
    <mutant id="mutant_11266" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="((prefix.length()) / (suffix.length()))" />
    <mutant id="mutant_12597" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="&quot;pack/&quot; + base" />
    <mutant id="mutant_11267" viable="true" in="org.eclipse.jgit.transport.RefSpec.match(java.lang.String,java.lang.String)" from="((prefix.length()) + (suffix.length()))" to="((prefix.length()) - (suffix.length()))" />
    <mutant id="mutant_12598" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base) + &quot;.idx&quot;" to="&quot;.idx&quot;" />
    <mutant id="mutant_12590" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;pack/&quot; + base)" to="(&quot;pack/&quot; % base)" />
    <mutant id="mutant_10082" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="uri" />
    <mutant id="mutant_10081" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="(uri * &quot;: &quot;)" />
    <mutant id="mutant_10080" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_10089" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="(uri - &quot;: &quot;)" />
    <mutant id="mutant_10088" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) / s)" />
    <mutant id="mutant_10087" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) % s)" />
    <mutant id="mutant_10086" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) * s)" />
    <mutant id="mutant_10085" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="(uri + &quot;: &quot;)" />
    <mutant id="mutant_10084" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) - s)" />
    <mutant id="mutant_10083" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_10093" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="(uri * &quot;: &quot;)" />
    <mutant id="mutant_10092" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_10091" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="(uri % &quot;: &quot;)" />
    <mutant id="mutant_10090" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="(uri / &quot;: &quot;)" />
    <mutant id="mutant_10099" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) % s)" />
    <mutant id="mutant_10098" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) * s)" />
    <mutant id="mutant_10097" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="(uri + &quot;: &quot;)" />
    <mutant id="mutant_10096" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) - s)" />
    <mutant id="mutant_10095" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_10094" viable="true" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(uri + &quot;: &quot;)" to="uri" />
    <mutant id="mutant_1838" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="dsts.size()" />
    <mutant id="mutant_1839" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="((2 * (srcs.size())) + (dsts.size()))" />
    <mutant id="mutant_1836" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="((2 * (srcs.size())) / (dsts.size()))" />
    <mutant id="mutant_1837" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="(2 * (srcs.size()))" />
    <mutant id="mutant_1834" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="(2 - (srcs.size()))" />
    <mutant id="mutant_1835" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="((2 * (srcs.size())) - (dsts.size()))" />
    <mutant id="mutant_1832" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="(2 / (srcs.size()))" />
    <mutant id="mutant_1833" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="(srcs.size())" />
    <mutant id="mutant_1830" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="(2 % (srcs.size()))" />
    <mutant id="mutant_1831" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="(2 + (srcs.size()))" />
    <mutant id="mutant_1829" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="(2 * (srcs.size()))" to="2" />
    <mutant id="mutant_1827" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="(SimilarityRenameDetector.INDEX_MASK) * idx" />
    <mutant id="mutant_1828" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="idx" />
    <mutant id="mutant_1825" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="(SimilarityRenameDetector.INDEX_MASK) % idx" />
    <mutant id="mutant_1826" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="(SimilarityRenameDetector.INDEX_MASK) / idx" />
    <mutant id="mutant_1823" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="(SimilarityRenameDetector.INDEX_MASK) + idx" />
    <mutant id="mutant_1824" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.encodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - idx" to="SimilarityRenameDetector.INDEX_MASK" />
    <mutant id="mutant_1821" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)" />
    <mutant id="mutant_1822" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) % 100" />
    <mutant id="mutant_1820" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) - 100" />
    <mutant id="mutant_1818" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="100" />
    <mutant id="mutant_1819" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) + 100" />
    <mutant id="mutant_1816" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="(((dirScoreLtr + dirScoreRtl) * 25) / (fileScore * 50))" />
    <mutant id="mutant_1817" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) / 100" to="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50)) * 100" />
    <mutant id="mutant_1814" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="((dirScoreLtr + dirScoreRtl) * 25)" />
    <mutant id="mutant_1815" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="(((dirScoreLtr + dirScoreRtl) * 25) % (fileScore * 50))" />
    <mutant id="mutant_1812" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="(((dirScoreLtr + dirScoreRtl) * 25) - (fileScore * 50))" />
    <mutant id="mutant_1813" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="(((dirScoreLtr + dirScoreRtl) * 25) * (fileScore * 50))" />
    <mutant id="mutant_1810" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="(fileScore + 50)" />
    <mutant id="mutant_1811" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((dirScoreLtr + dirScoreRtl) * 25) + (fileScore * 50))" to="(fileScore * 50)" />
    <mutant id="mutant_1809" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="(fileScore / 50)" />
    <mutant id="mutant_1807" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="fileScore" />
    <mutant id="mutant_1808" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="50" />
    <mutant id="mutant_1805" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="(fileScore % 50)" />
    <mutant id="mutant_1806" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileScore * 50)" to="(fileScore - 50)" />
    <mutant id="mutant_1803" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="((dirScoreLtr + dirScoreRtl) / 25)" />
    <mutant id="mutant_1804" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="((dirScoreLtr + dirScoreRtl) - 25)" />
    <mutant id="mutant_1801" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="(dirScoreLtr + dirScoreRtl)" />
    <mutant id="mutant_1802" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="((dirScoreLtr + dirScoreRtl) % 25)" />
    <mutant id="mutant_1800" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="((dirScoreLtr + dirScoreRtl) + 25)" />
    <mutant id="mutant_12607" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="(wt / &quot;..pack&quot;)" />
    <mutant id="mutant_13939" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="h" />
    <mutant id="mutant_12608" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="wt" />
    <mutant id="mutant_13938" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="(h / dotSize)" />
    <mutant id="mutant_12609" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="(wt % &quot;..pack&quot;)" />
    <mutant id="mutant_13931" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="(myLaneX - (dotSize / 2)) + 1" />
    <mutant id="mutant_12600" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="&quot;Put &quot; * (base.substring(0, 12))" />
    <mutant id="mutant_13930" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="(myLaneX - (dotSize / 2)) / 1" />
    <mutant id="mutant_12601" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="&quot;Put &quot; % (base.substring(0, 12))" />
    <mutant id="mutant_13933" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="(myLaneX - (dotSize / 2)) % 1" />
    <mutant id="mutant_12602" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="base.substring(0, 12)" />
    <mutant id="mutant_13932" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="1" />
    <mutant id="mutant_12603" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="&quot;Put &quot;" />
    <mutant id="mutant_13935" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="myLaneX - (dotSize / 2)" />
    <mutant id="mutant_12604" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="&quot;Put &quot; + (base.substring(0, 12))" to="&quot;Put &quot; - (base.substring(0, 12))" />
    <mutant id="mutant_13934" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2)) - 1" to="(myLaneX - (dotSize / 2)) * 1" />
    <mutant id="mutant_12605" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="(wt * &quot;..pack&quot;)" />
    <mutant id="mutant_13937" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="(h % dotSize)" />
    <mutant id="mutant_12606" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="(wt - &quot;..pack&quot;)" />
    <mutant id="mutant_13936" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="(h + dotSize)" />
    <mutant id="mutant_1872" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="(prime * result) * (key.hashCode())" />
    <mutant id="mutant_1873" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="key.hashCode()" />
    <mutant id="mutant_1870" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_1871" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="(prime * result) / (key.hashCode())" />
    <mutant id="mutant_1878" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_1879" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_1876" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="prime * result" />
    <mutant id="mutant_1877" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_1874" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="(prime * result) - (key.hashCode())" />
    <mutant id="mutant_1875" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (key.hashCode())" to="(prime * result) % (key.hashCode())" />
    <mutant id="mutant_12618" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="Constants.INFO_REFS" />
    <mutant id="mutant_12619" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="(WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.INFO_REFS)" />
    <mutant id="mutant_13949" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="(h / dotSize)" />
    <mutant id="mutant_12610" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..pack&quot;)" to="&quot;..pack&quot;" />
    <mutant id="mutant_13942" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="2" />
    <mutant id="mutant_12611" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="(wt - &quot;..idx&quot;)" />
    <mutant id="mutant_13941" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="dotSize" />
    <mutant id="mutant_12612" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="wt" />
    <mutant id="mutant_13944" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="(h - dotSize) * 2" />
    <mutant id="mutant_12613" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="(wt / &quot;..idx&quot;)" />
    <mutant id="mutant_13943" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="(h - dotSize) + 2" />
    <mutant id="mutant_12614" viable="true" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="&quot;..idx&quot;" />
    <mutant id="mutant_13946" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="(h - dotSize) - 2" />
    <mutant id="mutant_12615" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="(wt % &quot;..idx&quot;)" />
    <mutant id="mutant_13945" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="(h - dotSize) % 2" />
    <mutant id="mutant_12616" viable="false" in="org.eclipse.jgit.transport.WalkPushConnection.sendpack(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)" from="(wt + &quot;..idx&quot;)" to="(wt * &quot;..idx&quot;)" />
    <mutant id="mutant_13948" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="(h % dotSize)" />
    <mutant id="mutant_12617" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="(WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.INFO_REFS)" />
    <mutant id="mutant_13947" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize) / 2" to="h - dotSize" />
    <mutant id="mutant_1861" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="(ptr - (seq.begin))" />
    <mutant id="mutant_1862" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="ptr" />
    <mutant id="mutant_1860" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="(ptr / (seq.begin))" />
    <mutant id="mutant_13940" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h - dotSize)" to="(h * dotSize)" />
    <mutant id="mutant_1869" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_1867" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_1868" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_1865" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_1866" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_1863" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="seq.begin" />
    <mutant id="mutant_1864" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="(ptr % (seq.begin))" />
    <mutant id="mutant_13917" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LANE_WIDTH) * p" />
    <mutant id="mutant_13916" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="AbstractPlotRenderer.LEFT_PAD" />
    <mutant id="mutant_13919" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="2" />
    <mutant id="mutant_13918" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="(dotSize - 2)" />
    <mutant id="mutant_13911" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_13910" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="((AbstractPlotRenderer.LANE_WIDTH) * p)" to="((AbstractPlotRenderer.LANE_WIDTH) / p)" />
    <mutant id="mutant_13913" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LEFT_PAD) % ((AbstractPlotRenderer.LANE_WIDTH) * p)" />
    <mutant id="mutant_13912" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LEFT_PAD) - ((AbstractPlotRenderer.LANE_WIDTH) * p)" />
    <mutant id="mutant_13915" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LEFT_PAD) * ((AbstractPlotRenderer.LANE_WIDTH) * p)" />
    <mutant id="mutant_13914" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.laneX(org.eclipse.jgit.revplot.PlotLane)" from="(AbstractPlotRenderer.LEFT_PAD) + ((AbstractPlotRenderer.LANE_WIDTH) * p)" to="(AbstractPlotRenderer.LEFT_PAD) / ((AbstractPlotRenderer.LANE_WIDTH) * p)" />
    <mutant id="mutant_1850" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="ai" />
    <mutant id="mutant_1851" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="a.begin" />
    <mutant id="mutant_1858" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="(bi * (b.begin))" />
    <mutant id="mutant_1859" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.hash(org.eclipse.jgit.diff.Subsequence,int)" from="(ptr + (seq.begin))" to="(ptr * (seq.begin))" />
    <mutant id="mutant_1856" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="(bi % (b.begin))" />
    <mutant id="mutant_1857" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="b.begin" />
    <mutant id="mutant_1854" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="(bi - (b.begin))" />
    <mutant id="mutant_1855" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="bi" />
    <mutant id="mutant_1852" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="(ai - (a.begin))" />
    <mutant id="mutant_1853" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(bi + (b.begin))" to="(bi / (b.begin))" />
    <mutant id="mutant_13928" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="(myLaneX % (dotSize / 2))" />
    <mutant id="mutant_13927" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="(myLaneX + (dotSize / 2))" />
    <mutant id="mutant_13929" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="myLaneX" />
    <mutant id="mutant_1849" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="(ai * (a.begin))" />
    <mutant id="mutant_13920" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="(dotSize * 2)" />
    <mutant id="mutant_13922" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="(dotSize % 2)" />
    <mutant id="mutant_13921" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="(dotSize + 2)" />
    <mutant id="mutant_13924" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="(myLaneX * (dotSize / 2))" />
    <mutant id="mutant_13923" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotSize / 2)" to="dotSize" />
    <mutant id="mutant_13926" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="(myLaneX / (dotSize / 2))" />
    <mutant id="mutant_13925" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - (dotSize / 2))" to="(dotSize / 2)" />
    <mutant id="mutant_1840" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.compute(org.eclipse.jgit.lib.ProgressMonitor)" from="((2 * (srcs.size())) * (dsts.size()))" to="((2 * (srcs.size())) % (dsts.size()))" />
    <mutant id="mutant_1847" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="(ai % (a.begin))" />
    <mutant id="mutant_1848" viable="true" in="org.eclipse.jgit.diff.SubsequenceComparator.equals(org.eclipse.jgit.diff.Subsequence,int,org.eclipse.jgit.diff.Subsequence,int)" from="(ai + (a.begin))" to="(ai / (a.begin))" />
    <mutant id="mutant_1845" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="end" />
    <mutant id="mutant_1846" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="begin" />
    <mutant id="mutant_1843" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="end % begin" />
    <mutant id="mutant_1844" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="end * begin" />
    <mutant id="mutant_1841" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="end + begin" />
    <mutant id="mutant_1842" viable="true" in="org.eclipse.jgit.diff.Subsequence(S,int,int)" from="end - begin" to="end / begin" />
    <mutant id="mutant_11312" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="(patternB.substring(0, b))" />
    <mutant id="mutant_12643" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) * name)" />
    <mutant id="mutant_13975" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH) / 2" />
    <mutant id="mutant_11313" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="match" />
    <mutant id="mutant_12644" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) / name)" />
    <mutant id="mutant_13974" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11314" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="((patternB.substring(0, b)) / match)" />
    <mutant id="mutant_12645" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) % name)" />
    <mutant id="mutant_13977" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx % ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11315" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="((patternB.substring(0, b)) % match)" />
    <mutant id="mutant_12646" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" />
    <mutant id="mutant_13976" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx * ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11316" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="((patternB.substring(0, b)) - match)" />
    <mutant id="mutant_12647" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.PACKED_REFS))" />
    <mutant id="mutant_13979" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_11317" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="1" />
    <mutant id="mutant_12648" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.PACKED_REFS))" />
    <mutant id="mutant_13978" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_11318" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="(b / 1)" />
    <mutant id="mutant_12649" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_11319" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="(b * 1)" />
    <mutant id="mutant_13971" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_12640" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) % &quot;/&quot;)" />
    <mutant id="mutant_13970" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_11310" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="((name.length()) / trailingA)" />
    <mutant id="mutant_12641" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) - name)" />
    <mutant id="mutant_13973" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx" />
    <mutant id="mutant_11311" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match)" to="((patternB.substring(0, b)) * match)" />
    <mutant id="mutant_12642" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;) + name)" to="name" />
    <mutant id="mutant_13972" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx / ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11323" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="((patternB.substring(0, b)) + match) / (patternB.substring((b + 1)))" />
    <mutant id="mutant_12654" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="1" />
    <mutant id="mutant_13986" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx" />
    <mutant id="mutant_11324" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="((patternB.substring(0, b)) + match) - (patternB.substring((b + 1)))" />
    <mutant id="mutant_12655" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="(sp * 1)" />
    <mutant id="mutant_13985" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11325" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="(patternB.substring(0, b)) + match" />
    <mutant id="mutant_12656" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="(sp - 1)" />
    <mutant id="mutant_13988" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx * ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11326" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="((patternB.substring(0, b)) + match) % (patternB.substring((b + 1)))" />
    <mutant id="mutant_12657" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="sp" />
    <mutant id="mutant_13987" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH) / 2" />
    <mutant id="mutant_11327" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="patternB.substring((b + 1))" />
    <mutant id="mutant_12658" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="(sp % 1)" />
    <mutant id="mutant_11328" viable="false" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((patternB.substring(0, b)) + match) + (patternB.substring((b + 1)))" to="((patternB.substring(0, b)) + match) * (patternB.substring((b + 1)))" />
    <mutant id="mutant_12659" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="((Constants.OBJECT_ID_STRING_LENGTH) - 1)" />
    <mutant id="mutant_13989" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx % ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11329" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="(match.getValue()) * (uri.substring(match.getKey().length()))" />
    <mutant id="mutant_13980" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_12650" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.PACKED_REFS))" />
    <mutant id="mutant_13982" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_11320" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="(b - 1)" />
    <mutant id="mutant_12651" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.PACKED_REFS))" />
    <mutant id="mutant_13981" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_11321" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="(b % 1)" />
    <mutant id="mutant_12652" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefs(java.util.Map)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.PACKED_REFS))" to="Constants.PACKED_REFS" />
    <mutant id="mutant_13984" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx / ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_11322" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(b + 1)" to="b" />
    <mutant id="mutant_12653" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.readPackedRefsImpl(java.util.Map,java.io.BufferedReader)" from="(sp + 1)" to="(sp / 1)" />
    <mutant id="mutant_13983" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_12629" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.LOGS))" />
    <mutant id="mutant_12621" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="(WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.INFO_REFS)" />
    <mutant id="mutant_13953" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="dotSize" />
    <mutant id="mutant_12622" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="(WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.INFO_REFS)" />
    <mutant id="mutant_13952" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="(h * dotSize)" />
    <mutant id="mutant_12623" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - name)" />
    <mutant id="mutant_13955" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="((h + dotSize) % 2)" />
    <mutant id="mutant_12624" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="name" />
    <mutant id="mutant_13954" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="(h + dotSize)" />
    <mutant id="mutant_12625" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % name)" />
    <mutant id="mutant_13957" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="((h + dotSize) + 2)" />
    <mutant id="mutant_12626" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / name)" />
    <mutant id="mutant_13956" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="2" />
    <mutant id="mutant_12627" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * name)" />
    <mutant id="mutant_13959" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="((h + dotSize) * 2)" />
    <mutant id="mutant_12628" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRef(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_13958" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((h + dotSize) / 2)" to="((h + dotSize) - 2)" />
    <mutant id="mutant_1894" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_1895" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="(prime * result) / ((value) == null ? 0 : value.hashCode())" />
    <mutant id="mutant_1892" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_1893" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_1890" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_1891" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_13951" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="(h - dotSize)" />
    <mutant id="mutant_12620" viable="false" in="?" from="(WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.INFO_REFS)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_13950" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h + dotSize)" to="h" />
    <mutant id="mutant_1898" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="(prime * result) % ((value) == null ? 0 : value.hashCode())" />
    <mutant id="mutant_1899" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="(prime * result) - ((value) == null ? 0 : value.hashCode())" />
    <mutant id="mutant_1896" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="(prime * result) * ((value) == null ? 0 : value.hashCode())" />
    <mutant id="mutant_1897" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + ((value) == null ? 0 : value.hashCode())" to="(value) == null ? 0 : value.hashCode()" />
    <mutant id="mutant_11309" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="((name.length()) % trailingA)" />
    <mutant id="mutant_11301" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="(patternA.length()) / (a + 1)" />
    <mutant id="mutant_12632" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.LOGS))" />
    <mutant id="mutant_13964" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX / cx)" />
    <mutant id="mutant_11302" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="(patternA.length()) + (a + 1)" />
    <mutant id="mutant_12633" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="(WalkRemoteObjectDatabase.ROOT_DIR)" />
    <mutant id="mutant_13963" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX % cx)" />
    <mutant id="mutant_11303" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="(patternA.length()) % (a + 1)" />
    <mutant id="mutant_12634" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.LOGS))" />
    <mutant id="mutant_13966" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_11304" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="a + 1" />
    <mutant id="mutant_12635" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" />
    <mutant id="mutant_13965" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="myLaneX" />
    <mutant id="mutant_11305" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="name.length()" />
    <mutant id="mutant_12636" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) / &quot;/&quot;)" />
    <mutant id="mutant_13968" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_11306" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="trailingA" />
    <mutant id="mutant_12637" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) - &quot;/&quot;)" />
    <mutant id="mutant_13967" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_11307" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="((name.length()) * trailingA)" />
    <mutant id="mutant_12638" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_11308" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="((name.length()) - trailingA)" to="((name.length()) + trailingA)" />
    <mutant id="mutant_12639" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) + &quot;/&quot;)" to="(((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS)) * &quot;/&quot;)" />
    <mutant id="mutant_13969" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_1883" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="(prime * result) / (state.hashCode())" />
    <mutant id="mutant_1884" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="(prime * result) % (state.hashCode())" />
    <mutant id="mutant_1881" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_1882" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_13960" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="cx" />
    <mutant id="mutant_1880" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_12630" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="(Constants.LOGS)" />
    <mutant id="mutant_13962" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX + cx)" />
    <mutant id="mutant_11300" viable="true" in="org.eclipse.jgit.transport.RefSpec.expandWildcard(java.lang.String,java.lang.String,java.lang.String)" from="(patternA.length()) - (a + 1)" to="patternA.length()" />
    <mutant id="mutant_12631" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.deleteRefLog(java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.LOGS))" to="((WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.LOGS))" />
    <mutant id="mutant_13961" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX * cx)" />
    <mutant id="mutant_1889" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_1887" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="(prime * result) - (state.hashCode())" />
    <mutant id="mutant_1888" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="prime * result" />
    <mutant id="mutant_1885" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="state.hashCode()" />
    <mutant id="mutant_1886" viable="true" in="org.eclipse.jgit.attributes.Attribute.hashCode()" from="(prime * result) + (state.hashCode())" to="(prime * result) * (state.hashCode())" />
    <mutant id="mutant_10029" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="stIdx" />
    <mutant id="mutant_10028" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="(stIdx * 1)" />
    <mutant id="mutant_10027" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="(stIdx - 1)" />
    <mutant id="mutant_10026" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="(stIdx % 1)" />
    <mutant id="mutant_10025" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="(stIdx / 1)" />
    <mutant id="mutant_11356" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) * &quot;, &quot;)" />
    <mutant id="mutant_12687" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="(remoteUrl - separator)" />
    <mutant id="mutant_11357" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_12688" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="(remoteUrl % separator)" />
    <mutant id="mutant_11358" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) - &quot;, &quot;)" />
    <mutant id="mutant_12689" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="(remoteUrl + separator) / submoduleUrl" />
    <mutant id="mutant_11359" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) * ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_12680" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) + 1)" />
    <mutant id="mutant_11350" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) - (status))" />
    <mutant id="mutant_12681" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) % 1)" />
    <mutant id="mutant_11351" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" />
    <mutant id="mutant_12682" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) * 1)" />
    <mutant id="mutant_11352" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) * (status))" />
    <mutant id="mutant_12683" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="(remoteUrl / separator)" />
    <mutant id="mutant_11353" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) % &quot;, &quot;)" />
    <mutant id="mutant_12684" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="remoteUrl" />
    <mutant id="mutant_11354" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) / &quot;, &quot;)" />
    <mutant id="mutant_12685" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="separator" />
    <mutant id="mutant_11355" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" />
    <mutant id="mutant_12686" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator)" to="(remoteUrl * separator)" />
    <mutant id="mutant_10024" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="1" />
    <mutant id="mutant_10023" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(stIdx + 1)" to="stIdx" />
    <mutant id="mutant_10022" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="(n / stIdx)" />
    <mutant id="mutant_10021" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="(n % stIdx)" />
    <mutant id="mutant_10020" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="(n + stIdx)" />
    <mutant id="mutant_10039" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="(cIdx % (entrySpan))" />
    <mutant id="mutant_10038" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="cIdx" />
    <mutant id="mutant_10037" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="(entrySpan)" />
    <mutant id="mutant_10036" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="(cIdx / (entrySpan))" />
    <mutant id="mutant_11367" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) % &quot;...&quot;)" />
    <mutant id="mutant_12698" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; - (a.toString()))" />
    <mutant id="mutant_11368" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) - &quot;...&quot;)" />
    <mutant id="mutant_12699" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="&quot;(&quot;" />
    <mutant id="mutant_11369" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_12690" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="(remoteUrl + separator) * submoduleUrl" />
    <mutant id="mutant_11360" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;)" />
    <mutant id="mutant_12691" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="submoduleUrl" />
    <mutant id="mutant_11361" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) - ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_12692" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="(remoteUrl + separator) % submoduleUrl" />
    <mutant id="mutant_11362" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) / ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_12693" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="remoteUrl + separator" />
    <mutant id="mutant_11363" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)" />
    <mutant id="mutant_12694" viable="false" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(remoteUrl + separator) + submoduleUrl" to="(remoteUrl + separator) - submoduleUrl" />
    <mutant id="mutant_11364" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" to="(((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) % ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_12695" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; * (a.toString()))" />
    <mutant id="mutant_11365" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) * &quot;...&quot;)" />
    <mutant id="mutant_12696" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(a.toString())" />
    <mutant id="mutant_11366" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="&quot;...&quot;" />
    <mutant id="mutant_12697" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; % (a.toString()))" />
    <mutant id="mutant_10035" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="(cIdx * (entrySpan))" />
    <mutant id="mutant_10034" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="(n / stIdx)" />
    <mutant id="mutant_10033" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="(n % stIdx)" />
    <mutant id="mutant_10032" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="(n + stIdx)" />
    <mutant id="mutant_10031" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="n" />
    <mutant id="mutant_10030" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.removeChild(int)" from="(n - stIdx)" to="(n * stIdx)" />
    <mutant id="mutant_10009" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="n * 1" />
    <mutant id="mutant_10008" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="n" />
    <mutant id="mutant_10007" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="n / 1" />
    <mutant id="mutant_10006" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="1" />
    <mutant id="mutant_10005" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="n - 1" />
    <mutant id="mutant_10004" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="((childCnt) + stIdx)" />
    <mutant id="mutant_10003" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="childCnt" />
    <mutant id="mutant_11334" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="(match.getValue()) % (uri.substring(match.getKey().length()))" />
    <mutant id="mutant_12665" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - name)" />
    <mutant id="mutant_13997" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_11335" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="(&quot;RemoteRefUpdate[remoteName=&quot; % (remoteName))" />
    <mutant id="mutant_12666" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="name" />
    <mutant id="mutant_13996" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_11336" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="(&quot;RemoteRefUpdate[remoteName=&quot; - (remoteName))" />
    <mutant id="mutant_12667" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % name)" />
    <mutant id="mutant_13999" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_11337" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="(&quot;RemoteRefUpdate[remoteName=&quot; * (remoteName))" />
    <mutant id="mutant_12668" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / name)" />
    <mutant id="mutant_13998" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_11338" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="&quot;RemoteRefUpdate[remoteName=&quot;" />
    <mutant id="mutant_12669" viable="false" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * name)" />
    <mutant id="mutant_11339" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="(&quot;RemoteRefUpdate[remoteName=&quot; / (remoteName))" />
    <mutant id="mutant_13991" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_12660" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="1" />
    <mutant id="mutant_13990" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_11330" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="(match.getValue()) - (uri.substring(match.getKey().length()))" />
    <mutant id="mutant_12661" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 1)" />
    <mutant id="mutant_13993" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_11331" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="match.getValue()" />
    <mutant id="mutant_12662" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_13992" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_11332" viable="false" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="(match.getValue()) / (uri.substring(match.getKey().length()))" />
    <mutant id="mutant_12663" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 1)" />
    <mutant id="mutant_13995" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_11333" viable="true" in="org.eclipse.jgit.transport.RemoteConfig.replaceUri(java.lang.String,java.util.Map)" from="(match.getValue()) + (uri.substring(match.getKey().length()))" to="uri.substring(match.getKey().length())" />
    <mutant id="mutant_12664" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) + 1)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 1)" />
    <mutant id="mutant_13994" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_10002" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="((childCnt) / stIdx)" />
    <mutant id="mutant_10001" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="((childCnt) % stIdx)" />
    <mutant id="mutant_10000" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="((childCnt) * stIdx)" />
    <mutant id="mutant_10019" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="n" />
    <mutant id="mutant_10018" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="(n * stIdx)" />
    <mutant id="mutant_10017" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(n - stIdx)" to="stIdx" />
    <mutant id="mutant_10016" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx * 1)" />
    <mutant id="mutant_10015" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx - 1)" />
    <mutant id="mutant_10014" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx % 1)" />
    <mutant id="mutant_11345" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) - &quot;, &quot;)" />
    <mutant id="mutant_12676" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) * 1)" />
    <mutant id="mutant_11346" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_12677" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="remoteUrl.length()" />
    <mutant id="mutant_11347" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) % (status))" />
    <mutant id="mutant_12678" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="1" />
    <mutant id="mutant_11348" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="(status)" />
    <mutant id="mutant_12679" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) / 1)" />
    <mutant id="mutant_11349" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status))" to="(((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) / (status))" />
    <mutant id="mutant_12670" viable="true" in="org.eclipse.jgit.transport.WalkRemoteObjectDatabase.writeRef(java.lang.String,org.eclipse.jgit.lib.ObjectId)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + name)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_11340" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" to="(remoteName)" />
    <mutant id="mutant_12671" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="remoteUrl.length()" />
    <mutant id="mutant_11341" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="(&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName))" />
    <mutant id="mutant_12672" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="1" />
    <mutant id="mutant_11342" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) % &quot;, &quot;)" />
    <mutant id="mutant_12673" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) / 1)" />
    <mutant id="mutant_11343" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) / &quot;, &quot;)" />
    <mutant id="mutant_12674" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) + 1)" />
    <mutant id="mutant_11344" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;)" to="((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) * &quot;, &quot;)" />
    <mutant id="mutant_12675" viable="true" in="org.eclipse.jgit.submodule.SubmoduleWalk.getSubmoduleRemoteUrl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((remoteUrl.length()) - 1)" to="((remoteUrl.length()) % 1)" />
    <mutant id="mutant_10013" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx / 1)" />
    <mutant id="mutant_10012" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="1" />
    <mutant id="mutant_10011" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="stIdx" />
    <mutant id="mutant_10010" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="n + 1" to="n % 1" />
    <mutant id="mutant_10069" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="ptr" />
    <mutant id="mutant_10060" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="1" />
    <mutant id="mutant_11392" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) - (srcRef))" />
    <mutant id="mutant_11393" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) % (srcRef))" />
    <mutant id="mutant_11394" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) / (srcRef))" />
    <mutant id="mutant_11395" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) % (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" />
    <mutant id="mutant_11396" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) * (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" />
    <mutant id="mutant_11397" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) / (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" />
    <mutant id="mutant_11398" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="(forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)" />
    <mutant id="mutant_11399" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) - (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" />
    <mutant id="mutant_10068" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="((tmp.length) / ptr)" />
    <mutant id="mutant_10067" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="tmp.length" />
    <mutant id="mutant_10066" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="((tmp.length) + ptr)" />
    <mutant id="mutant_10065" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="((tmp.length) % ptr)" />
    <mutant id="mutant_10064" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="((childCnt) + 1)" />
    <mutant id="mutant_10063" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="((childCnt) % 1)" />
    <mutant id="mutant_10062" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="childCnt" />
    <mutant id="mutant_11390" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" />
    <mutant id="mutant_10061" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="((childCnt) * 1)" />
    <mutant id="mutant_11391" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="(srcRef)" />
    <mutant id="mutant_10071" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="&quot;: &quot; - (new String(bytes , offset , length , &quot;US-ASCII&quot;))" />
    <mutant id="mutant_10070" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.write(byte[],java.io.OutputStream)" from="((tmp.length) - ptr)" to="((tmp.length) * ptr)" />
    <mutant id="mutant_10079" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="(uri % &quot;: &quot;)" />
    <mutant id="mutant_10078" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="(uri / &quot;: &quot;)" />
    <mutant id="mutant_10077" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(uri + &quot;: &quot;)" to="(uri - &quot;: &quot;)" />
    <mutant id="mutant_10076" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="&quot;: &quot; % (new String(bytes , offset , length , &quot;US-ASCII&quot;))" />
    <mutant id="mutant_10075" viable="true" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="new String(bytes , offset , length , &quot;US-ASCII&quot;)" />
    <mutant id="mutant_10074" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="&quot;: &quot;" />
    <mutant id="mutant_10073" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="&quot;: &quot; / (new String(bytes , offset , length , &quot;US-ASCII&quot;))" />
    <mutant id="mutant_10072" viable="false" in="org.eclipse.jgit.errors.InvalidObjectIdException.asAscii(byte[],int,int)" from="&quot;: &quot; + (new String(bytes , offset , length , &quot;US-ASCII&quot;))" to="&quot;: &quot; * (new String(bytes , offset , length , &quot;US-ASCII&quot;))" />
    <mutant id="mutant_10049" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="(st.nameLength())" />
    <mutant id="mutant_10048" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="(pathOff % (st.nameLength()))" />
    <mutant id="mutant_10047" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="(pathOff - (st.nameLength()))" />
    <mutant id="mutant_11378" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) % (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" />
    <mutant id="mutant_11379" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) - (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" />
    <mutant id="mutant_11370" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) / &quot;...&quot;)" />
    <mutant id="mutant_11371" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) / ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_11372" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) * ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_11373" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;)" />
    <mutant id="mutant_11374" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)" />
    <mutant id="mutant_11375" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) % ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_11376" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) - ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_11377" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) * (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" />
    <mutant id="mutant_10046" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="pathOff" />
    <mutant id="mutant_10045" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="(p * pathOff)" />
    <mutant id="mutant_10044" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="(p % pathOff)" />
    <mutant id="mutant_10043" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="(p + pathOff)" />
    <mutant id="mutant_10042" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="(p / pathOff)" />
    <mutant id="mutant_10041" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(p - pathOff)" to="p" />
    <mutant id="mutant_10040" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(cIdx + (entrySpan))" to="(cIdx - (entrySpan))" />
    <mutant id="mutant_10059" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((childCnt) - 1)" to="((childCnt) / 1)" />
    <mutant id="mutant_10058" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="(pathOff + (st.nameLength()))" />
    <mutant id="mutant_11389" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) * (srcRef))" />
    <mutant id="mutant_11381" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="(fastForward ? &quot;, fastForward&quot; : &quot;&quot;)" />
    <mutant id="mutant_11382" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) / (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" />
    <mutant id="mutant_11383" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) * &quot;, srcRef=&quot;)" />
    <mutant id="mutant_11384" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) - &quot;, srcRef=&quot;)" />
    <mutant id="mutant_11385" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" />
    <mutant id="mutant_11386" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="&quot;, srcRef=&quot;" />
    <mutant id="mutant_11387" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) / &quot;, srcRef=&quot;)" />
    <mutant id="mutant_11388" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;)" to="(((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) % &quot;, srcRef=&quot;)" />
    <mutant id="mutant_10057" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="((pathOff + (st.nameLength())) / 1)" />
    <mutant id="mutant_10056" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="((pathOff + (st.nameLength())) - 1)" />
    <mutant id="mutant_10055" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="((pathOff + (st.nameLength())) % 1)" />
    <mutant id="mutant_10054" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="1" />
    <mutant id="mutant_10053" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="((pathOff + (st.nameLength())) + 1)" to="((pathOff + (st.nameLength())) * 1)" />
    <mutant id="mutant_10052" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="pathOff" />
    <mutant id="mutant_10051" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="(pathOff * (st.nameLength()))" />
    <mutant id="mutant_10050" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.validate(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,int)" from="(pathOff + (st.nameLength()))" to="(pathOff / (st.nameLength()))" />
    <mutant id="mutant_11380" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;))" to="(((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;))" />
    <mutant id="mutant_13259" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="1" />
    <mutant id="mutant_13252" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14583" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="lines.length" />
    <mutant id="mutant_13251" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14582" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="(lines.length) + 1" />
    <mutant id="mutant_13254" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="RawParseUtils.nextLF(rawTag, p)" />
    <mutant id="mutant_14585" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="(lines[i].length()) * (delimiter.length())" />
    <mutant id="mutant_13253" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="1" />
    <mutant id="mutant_14584" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="lines[i].length()" />
    <mutant id="mutant_13256" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="(RawParseUtils.nextLF(rawTag, p)) + 1" />
    <mutant id="mutant_14587" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="(lines[i].length()) - (delimiter.length())" />
    <mutant id="mutant_13255" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="(RawParseUtils.nextLF(rawTag, p)) * 1" />
    <mutant id="mutant_14586" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="(lines[i].length()) / (delimiter.length())" />
    <mutant id="mutant_13258" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="(RawParseUtils.nextLF(rawTag, p)) / 1" />
    <mutant id="mutant_14589" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID)" />
    <mutant id="mutant_13257" viable="true" in="org.eclipse.jgit.revwalk.RevTag.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(RawParseUtils.nextLF(rawTag, p)) - 1" to="(RawParseUtils.nextLF(rawTag, p)) % 1" />
    <mutant id="mutant_14588" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines[i].length()) + (delimiter.length())" to="(lines[i].length()) % (delimiter.length())" />
    <mutant id="mutant_13250" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_14581" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="(lines.length) * 1" />
    <mutant id="mutant_14580" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="(lines.length) % 1" />
    <mutant id="mutant_13263" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="(1 &lt;&lt; (RevWalk.RESERVED_FLAGS))" />
    <mutant id="mutant_14594" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="indexOfChangeIdLineinString % (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13262" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) % 1)" />
    <mutant id="mutant_14593" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="indexOfChangeIdLineinString / (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13265" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="(5 % (RevWalk.MB))" />
    <mutant id="mutant_14596" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="1" />
    <mutant id="mutant_13264" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) + 1)" />
    <mutant id="mutant_14595" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="(lines.length) / 1" />
    <mutant id="mutant_13267" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="5" />
    <mutant id="mutant_14598" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="(lines.length) * 1" />
    <mutant id="mutant_13266" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="(5 / (RevWalk.MB))" />
    <mutant id="mutant_14597" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="(lines.length) % 1" />
    <mutant id="mutant_13269" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="RevWalk.MB" />
    <mutant id="mutant_13268" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="(5 - (RevWalk.MB))" />
    <mutant id="mutant_14599" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="(lines.length) + 1" />
    <mutant id="mutant_14590" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="indexOfChangeIdLineinString - (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13261" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) * 1)" />
    <mutant id="mutant_14592" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="indexOfChangeIdLineinString" />
    <mutant id="mutant_13260" viable="false" in="?" from="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) - 1)" to="((1 &lt;&lt; (RevWalk.RESERVED_FLAGS)) / 1)" />
    <mutant id="mutant_14591" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="indexOfChangeIdLineinString + (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" to="indexOfChangeIdLineinString * (lines[indexOfChangeIdLine].indexOf(org.eclipse.jgit.util.ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13238" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_14569" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="(&quot;(^&quot; * (ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13237" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) + (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14568" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="(&quot;(^&quot; / (ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_15899" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="blockPos" />
    <mutant id="mutant_13239" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_13230" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14561" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="((BlockList.BLOCK_SIZE) + i)" />
    <mutant id="mutant_15893" viable="false" in="?" from="8 * 1024" to="8 / 1024" />
    <mutant id="mutant_14560" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="((BlockList.BLOCK_SIZE) / i)" />
    <mutant id="mutant_15894" viable="false" in="?" from="8 * 1024" to="1024" />
    <mutant id="mutant_13232" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14563" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="((BlockList.BLOCK_SIZE) * i)" />
    <mutant id="mutant_15891" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="(getTimeZone().getOffset(when)) + (60 * 1000)" />
    <mutant id="mutant_13231" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_14562" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="i" />
    <mutant id="mutant_15892" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="(getTimeZone().getOffset(when)) % (60 * 1000)" />
    <mutant id="mutant_13234" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14565" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="BlockList.BLOCK_SIZE" />
    <mutant id="mutant_15897" viable="false" in="?" from="8 * 1024" to="8 % 1024" />
    <mutant id="mutant_13233" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) - (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14564" viable="true" in="org.eclipse.jgit.util.BlockList.addAll(T[],int,int)" from="((BlockList.BLOCK_SIZE) - i)" to="((BlockList.BLOCK_SIZE) % i)" />
    <mutant id="mutant_15898" viable="false" in="?" from="8 * 1024" to="8 - 1024" />
    <mutant id="mutant_13236" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14567" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="(&quot;(^&quot; - (ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_15895" viable="false" in="?" from="8 * 1024" to="8 + 1024" />
    <mutant id="mutant_13235" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14566" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="(&quot;(^&quot; % (ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_15896" viable="false" in="?" from="8 * 1024" to="8" />
    <mutant id="mutant_15890" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="(getTimeZone().getOffset(when)) - (60 * 1000)" />
    <mutant id="mutant_13249" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) + (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_13248" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14579" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="1" />
    <mutant id="mutant_13241" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14572" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="&quot; *I[a-f0-9]{40}$)&quot;" />
    <mutant id="mutant_13240" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14571" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="(ChangeIdUtil.CHANGE_ID)" />
    <mutant id="mutant_13243" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_14574" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) % &quot; *I[a-f0-9]{40}$)&quot;)" />
    <mutant id="mutant_13242" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14573" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) - &quot; *I[a-f0-9]{40}$)&quot;)" />
    <mutant id="mutant_13245" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) - (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14576" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" />
    <mutant id="mutant_13244" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14575" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) * &quot; *I[a-f0-9]{40}$)&quot;)" />
    <mutant id="mutant_13247" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14578" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfChangeId(java.lang.String,java.lang.String)" from="(lines.length) - 1" to="(lines.length) / 1" />
    <mutant id="mutant_13246" viable="true" in="org.eclipse.jgit.revwalk.RevObjectList.set(int,E)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14577" viable="false" in="?" from="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) + &quot; *I[a-f0-9]{40}$)&quot;)" to="((&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID)) / &quot; *I[a-f0-9]{40}$)&quot;)" />
    <mutant id="mutant_14570" viable="false" in="?" from="(&quot;(^&quot; + (ChangeIdUtil.CHANGE_ID))" to="&quot;(^&quot;" />
    <mutant id="mutant_13296" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="&quot;[&quot;" />
    <mutant id="mutant_13295" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) % &quot;[&quot;)" />
    <mutant id="mutant_13298" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) * &quot;[&quot;)" />
    <mutant id="mutant_13297" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="(getClass().getSimpleName())" />
    <mutant id="mutant_13299" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) - &quot;[&quot;)" />
    <mutant id="mutant_13290" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="nParents" />
    <mutant id="mutant_13292" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="nParents * 1" />
    <mutant id="mutant_13291" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="nParents / 1" />
    <mutant id="mutant_13294" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="nParents % 1" />
    <mutant id="mutant_13293" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="nParents - 1" />
    <mutant id="mutant_13274" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="(32 % (RevWalk.RESERVED_FLAGS))" />
    <mutant id="mutant_13273" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="(32 + (RevWalk.RESERVED_FLAGS))" />
    <mutant id="mutant_13276" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="32" />
    <mutant id="mutant_13275" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="(32 / (RevWalk.RESERVED_FLAGS))" />
    <mutant id="mutant_13278" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="24 + 3600" />
    <mutant id="mutant_13277" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="24" />
    <mutant id="mutant_13279" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="3600" />
    <mutant id="mutant_13270" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.getCachedBytes(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.lib.ObjectLoader)" from="(5 * (RevWalk.MB))" to="(5 + (RevWalk.MB))" />
    <mutant id="mutant_13272" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="RevWalk.RESERVED_FLAGS" />
    <mutant id="mutant_13271" viable="true" in="org.eclipse.jgit.revwalk.RevWalk.allocFlag()" from="(32 - (RevWalk.RESERVED_FLAGS))" to="(32 * (RevWalk.RESERVED_FLAGS))" />
    <mutant id="mutant_13285" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="((headCommit.getCommitTime()) % SKEW)" />
    <mutant id="mutant_13284" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="(headCommit.getCommitTime())" />
    <mutant id="mutant_13287" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="((headCommit.getCommitTime()) - SKEW)" />
    <mutant id="mutant_13286" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="((headCommit.getCommitTime()) / SKEW)" />
    <mutant id="mutant_13289" viable="true" in="org.eclipse.jgit.revwalk.TreeRevFilter.include(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)" from="nParents + 1" to="1" />
    <mutant id="mutant_13288" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="SKEW" />
    <mutant id="mutant_13281" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="24 % 3600" />
    <mutant id="mutant_13280" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="24 / 3600" />
    <mutant id="mutant_13283" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="((headCommit.getCommitTime()) + SKEW)" to="((headCommit.getCommitTime()) * SKEW)" />
    <mutant id="mutant_13282" viable="true" in="org.eclipse.jgit.revwalk.RevWalkUtils.findBranchesReachableFrom(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.Collection)" from="24 * 3600" to="24 - 3600" />
    <mutant id="mutant_1719" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="((bDirLen - 1) % dirSim)" />
    <mutant id="mutant_1717" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="(bDirLen - 1)" />
    <mutant id="mutant_1718" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="((bDirLen - 1) / dirSim)" />
    <mutant id="mutant_1715" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="((bDirLen - 1) + dirSim)" />
    <mutant id="mutant_1716" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="dirSim" />
    <mutant id="mutant_1713" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="(bDirLen / 1)" />
    <mutant id="mutant_1714" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="(bDirLen * 1)" />
    <mutant id="mutant_1711" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="bDirLen" />
    <mutant id="mutant_1712" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="(bDirLen + 1)" />
    <mutant id="mutant_1710" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="(bDirLen % 1)" />
    <mutant id="mutant_1708" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="((aDirLen - 1) / dirSim)" />
    <mutant id="mutant_1709" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(bDirLen - 1)" to="1" />
    <mutant id="mutant_1706" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="((aDirLen - 1) % dirSim)" />
    <mutant id="mutant_1707" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="((aDirLen - 1) * dirSim)" />
    <mutant id="mutant_1704" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="(aDirLen - 1)" />
    <mutant id="mutant_1705" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="dirSim" />
    <mutant id="mutant_1702" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="aDirLen" />
    <mutant id="mutant_1703" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((aDirLen - 1) - dirSim)" to="((aDirLen - 1) + dirSim)" />
    <mutant id="mutant_1700" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="(aDirLen / 1)" />
    <mutant id="mutant_1701" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="(aDirLen + 1)" />
    <mutant id="mutant_1751" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="b.length()" />
    <mutant id="mutant_1752" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) + bDirLen)" />
    <mutant id="mutant_1750" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) % aDirLen)" />
    <mutant id="mutant_1759" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="((a.length()) / 1)" />
    <mutant id="mutant_1757" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="(a.length())" />
    <mutant id="mutant_1758" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="1" />
    <mutant id="mutant_1755" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) / bDirLen)" />
    <mutant id="mutant_1756" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) % bDirLen)" />
    <mutant id="mutant_1753" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) * bDirLen)" />
    <mutant id="mutant_1754" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="bDirLen" />
    <mutant id="mutant_1740" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) + bDirLen)" />
    <mutant id="mutant_1741" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) * bDirLen)" />
    <mutant id="mutant_1748" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) / aDirLen)" />
    <mutant id="mutant_1749" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="aDirLen" />
    <mutant id="mutant_1746" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) * aDirLen)" />
    <mutant id="mutant_1747" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) + aDirLen)" />
    <mutant id="mutant_1744" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) % bDirLen)" />
    <mutant id="mutant_1745" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="a.length()" />
    <mutant id="mutant_1742" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="bDirLen" />
    <mutant id="mutant_1743" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="((b.length()) / bDirLen)" />
    <mutant id="mutant_1739" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - bDirLen)" to="b.length()" />
    <mutant id="mutant_1730" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) % dirMax" />
    <mutant id="mutant_1737" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="aDirLen" />
    <mutant id="mutant_1738" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) % aDirLen)" />
    <mutant id="mutant_1735" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) + aDirLen)" />
    <mutant id="mutant_1736" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) / aDirLen)" />
    <mutant id="mutant_1733" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="a.length()" />
    <mutant id="mutant_1734" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - aDirLen)" to="((a.length()) * aDirLen)" />
    <mutant id="mutant_1731" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) * dirMax" />
    <mutant id="mutant_1732" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) - dirMax" />
    <mutant id="mutant_1728" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="dirSim * 100" />
    <mutant id="mutant_1729" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) + dirMax" />
    <mutant id="mutant_1726" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim % 100)" />
    <mutant id="mutant_1727" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="dirMax" />
    <mutant id="mutant_1724" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="dirSim" />
    <mutant id="mutant_1725" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim + 100)" />
    <mutant id="mutant_1722" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim - 100)" />
    <mutant id="mutant_1723" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="100" />
    <mutant id="mutant_1720" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((bDirLen - 1) - dirSim)" to="((bDirLen - 1) * dirSim)" />
    <mutant id="mutant_1721" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim / 100)" />
    <mutant id="mutant_1795" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="dirScoreRtl" />
    <mutant id="mutant_1796" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="(dirScoreLtr / dirScoreRtl)" />
    <mutant id="mutant_1793" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="(dirScoreLtr * dirScoreRtl)" />
    <mutant id="mutant_1794" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="dirScoreLtr" />
    <mutant id="mutant_1791" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="fileMax" />
    <mutant id="mutant_1792" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="(fileSim * 100) + fileMax" />
    <mutant id="mutant_1790" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="fileSim * 100" />
    <mutant id="mutant_1799" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((dirScoreLtr + dirScoreRtl) * 25)" to="25" />
    <mutant id="mutant_1797" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="(dirScoreLtr - dirScoreRtl)" />
    <mutant id="mutant_1798" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirScoreLtr + dirScoreRtl)" to="(dirScoreLtr % dirScoreRtl)" />
    <mutant id="mutant_15808" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="2" />
    <mutant id="mutant_15809" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="unit" />
    <mutant id="mutant_15802" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="unit" />
    <mutant id="mutant_15803" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="n + (unit / 2)" />
    <mutant id="mutant_15800" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="(n * (unit / 2))" />
    <mutant id="mutant_15801" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="(n + (unit / 2)) * unit" />
    <mutant id="mutant_15806" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="(n + (unit / 2)) + unit" />
    <mutant id="mutant_15807" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="(unit * 2)" />
    <mutant id="mutant_15804" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="(n + (unit / 2)) - unit" />
    <mutant id="mutant_15805" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2)) / unit" to="(n + (unit / 2)) % unit" />
    <mutant id="mutant_1784" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="(fileSim / 100)" />
    <mutant id="mutant_1785" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="fileSim" />
    <mutant id="mutant_1782" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="(fileSim + 100)" />
    <mutant id="mutant_1783" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="(fileSim - 100)" />
    <mutant id="mutant_1780" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="((b.length()) - 1)" />
    <mutant id="mutant_1781" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="100" />
    <mutant id="mutant_1788" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="(fileSim * 100) % fileMax" />
    <mutant id="mutant_1789" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="(fileSim * 100) * fileMax" />
    <mutant id="mutant_1786" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100)" to="(fileSim % 100)" />
    <mutant id="mutant_1787" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(fileSim * 100) / fileMax" to="(fileSim * 100) - fileMax" />
    <mutant id="mutant_1773" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="((b.length()) % 1)" />
    <mutant id="mutant_1774" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="((b.length()) * 1)" />
    <mutant id="mutant_1771" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="((b.length()) / 1)" />
    <mutant id="mutant_1772" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="((b.length()) + 1)" />
    <mutant id="mutant_1770" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="1" />
    <mutant id="mutant_1779" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="fileSim" />
    <mutant id="mutant_1777" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="(((b.length()) - 1) / fileSim)" />
    <mutant id="mutant_1778" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="(((b.length()) - 1) % fileSim)" />
    <mutant id="mutant_1775" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="(((b.length()) - 1) * fileSim)" />
    <mutant id="mutant_1776" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((b.length()) - 1) - fileSim)" to="(((b.length()) - 1) + fileSim)" />
    <mutant id="mutant_1762" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="((a.length()) * 1)" />
    <mutant id="mutant_1763" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="(((a.length()) - 1) * fileSim)" />
    <mutant id="mutant_1760" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="((a.length()) + 1)" />
    <mutant id="mutant_1761" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((a.length()) - 1)" to="((a.length()) % 1)" />
    <mutant id="mutant_1768" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="((a.length()) - 1)" />
    <mutant id="mutant_1769" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="((b.length()) - 1)" to="(b.length())" />
    <mutant id="mutant_1766" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="(((a.length()) - 1) % fileSim)" />
    <mutant id="mutant_1767" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="fileSim" />
    <mutant id="mutant_1764" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="(((a.length()) - 1) + fileSim)" />
    <mutant id="mutant_1765" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(((a.length()) - 1) - fileSim)" to="(((a.length()) - 1) / fileSim)" />
    <mutant id="mutant_14503" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset * 2)" />
    <mutant id="mutant_15835" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="'a'" />
    <mutant id="mutant_14502" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset % 2)" />
    <mutant id="mutant_15836" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="c - 'A'" />
    <mutant id="mutant_14505" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset / 2)" />
    <mutant id="mutant_15833" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="'a' * (c - 'A')" />
    <mutant id="mutant_14504" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset - 2)" />
    <mutant id="mutant_15834" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="'a' - (c - 'A')" />
    <mutant id="mutant_14507" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="3" />
    <mutant id="mutant_15839" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) / (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" />
    <mutant id="mutant_14506" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset / 3)" />
    <mutant id="mutant_14509" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset % 3)" />
    <mutant id="mutant_15837" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) + (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" />
    <mutant id="mutant_14508" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="destOffset" />
    <mutant id="mutant_15838" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))" />
    <mutant id="mutant_15831" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="'a' / (c - 'A')" />
    <mutant id="mutant_15832" viable="false" in="?" from="((char)('a' + (c - 'A')))" to="'a' % (c - 'A')" />
    <mutant id="mutant_14501" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="destOffset" />
    <mutant id="mutant_14500" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="2" />
    <mutant id="mutant_15830" viable="false" in="?" from="(c - 'A')" to="(c * 'A')" />
    <mutant id="mutant_14514" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="(BlockList.BLOCK_SIZE) * 1" />
    <mutant id="mutant_15846" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) % (b.length())" />
    <mutant id="mutant_14513" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="(BlockList.BLOCK_SIZE) / 1" />
    <mutant id="mutant_15847" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="a.charAt(i)" />
    <mutant id="mutant_14516" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="(BlockList.BLOCK_SIZE) % 1" />
    <mutant id="mutant_15844" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) / (b.length())" />
    <mutant id="mutant_14515" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="(BlockList.BLOCK_SIZE) + 1" />
    <mutant id="mutant_15845" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) + (b.length())" />
    <mutant id="mutant_14518" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="1" />
    <mutant id="mutant_14517" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="BlockList.BLOCK_SIZE" />
    <mutant id="mutant_15848" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="(a.charAt(i)) / (b.charAt(i))" />
    <mutant id="mutant_14519" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) * 1)" />
    <mutant id="mutant_15849" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="(a.charAt(i)) % (b.charAt(i))" />
    <mutant id="mutant_14510" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset - 3)" />
    <mutant id="mutant_15842" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="a.length()" />
    <mutant id="mutant_15843" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) * (b.length())" />
    <mutant id="mutant_14512" viable="false" in="?" from="(BlockList.BLOCK_SIZE) - 1" to="1" />
    <mutant id="mutant_15840" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) * (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" />
    <mutant id="mutant_14511" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset * 3)" />
    <mutant id="mutant_15841" viable="true" in="org.eclipse.jgit.util.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)" from="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) - (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" to="(org.eclipse.jgit.util.StringUtils.toLowerCase(a.charAt(i))) % (org.eclipse.jgit.util.StringUtils.toLowerCase(b.charAt(i)))" />
    <mutant id="mutant_15819" viable="false" in="?" from="'Z' + 1" to="'Z' * 1" />
    <mutant id="mutant_15813" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit" />
    <mutant id="mutant_15814" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit * (unit / 2)" />
    <mutant id="mutant_15811" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="(unit + 2)" />
    <mutant id="mutant_15812" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="(unit % 2)" />
    <mutant id="mutant_15817" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit / (unit / 2)" />
    <mutant id="mutant_15818" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit / 2" />
    <mutant id="mutant_15815" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit % (unit / 2)" />
    <mutant id="mutant_15816" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="unit + (unit / 2)" to="unit - (unit / 2)" />
    <mutant id="mutant_15810" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.upperLimit(long)" from="(unit / 2)" to="(unit - 2)" />
    <mutant id="mutant_15824" viable="false" in="?" from="'Z' + 1" to="'Z' - 1" />
    <mutant id="mutant_15825" viable="false" in="?" from="(c - 'A')" to="(c + 'A')" />
    <mutant id="mutant_15822" viable="false" in="?" from="'Z' + 1" to="'Z'" />
    <mutant id="mutant_15823" viable="false" in="?" from="'Z' + 1" to="'Z' / 1" />
    <mutant id="mutant_15828" viable="false" in="?" from="(c - 'A')" to="'A'" />
    <mutant id="mutant_15829" viable="false" in="?" from="(c - 'A')" to="c" />
    <mutant id="mutant_15826" viable="false" in="?" from="(c - 'A')" to="(c % 'A')" />
    <mutant id="mutant_15827" viable="false" in="?" from="(c - 'A')" to="(c / 'A')" />
    <mutant id="mutant_15820" viable="false" in="?" from="'Z' + 1" to="1" />
    <mutant id="mutant_15821" viable="false" in="?" from="'Z' + 1" to="'Z' % 1" />
    <mutant id="mutant_13216" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="size()" />
    <mutant id="mutant_14547" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="i % 1" />
    <mutant id="mutant_15879" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_13215" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="((size()) * 1)" />
    <mutant id="mutant_14546" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="i - 1" />
    <mutant id="mutant_13218" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14549" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="(size) * 2" />
    <mutant id="mutant_15877" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_13217" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14548" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="2" />
    <mutant id="mutant_15878" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_13219" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_15871" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_15872" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_13210" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="32" />
    <mutant id="mutant_14541" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) % 1)" />
    <mutant id="mutant_14540" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="size" />
    <mutant id="mutant_15870" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_13212" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="((size()) / 1)" />
    <mutant id="mutant_14543" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="1" />
    <mutant id="mutant_15875" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_13211" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="1" />
    <mutant id="mutant_14542" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="i / 1" />
    <mutant id="mutant_15876" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_13214" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="((size()) % 1)" />
    <mutant id="mutant_14545" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="i * 1" />
    <mutant id="mutant_15873" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_13213" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.lastIndexOf(org.eclipse.jgit.revwalk.RevFlag,int)" from="((size()) - 1)" to="((size()) + 1)" />
    <mutant id="mutant_14544" viable="true" in="org.eclipse.jgit.util.BlockList.add(T)" from="i + 1" to="i" />
    <mutant id="mutant_15874" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_13227" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14558" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="(oldIdx - 1)" />
    <mutant id="mutant_13226" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="s.shift" />
    <mutant id="mutant_14557" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="oldIdx" />
    <mutant id="mutant_13229" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(org.eclipse.jgit.revwalk.RevCommit,int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_15888" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="getTimeZone().getOffset(when)" />
    <mutant id="mutant_13228" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14559" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="(oldIdx / 1)" />
    <mutant id="mutant_15889" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="60 * 1000" />
    <mutant id="mutant_14550" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="(size) + 2" />
    <mutant id="mutant_15882" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="1000" />
    <mutant id="mutant_15883" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="60" />
    <mutant id="mutant_13221" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) - (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14552" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="size" />
    <mutant id="mutant_15880" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_13220" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="((s.shift) % (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14551" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="(size) / 2" />
    <mutant id="mutant_15881" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="(60 / 1000)" />
    <mutant id="mutant_13223" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) * (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14554" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="1" />
    <mutant id="mutant_15886" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="(60 + 1000)" />
    <mutant id="mutant_13222" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) + (RevObjectList.BLOCK_SHIFT))" to="RevObjectList.BLOCK_SHIFT" />
    <mutant id="mutant_14553" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(size) - 2" to="(size) % 2" />
    <mutant id="mutant_15887" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(getTimeZone().getOffset(when)) / (60 * 1000)" to="(getTimeZone().getOffset(when)) * (60 * 1000)" />
    <mutant id="mutant_13225" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) + (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14556" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="(oldIdx % 1)" />
    <mutant id="mutant_15884" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="(60 % 1000)" />
    <mutant id="mutant_13224" viable="true" in="org.eclipse.jgit.revwalk.RevCommitList.fillTo(int)" from="((s.shift) - (RevObjectList.BLOCK_SHIFT))" to="((s.shift) / (RevObjectList.BLOCK_SHIFT))" />
    <mutant id="mutant_14555" viable="true" in="org.eclipse.jgit.util.BlockList.add(int,T)" from="(oldIdx + 1)" to="(oldIdx * 1)" />
    <mutant id="mutant_15885" viable="true" in="org.eclipse.jgit.util.SystemReader$Default.getTimezone(long)" from="(60 * 1000)" to="(60 - 1000)" />
    <mutant id="mutant_14525" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) * 1)" />
    <mutant id="mutant_15857" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="1" />
    <mutant id="mutant_14524" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="1" />
    <mutant id="mutant_15858" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="(parts.size()) * 1" />
    <mutant id="mutant_14527" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) / 1)" />
    <mutant id="mutant_15855" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) + (b.length())" />
    <mutant id="mutant_14526" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) + 1)" />
    <mutant id="mutant_15856" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) % (b.length())" />
    <mutant id="mutant_14529" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) % 1)" />
    <mutant id="mutant_14528" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(size)" />
    <mutant id="mutant_15859" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="(parts.size()) / 1" />
    <mutant id="mutant_15850" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="(a.charAt(i)) + (b.charAt(i))" />
    <mutant id="mutant_14521" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) / 1)" />
    <mutant id="mutant_15853" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) * (b.length())" />
    <mutant id="mutant_14520" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) + 1)" />
    <mutant id="mutant_15854" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="(a.length()) / (b.length())" />
    <mutant id="mutant_14523" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) % 1)" />
    <mutant id="mutant_15851" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.charAt(i)) - (b.charAt(i))" to="(a.charAt(i)) * (b.charAt(i))" />
    <mutant id="mutant_14522" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="(size)" />
    <mutant id="mutant_15852" viable="true" in="org.eclipse.jgit.util.StringUtils.compareWithCase(java.lang.String,java.lang.String)" from="(a.length()) - (b.length())" to="a.length()" />
    <mutant id="mutant_13205" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="(pList.length) * 32" />
    <mutant id="mutant_14536" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="1" />
    <mutant id="mutant_15868" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="(lastIndex % 1)" />
    <mutant id="mutant_13204" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="ptr" />
    <mutant id="mutant_14535" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="(index % 1)" />
    <mutant id="mutant_15869" viable="true" in="org.eclipse.jgit.util.StringUtils.replaceLineBreaksWithSpace(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_13207" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="(pList.length) % 32" />
    <mutant id="mutant_14538" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) + 1)" />
    <mutant id="mutant_15866" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="(lastIndex * 1)" />
    <mutant id="mutant_13206" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="(pList.length) - 32" />
    <mutant id="mutant_14537" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) * 1)" />
    <mutant id="mutant_15867" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="(lastIndex + 1)" />
    <mutant id="mutant_13209" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="(pList.length) / 32" />
    <mutant id="mutant_13208" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(pList.length) + 32" to="pList.length" />
    <mutant id="mutant_14539" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="((size) - 1)" to="((size) / 1)" />
    <mutant id="mutant_15860" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="(parts.size()) + 1" />
    <mutant id="mutant_15861" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="(parts.size()) % 1" />
    <mutant id="mutant_14530" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="1" />
    <mutant id="mutant_13201" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="(ptr % 7)" />
    <mutant id="mutant_14532" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="(index - 1)" />
    <mutant id="mutant_15864" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="lastIndex" />
    <mutant id="mutant_13200" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="7" />
    <mutant id="mutant_14531" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="(index * 1)" />
    <mutant id="mutant_15865" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="(lastIndex / 1)" />
    <mutant id="mutant_13203" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="(ptr - 7)" />
    <mutant id="mutant_14534" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="index" />
    <mutant id="mutant_15862" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(parts.size()) - 1" to="parts.size()" />
    <mutant id="mutant_13202" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="(ptr * 7)" />
    <mutant id="mutant_14533" viable="true" in="org.eclipse.jgit.util.BlockList.remove(int)" from="(index + 1)" to="(index / 1)" />
    <mutant id="mutant_15863" viable="true" in="org.eclipse.jgit.util.StringUtils.join(java.util.Collection,java.lang.String,java.lang.String)" from="(lastIndex - 1)" to="1" />
    <mutant id="mutant_12049" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) * (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_12041" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) % &quot;:(&quot;)" />
    <mutant id="mutant_13373" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="(getTimeWriting()) / 1000.0" />
    <mutant id="mutant_12042" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) % &quot;[\\\\/]&quot;)" />
    <mutant id="mutant_13372" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="(getTimeWriting())" />
    <mutant id="mutant_12043" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) / &quot;[\\\\/]&quot;)" />
    <mutant id="mutant_13375" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="(getTotalBytes()) - ((getTimeWriting()) / 1000.0)" />
    <mutant id="mutant_12044" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="&quot;[\\\\/]&quot;" />
    <mutant id="mutant_13374" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="(getTotalBytes()) + ((getTimeWriting()) / 1000.0)" />
    <mutant id="mutant_12045" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" />
    <mutant id="mutant_13377" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="(getTotalBytes()) % ((getTimeWriting()) / 1000.0)" />
    <mutant id="mutant_12046" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) * &quot;[\\\\/]&quot;)" />
    <mutant id="mutant_13376" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="getTotalBytes()" />
    <mutant id="mutant_12047" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) - &quot;[\\\\/]&quot;)" />
    <mutant id="mutant_13379" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="((statistics.timeCounting) / (statistics.timeSearchingForReuse))" />
    <mutant id="mutant_12048" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) % (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13378" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="(getTotalBytes()) / ((getTimeWriting()) / 1000.0)" to="(getTotalBytes()) * ((getTimeWriting()) / 1000.0)" />
    <mutant id="mutant_13371" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="1000.0" />
    <mutant id="mutant_12040" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) * &quot;:(&quot;)" />
    <mutant id="mutant_13370" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="((getTimeWriting()) * 1000.0)" />
    <mutant id="mutant_12052" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="(URIish.RELATIVE_PATH_P)" />
    <mutant id="mutant_13384" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="((statistics.timeCounting) % (statistics.timeSearchingForReuse))" />
    <mutant id="mutant_12053" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) / (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13383" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="((statistics.timeCounting) - (statistics.timeSearchingForReuse))" />
    <mutant id="mutant_12054" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="&quot;)$&quot;" />
    <mutant id="mutant_13386" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) - (statistics.timeSearchingForSizes))" />
    <mutant id="mutant_12055" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) / &quot;)$&quot;)" />
    <mutant id="mutant_13385" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) / (statistics.timeSearchingForSizes))" />
    <mutant id="mutant_12056" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13388" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) * (statistics.timeSearchingForSizes))" />
    <mutant id="mutant_12057" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) * &quot;)$&quot;)" />
    <mutant id="mutant_13387" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" />
    <mutant id="mutant_12058" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) - &quot;)$&quot;)" />
    <mutant id="mutant_12059" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P)) % &quot;)$&quot;)" />
    <mutant id="mutant_13389" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="(statistics.timeSearchingForSizes)" />
    <mutant id="mutant_13380" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="(statistics.timeCounting)" />
    <mutant id="mutant_12050" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) - (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13382" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="(statistics.timeSearchingForReuse)" />
    <mutant id="mutant_12051" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;) + (URIish.RELATIVE_PATH_P))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;) + &quot;[\\\\/]&quot;)" />
    <mutant id="mutant_13381" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((statistics.timeCounting) + (statistics.timeSearchingForReuse))" to="((statistics.timeCounting) * (statistics.timeSearchingForReuse))" />
    <mutant id="mutant_12027" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(URIish.OPT_USER_PWD_P)" />
    <mutant id="mutant_13359" viable="false" in="?" from="(50 * 1024)" to="50" />
    <mutant id="mutant_12028" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; / (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_13358" viable="false" in="?" from="(50 * 1024)" to="(50 / 1024)" />
    <mutant id="mutant_14689" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="offset2 % 60" />
    <mutant id="mutant_12029" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; % (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_13351" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) - 1024" />
    <mutant id="mutant_14682" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="((otherSegments.length) * 1)" />
    <mutant id="mutant_12020" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="&quot;)$&quot;" />
    <mutant id="mutant_13350" viable="false" in="?" from="(50 * 1024) * 1024" to="1024" />
    <mutant id="mutant_14681" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="((otherSegments.length) % 1)" />
    <mutant id="mutant_12021" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13353" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) + 1024" />
    <mutant id="mutant_14684" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="(otherSegments.length)" />
    <mutant id="mutant_12022" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) / &quot;)$&quot;)" />
    <mutant id="mutant_13352" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) % 1024" />
    <mutant id="mutant_14683" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="((otherSegments.length) + 1)" />
    <mutant id="mutant_12023" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) * &quot;)$&quot;)" />
    <mutant id="mutant_13355" viable="false" in="?" from="(50 * 1024)" to="(50 - 1024)" />
    <mutant id="mutant_14686" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="offset2" />
    <mutant id="mutant_12024" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; * (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_13354" viable="false" in="?" from="(50 * 1024) * 1024" to="50 * 1024" />
    <mutant id="mutant_14685" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="offset2 * 60" />
    <mutant id="mutant_12025" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; - (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_13357" viable="false" in="?" from="(50 * 1024)" to="1024" />
    <mutant id="mutant_14688" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="offset2 - 60" />
    <mutant id="mutant_12026" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="&quot;^&quot;" />
    <mutant id="mutant_13356" viable="false" in="?" from="(50 * 1024)" to="(50 + 1024)" />
    <mutant id="mutant_14687" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="60" />
    <mutant id="mutant_14680" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="1" />
    <mutant id="mutant_12038" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) - &quot;:(&quot;)" />
    <mutant id="mutant_12039" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" />
    <mutant id="mutant_13369" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="((getTimeWriting()) + 1000.0)" />
    <mutant id="mutant_12030" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) * &quot;([^\\\\/:]{2,})&quot;)" />
    <mutant id="mutant_13362" viable="false" in="?" from="(50 * 1024) * 1024" to="1024" />
    <mutant id="mutant_14693" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="offset2" />
    <mutant id="mutant_12031" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) % &quot;([^\\\\/:]{2,})&quot;)" />
    <mutant id="mutant_13361" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) / 1024" />
    <mutant id="mutant_14692" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="offset2 * 60" />
    <mutant id="mutant_12032" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="&quot;([^\\\\/:]{2,})&quot;" />
    <mutant id="mutant_13364" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) % 1024" />
    <mutant id="mutant_14695" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="offset2 - 60" />
    <mutant id="mutant_12033" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) / &quot;([^\\\\/:]{2,})&quot;)" />
    <mutant id="mutant_13363" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) - 1024" />
    <mutant id="mutant_14694" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="60" />
    <mutant id="mutant_12034" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_13366" viable="false" in="?" from="(50 * 1024) * 1024" to="50 * 1024" />
    <mutant id="mutant_14697" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="((ident.getWhen().getTime()) - 1000)" />
    <mutant id="mutant_12035" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) - &quot;([^\\\\/:]{2,})&quot;)" />
    <mutant id="mutant_13365" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) + 1024" />
    <mutant id="mutant_14696" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="offset2 + 60" />
    <mutant id="mutant_12036" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="&quot;:(&quot;" />
    <mutant id="mutant_13368" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="((getTimeWriting()) % 1000.0)" />
    <mutant id="mutant_14699" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="1000" />
    <mutant id="mutant_12037" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + &quot;([^\\\\/:]{2,})&quot;) / &quot;:(&quot;)" />
    <mutant id="mutant_13367" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTransferRate()" from="((getTimeWriting()) / 1000.0)" to="((getTimeWriting()) - 1000.0)" />
    <mutant id="mutant_14698" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="((ident.getWhen().getTime()) + 1000)" />
    <mutant id="mutant_13360" viable="false" in="?" from="(50 * 1024)" to="(50 % 1024)" />
    <mutant id="mutant_14691" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 % 60" to="offset2 / 60" />
    <mutant id="mutant_14690" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="offset2 / 60" to="offset2 + 60" />
    <mutant id="mutant_12085" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_12086" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_12087" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_12088" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_12089" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_12080" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="getScheme().hashCode()" />
    <mutant id="mutant_12081" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="(hc * 31) - (getScheme().hashCode())" />
    <mutant id="mutant_12082" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="hc * 31" />
    <mutant id="mutant_12083" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="(hc * 31) / (getScheme().hashCode())" />
    <mutant id="mutant_12084" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_12096" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_12097" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_12098" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_12099" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_12090" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="(hc * 31) % (getUser().hashCode())" />
    <mutant id="mutant_12091" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="(hc * 31) * (getUser().hashCode())" />
    <mutant id="mutant_12092" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="getUser().hashCode()" />
    <mutant id="mutant_12093" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="(hc * 31) - (getUser().hashCode())" />
    <mutant id="mutant_12094" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="hc * 31" />
    <mutant id="mutant_12095" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getUser().hashCode())" to="(hc * 31) / (getUser().hashCode())" />
    <mutant id="mutant_12063" viable="true" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="n2e(matcher.group(7))" />
    <mutant id="mutant_13395" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) * (statistics.timeCompressing))" />
    <mutant id="mutant_12064" viable="true" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="n2e(matcher.group(6))" />
    <mutant id="mutant_13394" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) - (statistics.timeCompressing))" />
    <mutant id="mutant_12065" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="((n2e(matcher.group(6))) * (n2e(matcher.group(7))))" />
    <mutant id="mutant_13397" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) * (statistics.timeWriting)" />
    <mutant id="mutant_12066" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="1" />
    <mutant id="mutant_13396" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) % (statistics.timeCompressing))" />
    <mutant id="mutant_12067" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="(d / 1)" />
    <mutant id="mutant_13399" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) / (statistics.timeWriting)" />
    <mutant id="mutant_12068" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="(d % 1)" />
    <mutant id="mutant_13398" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) % (statistics.timeWriting)" />
    <mutant id="mutant_12069" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="(d - 1)" />
    <mutant id="mutant_13391" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" />
    <mutant id="mutant_12060" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="((n2e(matcher.group(6))) - (n2e(matcher.group(7))))" />
    <mutant id="mutant_13390" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes))" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) % (statistics.timeSearchingForSizes))" />
    <mutant id="mutant_12061" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="((n2e(matcher.group(6))) % (n2e(matcher.group(7))))" />
    <mutant id="mutant_13393" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="(statistics.timeCompressing)" />
    <mutant id="mutant_12062" viable="false" in="org.eclipse.jgit.transport.URIish(java.lang.String)" from="((n2e(matcher.group(6))) + (n2e(matcher.group(7))))" to="((n2e(matcher.group(6))) / (n2e(matcher.group(7))))" />
    <mutant id="mutant_13392" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing))" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) / (statistics.timeCompressing))" />
    <mutant id="mutant_12074" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_12075" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_12076" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_12077" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_12078" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="(hc * 31) % (getScheme().hashCode())" />
    <mutant id="mutant_12079" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getScheme().hashCode())" to="(hc * 31) * (getScheme().hashCode())" />
    <mutant id="mutant_12070" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="(d * 1)" />
    <mutant id="mutant_12071" viable="true" in="org.eclipse.jgit.transport.URIish(java.net.URL)" from="(d + 1)" to="d" />
    <mutant id="mutant_12072" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_12073" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_2929" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="((raw[aPos++]) &amp; 255) / ((raw[bPos++]) &amp; 255)" />
    <mutant id="mutant_2928" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="((raw[aPos++]) &amp; 255) % ((raw[bPos++]) &amp; 255)" />
    <mutant id="mutant_2927" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="(raw[aPos++]) &amp; 255" />
    <mutant id="mutant_2926" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="((raw[aPos++]) &amp; 255) * ((raw[bPos++]) &amp; 255)" />
    <mutant id="mutant_2925" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="(raw[bPos++]) &amp; 255" />
    <mutant id="mutant_2924" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="ptr * (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2923" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="ptr" />
    <mutant id="mutant_2922" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="ptr - (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2921" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="ptr % (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2920" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_2919" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.id(byte[],int)" from="ptr + (Constants.OBJECT_ID_STRING_LENGTH)" to="ptr / (Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2918" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="'a' - 'A'" />
    <mutant id="mutant_2917" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="b % ('a' - 'A')" />
    <mutant id="mutant_2916" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="b / ('a' - 'A')" />
    <mutant id="mutant_2915" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="b * ('a' - 'A')" />
    <mutant id="mutant_2914" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="b" />
    <mutant id="mutant_2913" viable="false" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="((char)(b + ('a' - 'A')))" to="b - ('a' - 'A')" />
    <mutant id="mutant_2912" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="('a' * 'A')" />
    <mutant id="mutant_2911" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="('a' / 'A')" />
    <mutant id="mutant_2910" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="'A'" />
    <mutant id="mutant_2909" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="'a'" />
    <mutant id="mutant_2908" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="('a' % 'A')" />
    <mutant id="mutant_2907" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.toLower(byte)" from="('a' - 'A')" to="('a' + 'A')" />
    <mutant id="mutant_2906" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_2905" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_2904" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_2903" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_2902" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_2901" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_2900" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_1630" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="(min % 100)" />
    <mutant id="mutant_2962" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE / 1)" />
    <mutant id="mutant_1631" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="(min * 100)" />
    <mutant id="mutant_2961" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="1" />
    <mutant id="mutant_2960" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="(emailE + 1)" />
    <mutant id="mutant_1638" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) / 100" />
    <mutant id="mutant_1639" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="100" />
    <mutant id="mutant_2969" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE * 1)" />
    <mutant id="mutant_1636" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="((min * 100) + max)" />
    <mutant id="mutant_2968" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE / 1)" />
    <mutant id="mutant_1637" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) - 100" />
    <mutant id="mutant_2967" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="1" />
    <mutant id="mutant_1634" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="((min * 100) - max)" />
    <mutant id="mutant_2966" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE % 1)" />
    <mutant id="mutant_1635" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="((min * 100) * max)" />
    <mutant id="mutant_2965" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE - 1)" />
    <mutant id="mutant_1632" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="((min * 100) % max)" />
    <mutant id="mutant_2964" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="emailE" />
    <mutant id="mutant_1633" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((min * 100) / max)" to="max" />
    <mutant id="mutant_2963" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE * 1)" />
    <mutant id="mutant_1629" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="(min + 100)" />
    <mutant id="mutant_2951" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="(emailB + 1)" />
    <mutant id="mutant_1620" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) / 1" />
    <mutant id="mutant_2950" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="(emailB / 1)" />
    <mutant id="mutant_1627" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="(min / 100)" />
    <mutant id="mutant_2959" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="(emailE % 1)" />
    <mutant id="mutant_1628" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="min" />
    <mutant id="mutant_2958" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="emailE" />
    <mutant id="mutant_1625" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="100" />
    <mutant id="mutant_2957" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="(emailE * 1)" />
    <mutant id="mutant_1626" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(min * 100)" to="(min - 100)" />
    <mutant id="mutant_2956" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="(emailE / 1)" />
    <mutant id="mutant_1623" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)" />
    <mutant id="mutant_2955" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE - 1)" to="1" />
    <mutant id="mutant_1624" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) % 1" />
    <mutant id="mutant_2954" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="(emailB % 1)" />
    <mutant id="mutant_1621" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) * 1" />
    <mutant id="mutant_2953" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="(emailB * 1)" />
    <mutant id="mutant_1622" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) - 1" />
    <mutant id="mutant_2952" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="emailB" />
    <mutant id="mutant_1618" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)" />
    <mutant id="mutant_1619" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.NEW, dstEnt)) + 1" to="1" />
    <mutant id="mutant_2949" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailB - 1)" to="1" />
    <mutant id="mutant_2940" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)" />
    <mutant id="mutant_1616" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) / 1" />
    <mutant id="mutant_2948" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)" />
    <mutant id="mutant_1617" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) * 1" />
    <mutant id="mutant_2947" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) / 1" />
    <mutant id="mutant_1614" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) - 1" />
    <mutant id="mutant_2946" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) % 1" />
    <mutant id="mutant_1615" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) % 1" />
    <mutant id="mutant_2945" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) + 1" />
    <mutant id="mutant_1612" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="(srcs.size()) / (dsts.size())" />
    <mutant id="mutant_2944" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) * 1" />
    <mutant id="mutant_1613" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(size(org.eclipse.jgit.diff.DiffEntry.Side.OLD, srcEnt)) + 1" to="1" />
    <mutant id="mutant_2943" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.nextLF(raw, ptr)) - 1" to="1" />
    <mutant id="mutant_1610" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="(srcs.size()) + (dsts.size())" />
    <mutant id="mutant_2942" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) * ((raw[bPos]) &amp; 255)" />
    <mutant id="mutant_1611" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="srcs.size()" />
    <mutant id="mutant_2941" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="(raw[bPos]) &amp; 255" />
    <mutant id="mutant_1609" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="(srcs.size()) % (dsts.size())" />
    <mutant id="mutant_1607" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="SimilarityRenameDetector.BITS_PER_INDEX" />
    <mutant id="mutant_2939" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) + ((raw[bPos]) &amp; 255)" />
    <mutant id="mutant_1608" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(srcs.size()) * (dsts.size())" to="(srcs.size()) - (dsts.size())" />
    <mutant id="mutant_2938" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) % ((raw[bPos]) &amp; 255)" />
    <mutant id="mutant_1605" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="2 % (SimilarityRenameDetector.BITS_PER_INDEX)" />
    <mutant id="mutant_2937" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) - ((raw[bPos]) &amp; 255)" to="(org.eclipse.jgit.lib.ObjectChecker.lastPathChar(aMode)) / ((raw[bPos]) &amp; 255)" />
    <mutant id="mutant_1606" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="2 + (SimilarityRenameDetector.BITS_PER_INDEX)" />
    <mutant id="mutant_2936" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode)" />
    <mutant id="mutant_1603" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="2" />
    <mutant id="mutant_2935" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="(raw[aPos]) &amp; 255" />
    <mutant id="mutant_1604" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="2 / (SimilarityRenameDetector.BITS_PER_INDEX)" />
    <mutant id="mutant_2934" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="((raw[aPos]) &amp; 255) / (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" />
    <mutant id="mutant_1601" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) + 1" />
    <mutant id="mutant_2933" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="((raw[aPos]) &amp; 255) % (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" />
    <mutant id="mutant_1602" viable="false" in="?" from="2 * (SimilarityRenameDetector.BITS_PER_INDEX)" to="2 - (SimilarityRenameDetector.BITS_PER_INDEX)" />
    <mutant id="mutant_2932" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="((raw[aPos]) &amp; 255) + (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" />
    <mutant id="mutant_2931" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos]) &amp; 255) - (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" to="((raw[aPos]) &amp; 255) * (org.eclipse.jgit.lib.ObjectChecker.lastPathChar(bMode))" />
    <mutant id="mutant_1600" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) / 1" />
    <mutant id="mutant_2930" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.pathCompare(byte[],int,int,int,int,int,int)" from="((raw[aPos++]) &amp; 255) - ((raw[bPos++]) &amp; 255)" to="((raw[aPos++]) &amp; 255) + ((raw[bPos++]) &amp; 255)" />
    <mutant id="mutant_15918" viable="false" in="?" from="1024 * 1024" to="1024 / 1024" />
    <mutant id="mutant_15919" viable="false" in="?" from="1024 * 1024" to="1024" />
    <mutant id="mutant_15912" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt - 1024)" />
    <mutant id="mutant_15913" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt + 1024)" />
    <mutant id="mutant_15910" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="((block.count) * (blockPos))" />
    <mutant id="mutant_15911" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="1024" />
    <mutant id="mutant_15916" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt % 1024)" />
    <mutant id="mutant_15917" viable="false" in="?" from="1024 * 1024" to="1024 + 1024" />
    <mutant id="mutant_15914" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="cnt" />
    <mutant id="mutant_15915" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$LocalFile.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt / 1024)" to="(cnt * 1024)" />
    <mutant id="mutant_1674" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="(a.lastIndexOf(&quot;/&quot;)) / 1" />
    <mutant id="mutant_1675" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="(a.lastIndexOf(&quot;/&quot;)) - 1" />
    <mutant id="mutant_1672" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="(SimilarityRenameDetector.INDEX_MASK) % v" />
    <mutant id="mutant_1673" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="1" />
    <mutant id="mutant_1670" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="(SimilarityRenameDetector.INDEX_MASK) + v" />
    <mutant id="mutant_1671" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="v" />
    <mutant id="mutant_1678" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="(a.lastIndexOf(&quot;/&quot;)) * 1" />
    <mutant id="mutant_1679" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="1" />
    <mutant id="mutant_1676" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="(a.lastIndexOf(&quot;/&quot;)) % 1" />
    <mutant id="mutant_1677" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(a.lastIndexOf(&quot;/&quot;)) + 1" to="a.lastIndexOf(&quot;/&quot;)" />
    <mutant id="mutant_15929" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="((estimatedSize - 1) + (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_15923" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="1" />
    <mutant id="mutant_15924" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="(estimatedSize % 1)" />
    <mutant id="mutant_15921" viable="false" in="?" from="1024 * 1024" to="1024 - 1024" />
    <mutant id="mutant_15922" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="(estimatedSize * 1)" />
    <mutant id="mutant_15927" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="(estimatedSize / 1)" />
    <mutant id="mutant_15928" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="((estimatedSize - 1) % (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_15925" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="estimatedSize" />
    <mutant id="mutant_15926" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="(estimatedSize - 1)" to="(estimatedSize + 1)" />
    <mutant id="mutant_1663" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="((contentScore * 99) + (nameScore * 1)) * 10000" />
    <mutant id="mutant_2995" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_1664" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="(contentScore * 99) + (nameScore * 1)" />
    <mutant id="mutant_2994" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_1661" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="((contentScore * 99) + (nameScore * 1)) % 10000" />
    <mutant id="mutant_2993" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_1662" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="((contentScore * 99) + (nameScore * 1)) - 10000" />
    <mutant id="mutant_2992" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_2991" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_1660" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="((contentScore * 99) / (nameScore * 1))" />
    <mutant id="mutant_2990" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_15920" viable="false" in="?" from="1024 * 1024" to="1024 % 1024" />
    <mutant id="mutant_1669" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="(SimilarityRenameDetector.INDEX_MASK) * v" />
    <mutant id="mutant_1667" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="SimilarityRenameDetector.INDEX_MASK" />
    <mutant id="mutant_2999" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_1668" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.decodeFile(int)" from="(SimilarityRenameDetector.INDEX_MASK) - v" to="(SimilarityRenameDetector.INDEX_MASK) / v" />
    <mutant id="mutant_2998" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_1665" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="10000" />
    <mutant id="mutant_2997" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_1666" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1)) / 10000" to="((contentScore * 99) + (nameScore * 1)) + 10000" />
    <mutant id="mutant_2996" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_1652" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="(nameScore + 1)" />
    <mutant id="mutant_2984" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_1653" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="(nameScore % 1)" />
    <mutant id="mutant_2983" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_1650" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="(nameScore / 1)" />
    <mutant id="mutant_2982" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_1651" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="nameScore" />
    <mutant id="mutant_2981" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_2980" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_1658" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="(contentScore * 99)" />
    <mutant id="mutant_1659" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="(nameScore * 1)" />
    <mutant id="mutant_2989" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_1656" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="((contentScore * 99) - (nameScore * 1))" />
    <mutant id="mutant_2988" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_1657" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="((contentScore * 99) % (nameScore * 1))" />
    <mutant id="mutant_2987" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_1654" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="(nameScore - 1)" />
    <mutant id="mutant_2986" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_1655" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="((contentScore * 99) + (nameScore * 1))" to="((contentScore * 99) * (nameScore * 1))" />
    <mutant id="mutant_2985" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_15909" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="((block.count) % (blockPos))" />
    <mutant id="mutant_15907" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="((block.count) + (blockPos))" />
    <mutant id="mutant_15908" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="((block.count) / (blockPos))" />
    <mutant id="mutant_15901" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="((block.count) + (blockPos))" />
    <mutant id="mutant_15902" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="((block.count) / (blockPos))" />
    <mutant id="mutant_15900" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="block.count" />
    <mutant id="mutant_15905" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="blockPos" />
    <mutant id="mutant_15906" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.skip(long)" from="((block.count) - (blockPos))" to="block.count" />
    <mutant id="mutant_15903" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="((block.count) % (blockPos))" />
    <mutant id="mutant_15904" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer$BlockInputStream.read(byte[],int,int)" from="((block.count) - (blockPos))" to="((block.count) * (blockPos))" />
    <mutant id="mutant_1641" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) % 100" />
    <mutant id="mutant_2973" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_1642" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) + 100" />
    <mutant id="mutant_2972" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE % 1)" />
    <mutant id="mutant_2971" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="(emailE - 1)" />
    <mutant id="mutant_1640" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)) * 100" to="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(srcEnt.oldPath, dstEnt.newPath)" />
    <mutant id="mutant_2970" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(emailE + 1)" to="emailE" />
    <mutant id="mutant_1649" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(nameScore * 1)" to="1" />
    <mutant id="mutant_1647" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="(contentScore % 99)" />
    <mutant id="mutant_2979" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_1648" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="(contentScore + 99)" />
    <mutant id="mutant_2978" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_1645" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="contentScore" />
    <mutant id="mutant_2977" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_1646" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="(contentScore / 99)" />
    <mutant id="mutant_2976" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_1643" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="99" />
    <mutant id="mutant_2975" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_1644" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.buildMatrix(org.eclipse.jgit.lib.ProgressMonitor)" from="(contentScore * 99)" to="(contentScore - 99)" />
    <mutant id="mutant_2974" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.personIdent(byte[],int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_14624" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="((&quot;readpipe &quot; + (Arrays.asList(command))) / &quot;,&quot;)" />
    <mutant id="mutant_15956" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) / (last.count)" />
    <mutant id="mutant_14623" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="&quot;,&quot;" />
    <mutant id="mutant_15957" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) - (last.count)" />
    <mutant id="mutant_14626" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) / dir)" />
    <mutant id="mutant_15954" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) * (last.count)" />
    <mutant id="mutant_14625" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" />
    <mutant id="mutant_15955" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) % (last.count)" />
    <mutant id="mutant_14628" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="dir" />
    <mutant id="mutant_14627" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) * dir)" />
    <mutant id="mutant_15958" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="1" />
    <mutant id="mutant_14629" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) % dir)" />
    <mutant id="mutant_15959" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="((blocks.size()) / 1)" />
    <mutant id="mutant_14620" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="((&quot;readpipe &quot; + (Arrays.asList(command))) * &quot;,&quot;)" />
    <mutant id="mutant_15952" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="(((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)" />
    <mutant id="mutant_15953" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ)) + (last.count)" to="last.count" />
    <mutant id="mutant_14622" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="((&quot;readpipe &quot; + (Arrays.asList(command))) - &quot;,&quot;)" />
    <mutant id="mutant_15950" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="((((long)(blocks.size())) - 1) % (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_14621" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="((&quot;readpipe &quot; + (Arrays.asList(command))) % &quot;,&quot;)" />
    <mutant id="mutant_15951" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="(TemporaryBuffer.Block.SZ)" />
    <mutant id="mutant_13304" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) - (getFile().getPath()))" />
    <mutant id="mutant_14635" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="r" />
    <mutant id="mutant_15967" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) % (s.count))" />
    <mutant id="mutant_13303" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="((getClass().getSimpleName()) + &quot;[&quot;)" />
    <mutant id="mutant_14634" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="(&quot;readpipe may return \'&quot; / r)" />
    <mutant id="mutant_15968" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) + (s.count))" />
    <mutant id="mutant_13306" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) * (getFile().getPath()))" />
    <mutant id="mutant_14637" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="((&quot;readpipe may return \'&quot; + r) / &quot;\'&quot;)" />
    <mutant id="mutant_15965" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) / (s.count))" />
    <mutant id="mutant_13305" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) / (getFile().getPath()))" />
    <mutant id="mutant_14636" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="&quot;readpipe may return \'&quot;" />
    <mutant id="mutant_15966" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="s.count" />
    <mutant id="mutant_13308" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_14639" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_13307" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) % &quot;]&quot;" />
    <mutant id="mutant_14638" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="((&quot;readpipe may return \'&quot; + r) * &quot;\'&quot;)" />
    <mutant id="mutant_15969" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="s.buffer.length" />
    <mutant id="mutant_13309" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) * &quot;]&quot;" />
    <mutant id="mutant_15960" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="((blocks.size()) * 1)" />
    <mutant id="mutant_13300" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="((getClass().getSimpleName()) + &quot;[&quot;)" to="((getClass().getSimpleName()) / &quot;[&quot;)" />
    <mutant id="mutant_14631" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="(&quot;readpipe may return \'&quot; - r)" />
    <mutant id="mutant_15963" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="((blocks.size()) % 1)" />
    <mutant id="mutant_14630" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) + dir)" to="(((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;) - dir)" />
    <mutant id="mutant_15964" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.copy(java.io.InputStream)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) * (s.count))" />
    <mutant id="mutant_13302" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="(((getClass().getSimpleName()) + &quot;[&quot;) % (getFile().getPath()))" />
    <mutant id="mutant_14633" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="(&quot;readpipe may return \'&quot; * r)" />
    <mutant id="mutant_15961" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="((blocks.size()) + 1)" />
    <mutant id="mutant_13301" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath()))" to="(getFile().getPath())" />
    <mutant id="mutant_14632" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe may return \'&quot; + r)" to="(&quot;readpipe may return \'&quot; % r)" />
    <mutant id="mutant_15962" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.last()" from="((blocks.size()) - 1)" to="blocks.size()" />
    <mutant id="mutant_14609" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="i" />
    <mutant id="mutant_14602" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="1" />
    <mutant id="mutant_15934" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="1" />
    <mutant id="mutant_14601" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="i / 1" />
    <mutant id="mutant_15935" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) / 1" />
    <mutant id="mutant_14604" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="i * 1" />
    <mutant id="mutant_15932" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="(TemporaryBuffer.Block.SZ)" />
    <mutant id="mutant_14603" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="i" />
    <mutant id="mutant_15933" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="((estimatedSize - 1) - (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_14606" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="i % 1" />
    <mutant id="mutant_15938" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="(estimatedSize - 1) / (TemporaryBuffer.Block.SZ)" />
    <mutant id="mutant_14605" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="i + 1" to="i - 1" />
    <mutant id="mutant_15939" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) % 1" />
    <mutant id="mutant_14608" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="1" />
    <mutant id="mutant_15936" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) - 1" />
    <mutant id="mutant_14607" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="i / 1" />
    <mutant id="mutant_15937" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) + 1" to="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ)) * 1" />
    <mutant id="mutant_1696" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) - dirMax" />
    <mutant id="mutant_1697" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="(aDirLen * 1)" />
    <mutant id="mutant_1694" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) % dirMax" />
    <mutant id="mutant_1695" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) * dirMax" />
    <mutant id="mutant_1692" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="dirSim * 100" />
    <mutant id="mutant_15930" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="((estimatedSize - 1) * (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_1693" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="(dirSim * 100) + dirMax" />
    <mutant id="mutant_15931" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer(int,int)" from="((estimatedSize - 1) / (TemporaryBuffer.Block.SZ))" to="(estimatedSize - 1)" />
    <mutant id="mutant_1690" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim % 100)" />
    <mutant id="mutant_14600" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.indexOfFirstFooterLine(java.lang.String[])" from="(lines.length) - 1" to="lines.length" />
    <mutant id="mutant_1691" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100) / dirMax" to="dirMax" />
    <mutant id="mutant_1698" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="1" />
    <mutant id="mutant_1699" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(aDirLen - 1)" to="(aDirLen % 1)" />
    <mutant id="mutant_14613" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="(Arrays.asList(command))" />
    <mutant id="mutant_15945" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="(((long)(blocks.size())) % 1)" />
    <mutant id="mutant_14612" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="i % 1" />
    <mutant id="mutant_15946" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="(((long)(blocks.size())) - 1)" />
    <mutant id="mutant_14615" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="&quot;readpipe &quot;" />
    <mutant id="mutant_15943" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="(((long)(blocks.size())) + 1)" />
    <mutant id="mutant_14614" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="(&quot;readpipe &quot; - (Arrays.asList(command)))" />
    <mutant id="mutant_15944" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="((long)(blocks.size()))" />
    <mutant id="mutant_14617" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="(&quot;readpipe &quot; * (Arrays.asList(command)))" />
    <mutant id="mutant_15949" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="((((long)(blocks.size())) - 1) + (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_14616" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="(&quot;readpipe &quot; / (Arrays.asList(command)))" />
    <mutant id="mutant_14619" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe &quot; + (Arrays.asList(command))) + &quot;,&quot;)" to="(&quot;readpipe &quot; + (Arrays.asList(command)))" />
    <mutant id="mutant_15947" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="((((long)(blocks.size())) - 1) / (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_14618" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe &quot; + (Arrays.asList(command)))" to="(&quot;readpipe &quot; % (Arrays.asList(command)))" />
    <mutant id="mutant_15948" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="((((long)(blocks.size())) - 1) * (TemporaryBuffer.Block.SZ))" to="((((long)(blocks.size())) - 1) - (TemporaryBuffer.Block.SZ))" />
    <mutant id="mutant_1685" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim / 100)" />
    <mutant id="mutant_1686" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim - 100)" />
    <mutant id="mutant_1683" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="b.lastIndexOf(&quot;/&quot;)" />
    <mutant id="mutant_1684" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="(b.lastIndexOf(&quot;/&quot;)) * 1" />
    <mutant id="mutant_1681" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="(b.lastIndexOf(&quot;/&quot;)) - 1" />
    <mutant id="mutant_15941" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="(((long)(blocks.size())) / 1)" />
    <mutant id="mutant_1682" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="(b.lastIndexOf(&quot;/&quot;)) % 1" />
    <mutant id="mutant_15942" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="(((long)(blocks.size())) * 1)" />
    <mutant id="mutant_14611" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="i - 1" />
    <mutant id="mutant_1680" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(b.lastIndexOf(&quot;/&quot;)) + 1" to="(b.lastIndexOf(&quot;/&quot;)) / 1" />
    <mutant id="mutant_14610" viable="true" in="org.eclipse.jgit.util.ChangeIdUtil.insertId(java.lang.String,org.eclipse.jgit.lib.ObjectId,boolean)" from="i + 1" to="i * 1" />
    <mutant id="mutant_15940" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.inCoreLength()" from="(((long)(blocks.size())) - 1)" to="1" />
    <mutant id="mutant_1689" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="(dirSim + 100)" />
    <mutant id="mutant_1687" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="100" />
    <mutant id="mutant_1688" viable="true" in="org.eclipse.jgit.diff.SimilarityRenameDetector.nameScore(java.lang.String,java.lang.String)" from="(dirSim * 100)" to="dirSim" />
    <mutant id="mutant_12005" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="&quot;[\\\\/])?&quot;" />
    <mutant id="mutant_13337" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem * 4)" />
    <mutant id="mutant_14668" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 * (args.length))" />
    <mutant id="mutant_12006" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) % ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" />
    <mutant id="mutant_13336" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10" />
    <mutant id="mutant_14667" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="4" />
    <mutant id="mutant_12007" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" />
    <mutant id="mutant_13339" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="4" />
    <mutant id="mutant_15998" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="(ptr * (BinaryHunk.DELTA.length))" />
    <mutant id="mutant_12008" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) - ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" />
    <mutant id="mutant_13338" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem % 4)" />
    <mutant id="mutant_14669" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 / (args.length))" />
    <mutant id="mutant_15999" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="(ptr / (BinaryHunk.DELTA.length))" />
    <mutant id="mutant_12009" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" />
    <mutant id="mutant_14660" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd % &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_15992" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="(ptr * (BinaryHunk.LITERAL.length))" />
    <mutant id="mutant_15993" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="(ptr / (BinaryHunk.LITERAL.length))" />
    <mutant id="mutant_13331" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 / (WindowCacheConfig.MB)" />
    <mutant id="mutant_14662" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="3" />
    <mutant id="mutant_15990" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="BinaryHunk.LITERAL.length" />
    <mutant id="mutant_12000" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) % &quot;[\\\\/])?&quot;)" />
    <mutant id="mutant_13330" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="8 - (WindowCacheConfig.KB)" />
    <mutant id="mutant_14661" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="(3 - (args.length))" />
    <mutant id="mutant_15991" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="ptr" />
    <mutant id="mutant_12001" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) / &quot;[\\\\/])?&quot;)" />
    <mutant id="mutant_13333" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 - (WindowCacheConfig.MB)" />
    <mutant id="mutant_14664" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="(3 * (args.length))" />
    <mutant id="mutant_15996" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="BinaryHunk.DELTA.length" />
    <mutant id="mutant_12002" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) - &quot;[\\\\/])?&quot;)" />
    <mutant id="mutant_13332" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="WindowCacheConfig.MB" />
    <mutant id="mutant_14663" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="(3 / (args.length))" />
    <mutant id="mutant_15997" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="ptr" />
    <mutant id="mutant_12003" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="((&quot;(?:&quot; + (URIish.USER_HOME_P)) * &quot;[\\\\/])?&quot;)" />
    <mutant id="mutant_13335" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 % (WindowCacheConfig.MB)" />
    <mutant id="mutant_14666" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="(3 % (args.length))" />
    <mutant id="mutant_15994" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="(ptr - (BinaryHunk.DELTA.length))" />
    <mutant id="mutant_12004" viable="false" in="?" from="((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)" to="(&quot;(?:&quot; + (URIish.USER_HOME_P))" />
    <mutant id="mutant_13334" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 + (WindowCacheConfig.MB)" />
    <mutant id="mutant_14665" viable="true" in="org.eclipse.jgit.util.FS_Win32.runInShell(java.lang.String,java.lang.String[])" from="(3 + (args.length))" to="args.length" />
    <mutant id="mutant_15995" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.DELTA.length))" to="(ptr % (BinaryHunk.DELTA.length))" />
    <mutant id="mutant_12016" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) - (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13348" viable="false" in="?" from="(50 * 1024)" to="(50 % 1024)" />
    <mutant id="mutant_14679" viable="true" in="org.eclipse.jgit.util.FileUtils.relativize(java.lang.String,java.lang.String)" from="((otherSegments.length) - 1)" to="((otherSegments.length) / 1)" />
    <mutant id="mutant_12017" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="(URIish.RELATIVE_PATH_P)" />
    <mutant id="mutant_13347" viable="false" in="?" from="(50 * 1024)" to="50" />
    <mutant id="mutant_14678" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd % &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_12018" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) % &quot;)$&quot;)" />
    <mutant id="mutant_12019" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) + &quot;)$&quot;)" to="((((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P)) - &quot;)$&quot;)" />
    <mutant id="mutant_13349" viable="false" in="?" from="(50 * 1024) * 1024" to="(50 * 1024) / 1024" />
    <mutant id="mutant_13340" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem + 4)" />
    <mutant id="mutant_14671" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="args.length" />
    <mutant id="mutant_14670" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 - (args.length))" />
    <mutant id="mutant_12010" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) / ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" />
    <mutant id="mutant_13342" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="maxMem" />
    <mutant id="mutant_14673" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="&quot; \&quot;$@\&quot;&quot;" />
    <mutant id="mutant_12011" viable="false" in="?" from="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) * ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" />
    <mutant id="mutant_13341" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem - 4)" />
    <mutant id="mutant_14672" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 % (args.length))" />
    <mutant id="mutant_12012" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;))" />
    <mutant id="mutant_13344" viable="false" in="?" from="(50 * 1024)" to="(50 + 1024)" />
    <mutant id="mutant_14675" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd * &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_12013" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) / (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13343" viable="false" in="?" from="(50 * 1024)" to="(50 - 1024)" />
    <mutant id="mutant_14674" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd - &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_12014" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) % (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13346" viable="false" in="?" from="(50 * 1024)" to="(50 / 1024)" />
    <mutant id="mutant_14677" viable="false" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd / &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_12015" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) + (URIish.RELATIVE_PATH_P))" to="(((((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;) + ((&quot;(?:&quot; + (URIish.USER_HOME_P)) + &quot;[\\\\/])?&quot;)) * (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_13345" viable="false" in="?" from="(50 * 1024)" to="1024" />
    <mutant id="mutant_14676" viable="true" in="org.eclipse.jgit.util.FS_Win32_Cygwin.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="cmd" />
    <mutant id="mutant_13315" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="1024" />
    <mutant id="mutant_14646" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="(&quot;readpipe rc=&quot; - rc)" />
    <mutant id="mutant_15978" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="s.count" />
    <mutant id="mutant_13314" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="1024 / (WindowCacheConfig.KB)" />
    <mutant id="mutant_14645" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="&quot;readpipe rc=&quot;" />
    <mutant id="mutant_15979" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) % (s.count))" />
    <mutant id="mutant_13317" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="1024 - (WindowCacheConfig.KB)" />
    <mutant id="mutant_14648" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="(&quot;readpipe rc=&quot; / rc)" />
    <mutant id="mutant_15976" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) * (s.count))" />
    <mutant id="mutant_13316" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="WindowCacheConfig.KB" />
    <mutant id="mutant_14647" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="(&quot;readpipe rc=&quot; % rc)" />
    <mutant id="mutant_15977" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) / (s.count))" />
    <mutant id="mutant_13319" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 / (WindowCacheConfig.MB)" />
    <mutant id="mutant_13318" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="1024 + (WindowCacheConfig.KB)" />
    <mutant id="mutant_14649" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="4" />
    <mutant id="mutant_15970" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="1" />
    <mutant id="mutant_15971" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="((blocks.size()) / 1)" />
    <mutant id="mutant_14640" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="((&quot;readpipe may return \'&quot; + r) % &quot;\'&quot;)" />
    <mutant id="mutant_13311" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) - &quot;]&quot;" />
    <mutant id="mutant_14642" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="((&quot;readpipe may return \'&quot; + r) - &quot;\'&quot;)" />
    <mutant id="mutant_15974" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="blocks.size()" />
    <mutant id="mutant_13310" viable="true" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())" />
    <mutant id="mutant_14641" viable="true" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="((&quot;readpipe may return \'&quot; + r) + &quot;\'&quot;)" to="(&quot;readpipe may return \'&quot; + r)" />
    <mutant id="mutant_15975" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="((blocks.size()) % 1)" />
    <mutant id="mutant_13313" viable="false" in="?" from="1024 * (WindowCacheConfig.KB)" to="1024 % (WindowCacheConfig.KB)" />
    <mutant id="mutant_14644" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="(&quot;readpipe rc=&quot; * rc)" />
    <mutant id="mutant_15972" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="((blocks.size()) * 1)" />
    <mutant id="mutant_13312" viable="false" in="org.eclipse.jgit.storage.file.FileBasedConfig.toString()" from="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) + &quot;]&quot;" to="(((getClass().getSimpleName()) + &quot;[&quot;) + (getFile().getPath())) / &quot;]&quot;" />
    <mutant id="mutant_14643" viable="false" in="org.eclipse.jgit.util.FS.readPipe(java.io.File,java.lang.String[],java.lang.String,java.util.Map)" from="(&quot;readpipe rc=&quot; + rc)" to="rc" />
    <mutant id="mutant_15973" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.switchToOverflow()" from="((blocks.size()) - 1)" to="((blocks.size()) + 1)" />
    <mutant id="mutant_13326" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="8 / (WindowCacheConfig.KB)" />
    <mutant id="mutant_14657" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd * &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_15989" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="(ptr % (BinaryHunk.LITERAL.length))" />
    <mutant id="mutant_13325" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="8 % (WindowCacheConfig.KB)" />
    <mutant id="mutant_14656" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd - &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_13328" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="8" />
    <mutant id="mutant_14659" viable="false" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="(cmd / &quot; \&quot;$@\&quot;&quot;)" />
    <mutant id="mutant_15987" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="((b.count) + 1024)" />
    <mutant id="mutant_13327" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="8 + (WindowCacheConfig.KB)" />
    <mutant id="mutant_14658" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="cmd" />
    <mutant id="mutant_15988" viable="true" in="org.eclipse.jgit.patch.BinaryHunk.parseHunk(int,int)" from="(ptr + (BinaryHunk.LITERAL.length))" to="(ptr - (BinaryHunk.LITERAL.length))" />
    <mutant id="mutant_13329" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="8 * (WindowCacheConfig.KB)" to="WindowCacheConfig.KB" />
    <mutant id="mutant_15981" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="s.buffer.length" />
    <mutant id="mutant_15982" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="((b.count) % 1024)" />
    <mutant id="mutant_13320" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="WindowCacheConfig.MB" />
    <mutant id="mutant_14651" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 / (args.length))" />
    <mutant id="mutant_14650" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 * (args.length))" />
    <mutant id="mutant_15980" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.write(byte[],int,int)" from="((s.buffer.length) - (s.count))" to="((s.buffer.length) + (s.count))" />
    <mutant id="mutant_13322" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 + (WindowCacheConfig.MB)" />
    <mutant id="mutant_14653" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="args.length" />
    <mutant id="mutant_15985" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="((b.count) - 1024)" />
    <mutant id="mutant_13321" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 - (WindowCacheConfig.MB)" />
    <mutant id="mutant_14652" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 - (args.length))" />
    <mutant id="mutant_15986" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="1024" />
    <mutant id="mutant_13324" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10" />
    <mutant id="mutant_14655" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(cmd + &quot; \&quot;$@\&quot;&quot;)" to="&quot; \&quot;$@\&quot;&quot;" />
    <mutant id="mutant_15983" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="((b.count) * 1024)" />
    <mutant id="mutant_13323" viable="true" in="org.eclipse.jgit.storage.file.WindowCacheConfig()" from="10 * (WindowCacheConfig.MB)" to="10 % (WindowCacheConfig.MB)" />
    <mutant id="mutant_14654" viable="true" in="org.eclipse.jgit.util.FS_POSIX.runInShell(java.lang.String,java.lang.String[])" from="(4 + (args.length))" to="(4 % (args.length))" />
    <mutant id="mutant_15984" viable="true" in="org.eclipse.jgit.util.TemporaryBuffer.writeTo(java.io.OutputStream,org.eclipse.jgit.lib.ProgressMonitor)" from="((b.count) / 1024)" to="b.count" />
    <mutant id="mutant_12162" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="2" />
    <mutant id="mutant_13494" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_12163" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="((elements.length) % 2)" />
    <mutant id="mutant_13493" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="((untrackedParentFolders.getFirst()) - &quot;/&quot;)" />
    <mutant id="mutant_12164" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="((elements.length) * 2)" />
    <mutant id="mutant_13496" viable="true" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="untrackedParentFolders.getFirst()" />
    <mutant id="mutant_12165" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="((elements.length) / 2)" />
    <mutant id="mutant_13495" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="((untrackedParentFolders.getFirst()) % &quot;/&quot;)" />
    <mutant id="mutant_12166" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="((elements.length) + 2)" />
    <mutant id="mutant_13498" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="((untrackedParentFolders.getFirst()) / &quot;/&quot;)" />
    <mutant id="mutant_12167" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 2)" to="elements.length" />
    <mutant id="mutant_13497" viable="false" in="org.eclipse.jgit.treewalk.filter.IndexDiffFilter.copyUntrackedFolders(java.lang.String)" from="((untrackedParentFolders.getFirst()) + &quot;/&quot;)" to="((untrackedParentFolders.getFirst()) * &quot;/&quot;)" />
    <mutant id="mutant_12168" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="result.length()" />
    <mutant id="mutant_12169" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="((result.length()) * (Constants.DOT_GIT_EXT.length()))" />
    <mutant id="mutant_13499" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="(&quot;NotIgnored(&quot; / (index))" />
    <mutant id="mutant_13490" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="(j * 1)" />
    <mutant id="mutant_12160" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="((elements.length) + 1)" />
    <mutant id="mutant_13492" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="(j / 1)" />
    <mutant id="mutant_12161" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="elements.length" />
    <mutant id="mutant_13491" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="(j - 1)" />
    <mutant id="mutant_12173" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i / 2)" />
    <mutant id="mutant_12174" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="2" />
    <mutant id="mutant_12175" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="i" />
    <mutant id="mutant_12176" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i % 2)" />
    <mutant id="mutant_12177" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i * 2)" />
    <mutant id="mutant_12178" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i - 2)" />
    <mutant id="mutant_12179" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12170" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="((result.length()) / (Constants.DOT_GIT_EXT.length()))" />
    <mutant id="mutant_12171" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="((result.length()) + (Constants.DOT_GIT_EXT.length()))" />
    <mutant id="mutant_12172" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((result.length()) - (Constants.DOT_GIT_EXT.length()))" to="((result.length()) % (Constants.DOT_GIT_EXT.length()))" />
    <mutant id="mutant_12148" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="(&quot;[\\&quot; * (File.separatorChar))" />
    <mutant id="mutant_12149" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="(&quot;[\\&quot; / (File.separatorChar))" />
    <mutant id="mutant_13479" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12140" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="getPath().hashCode()" />
    <mutant id="mutant_13472" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12141" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="(hc * 31) - (getPath().hashCode())" />
    <mutant id="mutant_13471" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_12142" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="hc * 31" />
    <mutant id="mutant_13474" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12143" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="(hc * 31) / (getPath().hashCode())" />
    <mutant id="mutant_13473" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12144" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="&quot;[\\&quot;" />
    <mutant id="mutant_13476" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="1" />
    <mutant id="mutant_12145" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="(&quot;[\\&quot; - (File.separatorChar))" />
    <mutant id="mutant_13475" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12146" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="(&quot;[\\&quot; % (File.separatorChar))" />
    <mutant id="mutant_13478" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12147" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="(&quot;[\\&quot; + (File.separatorChar))" to="(File.separatorChar)" />
    <mutant id="mutant_13477" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="i" />
    <mutant id="mutant_13470" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_12159" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="((elements.length) * 1)" />
    <mutant id="mutant_12151" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="((&quot;[\\&quot; + (File.separatorChar)) - &quot;/]&quot;)" />
    <mutant id="mutant_13483" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="sz + 1" />
    <mutant id="mutant_12152" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="((&quot;[\\&quot; + (File.separatorChar)) % &quot;/]&quot;)" />
    <mutant id="mutant_13482" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="sz / 1" />
    <mutant id="mutant_12153" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="((&quot;[\\&quot; + (File.separatorChar)) * &quot;/]&quot;)" />
    <mutant id="mutant_13485" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="sz" />
    <mutant id="mutant_12154" viable="false" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="((&quot;[\\&quot; + (File.separatorChar)) / &quot;/]&quot;)" />
    <mutant id="mutant_13484" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="sz % 1" />
    <mutant id="mutant_12155" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="(&quot;[\\&quot; + (File.separatorChar))" />
    <mutant id="mutant_13487" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="1" />
    <mutant id="mutant_12156" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="((elements.length) / 1)" />
    <mutant id="mutant_13486" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="sz * 1" />
    <mutant id="mutant_12157" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="1" />
    <mutant id="mutant_13489" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="j" />
    <mutant id="mutant_12158" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((elements.length) - 1)" to="((elements.length) % 1)" />
    <mutant id="mutant_13488" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.insert(byte[],int)" from="(j + 1)" to="(j % 1)" />
    <mutant id="mutant_13481" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.initTable(int)" from="sz - 1" to="1" />
    <mutant id="mutant_12150" viable="true" in="org.eclipse.jgit.transport.URIish.getHumanishName()" from="((&quot;[\\&quot; + (File.separatorChar)) + &quot;/]&quot;)" to="&quot;/]&quot;" />
    <mutant id="mutant_13480" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.chainlength(byte[])" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12184" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12185" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i / 2)" />
    <mutant id="mutant_12186" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="2" />
    <mutant id="mutant_12187" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="i" />
    <mutant id="mutant_12188" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i % 2)" />
    <mutant id="mutant_12189" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i * 2)" />
    <mutant id="mutant_12180" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_12181" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_12182" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12183" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12195" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(last.name())" />
    <mutant id="mutant_12196" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; / (last.name()))" />
    <mutant id="mutant_12197" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) % &quot;\n&quot;)" />
    <mutant id="mutant_12198" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(&quot;ACK &quot; + (last.name()))" />
    <mutant id="mutant_12199" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) / &quot;\n&quot;)" />
    <mutant id="mutant_12190" viable="true" in="org.eclipse.jgit.transport.URIish.unescape(java.lang.String)" from="(i + 2)" to="(i - 2)" />
    <mutant id="mutant_12191" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; * (last.name()))" />
    <mutant id="mutant_12192" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_12193" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; - (last.name()))" />
    <mutant id="mutant_12194" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; % (last.name()))" />
    <mutant id="mutant_2809" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="(nextNamePos * 1)" />
    <mutant id="mutant_2808" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="(nextNamePos - 1)" />
    <mutant id="mutant_2807" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="1" />
    <mutant id="mutant_2806" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="nextNamePos" />
    <mutant id="mutant_2805" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="(nextNamePos / 1)" />
    <mutant id="mutant_2804" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="'0'" />
    <mutant id="mutant_2803" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_2802" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_2801" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_2800" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="c" />
    <mutant id="mutant_1519" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) % idHashBits" />
    <mutant id="mutant_2841" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_1510" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="idHashBits" />
    <mutant id="mutant_2840" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_1517" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="((1 &lt;&lt; idHashBits) % (idHashBits - 3))" />
    <mutant id="mutant_2849" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="p" />
    <mutant id="mutant_1518" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) * idHashBits" />
    <mutant id="mutant_2848" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="3" />
    <mutant id="mutant_1515" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="((1 &lt;&lt; idHashBits) / (idHashBits - 3))" />
    <mutant id="mutant_2847" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_1516" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="((1 &lt;&lt; idHashBits) - (idHashBits - 3))" />
    <mutant id="mutant_2846" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_1513" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="(1 &lt;&lt; idHashBits)" />
    <mutant id="mutant_2845" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_1514" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="(idHashBits - 3)" />
    <mutant id="mutant_2844" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="p" />
    <mutant id="mutant_1511" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="(idHashBits % 3)" />
    <mutant id="mutant_2843" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="2" />
    <mutant id="mutant_1512" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3))" to="((1 &lt;&lt; idHashBits) + (idHashBits - 3))" />
    <mutant id="mutant_2842" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_1508" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="(idHashBits + 3)" />
    <mutant id="mutant_1509" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="(idHashBits / 3)" />
    <mutant id="mutant_2839" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="p" />
    <mutant id="mutant_2830" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="(end % p)" />
    <mutant id="mutant_1506" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="(idHashBits * 3)" />
    <mutant id="mutant_2838" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_1507" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="(idHashBits - 3)" to="3" />
    <mutant id="mutant_2837" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_1504" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) / 1" />
    <mutant id="mutant_2836" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="1" />
    <mutant id="mutant_1505" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) * 1" />
    <mutant id="mutant_2835" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_1502" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) + 1" />
    <mutant id="mutant_2834" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="(end * p)" />
    <mutant id="mutant_1503" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) % 1" />
    <mutant id="mutant_2833" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="(end / p)" />
    <mutant id="mutant_1500" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="1" />
    <mutant id="mutant_2832" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="end" />
    <mutant id="mutant_1501" viable="false" in="?" from="(1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)) - 1" to="1L &lt;&lt; (SimilarityIndex.KEY_SHIFT)" />
    <mutant id="mutant_2831" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="(end + p)" />
    <mutant id="mutant_2829" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(end - p)" to="p" />
    <mutant id="mutant_2828" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_2827" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_2826" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_2825" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_2824" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_2823" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_2822" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_2821" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_2820" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_2819" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_2818" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_2817" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGit(byte[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_2816" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="(nextPtr * 1)" />
    <mutant id="mutant_2815" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="(nextPtr / 1)" />
    <mutant id="mutant_2814" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="(nextPtr + 1)" />
    <mutant id="mutant_2813" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="1" />
    <mutant id="mutant_2812" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="nextPtr" />
    <mutant id="mutant_2811" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextPtr - 1)" to="(nextPtr % 1)" />
    <mutant id="mutant_2810" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(nextNamePos + 1)" to="(nextNamePos % 1)" />
    <mutant id="mutant_14709" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) - (dateTimeInstance2.format(ident.getWhen()))" />
    <mutant id="mutant_14708" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="((dateTimeInstance.format(ident.getWhen())) * &quot; &quot;)" />
    <mutant id="mutant_14701" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="((ident.getWhen().getTime()) * 1000)" />
    <mutant id="mutant_14700" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="ident.getWhen().getTime()" />
    <mutant id="mutant_14703" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="(dateTimeInstance.format(ident.getWhen()))" />
    <mutant id="mutant_14702" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((ident.getWhen().getTime()) / 1000)" to="((ident.getWhen().getTime()) % 1000)" />
    <mutant id="mutant_14705" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="((dateTimeInstance.format(ident.getWhen())) - &quot; &quot;)" />
    <mutant id="mutant_14704" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_14707" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="((dateTimeInstance.format(ident.getWhen())) / &quot; &quot;)" />
    <mutant id="mutant_14706" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;)" to="((dateTimeInstance.format(ident.getWhen())) % &quot; &quot;)" />
    <mutant id="mutant_1553" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="31" />
    <mutant id="mutant_2885" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_1554" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="(key - -1640562687)" />
    <mutant id="mutant_2884" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_1551" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="(idHashBits)" />
    <mutant id="mutant_2883" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_1552" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="(31 * (idHashBits))" />
    <mutant id="mutant_2882" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_2881" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_1550" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="(31 / (idHashBits))" />
    <mutant id="mutant_2880" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_1559" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="-1640562687" />
    <mutant id="mutant_1557" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="(key + -1640562687)" />
    <mutant id="mutant_2889" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="1" />
    <mutant id="mutant_1558" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="key" />
    <mutant id="mutant_2888" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_1555" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="(key % -1640562687)" />
    <mutant id="mutant_2887" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_1556" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="(key * -1640562687)" to="(key / -1640562687)" />
    <mutant id="mutant_2886" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_14719" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="((parts.length) + 1)" />
    <mutant id="mutant_14712" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="(dateTimeInstance.format(ident.getWhen())) + &quot; &quot;" />
    <mutant id="mutant_14711" viable="true" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="dateTimeInstance2.format(ident.getWhen())" />
    <mutant id="mutant_14714" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) / (dateTimeInstance2.format(ident.getWhen()))" />
    <mutant id="mutant_14713" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) * (dateTimeInstance2.format(ident.getWhen()))" />
    <mutant id="mutant_14716" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="1" />
    <mutant id="mutant_14715" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="((parts.length) / 1)" />
    <mutant id="mutant_14718" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="((parts.length) * 1)" />
    <mutant id="mutant_14717" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="((parts.length) % 1)" />
    <mutant id="mutant_1542" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((common(dst)) * maxScore) % max" />
    <mutant id="mutant_2874" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_1543" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((common(dst)) * maxScore) - max" />
    <mutant id="mutant_2873" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_1540" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="((common(dst)) / maxScore)" />
    <mutant id="mutant_2872" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_1541" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="((common(dst)) + maxScore)" />
    <mutant id="mutant_2871" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_2870" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_14710" viable="false" in="org.eclipse.jgit.util.GitDateFormatter.formatDate(org.eclipse.jgit.lib.PersonIdent)" from="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) + (dateTimeInstance2.format(ident.getWhen()))" to="((dateTimeInstance.format(ident.getWhen())) + &quot; &quot;) % (dateTimeInstance2.format(ident.getWhen()))" />
    <mutant id="mutant_1548" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="(31 + (idHashBits))" />
    <mutant id="mutant_1549" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.slot(int)" from="(31 - (idHashBits))" to="(31 % (idHashBits))" />
    <mutant id="mutant_2879" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_1546" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((common(dst)) * maxScore) + max" />
    <mutant id="mutant_2878" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_1547" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="(common(dst)) * maxScore" />
    <mutant id="mutant_2877" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_1544" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="max" />
    <mutant id="mutant_2876" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_1545" viable="false" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((int)(((common(dst)) * maxScore) / max))" to="((common(dst)) * maxScore) * max" />
    <mutant id="mutant_2875" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_1531" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="((idHash.length) - (idSize)) % idx" />
    <mutant id="mutant_2863" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_1532" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="idx" />
    <mutant id="mutant_2862" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_2861" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_1530" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="(idHash.length) - (idSize)" />
    <mutant id="mutant_2860" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_1539" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="(common(dst))" />
    <mutant id="mutant_1537" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="((common(dst)) % maxScore)" />
    <mutant id="mutant_2869" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_1538" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="maxScore" />
    <mutant id="mutant_2868" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_1535" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="((idHash.length) - (idSize)) / idx" />
    <mutant id="mutant_2867" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_1536" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.score(org.eclipse.jgit.diff.SimilarityIndex,int)" from="((common(dst)) * maxScore)" to="((common(dst)) - maxScore)" />
    <mutant id="mutant_2866" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_1533" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="((idHash.length) - (idSize)) * idx" />
    <mutant id="mutant_2865" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_1534" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize)) + idx" to="((idHash.length) - (idSize)) - idx" />
    <mutant id="mutant_2864" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_1520" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) - idHashBits" />
    <mutant id="mutant_2852" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_1521" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="(1 &lt;&lt; idHashBits) * (idHashBits - 3)" />
    <mutant id="mutant_2851" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_2850" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_1528" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="(idHash.length)" />
    <mutant id="mutant_1529" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="((idHash.length) / (idSize))" />
    <mutant id="mutant_2859" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isMacHFSGit(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_1526" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="(idSize)" />
    <mutant id="mutant_2858" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_1527" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="((idHash.length) % (idSize))" />
    <mutant id="mutant_2857" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_1524" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="((idHash.length) + (idSize))" />
    <mutant id="mutant_2856" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_1525" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.packedIndex(int)" from="((idHash.length) - (idSize))" to="((idHash.length) * (idSize))" />
    <mutant id="mutant_2855" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="4" />
    <mutant id="mutant_1522" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="idHashBits" />
    <mutant id="mutant_2854" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="p" />
    <mutant id="mutant_1523" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.growAt(int)" from="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) / idHashBits" to="((1 &lt;&lt; idHashBits) * (idHashBits - 3)) + idHashBits" />
    <mutant id="mutant_2853" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isGitTilde1(byte[],int,int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_13414" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) * &quot; AND &quot;)" />
    <mutant id="mutant_14745" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_13413" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="&quot; AND &quot;" />
    <mutant id="mutant_14744" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_13416" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) % (b.toString()))" />
    <mutant id="mutant_14747" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_13415" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) - (b.toString()))" />
    <mutant id="mutant_14746" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_13418" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) / (b.toString()))" />
    <mutant id="mutant_14749" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_13417" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) * (b.toString()))" />
    <mutant id="mutant_14748" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_13419" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(b.toString())" />
    <mutant id="mutant_1597" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)" />
    <mutant id="mutant_1598" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="1" />
    <mutant id="mutant_1595" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) * c" />
    <mutant id="mutant_1596" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) * 1" />
    <mutant id="mutant_1593" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="c" />
    <mutant id="mutant_13410" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(&quot;(&quot; + (a.toString()))" />
    <mutant id="mutant_14741" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_1594" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_14740" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_1591" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) - c" />
    <mutant id="mutant_13412" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) % &quot; AND &quot;)" />
    <mutant id="mutant_14743" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1592" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) % c" />
    <mutant id="mutant_13411" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) - &quot; AND &quot;)" />
    <mutant id="mutant_14742" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1599" viable="false" in="?" from="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) - 1" to="(1 &lt;&lt; (SimilarityRenameDetector.BITS_PER_INDEX)) % 1" />
    <mutant id="mutant_13425" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_14756" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1590" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) / c" />
    <mutant id="mutant_13424" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())" />
    <mutant id="mutant_14755" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_13427" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="((hash) + 31)" />
    <mutant id="mutant_14758" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_13426" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) % &quot;)&quot;" />
    <mutant id="mutant_14757" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_13429" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="((hash) - 31)" />
    <mutant id="mutant_13428" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="((hash) / 31)" />
    <mutant id="mutant_14759" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_1586" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_1587" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_1584" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_14750" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1585" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_1582" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_13421" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) - &quot;)&quot;" />
    <mutant id="mutant_14752" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_1583" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) * c" />
    <mutant id="mutant_13420" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" />
    <mutant id="mutant_14751" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1580" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) % c" />
    <mutant id="mutant_13423" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) * &quot;)&quot;" />
    <mutant id="mutant_14754" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1581" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="c" />
    <mutant id="mutant_13422" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) / &quot;)&quot;" />
    <mutant id="mutant_14753" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_1588" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_1589" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(java.io.InputStream,long,boolean)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_14723" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="((parts.length) * 2)" />
    <mutant id="mutant_14722" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="((parts.length) % 2)" />
    <mutant id="mutant_14725" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="((parts.length) + 2)" />
    <mutant id="mutant_14724" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="((parts.length) / 2)" />
    <mutant id="mutant_14727" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_14726" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="(parts.length)" />
    <mutant id="mutant_14729" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_14728" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_1575" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_1576" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_1573" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_1574" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_1571" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="(ptr + start)" />
    <mutant id="mutant_1572" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_14721" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 2)" to="2" />
    <mutant id="mutant_1570" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="ptr" />
    <mutant id="mutant_14720" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="((parts.length) - 1)" to="parts.length" />
    <mutant id="mutant_1579" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) - c" />
    <mutant id="mutant_1577" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_1578" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + c" to="((hash &lt;&lt; 5) + hash) / c" />
    <mutant id="mutant_13403" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(a.toString())" />
    <mutant id="mutant_14734" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_13402" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) - (statistics.timeWriting)" />
    <mutant id="mutant_14733" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_13405" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; - (a.toString()))" />
    <mutant id="mutant_14736" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_13404" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; / (a.toString()))" />
    <mutant id="mutant_14735" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_13407" viable="true" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="&quot;(&quot;" />
    <mutant id="mutant_14738" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_13406" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; % (a.toString()))" />
    <mutant id="mutant_14737" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_13409" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) / &quot; AND &quot;)" />
    <mutant id="mutant_13408" viable="false" in="org.eclipse.jgit.treewalk.filter.AndTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; * (a.toString()))" />
    <mutant id="mutant_14739" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1564" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="org.eclipse.jgit.diff.SimilarityIndex.countOf(v)" />
    <mutant id="mutant_2896" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_1565" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="cnt" />
    <mutant id="mutant_2895" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_1562" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) * cnt)" />
    <mutant id="mutant_2894" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="end" />
    <mutant id="mutant_1563" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) / cnt)" />
    <mutant id="mutant_2893" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="end % 1" />
    <mutant id="mutant_1560" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) - cnt)" />
    <mutant id="mutant_2892" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="end + 1" />
    <mutant id="mutant_14730" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1561" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.add(int,int)" from="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) + cnt)" to="((org.eclipse.jgit.diff.SimilarityIndex.countOf(v)) % cnt)" />
    <mutant id="mutant_2891" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="end / 1" />
    <mutant id="mutant_2890" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="end - 1" to="end * 1" />
    <mutant id="mutant_13401" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="statistics.timeWriting" />
    <mutant id="mutant_14732" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_13400" viable="true" in="org.eclipse.jgit.storage.pack.PackStatistics.getTimeTotal()" from="((((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)) + (statistics.timeWriting)" to="(((statistics.timeCounting) + (statistics.timeSearchingForReuse)) + (statistics.timeSearchingForSizes)) + (statistics.timeCompressing)" />
    <mutant id="mutant_14731" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1568" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="(ptr * start)" />
    <mutant id="mutant_1569" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="start" />
    <mutant id="mutant_2899" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_1566" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="(ptr / start)" />
    <mutant id="mutant_2898" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_1567" viable="true" in="org.eclipse.jgit.diff.SimilarityIndex.hash(byte[],int,int)" from="(ptr - start)" to="(ptr % start)" />
    <mutant id="mutant_2897" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.isNormalizedGit(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_12126" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="getPort()" />
    <mutant id="mutant_13458" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="(capacity * 2)" />
    <mutant id="mutant_14789" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12127" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="(hc * 31) - (getPort())" />
    <mutant id="mutant_13457" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="((capacity * 2) % 1)" />
    <mutant id="mutant_14788" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_12128" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="hc * 31" />
    <mutant id="mutant_12129" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="(hc * 31) * (getPort())" />
    <mutant id="mutant_13459" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="1" />
    <mutant id="mutant_13450" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="(hash) * 31" />
    <mutant id="mutant_14781" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_14780" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12120" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_13452" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="2" />
    <mutant id="mutant_14783" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12121" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_13451" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="capacity" />
    <mutant id="mutant_14782" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_12122" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_13454" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="(capacity / 2)" />
    <mutant id="mutant_14785" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12123" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_13453" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="(capacity % 2)" />
    <mutant id="mutant_14784" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12124" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_13456" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="(capacity + 2)" />
    <mutant id="mutant_14787" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12125" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_13455" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="(capacity * 2)" to="(capacity - 2)" />
    <mutant id="mutant_14786" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12137" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_13469" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.get(byte[],int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12138" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="(hc * 31) % (getPath().hashCode())" />
    <mutant id="mutant_13468" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_14799" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12139" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPath().hashCode())" to="(hc * 31) * (getPath().hashCode())" />
    <mutant id="mutant_13461" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="((capacity * 2) + 1)" />
    <mutant id="mutant_14792" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12130" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="(hc * 31) / (getPort())" />
    <mutant id="mutant_13460" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="((capacity * 2) / 1)" />
    <mutant id="mutant_14791" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12131" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPort())" to="(hc * 31) % (getPort())" />
    <mutant id="mutant_13463" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_14794" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_12132" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_13462" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet(int)" from="((capacity * 2) - 1)" to="((capacity * 2) * 1)" />
    <mutant id="mutant_14793" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12133" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_13465" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_14796" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12134" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_13464" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_14795" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12135" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_13467" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_14798" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12136" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_13466" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet.addIfAbsent(byte[],int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_14797" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_14790" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12104" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="getPass().hashCode()" />
    <mutant id="mutant_13436" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="((hash) * 31) - (data[(pos)++])" />
    <mutant id="mutant_14767" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12105" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="(hc * 31) - (getPass().hashCode())" />
    <mutant id="mutant_13435" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="((hash) * 31) % (data[(pos)++])" />
    <mutant id="mutant_14766" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12106" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="hc * 31" />
    <mutant id="mutant_13438" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="(hash) * 31" />
    <mutant id="mutant_14769" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12107" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="(hc * 31) / (getPass().hashCode())" />
    <mutant id="mutant_13437" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="data[(pos)++]" />
    <mutant id="mutant_14768" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12108" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc + 31)" />
    <mutant id="mutant_12109" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc - 31)" />
    <mutant id="mutant_13439" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="((hash) + 31)" />
    <mutant id="mutant_13430" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="(hash)" />
    <mutant id="mutant_14761" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_14760" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12100" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_13432" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="31" />
    <mutant id="mutant_14763" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12101" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_13431" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31)" to="((hash) % 31)" />
    <mutant id="mutant_14762" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12102" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="(hc * 31) % (getPass().hashCode())" />
    <mutant id="mutant_13434" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="((hash) * 31) * (data[(pos)++])" />
    <mutant id="mutant_14765" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12103" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getPass().hashCode())" to="(hc * 31) * (getPass().hashCode())" />
    <mutant id="mutant_13433" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.hash()" from="((hash) * 31) + (data[(pos)++])" to="((hash) * 31) / (data[(pos)++])" />
    <mutant id="mutant_14764" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_12115" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="(hc * 31) * (getHost().hashCode())" />
    <mutant id="mutant_13447" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="data[pos]" />
    <mutant id="mutant_14778" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12116" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="getHost().hashCode()" />
    <mutant id="mutant_13446" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="((hash) * 31) * (data[pos])" />
    <mutant id="mutant_14777" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12117" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="(hc * 31) - (getHost().hashCode())" />
    <mutant id="mutant_13449" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="((hash) * 31) - (data[pos])" />
    <mutant id="mutant_12118" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="hc * 31" />
    <mutant id="mutant_13448" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="((hash) * 31) / (data[pos])" />
    <mutant id="mutant_14779" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12119" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="(hc * 31) / (getHost().hashCode())" />
    <mutant id="mutant_14770" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_13441" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="((hash) - 31)" />
    <mutant id="mutant_14772" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12110" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc % 31)" />
    <mutant id="mutant_13440" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="((hash) / 31)" />
    <mutant id="mutant_14771" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_12111" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="hc" />
    <mutant id="mutant_13443" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="((hash) % 31)" />
    <mutant id="mutant_14774" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_12112" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="31" />
    <mutant id="mutant_13442" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="(hash)" />
    <mutant id="mutant_14773" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12113" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31)" to="(hc / 31)" />
    <mutant id="mutant_13445" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31) + (data[pos])" to="((hash) * 31) % (data[pos])" />
    <mutant id="mutant_14776" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_12114" viable="true" in="org.eclipse.jgit.transport.URIish.hashCode()" from="(hc * 31) + (getHost().hashCode())" to="(hc * 31) % (getHost().hashCode())" />
    <mutant id="mutant_13444" viable="true" in="org.eclipse.jgit.treewalk.filter.ByteArraySet$Hasher.nextHash()" from="((hash) * 31)" to="31" />
    <mutant id="mutant_14775" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12283" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; - (id.name()))" />
    <mutant id="mutant_12284" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; % (id.name()))" />
    <mutant id="mutant_12285" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(id.name())" />
    <mutant id="mutant_12286" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; / (id.name()))" />
    <mutant id="mutant_12287" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) * &quot; ready\n&quot;)" />
    <mutant id="mutant_12288" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="&quot; ready\n&quot;" />
    <mutant id="mutant_12289" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="(&quot;ACK &quot; + (id.name()))" />
    <mutant id="mutant_12280" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (id.name())) % &quot; continue\n&quot;)" />
    <mutant id="mutant_12281" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; * (id.name()))" />
    <mutant id="mutant_12282" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_12294" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="1" />
    <mutant id="mutant_12295" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="((peerHas.size()) % 1)" />
    <mutant id="mutant_12296" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="((peerHas.size()) * 1)" />
    <mutant id="mutant_12297" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="peerHas.size()" />
    <mutant id="mutant_12298" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="((peerHas.size()) + 1)" />
    <mutant id="mutant_12299" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; * (id.name()))" />
    <mutant id="mutant_12290" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) - &quot; ready\n&quot;)" />
    <mutant id="mutant_12291" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) / &quot; ready\n&quot;)" />
    <mutant id="mutant_12292" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; ready\n&quot;)" to="((&quot;ACK &quot; + (id.name())) % &quot; ready\n&quot;)" />
    <mutant id="mutant_12293" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((peerHas.size()) - 1)" to="((peerHas.size()) / 1)" />
    <mutant id="mutant_12269" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; * (id.name()))" />
    <mutant id="mutant_12261" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="(peerHas.size()) + haveCnt" />
    <mutant id="mutant_13593" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="path.toString()" />
    <mutant id="mutant_12262" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="haveCnt" />
    <mutant id="mutant_13592" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="&quot;FAST_&quot; % (path.toString())" />
    <mutant id="mutant_12263" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="(peerHas.size()) / 1" />
    <mutant id="mutant_13595" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="&quot;SkipWorkTree(&quot;" />
    <mutant id="mutant_12264" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="1" />
    <mutant id="mutant_13594" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="(&quot;SkipWorkTree(&quot; * (treeIdx))" />
    <mutant id="mutant_12265" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="(peerHas.size()) % 1" />
    <mutant id="mutant_13597" viable="true" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="(treeIdx)" />
    <mutant id="mutant_12266" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="(peerHas.size()) * 1" />
    <mutant id="mutant_13596" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="(&quot;SkipWorkTree(&quot; / (treeIdx))" />
    <mutant id="mutant_12267" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="peerHas.size()" />
    <mutant id="mutant_13599" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="(&quot;SkipWorkTree(&quot; - (treeIdx))" />
    <mutant id="mutant_12268" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - 1" to="(peerHas.size()) + 1" />
    <mutant id="mutant_13598" viable="false" in="org.eclipse.jgit.treewalk.filter.SkipWorkTreeFilter.toString()" from="(&quot;SkipWorkTree(&quot; + (treeIdx))" to="(&quot;SkipWorkTree(&quot; % (treeIdx))" />
    <mutant id="mutant_13591" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="&quot;FAST_&quot; / (path.toString())" />
    <mutant id="mutant_12260" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="peerHas.size()" />
    <mutant id="mutant_13590" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="&quot;FAST_&quot; - (path.toString())" />
    <mutant id="mutant_12272" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; % (id.name()))" />
    <mutant id="mutant_12273" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(id.name())" />
    <mutant id="mutant_12274" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; / (id.name()))" />
    <mutant id="mutant_12275" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (id.name())) / &quot; continue\n&quot;)" />
    <mutant id="mutant_12276" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="&quot; continue\n&quot;" />
    <mutant id="mutant_12277" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="(&quot;ACK &quot; + (id.name()))" />
    <mutant id="mutant_12278" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (id.name())) - &quot; continue\n&quot;)" />
    <mutant id="mutant_12279" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (id.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (id.name())) * &quot; continue\n&quot;)" />
    <mutant id="mutant_12270" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_12271" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (id.name()))" to="(&quot;ACK &quot; - (id.name()))" />
    <mutant id="mutant_2729" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="24" />
    <mutant id="mutant_2720" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_2728" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p % 24)" />
    <mutant id="mutant_2727" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p / 24)" />
    <mutant id="mutant_2726" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_2725" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_2724" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_2723" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_2722" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_2721" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_2719" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_2718" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_2717" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_2716" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_2715" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_2714" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="stage / 1" />
    <mutant id="mutant_2713" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="stage + 1" />
    <mutant id="mutant_2712" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="stage % 1" />
    <mutant id="mutant_2711" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="stage" />
    <mutant id="mutant_2710" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="1" />
    <mutant id="mutant_2709" viable="true" in="org.eclipse.jgit.lib.IndexDiff.addConflict(java.lang.String,int)" from="stage - 1" to="stage * 1" />
    <mutant id="mutant_2708" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="((estWorkTreeSize * 10) * 9)" />
    <mutant id="mutant_2707" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="((estWorkTreeSize * 10) + 9)" />
    <mutant id="mutant_2706" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="9" />
    <mutant id="mutant_2705" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="((estWorkTreeSize * 10) % 9)" />
    <mutant id="mutant_2704" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="((estWorkTreeSize * 10) - 9)" />
    <mutant id="mutant_2703" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estWorkTreeSize * 10) / 9)" to="(estWorkTreeSize * 10)" />
    <mutant id="mutant_2702" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="10" />
    <mutant id="mutant_2701" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="(estWorkTreeSize + 10)" />
    <mutant id="mutant_2700" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="(estWorkTreeSize - 10)" />
    <mutant id="mutant_14829" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) % host)" />
    <mutant id="mutant_14822" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) - host)" />
    <mutant id="mutant_14821" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) * host)" />
    <mutant id="mutant_14824" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(ce.getMessage())" />
    <mutant id="mutant_14823" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) % &quot; &quot;)" />
    <mutant id="mutant_14826" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_14825" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) * &quot; &quot;)" />
    <mutant id="mutant_14828" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) - &quot; &quot;)" />
    <mutant id="mutant_14827" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) / &quot; &quot;)" />
    <mutant id="mutant_1432" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) % 1)" />
    <mutant id="mutant_2764" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_1433" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="(a.lines.get(((e.endA) + 1))) * aEnd" />
    <mutant id="mutant_2763" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_1430" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) / 1)" />
    <mutant id="mutant_2762" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_1431" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) - 1)" />
    <mutant id="mutant_2761" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_2760" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_14820" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((ce.getMessage()) + &quot; &quot;)" />
    <mutant id="mutant_1438" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="(a.lines.get(((e.endA) + 1))) % aEnd" />
    <mutant id="mutant_1439" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="e.endB" />
    <mutant id="mutant_2769" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_1436" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="(a.lines.get(((e.endA) + 1))) / aEnd" />
    <mutant id="mutant_2768" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_1437" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="a.lines.get(((e.endA) + 1))" />
    <mutant id="mutant_2767" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_1434" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="aEnd" />
    <mutant id="mutant_2766" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_1435" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(a.lines.get(((e.endA) + 1))) - aEnd" to="(a.lines.get(((e.endA) + 1))) + aEnd" />
    <mutant id="mutant_2765" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_13509" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_13502" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="(&quot;NotIgnored(&quot; - (index))" />
    <mutant id="mutant_14833" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) * host)" />
    <mutant id="mutant_13501" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="(index)" />
    <mutant id="mutant_14832" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="((ce.getMessage()) + &quot; &quot;)" />
    <mutant id="mutant_13504" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="(&quot;NotIgnored(&quot; * (index))" />
    <mutant id="mutant_14835" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="2" />
    <mutant id="mutant_13503" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="(&quot;NotIgnored(&quot; % (index))" />
    <mutant id="mutant_14834" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) - host)" />
    <mutant id="mutant_13506" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="(&quot;NotIgnored(&quot; + (index)) - &quot;)&quot;" />
    <mutant id="mutant_14837" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="((buf.length) / 2)" />
    <mutant id="mutant_13505" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="(&quot;NotIgnored(&quot; + (index)) * &quot;)&quot;" />
    <mutant id="mutant_14836" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="((buf.length) % 2)" />
    <mutant id="mutant_13508" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="&quot;NotIgnored(&quot; + (index)" />
    <mutant id="mutant_14839" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="((buf.length) - 2)" />
    <mutant id="mutant_13507" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="(&quot;NotIgnored(&quot; + (index)) / &quot;)&quot;" />
    <mutant id="mutant_14838" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="((buf.length) + 2)" />
    <mutant id="mutant_1421" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="e.endA" />
    <mutant id="mutant_2753" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="p" />
    <mutant id="mutant_1422" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) * 1)" />
    <mutant id="mutant_2752" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p % 12)" />
    <mutant id="mutant_2751" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="12" />
    <mutant id="mutant_1420" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="(bEnd + 1)" />
    <mutant id="mutant_2750" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_13500" viable="true" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index))" to="&quot;NotIgnored(&quot;" />
    <mutant id="mutant_14831" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="host" />
    <mutant id="mutant_14830" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(org.eclipse.jgit.transport.http.HttpConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) / host)" />
    <mutant id="mutant_1429" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="1" />
    <mutant id="mutant_1427" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="e.endA" />
    <mutant id="mutant_2759" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_1428" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) * 1)" />
    <mutant id="mutant_2758" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_1425" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) - 1)" />
    <mutant id="mutant_2757" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_1426" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) % 1)" />
    <mutant id="mutant_2756" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p - 12)" />
    <mutant id="mutant_1423" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="1" />
    <mutant id="mutant_2755" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p * 12)" />
    <mutant id="mutant_1424" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) / 1)" />
    <mutant id="mutant_2754" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p / 12)" />
    <mutant id="mutant_14808" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_14807" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_14809" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_14800" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_14802" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_14801" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="i" />
    <mutant id="mutant_14804" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_14803" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_14806" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="1" />
    <mutant id="mutant_14805" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1410" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="1" />
    <mutant id="mutant_2742" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_1411" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="(aEnd + 1)" />
    <mutant id="mutant_2741" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_2740" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_1418" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="(bEnd * 1)" />
    <mutant id="mutant_1419" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="(bEnd % 1)" />
    <mutant id="mutant_2749" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_1416" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="1" />
    <mutant id="mutant_2748" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_1417" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="(bEnd / 1)" />
    <mutant id="mutant_2747" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_1414" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="(aEnd % 1)" />
    <mutant id="mutant_2746" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_1415" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(bEnd - 1)" to="bEnd" />
    <mutant id="mutant_2745" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_1412" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="(aEnd / 1)" />
    <mutant id="mutant_2744" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_1413" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="(aEnd * 1)" />
    <mutant id="mutant_2743" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_14819" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="host" />
    <mutant id="mutant_14818" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) / host)" />
    <mutant id="mutant_1409" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="(aEnd - 1)" to="aEnd" />
    <mutant id="mutant_14811" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) % &quot; &quot;)" />
    <mutant id="mutant_14810" viable="true" in="org.eclipse.jgit.util.GitDateParser.parse_relative(java.lang.String,java.util.Calendar)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_14813" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) * &quot; &quot;)" />
    <mutant id="mutant_14812" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="(ce.getMessage())" />
    <mutant id="mutant_14815" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) / &quot; &quot;)" />
    <mutant id="mutant_14814" viable="true" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_14817" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="(((ce.getMessage()) + &quot; &quot;) + host)" to="(((ce.getMessage()) + &quot; &quot;) % host)" />
    <mutant id="mutant_14816" viable="false" in="org.eclipse.jgit.util.HttpSupport.response(java.net.HttpURLConnection)" from="((ce.getMessage()) + &quot; &quot;)" to="((ce.getMessage()) - &quot; &quot;)" />
    <mutant id="mutant_2731" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p - 24)" />
    <mutant id="mutant_1400" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) / 1)" />
    <mutant id="mutant_2730" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="p" />
    <mutant id="mutant_1407" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) * 1)" />
    <mutant id="mutant_2739" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_1408" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) % 1)" />
    <mutant id="mutant_2738" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="32" />
    <mutant id="mutant_1405" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) / 1)" />
    <mutant id="mutant_2737" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p - 32)" />
    <mutant id="mutant_1406" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) - 1)" />
    <mutant id="mutant_2736" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p * 32)" />
    <mutant id="mutant_1403" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="e.endB" />
    <mutant id="mutant_2735" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p / 32)" />
    <mutant id="mutant_1404" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="1" />
    <mutant id="mutant_2734" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p % 32)" />
    <mutant id="mutant_1401" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) - 1)" />
    <mutant id="mutant_2733" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 32)" to="p" />
    <mutant id="mutant_1402" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) % 1)" />
    <mutant id="mutant_2732" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p * 24)" />
    <mutant id="mutant_12203" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; * (last.name()))" />
    <mutant id="mutant_13535" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) * &quot;)&quot;" />
    <mutant id="mutant_14866" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_1480" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="(dels.size()) + (adds.size())" />
    <mutant id="mutant_12204" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_13534" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" />
    <mutant id="mutant_14865" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_12205" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; - (last.name()))" />
    <mutant id="mutant_13537" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_14868" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_12206" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; % (last.name()))" />
    <mutant id="mutant_13536" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) / &quot;)&quot;" />
    <mutant id="mutant_14867" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_12207" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(last.name())" />
    <mutant id="mutant_13539" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) - &quot;)&quot;" />
    <mutant id="mutant_12208" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="(&quot;ACK &quot; + (last.name()))" to="(&quot;ACK &quot; / (last.name()))" />
    <mutant id="mutant_13538" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())" />
    <mutant id="mutant_14869" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_12209" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) % &quot;\n&quot;)" />
    <mutant id="mutant_1476" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="((((added.size()) + (added.size())) + (deleted.size())) - ((added.size()) * (deleted.size())))" />
    <mutant id="mutant_1477" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="(((added.size()) + (added.size())) + (deleted.size()))" />
    <mutant id="mutant_1474" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="((added.size()) * (deleted.size()))" />
    <mutant id="mutant_14860" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="((out.length) * pos)" />
    <mutant id="mutant_1475" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="((((added.size()) + (added.size())) + (deleted.size())) * ((added.size()) * (deleted.size())))" />
    <mutant id="mutant_1472" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="((((added.size()) + (added.size())) + (deleted.size())) % ((added.size()) * (deleted.size())))" />
    <mutant id="mutant_13531" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) % (b.toString()))" />
    <mutant id="mutant_14862" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="out.length" />
    <mutant id="mutant_1473" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((((added.size()) + (added.size())) + (deleted.size())) + ((added.size()) * (deleted.size())))" to="((((added.size()) + (added.size())) + (deleted.size())) / ((added.size()) * (deleted.size())))" />
    <mutant id="mutant_12200" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) * &quot;\n&quot;)" />
    <mutant id="mutant_13530" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) - (b.toString()))" />
    <mutant id="mutant_14861" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="pos" />
    <mutant id="mutant_1470" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="(added.size())" />
    <mutant id="mutant_12201" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) - &quot;\n&quot;)" />
    <mutant id="mutant_13533" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) / (b.toString()))" />
    <mutant id="mutant_14864" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="((out.length) + pos)" />
    <mutant id="mutant_1471" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="((added.size()) / (deleted.size()))" />
    <mutant id="mutant_12202" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13532" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) * (b.toString()))" />
    <mutant id="mutant_14863" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="((out.length) % pos)" />
    <mutant id="mutant_1478" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="(dels.size()) - (adds.size())" />
    <mutant id="mutant_1479" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="(dels.size()) % (adds.size())" />
    <mutant id="mutant_12214" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13546" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="(pathStr)" />
    <mutant id="mutant_14877" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) + 3)" />
    <mutant id="mutant_12215" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="((oldestTime) / 1000L)" />
    <mutant id="mutant_13545" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="(&quot;PATH(\&quot;&quot; * (pathStr))" />
    <mutant id="mutant_14876" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="(entries.length)" />
    <mutant id="mutant_12216" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="((oldestTime) + 1000L)" />
    <mutant id="mutant_13548" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="&quot;PATH(\&quot;&quot; + (pathStr)" />
    <mutant id="mutant_14879" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="3" />
    <mutant id="mutant_12217" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="1000L" />
    <mutant id="mutant_13547" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="(&quot;PATH(\&quot;&quot; + (pathStr)) % &quot;\&quot;)&quot;" />
    <mutant id="mutant_14878" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) / 3)" />
    <mutant id="mutant_12218" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="((oldestTime) % 1000L)" />
    <mutant id="mutant_12219" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="((oldestTime) - 1000L)" />
    <mutant id="mutant_13549" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="&quot;\&quot;)&quot;" />
    <mutant id="mutant_1465" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="(deleted.size())" />
    <mutant id="mutant_2797" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="(thisNameEnd + 1) % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_1466" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="(((added.size()) + (added.size())) * (deleted.size()))" />
    <mutant id="mutant_2796" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_1463" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="((added.size()) + (added.size()))" />
    <mutant id="mutant_2795" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="(thisNameEnd + 1) / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_13540" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) % &quot;)&quot;" />
    <mutant id="mutant_14871" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="((entries.length) * 16)" />
    <mutant id="mutant_1464" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="(((added.size()) + (added.size())) % (deleted.size()))" />
    <mutant id="mutant_2794" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="(thisNameEnd + 1) * (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_14870" viable="true" in="org.eclipse.jgit.util.IO.readLines(java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1461" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="(((added.size()) + (added.size())) / (deleted.size()))" />
    <mutant id="mutant_2793" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="thisNameEnd + 1" />
    <mutant id="mutant_12210" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="(&quot;ACK &quot; + (last.name()))" />
    <mutant id="mutant_13542" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="&quot;PATH(\&quot;&quot;" />
    <mutant id="mutant_14873" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="((entries.length) / 16)" />
    <mutant id="mutant_1462" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(((added.size()) + (added.size())) + (deleted.size()))" to="(((added.size()) + (added.size())) - (deleted.size()))" />
    <mutant id="mutant_2792" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="(thisNameEnd % 1)" />
    <mutant id="mutant_12211" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) / &quot;\n&quot;)" />
    <mutant id="mutant_13541" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="(&quot;PATH(\&quot;&quot; / (pathStr))" />
    <mutant id="mutant_14872" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="((entries.length) % 16)" />
    <mutant id="mutant_2791" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="(thisNameEnd - 1)" />
    <mutant id="mutant_12212" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) * &quot;\n&quot;)" />
    <mutant id="mutant_13544" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="(&quot;PATH(\&quot;&quot; - (pathStr))" />
    <mutant id="mutant_14875" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="16" />
    <mutant id="mutant_1460" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="((added.size()) / (added.size()))" />
    <mutant id="mutant_2790" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="thisNameEnd" />
    <mutant id="mutant_12213" viable="false" in="org.eclipse.jgit.transport.UploadPack.negotiate()" from="((&quot;ACK &quot; + (last.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (last.name())) - &quot;\n&quot;)" />
    <mutant id="mutant_13543" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr))" to="(&quot;PATH(\&quot;&quot; % (pathStr))" />
    <mutant id="mutant_14874" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="((entries.length) + 16)" to="((entries.length) - 16)" />
    <mutant id="mutant_1469" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="((added.size()) + (deleted.size()))" />
    <mutant id="mutant_1467" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="((added.size()) - (deleted.size()))" />
    <mutant id="mutant_2799" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_1468" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) * (deleted.size()))" to="((added.size()) % (deleted.size()))" />
    <mutant id="mutant_2798" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1) + (Constants.OBJECT_ID_LENGTH)" to="(thisNameEnd + 1) - (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_13513" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; - (a.toString())" />
    <mutant id="mutant_14844" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="buf.length" />
    <mutant id="mutant_13512" viable="true" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="a.toString()" />
    <mutant id="mutant_14843" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="valid" />
    <mutant id="mutant_13515" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; / (a.toString())" />
    <mutant id="mutant_14846" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="((buf.length) % valid)" />
    <mutant id="mutant_13514" viable="true" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot;" />
    <mutant id="mutant_14845" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="((buf.length) / valid)" />
    <mutant id="mutant_13517" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(a.toString())" />
    <mutant id="mutant_14848" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="((buf.length) * cnt)" />
    <mutant id="mutant_13516" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; % (a.toString())" />
    <mutant id="mutant_14847" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="((buf.length) + cnt)" />
    <mutant id="mutant_13519" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; - (a.toString()))" />
    <mutant id="mutant_13518" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; / (a.toString()))" />
    <mutant id="mutant_14849" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="((buf.length) % cnt)" />
    <mutant id="mutant_1454" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="(breakScore) - 1" />
    <mutant id="mutant_2786" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_1455" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="breakScore" />
    <mutant id="mutant_2785" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_1452" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="(breakScore) / 1" />
    <mutant id="mutant_2784" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_1453" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="(breakScore) * 1" />
    <mutant id="mutant_2783" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_1450" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="(breakScore) % 1" />
    <mutant id="mutant_2782" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_14840" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) * 2)" to="buf.length" />
    <mutant id="mutant_1451" viable="true" in="org.eclipse.jgit.diff.RenameDetector.calculateModifyScore(org.eclipse.jgit.diff.ContentSource$Pair,org.eclipse.jgit.diff.DiffEntry)" from="(breakScore) + 1" to="1" />
    <mutant id="mutant_2781" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_2780" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_13511" viable="false" in="org.eclipse.jgit.treewalk.filter.NotTreeFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; * (a.toString())" />
    <mutant id="mutant_14842" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="((buf.length) * valid)" />
    <mutant id="mutant_13510" viable="false" in="org.eclipse.jgit.treewalk.filter.NotIgnoredFilter.toString()" from="(&quot;NotIgnored(&quot; + (index)) + &quot;)&quot;" to="(&quot;NotIgnored(&quot; + (index)) % &quot;)&quot;" />
    <mutant id="mutant_14841" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.File,int)" from="((buf.length) - valid)" to="((buf.length) + valid)" />
    <mutant id="mutant_1458" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="((added.size()) * (added.size()))" />
    <mutant id="mutant_1459" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="(added.size())" />
    <mutant id="mutant_2789" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="(thisNameEnd / 1)" />
    <mutant id="mutant_1456" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="((added.size()) - (added.size()))" />
    <mutant id="mutant_2788" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="(thisNameEnd * 1)" />
    <mutant id="mutant_1457" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (added.size()))" to="((added.size()) % (added.size()))" />
    <mutant id="mutant_2787" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.duplicateName(byte[],int,int)" from="(thisNameEnd + 1)" to="1" />
    <mutant id="mutant_13524" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) * &quot; OR &quot;)" />
    <mutant id="mutant_14855" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="off" />
    <mutant id="mutant_13523" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(&quot;(&quot; + (a.toString()))" />
    <mutant id="mutant_14854" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="((dst.length) / off)" />
    <mutant id="mutant_13526" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) % &quot; OR &quot;)" />
    <mutant id="mutant_14857" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="((dst.length) + off)" />
    <mutant id="mutant_13525" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) - &quot; OR &quot;)" />
    <mutant id="mutant_14856" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="dst.length" />
    <mutant id="mutant_13528" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="&quot; OR &quot;" />
    <mutant id="mutant_14859" viable="true" in="org.eclipse.jgit.util.IO.readWholeStream(java.io.InputStream,int)" from="((out.length) - pos)" to="((out.length) / pos)" />
    <mutant id="mutant_13527" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) / &quot; OR &quot;)" />
    <mutant id="mutant_14858" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="((dst.length) * off)" />
    <mutant id="mutant_13529" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(b.toString())" />
    <mutant id="mutant_1443" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) * 1)" />
    <mutant id="mutant_2775" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_1444" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) % 1)" />
    <mutant id="mutant_2774" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_1441" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) / 1)" />
    <mutant id="mutant_2773" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_1442" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="((e.endB) - 1)" />
    <mutant id="mutant_2772" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_2771" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_13520" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; % (a.toString()))" />
    <mutant id="mutant_14851" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="((buf.length) / cnt)" />
    <mutant id="mutant_1440" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endB) + 1)" to="1" />
    <mutant id="mutant_2770" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_14850" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="buf.length" />
    <mutant id="mutant_13522" viable="false" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; * (a.toString()))" />
    <mutant id="mutant_14853" viable="true" in="org.eclipse.jgit.util.IO.readFully(java.io.InputStream,byte[],int)" from="((dst.length) - off)" to="((dst.length) % off)" />
    <mutant id="mutant_13521" viable="true" in="org.eclipse.jgit.treewalk.filter.OrTreeFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="&quot;(&quot;" />
    <mutant id="mutant_14852" viable="true" in="org.eclipse.jgit.util.IO.readSome(java.io.File,int)" from="((buf.length) - cnt)" to="cnt" />
    <mutant id="mutant_1449" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="(sortOf(a.getChangeType())) * (sortOf(b.getChangeType()))" />
    <mutant id="mutant_1447" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="(sortOf(a.getChangeType())) % (sortOf(b.getChangeType()))" />
    <mutant id="mutant_2779" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_1448" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="(sortOf(a.getChangeType())) / (sortOf(b.getChangeType()))" />
    <mutant id="mutant_2778" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_1445" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="sortOf(a.getChangeType())" />
    <mutant id="mutant_2777" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_1446" viable="true" in="org.eclipse.jgit.diff.RenameDetector$1.compare(org.eclipse.jgit.diff.DiffEntry,org.eclipse.jgit.diff.DiffEntry)" from="(sortOf(a.getChangeType())) - (sortOf(b.getChangeType()))" to="(sortOf(a.getChangeType())) + (sortOf(b.getChangeType()))" />
    <mutant id="mutant_2776" viable="true" in="org.eclipse.jgit.lib.MutableObjectId.fromRaw(int[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_12247" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; - (obj.name()))" />
    <mutant id="mutant_13579" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="ba * bb" />
    <mutant id="mutant_12248" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; % (obj.name()))" />
    <mutant id="mutant_13578" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="bb" />
    <mutant id="mutant_12249" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(obj.name())" />
    <mutant id="mutant_13571" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="((newMax.length) / 1)" />
    <mutant id="mutant_12240" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="&quot; continue\n&quot;" />
    <mutant id="mutant_13570" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="max.length" />
    <mutant id="mutant_12241" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="(&quot;ACK &quot; + (obj.name()))" />
    <mutant id="mutant_13573" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="((newMax.length) % 1)" />
    <mutant id="mutant_12242" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) - &quot; continue\n&quot;)" />
    <mutant id="mutant_13572" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="1" />
    <mutant id="mutant_12243" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) * &quot; continue\n&quot;)" />
    <mutant id="mutant_13575" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="((newMax.length) + 1)" />
    <mutant id="mutant_12244" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) % &quot; continue\n&quot;)" />
    <mutant id="mutant_13574" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="((newMax.length) * 1)" />
    <mutant id="mutant_12245" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; * (obj.name()))" />
    <mutant id="mutant_13577" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="ba" />
    <mutant id="mutant_12246" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_13576" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((newMax.length) - 1)" to="newMax.length" />
    <mutant id="mutant_12258" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="(peerHas.size()) * haveCnt" />
    <mutant id="mutant_12259" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="(peerHas.size()) / haveCnt" />
    <mutant id="mutant_13589" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="&quot;FAST_&quot; * (path.toString())" />
    <mutant id="mutant_12250" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; / (obj.name()))" />
    <mutant id="mutant_13582" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="ba % bb" />
    <mutant id="mutant_12251" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="(&quot;ACK &quot; + (obj.name()))" />
    <mutant id="mutant_13581" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="ba + bb" />
    <mutant id="mutant_12252" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) / &quot; common\n&quot;)" />
    <mutant id="mutant_13584" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="(a.length) / (b.length)" />
    <mutant id="mutant_12253" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="&quot; common\n&quot;" />
    <mutant id="mutant_13583" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="(a.length) * (b.length)" />
    <mutant id="mutant_12254" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) - &quot; common\n&quot;)" />
    <mutant id="mutant_13586" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="(a.length) % (b.length)" />
    <mutant id="mutant_12255" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) * &quot; common\n&quot;)" />
    <mutant id="mutant_13585" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="a.length" />
    <mutant id="mutant_12256" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; common\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) % &quot; common\n&quot;)" />
    <mutant id="mutant_13588" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Single.toString()" from="&quot;FAST_&quot; + (path.toString())" to="&quot;FAST_&quot;" />
    <mutant id="mutant_12257" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(peerHas.size()) - haveCnt" to="(peerHas.size()) % haveCnt" />
    <mutant id="mutant_13587" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="(a.length) - (b.length)" to="(a.length) + (b.length)" />
    <mutant id="mutant_13580" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group.compare(byte[],byte[])" from="ba - bb" to="ba / bb" />
    <mutant id="mutant_12225" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(obj.name())" />
    <mutant id="mutant_13557" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="((path.length()) % 1)" />
    <mutant id="mutant_14888" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) - 2" />
    <mutant id="mutant_12226" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; / (obj.name()))" />
    <mutant id="mutant_13556" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="((path.length()) + 1)" />
    <mutant id="mutant_14887" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="((entries.length) + 16) * 3" />
    <mutant id="mutant_12227" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) % &quot;\n&quot;)" />
    <mutant id="mutant_13559" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="((pathFilters.length) % 5)" />
    <mutant id="mutant_12228" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="(&quot;ACK &quot; + (obj.name()))" />
    <mutant id="mutant_13558" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="((path.length()) * 1)" />
    <mutant id="mutant_14889" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="((entries.length) * 16)" />
    <mutant id="mutant_12229" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) / &quot;\n&quot;)" />
    <mutant id="mutant_1498" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="((e.endB) * 1)" />
    <mutant id="mutant_14880" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) % 3)" />
    <mutant id="mutant_1499" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="((e.endB) % 1)" />
    <mutant id="mutant_1496" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="((e.endB) / 1)" />
    <mutant id="mutant_13551" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="(&quot;PATH(\&quot;&quot; + (pathStr)) / &quot;\&quot;)&quot;" />
    <mutant id="mutant_14882" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) - 3)" />
    <mutant id="mutant_1497" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="((e.endB) + 1)" />
    <mutant id="mutant_12220" viable="false" in="org.eclipse.jgit.transport.UploadPack.wantSatisfied(org.eclipse.jgit.revwalk.RevObject)" from="((oldestTime) * 1000L)" to="oldestTime" />
    <mutant id="mutant_13550" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="(&quot;PATH(\&quot;&quot; + (pathStr)) - &quot;\&quot;)&quot;" />
    <mutant id="mutant_14881" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3)" to="((entries.length) + 16)" />
    <mutant id="mutant_1494" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="e.endB" />
    <mutant id="mutant_12221" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; * (obj.name()))" />
    <mutant id="mutant_13553" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="path.length()" />
    <mutant id="mutant_14884" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) * 2" />
    <mutant id="mutant_1495" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endB) - 1)" to="1" />
    <mutant id="mutant_12222" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_13552" viable="false" in="org.eclipse.jgit.treewalk.filter.PathFilter.toString()" from="(&quot;PATH(\&quot;&quot; + (pathStr)) + &quot;\&quot;)&quot;" to="(&quot;PATH(\&quot;&quot; + (pathStr)) * &quot;\&quot;)&quot;" />
    <mutant id="mutant_14883" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="2" />
    <mutant id="mutant_1492" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="((e.endA) / 1)" />
    <mutant id="mutant_12223" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; - (obj.name()))" />
    <mutant id="mutant_13555" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="((path.length()) / 1)" />
    <mutant id="mutant_14886" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) % 2" />
    <mutant id="mutant_1493" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="((e.endA) % 1)" />
    <mutant id="mutant_12224" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; % (obj.name()))" />
    <mutant id="mutant_13554" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilter.create(java.lang.String)" from="((path.length()) - 1)" to="1" />
    <mutant id="mutant_14885" viable="true" in="org.eclipse.jgit.util.IntList.grow()" from="(((entries.length) + 16) * 3) / 2" to="(((entries.length) + 16) * 3) + 2" />
    <mutant id="mutant_1490" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="1" />
    <mutant id="mutant_12236" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; % (obj.name()))" />
    <mutant id="mutant_13568" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="(max.length) * 1" />
    <mutant id="mutant_14899" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="((entries.length) + 16)" />
    <mutant id="mutant_1491" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="((e.endA) + 1)" />
    <mutant id="mutant_12237" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(obj.name())" />
    <mutant id="mutant_13567" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="(max.length) % 1" />
    <mutant id="mutant_14898" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) % 3)" />
    <mutant id="mutant_12238" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; / (obj.name()))" />
    <mutant id="mutant_12239" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot; continue\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) / &quot; continue\n&quot;)" />
    <mutant id="mutant_13569" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="(max.length) - 1" />
    <mutant id="mutant_1487" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="((added.size()) / (deleted.size()))" />
    <mutant id="mutant_13560" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="((pathFilters.length) * 5)" />
    <mutant id="mutant_14891" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="((entries.length) / 16)" />
    <mutant id="mutant_1488" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="e.endA" />
    <mutant id="mutant_14890" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="((entries.length) % 16)" />
    <mutant id="mutant_1485" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="((added.size()) * (deleted.size()))" />
    <mutant id="mutant_12230" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) * &quot;\n&quot;)" />
    <mutant id="mutant_13562" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="((pathFilters.length) + 5)" />
    <mutant id="mutant_14893" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="16" />
    <mutant id="mutant_1486" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="added.size()" />
    <mutant id="mutant_12231" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="((&quot;ACK &quot; + (obj.name())) - &quot;\n&quot;)" />
    <mutant id="mutant_13561" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="((pathFilters.length) - 5)" />
    <mutant id="mutant_14892" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="((entries.length) - 16)" />
    <mutant id="mutant_1483" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="((added.size()) - (deleted.size()))" />
    <mutant id="mutant_12232" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="((&quot;ACK &quot; + (obj.name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_13564" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="pathFilters.length" />
    <mutant id="mutant_14895" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) + 3)" />
    <mutant id="mutant_1484" viable="true" in="org.eclipse.jgit.diff.RenameDetector.rejoinModifies(org.eclipse.jgit.lib.ProgressMonitor)" from="((added.size()) + (deleted.size()))" to="((added.size()) % (deleted.size()))" />
    <mutant id="mutant_12233" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; * (obj.name()))" />
    <mutant id="mutant_13563" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="((pathFilters.length) / 5)" to="5" />
    <mutant id="mutant_14894" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="((entries.length) + 16)" to="(entries.length)" />
    <mutant id="mutant_1481" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="dels.size()" />
    <mutant id="mutant_12234" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="&quot;ACK &quot;" />
    <mutant id="mutant_13566" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="1" />
    <mutant id="mutant_14897" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="3" />
    <mutant id="mutant_1482" viable="true" in="org.eclipse.jgit.diff.RenameDetector.findExactRenames(org.eclipse.jgit.lib.ProgressMonitor)" from="(dels.size()) * (adds.size())" to="(dels.size()) / (adds.size())" />
    <mutant id="mutant_12235" viable="false" in="org.eclipse.jgit.transport.UploadPack.processHaveLines(java.util.List,org.eclipse.jgit.lib.ObjectId)" from="(&quot;ACK &quot; + (obj.name()))" to="(&quot;ACK &quot; - (obj.name()))" />
    <mutant id="mutant_13565" viable="true" in="org.eclipse.jgit.treewalk.filter.PathFilterGroup$Group(org.eclipse.jgit.treewalk.filter.PathFilter[])" from="(max.length) + 1" to="(max.length) / 1" />
    <mutant id="mutant_14896" viable="true" in="org.eclipse.jgit.util.LongList.grow()" from="(((entries.length) + 16) * 3)" to="(((entries.length) + 16) / 3)" />
    <mutant id="mutant_1489" viable="true" in="org.eclipse.jgit.diff.SequenceComparator.reduceCommonStartEnd(S,S,org.eclipse.jgit.diff.Edit)" from="((e.endA) - 1)" to="((e.endA) * 1)" />
    <mutant id="mutant_14107" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15439" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="((raw.length) + 1)" />
    <mutant id="mutant_14106" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_14109" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15437" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="((raw.length) % 1)" />
    <mutant id="mutant_14108" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15438" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="((raw.length) * 1)" />
    <mutant id="mutant_8706" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="(hours * 60) + minutes" />
    <mutant id="mutant_15431" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) % v" />
    <mutant id="mutant_8705" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="((hours * 60) + minutes) % multiplier" />
    <mutant id="mutant_15432" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) - v" />
    <mutant id="mutant_8708" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="((hours * 60) + minutes) / multiplier" />
    <mutant id="mutant_14101" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx % dotSize)" />
    <mutant id="mutant_8707" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="((hours * 60) + minutes) + multiplier" />
    <mutant id="mutant_14100" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx * dotSize)" />
    <mutant id="mutant_15430" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) * v" />
    <mutant id="mutant_14103" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="dotSize" />
    <mutant id="mutant_15435" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="((raw.length) / 1)" />
    <mutant id="mutant_8709" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_14102" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="textx" />
    <mutant id="mutant_15436" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="1" />
    <mutant id="mutant_14105" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15433" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="r * 10" />
    <mutant id="mutant_14104" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15434" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) / v" />
    <mutant id="mutant_8700" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="((hours * 60) - minutes)" />
    <mutant id="mutant_8702" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="(hours * 60)" />
    <mutant id="mutant_8701" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="((hours * 60) * minutes)" />
    <mutant id="mutant_8704" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="multiplier" />
    <mutant id="mutant_8703" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes) * multiplier" to="((hours * 60) + minutes) - multiplier" />
    <mutant id="mutant_14118" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="cnt / 1" />
    <mutant id="mutant_14117" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="cnt - 1" />
    <mutant id="mutant_15448" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB + 2)" />
    <mutant id="mutant_14119" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="cnt * 1" />
    <mutant id="mutant_15449" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="emailB" />
    <mutant id="mutant_14110" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx - dotSize)" />
    <mutant id="mutant_15442" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE / 1)" />
    <mutant id="mutant_15443" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE * 1)" />
    <mutant id="mutant_14112" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx * dotSize)" />
    <mutant id="mutant_15440" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((raw.length) - 1)" to="(raw.length)" />
    <mutant id="mutant_14111" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx / dotSize)" />
    <mutant id="mutant_15441" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="1" />
    <mutant id="mutant_14114" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="textx" />
    <mutant id="mutant_15446" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE + 1)" />
    <mutant id="mutant_14113" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx % dotSize)" />
    <mutant id="mutant_15447" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="2" />
    <mutant id="mutant_14116" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="1" />
    <mutant id="mutant_15444" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="emailE" />
    <mutant id="mutant_14115" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="dotSize" />
    <mutant id="mutant_15445" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE % 1)" />
    <mutant id="mutant_15417" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="1" />
    <mutant id="mutant_15418" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="(lf + 1)" />
    <mutant id="mutant_15415" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="end" />
    <mutant id="mutant_15416" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_15419" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="(lf / 1)" />
    <mutant id="mutant_15410" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_15413" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_15414" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="start" />
    <mutant id="mutant_15411" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_15412" viable="true" in="org.eclipse.jgit.util.RawParseUtils.extractBinaryString(byte[],int,int)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_15428" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="10" />
    <mutant id="mutant_15429" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="v" />
    <mutant id="mutant_15426" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r - 10)" />
    <mutant id="mutant_15427" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r + 10)" />
    <mutant id="mutant_15420" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="(lf % 1)" />
    <mutant id="mutant_15421" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="(lf * 1)" />
    <mutant id="mutant_15424" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="r" />
    <mutant id="mutant_15425" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r / 10)" />
    <mutant id="mutant_15422" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseEncoding(byte[])" from="(lf - 1)" to="lf" />
    <mutant id="mutant_15423" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseLongBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r % 10)" />
    <mutant id="mutant_7420" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="(((2 * 8) + (2 * 8)) / (2 * 8))" />
    <mutant id="mutant_8751" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="&quot;rebase finished: &quot;" />
    <mutant id="mutant_8750" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; % fullMessage)" />
    <mutant id="mutant_7419" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="(2 * 8)" />
    <mutant id="mutant_14143" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="commitIndex / 1" />
    <mutant id="mutant_15475" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE % 1)" />
    <mutant id="mutant_7418" viable="false" in="?" from="(2 * 8)" to="(2 % 8)" />
    <mutant id="mutant_8749" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; / fullMessage)" />
    <mutant id="mutant_14142" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="commitIndex + 1" />
    <mutant id="mutant_15476" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE + 1)" />
    <mutant id="mutant_14145" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="commitIndex * 1" />
    <mutant id="mutant_15473" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE * 1)" />
    <mutant id="mutant_14144" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="commitIndex" />
    <mutant id="mutant_15474" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="emailE" />
    <mutant id="mutant_14147" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="1" />
    <mutant id="mutant_15479" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE * 1)" />
    <mutant id="mutant_14146" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="((len.intValue()) / 1)" />
    <mutant id="mutant_14149" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="((len.intValue()) * 1)" />
    <mutant id="mutant_15477" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="1" />
    <mutant id="mutant_14148" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="len.intValue()" />
    <mutant id="mutant_15478" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE / 1)" />
    <mutant id="mutant_7411" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="((2 * 8) % (2 * 8))" />
    <mutant id="mutant_8742" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) % (newCommit.name()))" />
    <mutant id="mutant_7410" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="((2 * 8) - (2 * 8))" />
    <mutant id="mutant_8741" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) * (newCommit.name()))" />
    <mutant id="mutant_7413" viable="false" in="?" from="(2 * 8)" to="(2 + 8)" />
    <mutant id="mutant_8744" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="newCommit.name()" />
    <mutant id="mutant_7412" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="((2 * 8) / (2 * 8))" />
    <mutant id="mutant_8743" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" />
    <mutant id="mutant_7415" viable="false" in="?" from="(2 * 8)" to="8" />
    <mutant id="mutant_8746" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; * fullMessage)" />
    <mutant id="mutant_15471" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="1" />
    <mutant id="mutant_7414" viable="false" in="?" from="(2 * 8)" to="2" />
    <mutant id="mutant_8745" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; - fullMessage)" />
    <mutant id="mutant_15472" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE / 1)" />
    <mutant id="mutant_7417" viable="false" in="?" from="(2 * 8)" to="(2 - 8)" />
    <mutant id="mutant_8748" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot;" />
    <mutant id="mutant_14141" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="1" />
    <mutant id="mutant_7416" viable="false" in="?" from="(2 * 8)" to="(2 / 8)" />
    <mutant id="mutant_8747" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initializeSquashFixupFile(java.lang.String,java.lang.String)" from="(&quot;# This is a combination of 1 commits.\n# The first commit\'s message is:\n&quot; + fullMessage)" to="fullMessage" />
    <mutant id="mutant_14140" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.drawLaneToChild(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="commitIndex - 1" to="commitIndex % 1" />
    <mutant id="mutant_15470" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="emailB % 1" />
    <mutant id="mutant_8740" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) - (newCommit.name()))" />
    <mutant id="mutant_7408" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="(2 * 8)" />
    <mutant id="mutant_8739" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) + (newCommit.name()))" to="(((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;) / (newCommit.name()))" />
    <mutant id="mutant_14154" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="(lengthOfReservedLane % 1)" />
    <mutant id="mutant_15486" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) + 2)" />
    <mutant id="mutant_7407" viable="false" in="?" from="(2 * 8)" to="(2 % 8)" />
    <mutant id="mutant_8738" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) - &quot; to &quot;)" />
    <mutant id="mutant_14153" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="(lengthOfReservedLane / 1)" />
    <mutant id="mutant_15487" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) * 2)" />
    <mutant id="mutant_14156" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="(lengthOfReservedLane - 1)" />
    <mutant id="mutant_15484" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) % 2)" />
    <mutant id="mutant_7409" viable="false" in="?" from="((2 * 8) + (2 * 8))" to="((2 * 8) * (2 * 8))" />
    <mutant id="mutant_14155" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="lengthOfReservedLane" />
    <mutant id="mutant_15485" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) / 2)" />
    <mutant id="mutant_14158" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="(kind(o1)) * (kind(o2))" />
    <mutant id="mutant_14157" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="(lengthOfReservedLane * 1)" />
    <mutant id="mutant_15488" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))" />
    <mutant id="mutant_14159" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="(kind(o1)) / (kind(o2))" />
    <mutant id="mutant_15489" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) - 1" />
    <mutant id="mutant_7400" viable="false" in="?" from="(2 * 8)" to="(2 - 8)" />
    <mutant id="mutant_8731" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="(&quot;Fast-forward from &quot; - (oldCommit.name()))" />
    <mutant id="mutant_8730" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="(&quot;Fast-forward from &quot; / (oldCommit.name()))" />
    <mutant id="mutant_7402" viable="false" in="?" from="(2 * 8)" to="(2 + 8)" />
    <mutant id="mutant_8733" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) * &quot; to &quot;)" />
    <mutant id="mutant_7401" viable="false" in="?" from="(2 * 8)" to="(2 % 8)" />
    <mutant id="mutant_8732" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="(&quot;Fast-forward from &quot; * (oldCommit.name()))" />
    <mutant id="mutant_7404" viable="false" in="?" from="(2 * 8)" to="8" />
    <mutant id="mutant_8735" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="&quot; to &quot;" />
    <mutant id="mutant_14150" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="((len.intValue()) - 1)" />
    <mutant id="mutant_15482" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE + 1)" />
    <mutant id="mutant_7403" viable="false" in="?" from="(2 * 8)" to="2" />
    <mutant id="mutant_8734" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="(&quot;Fast-forward from &quot; + (oldCommit.name()))" />
    <mutant id="mutant_15483" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2)" to="2" />
    <mutant id="mutant_7406" viable="false" in="?" from="(2 * 8)" to="(2 - 8)" />
    <mutant id="mutant_8737" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) / &quot; to &quot;)" />
    <mutant id="mutant_14152" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="(lengthOfReservedLane + 1)" to="1" />
    <mutant id="mutant_15480" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="emailE" />
    <mutant id="mutant_7405" viable="false" in="?" from="(2 * 8)" to="(2 / 8)" />
    <mutant id="mutant_8736" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;Fast-forward from &quot; + (oldCommit.name())) + &quot; to &quot;)" to="((&quot;Fast-forward from &quot; + (oldCommit.name())) % &quot; to &quot;)" />
    <mutant id="mutant_14151" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.enter(int,org.eclipse.jgit.revplot.PlotCommit)" from="((len.intValue()) + 1)" to="((len.intValue()) % 1)" />
    <mutant id="mutant_15481" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailE - 1)" to="(emailE % 1)" />
    <mutant id="mutant_14129" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index * 1" />
    <mutant id="mutant_14128" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="1" />
    <mutant id="mutant_15459" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="2" />
    <mutant id="mutant_8728" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="&quot;Fast-forward from &quot;" />
    <mutant id="mutant_14121" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="cnt % 1" />
    <mutant id="mutant_15453" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="2" />
    <mutant id="mutant_8727" viable="false" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="(&quot;Fast-forward from &quot; % (oldCommit.name()))" />
    <mutant id="mutant_14120" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addLane(org.eclipse.jgit.revplot.PlotLane,org.eclipse.jgit.revplot.PlotLane[])" from="cnt + 1" to="cnt" />
    <mutant id="mutant_15454" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB + 2)" />
    <mutant id="mutant_14123" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="cnt - 1" />
    <mutant id="mutant_15451" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB * 2)" />
    <mutant id="mutant_8729" viable="true" in="org.eclipse.jgit.api.RebaseCommand.tryFastForward(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;Fast-forward from &quot; + (oldCommit.name()))" to="(oldCommit.name())" />
    <mutant id="mutant_14122" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="1" />
    <mutant id="mutant_15452" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB % 2)" />
    <mutant id="mutant_14125" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="cnt * 1" />
    <mutant id="mutant_15457" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB * 2)" />
    <mutant id="mutant_14124" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="cnt / 1" />
    <mutant id="mutant_15458" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB % 2)" />
    <mutant id="mutant_14127" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="cnt % 1" />
    <mutant id="mutant_15455" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="emailB" />
    <mutant id="mutant_14126" viable="true" in="org.eclipse.jgit.revplot.PlotCommit.addChild(org.eclipse.jgit.revplot.PlotCommit)" from="cnt + 1" to="cnt" />
    <mutant id="mutant_15456" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB / 2)" />
    <mutant id="mutant_8720" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) * &quot;^{tree}&quot;)" />
    <mutant id="mutant_8722" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)" />
    <mutant id="mutant_8721" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="1" />
    <mutant id="mutant_8724" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) * 1" />
    <mutant id="mutant_8723" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) % 1" />
    <mutant id="mutant_15450" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(emailB - 2)" to="(emailB / 2)" />
    <mutant id="mutant_8726" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) - 1" />
    <mutant id="mutant_8725" viable="true" in="org.eclipse.jgit.api.RebaseCommand.doSquashFixup(boolean,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.RebaseTodoLine,java.io.File,java.io.File)" from="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) + 1" to="(org.eclipse.jgit.api.RebaseCommand.parseSquashFixupSequenceCount(currSquashMessage)) / 1" />
    <mutant id="mutant_14139" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index % 1" />
    <mutant id="mutant_8717" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) % &quot;^{tree}&quot;)" />
    <mutant id="mutant_14132" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index" />
    <mutant id="mutant_15464" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="emailB % 2" />
    <mutant id="mutant_8716" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) / &quot;^{tree}&quot;)" />
    <mutant id="mutant_14131" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index + 1" />
    <mutant id="mutant_15465" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="1" />
    <mutant id="mutant_8719" viable="false" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) - &quot;^{tree}&quot;)" />
    <mutant id="mutant_14134" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="1" />
    <mutant id="mutant_15462" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="emailB / 2" />
    <mutant id="mutant_8718" viable="true" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="&quot;^{tree}&quot;" />
    <mutant id="mutant_14133" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index % 1" />
    <mutant id="mutant_15463" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="emailB * 2" />
    <mutant id="mutant_14136" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index / 1" />
    <mutant id="mutant_15468" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="emailB" />
    <mutant id="mutant_14135" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index * 1" />
    <mutant id="mutant_15469" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="emailB * 1" />
    <mutant id="mutant_14138" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index" />
    <mutant id="mutant_15466" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="emailB / 1" />
    <mutant id="mutant_14137" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index + 1" />
    <mutant id="mutant_15467" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 1" to="emailB + 1" />
    <mutant id="mutant_8711" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) % &quot;^{tree}&quot;)" />
    <mutant id="mutant_8710" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) / &quot;^{tree}&quot;)" />
    <mutant id="mutant_8713" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) - &quot;^{tree}&quot;)" />
    <mutant id="mutant_15460" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="emailB + 2" />
    <mutant id="mutant_8712" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="&quot;^{tree}&quot;" />
    <mutant id="mutant_15461" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="emailB - 2" to="emailB" />
    <mutant id="mutant_8715" viable="true" in="org.eclipse.jgit.api.RebaseCommand.continueRebase()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_14130" viable="true" in="org.eclipse.jgit.revplot.PlotCommitList.handleMerge(int,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotCommit,org.eclipse.jgit.revplot.PlotLane)" from="index - 1" to="index / 1" />
    <mutant id="mutant_8714" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCurrentHead()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) * &quot;^{tree}&quot;)" />
    <mutant id="mutant_7460" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="(threads * (config.getDeltaSearchMemoryLimit())) / (config.getBigFileThreshold())" />
    <mutant id="mutant_8791" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="(values.length) % (existing.length)" />
    <mutant id="mutant_8790" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="values.length" />
    <mutant id="mutant_6130" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) * dstoff)" />
    <mutant id="mutant_7462" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="threads * (config.getDeltaSearchMemoryLimit())" />
    <mutant id="mutant_8793" viable="true" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="&quot;^{commit}&quot;" />
    <mutant id="mutant_6131" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) % dstoff)" />
    <mutant id="mutant_7461" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="(threads * (config.getDeltaSearchMemoryLimit())) * (config.getBigFileThreshold())" />
    <mutant id="mutant_8792" viable="true" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="getRefOrHEAD()" />
    <mutant id="mutant_6132" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) / dstoff)" />
    <mutant id="mutant_7464" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="config.getBigFileThreshold()" />
    <mutant id="mutant_8795" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="((getRefOrHEAD()) % &quot;^{commit}&quot;)" />
    <mutant id="mutant_6133" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) + dstoff)" />
    <mutant id="mutant_7463" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="(threads * (config.getDeltaSearchMemoryLimit())) % (config.getBigFileThreshold())" />
    <mutant id="mutant_8794" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="((getRefOrHEAD()) - &quot;^{commit}&quot;)" />
    <mutant id="mutant_14187" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="((binbuf.length) + (binbufcnt))" />
    <mutant id="mutant_14186" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="((binbuf.length) / (binbufcnt))" />
    <mutant id="mutant_14189" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="len / copy" />
    <mutant id="mutant_14188" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="len" />
    <mutant id="mutant_6123" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) - size)" />
    <mutant id="mutant_7455" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="(threads % (config.getDeltaSearchMemoryLimit()))" />
    <mutant id="mutant_8786" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="newName" />
    <mutant id="mutant_6124" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) / size" />
    <mutant id="mutant_7454" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="(threads - (config.getDeltaSearchMemoryLimit()))" />
    <mutant id="mutant_8785" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="(Constants.R_HEADS) - (newName)" />
    <mutant id="mutant_6125" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) - size" />
    <mutant id="mutant_7457" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="(config.getDeltaSearchMemoryLimit())" />
    <mutant id="mutant_8788" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="(values.length) / (existing.length)" />
    <mutant id="mutant_14181" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_6126" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="size" />
    <mutant id="mutant_7456" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="(threads + (config.getDeltaSearchMemoryLimit()))" />
    <mutant id="mutant_8787" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="(values.length) * (existing.length)" />
    <mutant id="mutant_14180" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_6127" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) + size" />
    <mutant id="mutant_7459" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="threads" />
    <mutant id="mutant_14183" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="binbufcnt" />
    <mutant id="mutant_6128" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="(cache.getBlockSize()) / size" />
    <mutant id="mutant_7458" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit()))" to="(threads / (config.getDeltaSearchMemoryLimit()))" />
    <mutant id="mutant_8789" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(values.length) + (existing.length)" to="(values.length) - (existing.length)" />
    <mutant id="mutant_14182" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="((binbuf.length) % (binbufcnt))" />
    <mutant id="mutant_6129" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) % size" />
    <mutant id="mutant_14185" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="binbuf.length" />
    <mutant id="mutant_14184" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="((binbuf.length) - (binbufcnt))" to="((binbuf.length) * (binbufcnt))" />
    <mutant id="mutant_8780" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="newName" />
    <mutant id="mutant_7451" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) - 8" />
    <mutant id="mutant_8782" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="(Constants.R_HEADS) % (newName)" />
    <mutant id="mutant_6120" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) % size)" />
    <mutant id="mutant_7450" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="8" />
    <mutant id="mutant_8781" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="(Constants.R_HEADS) / (newName)" />
    <mutant id="mutant_6121" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="(cache.getBlockSize())" />
    <mutant id="mutant_7453" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) % 8" />
    <mutant id="mutant_8784" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="(Constants.R_HEADS) * (newName)" />
    <mutant id="mutant_6122" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) * size)" />
    <mutant id="mutant_7452" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) * 8" />
    <mutant id="mutant_8783" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_HEADS) + (newName)" to="Constants.R_HEADS" />
    <mutant id="mutant_14198" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="(binbuf.length) - 1" />
    <mutant id="mutant_14197" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="(binbuf.length) * 1" />
    <mutant id="mutant_14199" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="binbuf.length" />
    <mutant id="mutant_6112" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="(64 + (DfsBlockCacheConfig.KB))" />
    <mutant id="mutant_7444" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) / 40)" />
    <mutant id="mutant_8775" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="(Constants.R_REMOTES) / (newName)" />
    <mutant id="mutant_14190" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="len % copy" />
    <mutant id="mutant_6113" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="(64 - (DfsBlockCacheConfig.KB))" />
    <mutant id="mutant_7443" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) % 40)" />
    <mutant id="mutant_8774" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="(&quot;rebase finished: returning to &quot; - headName)" />
    <mutant id="mutant_6114" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="(64 / (DfsBlockCacheConfig.KB))" />
    <mutant id="mutant_7446" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) - 40)" />
    <mutant id="mutant_8777" viable="true" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="Constants.R_REMOTES" />
    <mutant id="mutant_14192" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="len * copy" />
    <mutant id="mutant_6115" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="(64 % (DfsBlockCacheConfig.KB))" />
    <mutant id="mutant_7445" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) * 40)" />
    <mutant id="mutant_8776" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="(Constants.R_REMOTES) % (newName)" />
    <mutant id="mutant_14191" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="copy" />
    <mutant id="mutant_6116" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="DfsBlockCacheConfig.KB" />
    <mutant id="mutant_7448" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) / 8" />
    <mutant id="mutant_8779" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="(Constants.R_REMOTES) * (newName)" />
    <mutant id="mutant_14194" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="(binbuf.length) / 1" />
    <mutant id="mutant_6117" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(64 * (DfsBlockCacheConfig.KB))" to="64" />
    <mutant id="mutant_7447" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="40" />
    <mutant id="mutant_8778" viable="false" in="org.eclipse.jgit.api.RenameBranchCommand.call()" from="(Constants.R_REMOTES) + (newName)" to="(Constants.R_REMOTES) - (newName)" />
    <mutant id="mutant_14193" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.buffer(byte[],int,int)" from="len - copy" to="len + copy" />
    <mutant id="mutant_6118" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) + size)" />
    <mutant id="mutant_14196" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="(binbuf.length) % 1" />
    <mutant id="mutant_6119" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream(org.eclipse.jgit.internal.storage.dfs.DfsOutputStream)" from="((cache.getBlockSize()) / size)" to="size" />
    <mutant id="mutant_7449" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40) + 8" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40" />
    <mutant id="mutant_14195" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.decideMode()" from="(binbuf.length) + 1" to="1" />
    <mutant id="mutant_7440" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) / 8)" />
    <mutant id="mutant_8771" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="(&quot;rebase finished: returning to &quot; % headName)" />
    <mutant id="mutant_8770" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="&quot;rebase finished: returning to &quot;" />
    <mutant id="mutant_6110" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="DfsBlockCacheConfig.MB" />
    <mutant id="mutant_7442" viable="false" in="?" from="((((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8) + 40)" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" />
    <mutant id="mutant_8773" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="headName" />
    <mutant id="mutant_6111" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="32" />
    <mutant id="mutant_7441" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) - 8)" />
    <mutant id="mutant_8772" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="(&quot;rebase finished: returning to &quot; * headName)" />
    <mutant id="mutant_6109" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="(32 - (DfsBlockCacheConfig.MB))" />
    <mutant id="mutant_14165" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="off % len" />
    <mutant id="mutant_15497" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin / 1)" />
    <mutant id="mutant_14164" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="off - len" />
    <mutant id="mutant_15498" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="tzBegin" />
    <mutant id="mutant_14167" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="off / len" />
    <mutant id="mutant_15495" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="1" />
    <mutant id="mutant_14166" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="len" />
    <mutant id="mutant_15496" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin * 1)" />
    <mutant id="mutant_14169" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="off * len" />
    <mutant id="mutant_14168" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="off + len" to="off" />
    <mutant id="mutant_15499" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin + 1)" />
    <mutant id="mutant_6101" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="1024 % (DfsBlockCacheConfig.KB)" />
    <mutant id="mutant_7433" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) * (8 + 8))" />
    <mutant id="mutant_8764" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" />
    <mutant id="mutant_6102" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="1024 / (DfsBlockCacheConfig.KB)" />
    <mutant id="mutant_7432" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) / (8 + 8))" />
    <mutant id="mutant_8763" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="onto.getName()" />
    <mutant id="mutant_15490" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))" />
    <mutant id="mutant_6103" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="1024" />
    <mutant id="mutant_7435" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="(((2 * 8) + (2 * 8)) + (2 * 8))" />
    <mutant id="mutant_8766" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) * (onto.getName()))" />
    <mutant id="mutant_6104" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="1024 + (DfsBlockCacheConfig.KB)" />
    <mutant id="mutant_7434" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="(8 + 8)" />
    <mutant id="mutant_8765" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) - (onto.getName()))" />
    <mutant id="mutant_6105" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="DfsBlockCacheConfig.KB" />
    <mutant id="mutant_7437" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) % 8)" />
    <mutant id="mutant_8768" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) % (onto.getName()))" />
    <mutant id="mutant_14161" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="kind(o2)" />
    <mutant id="mutant_15493" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) * 1" />
    <mutant id="mutant_6106" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="(32 + (DfsBlockCacheConfig.MB))" />
    <mutant id="mutant_7436" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) * 8)" />
    <mutant id="mutant_8767" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) + (onto.getName()))" to="(((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;) / (onto.getName()))" />
    <mutant id="mutant_14160" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="(kind(o1)) + (kind(o2))" />
    <mutant id="mutant_15494" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) / 1" />
    <mutant id="mutant_6107" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="(32 % (DfsBlockCacheConfig.MB))" />
    <mutant id="mutant_7439" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="8" />
    <mutant id="mutant_14163" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="kind(o1)" />
    <mutant id="mutant_15491" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="1" />
    <mutant id="mutant_6108" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig()" from="(32 * (DfsBlockCacheConfig.MB))" to="(32 / (DfsBlockCacheConfig.MB))" />
    <mutant id="mutant_7438" viable="false" in="?" from="(((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8)) + 8)" to="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" />
    <mutant id="mutant_8769" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: returning to &quot; + headName)" to="(&quot;rebase finished: returning to &quot; / headName)" />
    <mutant id="mutant_14162" viable="true" in="org.eclipse.jgit.revplot.PlotWalk$PlotRefComparator.compare(org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.Ref)" from="(kind(o1)) - (kind(o2))" to="(kind(o1)) % (kind(o2))" />
    <mutant id="mutant_15492" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) + 1" to="(org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', ((org.eclipse.jgit.util.RawParseUtils.nextLF(raw, (emailE - 1))) - 2))) % 1" />
    <mutant id="mutant_8760" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="&quot; onto &quot;" />
    <mutant id="mutant_7431" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) % (8 + 8))" />
    <mutant id="mutant_8762" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="((&quot;rebase finished: &quot; + headName) / &quot; onto &quot;)" />
    <mutant id="mutant_6100" viable="false" in="?" from="1024 * (DfsBlockCacheConfig.KB)" to="1024 - (DfsBlockCacheConfig.KB)" />
    <mutant id="mutant_7430" viable="false" in="?" from="((((2 * 8) + (2 * 8)) + (2 * 8)) + (8 + 8))" to="((((2 * 8) + (2 * 8)) + (2 * 8)) - (8 + 8))" />
    <mutant id="mutant_8761" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="((&quot;rebase finished: &quot; + headName) * &quot; onto &quot;)" />
    <mutant id="mutant_14176" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_7429" viable="false" in="?" from="(8 + 8)" to="(8 - 8)" />
    <mutant id="mutant_14175" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="i * off" />
    <mutant id="mutant_14178" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_14177" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_14179" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_7422" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="((2 * 8) + (2 * 8))" />
    <mutant id="mutant_8753" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="headName" />
    <mutant id="mutant_7421" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="(((2 * 8) + (2 * 8)) * (2 * 8))" />
    <mutant id="mutant_8752" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="(&quot;rebase finished: &quot; / headName)" />
    <mutant id="mutant_7424" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="(((2 * 8) + (2 * 8)) - (2 * 8))" />
    <mutant id="mutant_8755" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="(&quot;rebase finished: &quot; % headName)" />
    <mutant id="mutant_14170" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="i + off" />
    <mutant id="mutant_7423" viable="false" in="?" from="(((2 * 8) + (2 * 8)) + (2 * 8))" to="(((2 * 8) + (2 * 8)) % (2 * 8))" />
    <mutant id="mutant_8754" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="(&quot;rebase finished: &quot; - headName)" />
    <mutant id="mutant_7426" viable="false" in="?" from="(8 + 8)" to="(8 % 8)" />
    <mutant id="mutant_8757" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="((&quot;rebase finished: &quot; + headName) % &quot; onto &quot;)" />
    <mutant id="mutant_14172" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="i" />
    <mutant id="mutant_7425" viable="false" in="?" from="(8 + 8)" to="(8 * 8)" />
    <mutant id="mutant_8756" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;rebase finished: &quot; + headName)" to="(&quot;rebase finished: &quot; * headName)" />
    <mutant id="mutant_14171" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="i % off" />
    <mutant id="mutant_7428" viable="false" in="?" from="(8 + 8)" to="(8 / 8)" />
    <mutant id="mutant_8759" viable="false" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="((&quot;rebase finished: &quot; + headName) - &quot; onto &quot;)" />
    <mutant id="mutant_14174" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="off" />
    <mutant id="mutant_7427" viable="false" in="?" from="(8 + 8)" to="8" />
    <mutant id="mutant_8758" viable="true" in="org.eclipse.jgit.api.RebaseCommand.updateHead(java.lang.String,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;rebase finished: &quot; + headName) + &quot; onto &quot;)" to="(&quot;rebase finished: &quot; + headName)" />
    <mutant id="mutant_14173" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFInputStream.read(byte[],int,int)" from="i - off" to="i / off" />
    <mutant id="mutant_6170" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr / r)" />
    <mutant id="mutant_6171" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr * r)" />
    <mutant id="mutant_6172" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="((currPos) * (currPtr))" />
    <mutant id="mutant_6173" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="(currPtr)" />
    <mutant id="mutant_6174" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="((currPos) - (currPtr))" />
    <mutant id="mutant_6175" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="(currPos)" />
    <mutant id="mutant_6176" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="((currPos) / (currPtr))" />
    <mutant id="mutant_6177" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((currPos) + (currPtr))" to="((currPos) % (currPtr))" />
    <mutant id="mutant_6167" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr % r)" />
    <mutant id="mutant_7499" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="Constants.OBJ_TAG" />
    <mutant id="mutant_6168" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="r" />
    <mutant id="mutant_7498" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="1" />
    <mutant id="mutant_6169" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="ptr" />
    <mutant id="mutant_7491" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) % &quot;]&quot;" />
    <mutant id="mutant_6160" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt + r)" />
    <mutant id="mutant_7490" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)" />
    <mutant id="mutant_6161" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="r" />
    <mutant id="mutant_7493" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) - &quot;]&quot;" />
    <mutant id="mutant_6162" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt / r)" />
    <mutant id="mutant_7492" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_6163" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt % r)" />
    <mutant id="mutant_7495" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) * &quot;]&quot;" />
    <mutant id="mutant_6164" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt * r)" />
    <mutant id="mutant_7494" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) + &quot;]&quot;" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed)) / &quot;]&quot;" />
    <mutant id="mutant_6165" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="cnt" />
    <mutant id="mutant_7497" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="(Constants.OBJ_TAG) % 1" />
    <mutant id="mutant_6166" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr - r)" />
    <mutant id="mutant_7496" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="(Constants.OBJ_TAG) - 1" />
    <mutant id="mutant_6156" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="currPtr" />
    <mutant id="mutant_7488" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" />
    <mutant id="mutant_6157" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="((currPtr) % s)" />
    <mutant id="mutant_7487" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) - (bytesUsed))" />
    <mutant id="mutant_6158" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="s" />
    <mutant id="mutant_6159" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="((currPtr) / s)" />
    <mutant id="mutant_7489" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) * (bytesUsed))" />
    <mutant id="mutant_7480" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="((&quot;PackWriter.State[&quot; + (phase)) - &quot;, memory=&quot;)" />
    <mutant id="mutant_6150" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="pos * (currPos)" />
    <mutant id="mutant_7482" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="&quot;, memory=&quot;" />
    <mutant id="mutant_6151" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="pos % (currPos)" />
    <mutant id="mutant_7481" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="(&quot;PackWriter.State[&quot; + (phase))" />
    <mutant id="mutant_6152" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="currPos" />
    <mutant id="mutant_7484" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) / (bytesUsed))" />
    <mutant id="mutant_6153" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="pos + (currPos)" />
    <mutant id="mutant_7483" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="((&quot;PackWriter.State[&quot; + (phase)) / &quot;, memory=&quot;)" />
    <mutant id="mutant_6154" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="((currPtr) + s)" />
    <mutant id="mutant_7486" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) % (bytesUsed))" />
    <mutant id="mutant_6155" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((currPtr) - s)" to="((currPtr) * s)" />
    <mutant id="mutant_7485" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;) + (bytesUsed))" to="(bytesUsed)" />
    <mutant id="mutant_6145" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt % r)" />
    <mutant id="mutant_7477" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="(phase)" />
    <mutant id="mutant_6146" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt * r)" />
    <mutant id="mutant_7476" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="&quot;PackWriter.State[&quot;" />
    <mutant id="mutant_6147" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="cnt" />
    <mutant id="mutant_7479" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="((&quot;PackWriter.State[&quot; + (phase)) % &quot;, memory=&quot;)" />
    <mutant id="mutant_6148" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="pos / (currPos)" />
    <mutant id="mutant_7478" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="((&quot;PackWriter.State[&quot; + (phase)) + &quot;, memory=&quot;)" to="((&quot;PackWriter.State[&quot; + (phase)) * &quot;, memory=&quot;)" />
    <mutant id="mutant_6149" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="((int)(pos - (currPos)))" to="pos" />
    <mutant id="mutant_7471" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) % objCnt" />
    <mutant id="mutant_6140" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr / r)" />
    <mutant id="mutant_7470" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="objCnt" />
    <mutant id="mutant_6141" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr * r)" />
    <mutant id="mutant_7473" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="(&quot;PackWriter.State[&quot; - (phase))" />
    <mutant id="mutant_6142" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt + r)" />
    <mutant id="mutant_7472" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="(&quot;PackWriter.State[&quot; / (phase))" />
    <mutant id="mutant_6143" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="r" />
    <mutant id="mutant_7475" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="(&quot;PackWriter.State[&quot; % (phase))" />
    <mutant id="mutant_6144" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(cnt - r)" to="(cnt / r)" />
    <mutant id="mutant_7474" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter$State.toString()" from="(&quot;PackWriter.State[&quot; + (phase))" to="(&quot;PackWriter.State[&quot; * (phase))" />
    <mutant id="mutant_6134" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="dstbuf.length" />
    <mutant id="mutant_7466" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) + objCnt" />
    <mutant id="mutant_8797" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="((getRefOrHEAD()) / &quot;^{commit}&quot;)" />
    <mutant id="mutant_6135" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.inflate(org.eclipse.jgit.internal.storage.dfs.DfsReader,long,int)" from="((dstbuf.length) - dstoff)" to="dstoff" />
    <mutant id="mutant_7465" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState()" from="(threads * (config.getDeltaSearchMemoryLimit())) + (config.getBigFileThreshold())" to="(threads * (config.getDeltaSearchMemoryLimit())) - (config.getBigFileThreshold())" />
    <mutant id="mutant_8796" viable="false" in="org.eclipse.jgit.api.ResetCommand.resolveRefToCommitId()" from="((getRefOrHEAD()) + &quot;^{commit}&quot;)" to="((getRefOrHEAD()) * &quot;^{commit}&quot;)" />
    <mutant id="mutant_6136" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr - r)" />
    <mutant id="mutant_7468" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="PackWriter.MutableState.OBJECT_TO_PACK_SIZE" />
    <mutant id="mutant_8799" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="(refName / &quot;: updating &quot;)" />
    <mutant id="mutant_6137" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="(ptr % r)" />
    <mutant id="mutant_7467" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) - objCnt" />
    <mutant id="mutant_8798" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="(refName % &quot;: updating &quot;)" />
    <mutant id="mutant_6138" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="r" />
    <mutant id="mutant_6139" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.read(long,byte[],int,int)" from="(ptr + r)" to="ptr" />
    <mutant id="mutant_7469" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$MutableState.snapshot()" from="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) * objCnt" to="(PackWriter.MutableState.OBJECT_TO_PACK_SIZE) / objCnt" />
    <mutant id="mutant_6192" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="(currPos) - (currPtr)" />
    <mutant id="mutant_6193" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="currPos" />
    <mutant id="mutant_6194" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="(currPos) / (currPtr)" />
    <mutant id="mutant_6195" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="(currPos) % (currPtr)" />
    <mutant id="mutant_6196" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="pos" />
    <mutant id="mutant_6197" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="(pos + (blockSize))" />
    <mutant id="mutant_6198" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="(blockSize)" />
    <mutant id="mutant_6199" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="(pos * (blockSize))" />
    <mutant id="mutant_6190" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="(currPos) * (currPtr)" />
    <mutant id="mutant_6191" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getCount()" from="(currPos) + (currPtr)" to="currPtr" />
    <mutant id="mutant_6189" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="(currPtr) / s" />
    <mutant id="mutant_6181" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="pos % (currPos)" />
    <mutant id="mutant_6182" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="currPos" />
    <mutant id="mutant_6183" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="pos + (currPos)" />
    <mutant id="mutant_6184" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="(currPtr) + s" />
    <mutant id="mutant_6185" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="(currPtr) * s" />
    <mutant id="mutant_6186" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="currPtr" />
    <mutant id="mutant_6187" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="(currPtr) % s" />
    <mutant id="mutant_6188" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="(currPtr) - s" to="s" />
    <mutant id="mutant_6180" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="pos * (currPos)" />
    <mutant id="mutant_6178" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="pos / (currPos)" />
    <mutant id="mutant_6179" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (currPos)))" to="pos" />
    <mutant id="mutant_15406" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_15407" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_15404" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="ptr" />
    <mutant id="mutant_15405" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_15408" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="start" />
    <mutant id="mutant_15409" viable="true" in="org.eclipse.jgit.util.RawParseUtils.decodeNoFallback(java.nio.charset.Charset,byte[],int,int)" from="(end - start)" to="end" />
    <mutant id="mutant_15402" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="ptr % 1" />
    <mutant id="mutant_15403" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="ptr / 1" />
    <mutant id="mutant_15400" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="ptr - 1" />
    <mutant id="mutant_15401" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="1" />
    <mutant id="mutant_14228" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="(i / lastw)" />
    <mutant id="mutant_14227" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="(i % lastw)" />
    <mutant id="mutant_15558" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="(rcs.endPtr) % needleLen" />
    <mutant id="mutant_14229" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="(i * lastw)" />
    <mutant id="mutant_15559" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="(rcs.endPtr) * needleLen" />
    <mutant id="mutant_9917" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="(a[cPos]) &amp; 255" />
    <mutant id="mutant_14220" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_15552" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="((end - ptr) * 36)" />
    <mutant id="mutant_9918" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="((a[cPos]) &amp; 255) + '/'" />
    <mutant id="mutant_15553" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="((end - ptr) + 36)" />
    <mutant id="mutant_9915" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="((a[cPos]) &amp; 255) / '/'" />
    <mutant id="mutant_14222" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_15550" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="((end - ptr) - 36)" />
    <mutant id="mutant_9916" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="((a[cPos]) &amp; 255) % '/'" />
    <mutant id="mutant_14221" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_15551" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="((end - ptr) % 36)" />
    <mutant id="mutant_14224" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="lastw" />
    <mutant id="mutant_15556" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="rcs.endPtr" />
    <mutant id="mutant_14223" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_15557" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="(rcs.endPtr) / needleLen" />
    <mutant id="mutant_9919" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="((a[cPos]) &amp; 255) * '/'" />
    <mutant id="mutant_14226" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="i" />
    <mutant id="mutant_15554" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="(end - ptr)" />
    <mutant id="mutant_14225" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(i - lastw)" to="(i + lastw)" />
    <mutant id="mutant_15555" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="(rcs.endPtr) + needleLen" />
    <mutant id="mutant_9910" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="'/' * ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_9913" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="'/' % ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_9914" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="'/'" />
    <mutant id="mutant_9911" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="(b[cPos]) &amp; 255" />
    <mutant id="mutant_9912" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="'/' + ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_14239" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_14238" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_15569" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="2" />
    <mutant id="mutant_9906" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(b[cPos]) &amp; 255" />
    <mutant id="mutant_14231" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_15563" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="matchPos - 1" />
    <mutant id="mutant_9907" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="(a[cPos]) &amp; 255" />
    <mutant id="mutant_14230" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_15564" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="matchPos * 1" />
    <mutant id="mutant_9904" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) * ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_14233" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_15561" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="matchPos / 1" />
    <mutant id="mutant_9905" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) % ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_14232" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_15562" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="1" />
    <mutant id="mutant_14235" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_15567" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="(size) % 2" />
    <mutant id="mutant_14234" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_15568" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="(size) - 2" />
    <mutant id="mutant_9908" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) / ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_14237" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_15565" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="matchPos" />
    <mutant id="mutant_9909" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="'/' - ((b[cPos]) &amp; 255)" to="'/' / ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_14236" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_15566" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="matchPos + 1" to="matchPos % 1" />
    <mutant id="mutant_9902" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="(pathOffset) * (s.nameLength())" />
    <mutant id="mutant_9903" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - ((b[cPos]) &amp; 255)" to="((a[cPos]) &amp; 255) + ((b[cPos]) &amp; 255)" />
    <mutant id="mutant_15560" viable="true" in="org.eclipse.jgit.util.RawSubStringPattern.match(org.eclipse.jgit.util.RawCharSequence)" from="(rcs.endPtr) - needleLen" to="needleLen" />
    <mutant id="mutant_9900" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="(pathOffset) - (s.nameLength())" />
    <mutant id="mutant_9901" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="pathOffset" />
    <mutant id="mutant_14206" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="(startOff * startLen)" />
    <mutant id="mutant_15538" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="when" />
    <mutant id="mutant_14205" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="overflow" />
    <mutant id="mutant_15539" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="(when + 1000L)" />
    <mutant id="mutant_14208" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="startLen" />
    <mutant id="mutant_15536" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="(emailE % 1)" />
    <mutant id="mutant_14207" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="(startOff / startLen)" />
    <mutant id="mutant_15537" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="(when / 1000L)" />
    <mutant id="mutant_14209" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="(startOff % startLen)" />
    <mutant id="mutant_15530" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="(emailB % 2)" />
    <mutant id="mutant_15531" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="1" />
    <mutant id="mutant_14200" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="((b.length) + overflow)" />
    <mutant id="mutant_14202" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="((b.length) / overflow)" />
    <mutant id="mutant_15534" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="emailE" />
    <mutant id="mutant_14201" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="((b.length) * overflow)" />
    <mutant id="mutant_15535" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="(emailE - 1)" />
    <mutant id="mutant_14204" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="b.length" />
    <mutant id="mutant_15532" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="(emailE / 1)" />
    <mutant id="mutant_14203" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[])" from="((b.length) - overflow)" to="((b.length) % overflow)" />
    <mutant id="mutant_15533" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE + 1)" to="(emailE * 1)" />
    <mutant id="mutant_14217" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="(startOff + startLen) / overflow" />
    <mutant id="mutant_15549" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="((end - ptr) / 36)" to="36" />
    <mutant id="mutant_14216" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="(startOff + startLen) * overflow" />
    <mutant id="mutant_14219" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_15547" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_14218" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_15548" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_15541" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="(when - 1000L)" />
    <mutant id="mutant_15542" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="(when % 1000L)" />
    <mutant id="mutant_14211" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="startOff" />
    <mutant id="mutant_14210" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen)" to="(startOff - startLen)" />
    <mutant id="mutant_15540" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(when * 1000L)" to="1000L" />
    <mutant id="mutant_14213" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="(startOff + startLen) % overflow" />
    <mutant id="mutant_15545" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_14212" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="startOff + startLen" />
    <mutant id="mutant_15546" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_14215" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="(startOff + startLen) + overflow" />
    <mutant id="mutant_15543" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_14214" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(startOff + startLen) - overflow" to="overflow" />
    <mutant id="mutant_15544" viable="true" in="org.eclipse.jgit.util.RawParseUtils.lineMap(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_9960" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="ep.length" />
    <mutant id="mutant_9961" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) * pathOffset)" />
    <mutant id="mutant_8630" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) - (commitToPick.getShortMessage()))" />
    <mutant id="mutant_8629" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) * (commitToPick.getShortMessage()))" />
    <mutant id="mutant_14264" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="off" />
    <mutant id="mutant_15596" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_8628" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) % (commitToPick.getShortMessage()))" />
    <mutant id="mutant_14263" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="off / len" />
    <mutant id="mutant_15597" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="1" />
    <mutant id="mutant_9959" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) + pathOffset)" />
    <mutant id="mutant_14266" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="i + off" />
    <mutant id="mutant_15594" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_14265" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="off * len" />
    <mutant id="mutant_15595" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_14268" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="i" />
    <mutant id="mutant_14267" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="i % off" />
    <mutant id="mutant_15598" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_14269" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="i / off" />
    <mutant id="mutant_15599" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_8621" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) * &quot; &quot;)" />
    <mutant id="mutant_9953" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="pathOffset + (st.nameLength())" />
    <mutant id="mutant_8620" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9954" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="1" />
    <mutant id="mutant_8623" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) / &quot; &quot;)" />
    <mutant id="mutant_9951" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="(pathOffset + (st.nameLength())) / 1" />
    <mutant id="mutant_8622" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(RebaseCommand.REFLOG_PREFIX)" />
    <mutant id="mutant_9952" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="(pathOffset + (st.nameLength())) - 1" />
    <mutant id="mutant_8625" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) / (commitToPick.getShortMessage()))" />
    <mutant id="mutant_9957" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) / pathOffset)" />
    <mutant id="mutant_14260" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="off - len" />
    <mutant id="mutant_15592" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_8624" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) - &quot; &quot;)" />
    <mutant id="mutant_9958" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) % pathOffset)" />
    <mutant id="mutant_15593" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_8627" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="commitToPick.getShortMessage()" />
    <mutant id="mutant_9955" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="(pathOffset + (st.nameLength())) % 1" />
    <mutant id="mutant_14262" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="len" />
    <mutant id="mutant_15590" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="cnt" />
    <mutant id="mutant_8626" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" />
    <mutant id="mutant_9956" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength())) + 1" to="(pathOffset + (st.nameLength())) * 1" />
    <mutant id="mutant_14261" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="off + len" to="off % len" />
    <mutant id="mutant_15591" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="1" />
    <mutant id="mutant_9950" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="pathOffset" />
    <mutant id="mutant_8618" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="((doneLines.size()) + 1)" />
    <mutant id="mutant_14275" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) % timeout" />
    <mutant id="mutant_8617" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="doneLines.size()" />
    <mutant id="mutant_14274" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) / timeout" />
    <mutant id="mutant_9948" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="(pathOffset * (st.nameLength()))" />
    <mutant id="mutant_14277" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) - timeout" />
    <mutant id="mutant_8619" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) % &quot; &quot;)" />
    <mutant id="mutant_9949" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="(pathOffset / (st.nameLength()))" />
    <mutant id="mutant_14276" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()" />
    <mutant id="mutant_14279" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="(deadline) + (InterruptTimer.AlarmState.now())" />
    <mutant id="mutant_14278" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="(deadline) / (InterruptTimer.AlarmState.now())" />
    <mutant id="mutant_8610" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="externalString.lastIndexOf('&gt;')" />
    <mutant id="mutant_9942" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx" />
    <mutant id="mutant_9943" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx % (entrySpan)" />
    <mutant id="mutant_8612" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="((externalString.lastIndexOf('&gt;')) % 2)" />
    <mutant id="mutant_9940" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx / (entrySpan)" />
    <mutant id="mutant_8611" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="((externalString.lastIndexOf('&gt;')) * 2)" />
    <mutant id="mutant_9941" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="entrySpan" />
    <mutant id="mutant_8614" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="1" />
    <mutant id="mutant_9946" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="(st.nameLength())" />
    <mutant id="mutant_14271" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="i * off" />
    <mutant id="mutant_8613" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="((doneLines.size()) / 1)" />
    <mutant id="mutant_9947" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="(pathOffset % (st.nameLength()))" />
    <mutant id="mutant_14270" viable="true" in="org.eclipse.jgit.util.io.EolCanonicalizingInputStream.read(byte[],int,int)" from="i - off" to="off" />
    <mutant id="mutant_8616" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="((doneLines.size()) * 1)" />
    <mutant id="mutant_9944" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx - (entrySpan)" />
    <mutant id="mutant_14273" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) * timeout" />
    <mutant id="mutant_8615" viable="true" in="org.eclipse.jgit.api.RebaseCommand.call()" from="((doneLines.size()) - 1)" to="((doneLines.size()) % 1)" />
    <mutant id="mutant_9945" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="(pathOffset + (st.nameLength()))" to="(pathOffset - (st.nameLength()))" />
    <mutant id="mutant_14272" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.begin(int)" from="(org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()) + timeout" to="timeout" />
    <mutant id="mutant_14249" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_8607" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="2" />
    <mutant id="mutant_9939" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx * (entrySpan)" />
    <mutant id="mutant_14242" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="lastw" />
    <mutant id="mutant_15574" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) / cnt)" />
    <mutant id="mutant_8606" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="((result.length()) % 1)" />
    <mutant id="mutant_14241" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_15575" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) * cnt)" />
    <mutant id="mutant_8609" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="((externalString.lastIndexOf('&gt;')) - 2)" />
    <mutant id="mutant_9937" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_14244" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="(off + len)" />
    <mutant id="mutant_15572" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="size" />
    <mutant id="mutant_8608" viable="true" in="org.eclipse.jgit.api.RebaseCommand.toAuthorScript(org.eclipse.jgit.lib.PersonIdent)" from="((externalString.lastIndexOf('&gt;')) + 2)" to="((externalString.lastIndexOf('&gt;')) / 2)" />
    <mutant id="mutant_9938" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_14243" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="((off + len) * lastw)" />
    <mutant id="mutant_15573" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) % cnt)" />
    <mutant id="mutant_14246" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="((off + len) / lastw)" />
    <mutant id="mutant_15578" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="cnt" />
    <mutant id="mutant_14245" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="((off + len) % lastw)" />
    <mutant id="mutant_15579" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="((size) % 2)" />
    <mutant id="mutant_14248" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_15576" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) - cnt)" />
    <mutant id="mutant_14247" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - lastw)" to="((off + len) + lastw)" />
    <mutant id="mutant_15577" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="(size)" />
    <mutant id="mutant_9931" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="(ptr - (off.value)) + 1" />
    <mutant id="mutant_9932" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="(ptr - (off.value)) % 1" />
    <mutant id="mutant_8601" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="1" />
    <mutant id="mutant_8600" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="&quot;Upstream, based on &quot;" />
    <mutant id="mutant_9930" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="(ptr - (off.value)) / 1" />
    <mutant id="mutant_8603" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="((result.length()) + 1)" />
    <mutant id="mutant_9935" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="1" />
    <mutant id="mutant_15570" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="(size) / 2" />
    <mutant id="mutant_8602" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="((result.length()) * 1)" />
    <mutant id="mutant_9936" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="i" />
    <mutant id="mutant_15571" viable="true" in="org.eclipse.jgit.util.RefList$Builder.add(T)" from="(size) * 2" to="(size) + 2" />
    <mutant id="mutant_8605" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="((result.length()) / 1)" />
    <mutant id="mutant_9933" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_14240" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_8604" viable="true" in="org.eclipse.jgit.api.RebaseCommand.stripCommentLines(java.lang.String)" from="((result.length()) - 1)" to="result.length()" />
    <mutant id="mutant_9934" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_9928" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="(ptr - (off.value)) * 1" />
    <mutant id="mutant_14253" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_15585" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) % cnt)" />
    <mutant id="mutant_9929" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="ptr - (off.value)" />
    <mutant id="mutant_14252" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_15586" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) / cnt)" />
    <mutant id="mutant_9926" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="(ptr % (off.value))" />
    <mutant id="mutant_14255" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="1" />
    <mutant id="mutant_15583" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="((size) + 2)" />
    <mutant id="mutant_9927" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value)) - 1" to="1" />
    <mutant id="mutant_14254" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="((off + len) + 1)" />
    <mutant id="mutant_15584" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="size" />
    <mutant id="mutant_14257" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="((off + len) * 1)" />
    <mutant id="mutant_15589" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="size" />
    <mutant id="mutant_14256" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="(off + len)" />
    <mutant id="mutant_14259" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="((off + len) % 1)" />
    <mutant id="mutant_15587" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) * cnt)" />
    <mutant id="mutant_14258" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="((off + len) - 1)" to="((off + len) / 1)" />
    <mutant id="mutant_15588" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) + cnt)" to="((size) - cnt)" />
    <mutant id="mutant_9920" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree$1.compare(org.eclipse.jgit.dircache.DirCacheTree,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[cPos]) &amp; 255) - '/'" to="'/'" />
    <mutant id="mutant_9921" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="(ptr + (off.value))" />
    <mutant id="mutant_9924" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="(off.value)" />
    <mutant id="mutant_15581" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="2" />
    <mutant id="mutant_9925" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="ptr" />
    <mutant id="mutant_15582" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="((size) / 2)" />
    <mutant id="mutant_9922" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="(ptr / (off.value))" />
    <mutant id="mutant_14251" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_9923" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree(byte[],org.eclipse.jgit.util.MutableInteger,org.eclipse.jgit.dircache.DirCacheTree)" from="(ptr - (off.value))" to="(ptr * (off.value))" />
    <mutant id="mutant_14250" viable="true" in="org.eclipse.jgit.util.io.AutoCRLFOutputStream.write(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_15580" viable="true" in="org.eclipse.jgit.util.RefList$Builder.addAll(org.eclipse.jgit.lib.Ref[],int,int)" from="((size) * 2)" to="((size) - 2)" />
    <mutant id="mutant_8670" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="(equalsIndex - 1)" />
    <mutant id="mutant_7341" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_8672" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="(equalsIndex / 1)" />
    <mutant id="mutant_6010" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="(maxBytes) / (cfg.getStreamRatio())" />
    <mutant id="mutant_7340" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="high" />
    <mutant id="mutant_8671" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="(equalsIndex * 1)" />
    <mutant id="mutant_6011" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="cfg.getStreamRatio()" />
    <mutant id="mutant_7343" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="1" />
    <mutant id="mutant_8674" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="(end / 2)" />
    <mutant id="mutant_6012" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="(maxBytes) - (cfg.getStreamRatio())" />
    <mutant id="mutant_7342" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="p % 1" />
    <mutant id="mutant_8673" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="2" />
    <mutant id="mutant_6002" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_7334" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="srcObj.getDeltaDepth()" />
    <mutant id="mutant_8665" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="(equalsIndex / 1)" />
    <mutant id="mutant_9997" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx - 1)" />
    <mutant id="mutant_6003" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_7333" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="(srcObj.getDeltaDepth()) % 1" />
    <mutant id="mutant_8664" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="(equalsIndex * 1)" />
    <mutant id="mutant_9998" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx * 1)" />
    <mutant id="mutant_6004" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) / 0.1" />
    <mutant id="mutant_7336" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_8667" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="equalsIndex" />
    <mutant id="mutant_9995" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx / 1)" />
    <mutant id="mutant_6005" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="0.1" />
    <mutant id="mutant_7335" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="(srcObj.getDeltaDepth()) - 1" />
    <mutant id="mutant_8666" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="(equalsIndex + 1)" />
    <mutant id="mutant_9996" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="(stIdx % 1)" />
    <mutant id="mutant_6006" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) % 0.1" />
    <mutant id="mutant_7338" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_8669" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="(equalsIndex % 1)" />
    <mutant id="mutant_6007" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) - 0.1" />
    <mutant id="mutant_7337" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="low" />
    <mutant id="mutant_8668" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex + 1)" to="1" />
    <mutant id="mutant_6008" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="tableSize" />
    <mutant id="mutant_9999" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) - stIdx)" to="stIdx" />
    <mutant id="mutant_6009" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) + 0.1" />
    <mutant id="mutant_7339" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_9990" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="((childCnt) * 1)" />
    <mutant id="mutant_7330" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="1" />
    <mutant id="mutant_8661" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="equalsIndex" />
    <mutant id="mutant_9993" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="stIdx" />
    <mutant id="mutant_8660" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" />
    <mutant id="mutant_9994" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="(stIdx + 1)" to="1" />
    <mutant id="mutant_6000" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_7332" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="(srcObj.getDeltaDepth()) * 1" />
    <mutant id="mutant_8663" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="(equalsIndex % 1)" />
    <mutant id="mutant_9991" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="(childCnt)" />
    <mutant id="mutant_6001" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_7331" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.searchInWindow()" from="(srcObj.getDeltaDepth()) + 1" to="(srcObj.getDeltaDepth()) / 1" />
    <mutant id="mutant_8662" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(equalsIndex - 1)" to="1" />
    <mutant id="mutant_9992" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="((childCnt) % 1)" />
    <mutant id="mutant_7323" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="bytesProcessed" />
    <mutant id="mutant_8654" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) % &quot; onto &quot;)" />
    <mutant id="mutant_9986" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="pathOffset" />
    <mutant id="mutant_7322" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="bytesPerUnit" />
    <mutant id="mutant_8653" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) - &quot; onto &quot;)" />
    <mutant id="mutant_9987" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="((childCnt) / 1)" />
    <mutant id="mutant_7325" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="d / (bytesPerUnit)" />
    <mutant id="mutant_8656" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) / (upstreamCommit.name()))" />
    <mutant id="mutant_9984" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="ep.length" />
    <mutant id="mutant_7324" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="d + (bytesPerUnit)" />
    <mutant id="mutant_8655" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) * (upstreamCommit.name()))" />
    <mutant id="mutant_9985" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) * pathOffset)" />
    <mutant id="mutant_7327" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="d" />
    <mutant id="mutant_8658" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) - (upstreamCommit.name()))" />
    <mutant id="mutant_7326" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="d - (bytesPerUnit)" />
    <mutant id="mutant_8657" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="upstreamCommit.name()" />
    <mutant id="mutant_7329" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="bytesPerUnit" />
    <mutant id="mutant_9988" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="((childCnt) - 1)" />
    <mutant id="mutant_7328" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="d * (bytesPerUnit)" to="d % (bytesPerUnit)" />
    <mutant id="mutant_8659" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) + (upstreamCommit.name()))" to="(((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;) % (upstreamCommit.name()))" />
    <mutant id="mutant_9989" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.insertChild(int,org.eclipse.jgit.dircache.DirCacheTree)" from="((childCnt) + 1)" to="1" />
    <mutant id="mutant_8650" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" />
    <mutant id="mutant_9982" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) % pathOffset)" />
    <mutant id="mutant_9983" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) + pathOffset)" />
    <mutant id="mutant_7321" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="(bytesProcessed) * (bytesPerUnit)" />
    <mutant id="mutant_8652" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) / &quot; onto &quot;)" />
    <mutant id="mutant_9980" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx - (entrySpan)" />
    <mutant id="mutant_7320" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="(bytesProcessed) + (bytesPerUnit)" />
    <mutant id="mutant_8651" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="&quot; onto &quot;" />
    <mutant id="mutant_9981" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="((ep.length) / pathOffset)" />
    <mutant id="mutant_14286" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="((Thread.currentThread().getName()) * &quot;-StreamCopy&quot;)" />
    <mutant id="mutant_7319" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="(bytesProcessed) - (bytesPerUnit)" />
    <mutant id="mutant_14285" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="((Thread.currentThread().getName()) % &quot;-StreamCopy&quot;)" />
    <mutant id="mutant_14288" viable="true" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="&quot;-StreamCopy&quot;" />
    <mutant id="mutant_14287" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="((Thread.currentThread().getName()) - &quot;-StreamCopy&quot;)" />
    <mutant id="mutant_14289" viable="true" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="Thread.currentThread().getName()" />
    <mutant id="mutant_7312" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="((loaded) - need)" />
    <mutant id="mutant_8643" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="(&quot;# Created by EGit: rebasing &quot; / (headId.name()))" />
    <mutant id="mutant_9975" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx * (entrySpan)" />
    <mutant id="mutant_7311" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) / need)" />
    <mutant id="mutant_8642" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) - (commitToPick.getShortMessage()))" />
    <mutant id="mutant_9976" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx / (entrySpan)" />
    <mutant id="mutant_7314" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="((loaded) * need)" />
    <mutant id="mutant_8645" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="(&quot;# Created by EGit: rebasing &quot; % (headId.name()))" />
    <mutant id="mutant_9973" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="aLen" />
    <mutant id="mutant_14280" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="(deadline) % (InterruptTimer.AlarmState.now())" />
    <mutant id="mutant_7313" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="need" />
    <mutant id="mutant_8644" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="(&quot;# Created by EGit: rebasing &quot; - (headId.name()))" />
    <mutant id="mutant_9974" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="bLen" />
    <mutant id="mutant_7316" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="(loaded)" />
    <mutant id="mutant_8647" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="&quot;# Created by EGit: rebasing &quot;" />
    <mutant id="mutant_9979" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx % (entrySpan)" />
    <mutant id="mutant_14282" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="(deadline) * (InterruptTimer.AlarmState.now())" />
    <mutant id="mutant_7315" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="((loaded) % need)" />
    <mutant id="mutant_8646" viable="true" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="(headId.name())" />
    <mutant id="mutant_14281" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="org.eclipse.jgit.util.io.InterruptTimer.AlarmState.now()" />
    <mutant id="mutant_7318" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((int)((bytesProcessed) / (bytesPerUnit)))" to="(bytesProcessed) % (bytesPerUnit)" />
    <mutant id="mutant_8649" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) + &quot; onto &quot;)" to="((&quot;# Created by EGit: rebasing &quot; + (headId.name())) * &quot; onto &quot;)" />
    <mutant id="mutant_9977" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="entrySpan" />
    <mutant id="mutant_14284" viable="false" in="org.eclipse.jgit.util.io.StreamCopyThread(java.io.InputStream,java.io.OutputStream)" from="((Thread.currentThread().getName()) + &quot;-StreamCopy&quot;)" to="((Thread.currentThread().getName()) / &quot;-StreamCopy&quot;)" />
    <mutant id="mutant_7317" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.search()" from="((loaded) + need)" to="((loaded) / need)" />
    <mutant id="mutant_8648" viable="false" in="org.eclipse.jgit.api.RebaseCommand.initFilesAndRewind()" from="(&quot;# Created by EGit: rebasing &quot; + (headId.name()))" to="(&quot;# Created by EGit: rebasing &quot; * (headId.name()))" />
    <mutant id="mutant_9978" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.writeTree(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="cIdx + (entrySpan)" to="cIdx" />
    <mutant id="mutant_14283" viable="true" in="org.eclipse.jgit.util.io.InterruptTimer$AlarmState.run()" from="(deadline) - (InterruptTimer.AlarmState.now())" to="deadline" />
    <mutant id="mutant_9971" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="aLen % bLen" />
    <mutant id="mutant_9972" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="aLen + bLen" />
    <mutant id="mutant_7310" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="loaded" />
    <mutant id="mutant_8641" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) * (commitToPick.getShortMessage()))" />
    <mutant id="mutant_8640" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) % (commitToPick.getShortMessage()))" />
    <mutant id="mutant_9970" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="aLen * bLen" />
    <mutant id="mutant_7309" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) % need)" />
    <mutant id="mutant_14297" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="(&quot;0123456789&quot; / &quot;+/&quot;)" />
    <mutant id="mutant_7308" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) * need)" />
    <mutant id="mutant_8639" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="commitToPick.getShortMessage()" />
    <mutant id="mutant_14296" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="&quot;0123456789&quot;" />
    <mutant id="mutant_14299" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="(&quot;0123456789&quot; * &quot;+/&quot;)" />
    <mutant id="mutant_14298" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="&quot;+/&quot;" />
    <mutant id="mutant_7301" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="need" />
    <mutant id="mutant_8632" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9964" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) / ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_7300" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) - need)" />
    <mutant id="mutant_8631" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) % &quot; &quot;)" />
    <mutant id="mutant_9965" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(a[aPos]) &amp; 255" />
    <mutant id="mutant_7303" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) % need)" />
    <mutant id="mutant_8634" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="(RebaseCommand.REFLOG_PREFIX)" />
    <mutant id="mutant_9962" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.computeSize(org.eclipse.jgit.dircache.DirCacheEntry[],int,int,org.eclipse.jgit.lib.ObjectInserter)" from="((ep.length) - pathOffset)" to="pathOffset" />
    <mutant id="mutant_14291" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="(s * (LF))" />
    <mutant id="mutant_7302" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) * need)" />
    <mutant id="mutant_8633" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) * &quot; &quot;)" />
    <mutant id="mutant_9963" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) * ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_14290" viable="true" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="s" />
    <mutant id="mutant_7305" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) / need)" />
    <mutant id="mutant_8636" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) - &quot; &quot;)" />
    <mutant id="mutant_9968" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) % ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_14293" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="(s / (LF))" />
    <mutant id="mutant_7304" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="(loaded)" />
    <mutant id="mutant_8635" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" to="((RebaseCommand.REFLOG_PREFIX) / &quot; &quot;)" />
    <mutant id="mutant_9969" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="aLen - bLen" to="aLen / bLen" />
    <mutant id="mutant_14292" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="(s - (LF))" />
    <mutant id="mutant_7307" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="need" />
    <mutant id="mutant_8638" viable="true" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;)" />
    <mutant id="mutant_9966" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="(b[bPos]) &amp; 255" />
    <mutant id="mutant_14295" viable="false" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="(s % (LF))" />
    <mutant id="mutant_7306" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.checkLoadable(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry,long)" from="((loaded) + need)" to="((loaded) - need)" />
    <mutant id="mutant_8637" viable="false" in="org.eclipse.jgit.api.RebaseCommand.cherryPickCommitPreservingMerges(org.eclipse.jgit.revwalk.RevCommit)" from="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) + (commitToPick.getShortMessage()))" to="(((RebaseCommand.REFLOG_PREFIX) + &quot; &quot;) / (commitToPick.getShortMessage()))" />
    <mutant id="mutant_9967" viable="true" in="org.eclipse.jgit.dircache.DirCacheTree.namecmp(byte[],int,org.eclipse.jgit.dircache.DirCacheTree)" from="((a[aPos]) &amp; 255) - ((b[bPos]) &amp; 255)" to="((a[aPos]) &amp; 255) + ((b[bPos]) &amp; 255)" />
    <mutant id="mutant_14294" viable="true" in="org.eclipse.jgit.util.io.ThrowingPrintWriter.println(java.lang.String)" from="(s + (LF))" to="LF" />
    <mutant id="mutant_7381" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="(count) / (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" />
    <mutant id="mutant_6050" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) - (loadLocks.length))" />
    <mutant id="mutant_7380" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="(count) - (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" />
    <mutant id="mutant_6051" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="loadLocks.length" />
    <mutant id="mutant_7383" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK" />
    <mutant id="mutant_6052" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="100" />
    <mutant id="mutant_7382" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="count" />
    <mutant id="mutant_6053" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="(getCurrentSize())" />
    <mutant id="mutant_7385" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="((count) + (b.getOffset()))" />
    <mutant id="mutant_6054" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="((getCurrentSize()) / 100)" />
    <mutant id="mutant_7384" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="((count) / (b.getOffset()))" />
    <mutant id="mutant_6055" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="((getCurrentSize()) % 100)" />
    <mutant id="mutant_7387" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="b.getOffset()" />
    <mutant id="mutant_6056" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="((getCurrentSize()) - 100)" />
    <mutant id="mutant_7386" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="((count) % (b.getOffset()))" />
    <mutant id="mutant_6046" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_7378" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="(count) * (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" />
    <mutant id="mutant_6047" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) + (loadLocks.length))" />
    <mutant id="mutant_7377" viable="false" in="?" from="128 * 1024" to="128 % 1024" />
    <mutant id="mutant_6048" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) * (loadLocks.length))" />
    <mutant id="mutant_6049" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.lockFor(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (loadLocks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) / (loadLocks.length))" />
    <mutant id="mutant_7379" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.write(byte[],int,int)" from="(count) + (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" to="(count) % (PackOutputStream.BYTES_TO_WRITE_BEFORE_CANCEL_CHECK)" />
    <mutant id="mutant_7370" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="(PackExt.VALUES.length) - 1" />
    <mutant id="mutant_6040" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="2" />
    <mutant id="mutant_7372" viable="false" in="?" from="128 * 1024" to="128 + 1024" />
    <mutant id="mutant_6041" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) + 2)" />
    <mutant id="mutant_7371" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="PackExt.VALUES.length" />
    <mutant id="mutant_6042" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(5 * (limit / wsz))" />
    <mutant id="mutant_7374" viable="false" in="?" from="128 * 1024" to="1024" />
    <mutant id="mutant_6043" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) % 2)" />
    <mutant id="mutant_7373" viable="false" in="?" from="128 * 1024" to="128 / 1024" />
    <mutant id="mutant_6044" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) * 2)" />
    <mutant id="mutant_7376" viable="false" in="?" from="128 * 1024" to="128 - 1024" />
    <mutant id="mutant_6045" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) - 2)" />
    <mutant id="mutant_7375" viable="false" in="?" from="128 * 1024" to="128" />
    <mutant id="mutant_6035" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="(5 - (limit / wsz))" />
    <mutant id="mutant_7367" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="1" />
    <mutant id="mutant_8698" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="((hours * 60) % minutes)" />
    <mutant id="mutant_6036" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="5" />
    <mutant id="mutant_7366" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="(PackExt.VALUES.length) / 1" />
    <mutant id="mutant_8697" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="((hours * 60) / minutes)" />
    <mutant id="mutant_6037" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="(limit / wsz)" />
    <mutant id="mutant_7369" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="(PackExt.VALUES.length) * 1" />
    <mutant id="mutant_6038" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="(5 + (limit / wsz))" />
    <mutant id="mutant_7368" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackExt.newPackExt(java.lang.String)" from="(PackExt.VALUES.length) + 1" to="(PackExt.VALUES.length) % 1" />
    <mutant id="mutant_8699" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((hours * 60) + minutes)" to="minutes" />
    <mutant id="mutant_6039" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="(5 % (limit / wsz))" />
    <mutant id="mutant_8690" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="time.indexOf(' ')" />
    <mutant id="mutant_7361" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="((cnt) % low)" />
    <mutant id="mutant_8692" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="(hours + 60)" />
    <mutant id="mutant_6030" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="wsz" />
    <mutant id="mutant_7360" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="((cnt) / low)" />
    <mutant id="mutant_8691" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="hours" />
    <mutant id="mutant_6031" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="(limit - wsz)" />
    <mutant id="mutant_7363" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="low" />
    <mutant id="mutant_8694" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="(hours % 60)" />
    <mutant id="mutant_6032" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="(limit + wsz)" />
    <mutant id="mutant_7362" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="cnt" />
    <mutant id="mutant_8693" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="(hours / 60)" />
    <mutant id="mutant_6033" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="limit" />
    <mutant id="mutant_7365" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="((cnt) * low)" />
    <mutant id="mutant_8696" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="60" />
    <mutant id="mutant_6034" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(5 * (limit / wsz))" to="(5 / (limit / wsz))" />
    <mutant id="mutant_7364" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="((cnt) - low)" to="((cnt) + low)" />
    <mutant id="mutant_8695" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(hours * 60)" to="(hours - 60)" />
    <mutant id="mutant_6024" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) * (tableSize)" />
    <mutant id="mutant_7356" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="low" />
    <mutant id="mutant_8687" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="1" />
    <mutant id="mutant_6025" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) - (tableSize)" />
    <mutant id="mutant_7355" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_8686" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="((time.indexOf(' ')) / 1)" />
    <mutant id="mutant_6026" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="tableSize" />
    <mutant id="mutant_7358" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_8689" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="((time.indexOf(' ')) * 1)" />
    <mutant id="mutant_6027" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) + (tableSize)" />
    <mutant id="mutant_7357" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_8688" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="((time.indexOf(' ')) % 1)" />
    <mutant id="mutant_6028" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="(limit % wsz)" />
    <mutant id="mutant_6029" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.tableSize(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="(limit / wsz)" to="(limit * wsz)" />
    <mutant id="mutant_7359" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_7350" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="(set.length) / 2" />
    <mutant id="mutant_8681" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) + 1000" />
    <mutant id="mutant_8680" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) % 1000" />
    <mutant id="mutant_6020" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="packHash % ((int)((off &gt;&gt;&gt; (blockSizeShift))))" />
    <mutant id="mutant_7352" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="(set.length) - 2" />
    <mutant id="mutant_8683" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="Long.parseLong(time.substring(timeStart, time.indexOf(' ')))" />
    <mutant id="mutant_6021" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="((int)(off &gt;&gt;&gt; (blockSizeShift)))" />
    <mutant id="mutant_7351" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="(set.length) + 2" />
    <mutant id="mutant_8682" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="1000" />
    <mutant id="mutant_6022" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(hash(pack.hash, position)) &gt;&gt;&gt; 1" />
    <mutant id="mutant_7354" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(low + 1)" to="1" />
    <mutant id="mutant_8685" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="((time.indexOf(' ')) + 1)" to="((time.indexOf(' ')) - 1)" />
    <mutant id="mutant_6023" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.slot(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) / (tableSize)" />
    <mutant id="mutant_7353" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="set.length" />
    <mutant id="mutant_8684" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) / 1000" />
    <mutant id="mutant_6013" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="(maxBytes) + (cfg.getStreamRatio())" />
    <mutant id="mutant_7345" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="p / 1" />
    <mutant id="mutant_8676" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="(end % 2)" />
    <mutant id="mutant_6014" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="(maxBytes) % (cfg.getStreamRatio())" />
    <mutant id="mutant_7344" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="p * 1" />
    <mutant id="mutant_8675" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="(end + 2)" />
    <mutant id="mutant_6015" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache(org.eclipse.jgit.internal.storage.dfs.DfsBlockCacheConfig)" from="((long)((maxBytes) * (cfg.getStreamRatio())))" to="maxBytes" />
    <mutant id="mutant_7347" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="p - 1" />
    <mutant id="mutant_8678" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="end" />
    <mutant id="mutant_6016" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="packHash / ((int)((off &gt;&gt;&gt; (blockSizeShift))))" />
    <mutant id="mutant_7346" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="p + 1" to="p" />
    <mutant id="mutant_8677" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(end - 2)" to="(end * 2)" />
    <mutant id="mutant_6017" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="packHash * ((int)((off &gt;&gt;&gt; (blockSizeShift))))" />
    <mutant id="mutant_7349" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="(set.length) % 2" />
    <mutant id="mutant_6018" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="packHash - ((int)((off &gt;&gt;&gt; (blockSizeShift))))" />
    <mutant id="mutant_7348" viable="true" in="org.eclipse.jgit.internal.storage.pack.IntSet.add(int)" from="(set.length) * 2" to="2" />
    <mutant id="mutant_8679" viable="true" in="org.eclipse.jgit.api.RebaseCommand.parseAuthor(byte[])" from="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) * 1000" to="(Long.parseLong(time.substring(timeStart, time.indexOf(' ')))) - 1000" />
    <mutant id="mutant_6019" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (blockSizeShift))))" to="packHash" />
    <mutant id="mutant_6093" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="((blockSize) % (v.size()))" />
    <mutant id="mutant_6094" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="liveBytes" />
    <mutant id="mutant_6095" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="(liveBytes) * reserve" />
    <mutant id="mutant_6096" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="(liveBytes) % reserve" />
    <mutant id="mutant_6097" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="(liveBytes) / reserve" />
    <mutant id="mutant_6098" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="(liveBytes) - reserve" />
    <mutant id="mutant_6099" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.reserveSpace(int)" from="(liveBytes) + reserve" to="reserve" />
    <mutant id="mutant_6090" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="((blockSize) * (v.size()))" />
    <mutant id="mutant_6091" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="v.size()" />
    <mutant id="mutant_6092" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="((blockSize) + (v.size()))" />
    <mutant id="mutant_6082" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="getMissCount()" />
    <mutant id="mutant_6083" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="(getHitCount()) / (getMissCount())" />
    <mutant id="mutant_6084" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="(getHitCount()) - (getMissCount())" />
    <mutant id="mutant_6085" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="getHitCount()" />
    <mutant id="mutant_6086" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="(getHitCount()) * (getMissCount())" />
    <mutant id="mutant_6087" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getTotalRequestCount()" from="(getHitCount()) + (getMissCount())" to="(getHitCount()) % (getMissCount())" />
    <mutant id="mutant_6088" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="blockSize" />
    <mutant id="mutant_6089" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getOrLoad(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((blockSize) - (v.size()))" to="((blockSize) / (v.size()))" />
    <mutant id="mutant_6080" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="hits * 100" />
    <mutant id="mutant_6081" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="total" />
    <mutant id="mutant_6079" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="(hits * 100) + total" />
    <mutant id="mutant_6071" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="hits" />
    <mutant id="mutant_6072" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="100" />
    <mutant id="mutant_6073" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="(hits + 100)" />
    <mutant id="mutant_6074" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="(hits / 100)" />
    <mutant id="mutant_6075" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="(hits - 100)" />
    <mutant id="mutant_6076" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="(hits * 100) * total" />
    <mutant id="mutant_6077" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="(hits * 100) - total" />
    <mutant id="mutant_6078" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100) / total" to="(hits * 100) % total" />
    <mutant id="mutant_6070" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="(hits * 100)" to="(hits % 100)" />
    <mutant id="mutant_6068" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="hits / miss" />
    <mutant id="mutant_6069" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="hits % miss" />
    <mutant id="mutant_7399" viable="false" in="?" from="(2 * 8)" to="(2 / 8)" />
    <mutant id="mutant_6060" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="((getCurrentSize()) * 100) % (maxBytes)" />
    <mutant id="mutant_7392" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="(n - 20)" />
    <mutant id="mutant_6061" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="maxBytes" />
    <mutant id="mutant_7391" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="n" />
    <mutant id="mutant_6062" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="(getCurrentSize()) * 100" />
    <mutant id="mutant_7394" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="(n % 20)" />
    <mutant id="mutant_6063" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="((getCurrentSize()) * 100) - (maxBytes)" />
    <mutant id="mutant_7393" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="(n / 20)" />
    <mutant id="mutant_6064" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="hits" />
    <mutant id="mutant_7396" viable="false" in="?" from="(2 * 8)" to="(2 + 8)" />
    <mutant id="mutant_6065" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="hits * miss" />
    <mutant id="mutant_7395" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="20" />
    <mutant id="mutant_6066" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="miss" />
    <mutant id="mutant_7398" viable="false" in="?" from="(2 * 8)" to="8" />
    <mutant id="mutant_6067" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getHitRatio()" from="hits + miss" to="hits - miss" />
    <mutant id="mutant_7397" viable="false" in="?" from="(2 * 8)" to="2" />
    <mutant id="mutant_7390" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="(n + 20)" to="(n * 20)" />
    <mutant id="mutant_6057" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100)" to="((getCurrentSize()) + 100)" />
    <mutant id="mutant_7389" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="count" />
    <mutant id="mutant_6058" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="((getCurrentSize()) * 100) * (maxBytes)" />
    <mutant id="mutant_7388" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackOutputStream.writeHeader(org.eclipse.jgit.internal.storage.pack.ObjectToPack,long)" from="((count) - (b.getOffset()))" to="((count) * (b.getOffset()))" />
    <mutant id="mutant_6059" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlockCache.getFillPercentage()" from="((getCurrentSize()) * 100) / (maxBytes)" to="((getCurrentSize()) * 100) + (maxBytes)" />
    <mutant id="mutant_15516" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="1000L" />
    <mutant id="mutant_15517" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="(when - 1000L)" />
    <mutant id="mutant_15514" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="when" />
    <mutant id="mutant_15515" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="(when + 1000L)" />
    <mutant id="mutant_15518" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="(when % 1000L)" />
    <mutant id="mutant_15519" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="1" />
    <mutant id="mutant_15512" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin % 1)" />
    <mutant id="mutant_15513" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(when * 1000L)" to="(when / 1000L)" />
    <mutant id="mutant_15510" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="tzBegin" />
    <mutant id="mutant_15511" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin + 1)" />
    <mutant id="mutant_15527" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="emailB" />
    <mutant id="mutant_15528" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="(emailB / 2)" />
    <mutant id="mutant_15525" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="2" />
    <mutant id="mutant_15526" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="(emailB + 2)" />
    <mutant id="mutant_15529" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailB - 2)" to="(emailB * 2)" />
    <mutant id="mutant_15520" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="(emailE / 1)" />
    <mutant id="mutant_15523" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="(emailE % 1)" />
    <mutant id="mutant_15524" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="(emailE + 1)" />
    <mutant id="mutant_15521" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="(emailE * 1)" />
    <mutant id="mutant_15522" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdentOnly(byte[],int)" from="(emailE - 1)" to="emailE" />
    <mutant id="mutant_15505" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) / 1)" />
    <mutant id="mutant_15506" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))" />
    <mutant id="mutant_15503" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) % 1)" />
    <mutant id="mutant_15504" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) * 1)" />
    <mutant id="mutant_15509" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin / 1)" />
    <mutant id="mutant_15507" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="1" />
    <mutant id="mutant_15508" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin * 1)" />
    <mutant id="mutant_15501" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="1" />
    <mutant id="mutant_15502" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) + 1)" to="((org.eclipse.jgit.util.RawParseUtils.lastIndexOfTrim(raw, ' ', (tzBegin - 1))) - 1)" />
    <mutant id="mutant_15500" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parsePersonIdent(byte[],int)" from="(tzBegin - 1)" to="(tzBegin % 1)" />
    <mutant id="mutant_13018" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="((keyEnd) + bPtr)" />
    <mutant id="mutant_14349" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset * 3)" />
    <mutant id="mutant_13017" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="((keyEnd) * bPtr)" />
    <mutant id="mutant_14348" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset / 3)" />
    <mutant id="mutant_15679" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_13019" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'a' + 'A'" />
    <mutant id="mutant_13010" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_14341" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset * 1)" />
    <mutant id="mutant_15673" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_14340" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset - 1)" />
    <mutant id="mutant_15674" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_13012" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="(&quot;FooterKey[&quot; + (name)) * &quot;]&quot;" />
    <mutant id="mutant_14343" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset % 1)" />
    <mutant id="mutant_15671" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_13011" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="(&quot;FooterKey[&quot; + (name)) / &quot;]&quot;" />
    <mutant id="mutant_14342" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="srcOffset" />
    <mutant id="mutant_15672" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_13014" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="((keyEnd) / bPtr)" />
    <mutant id="mutant_14345" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset - 3)" />
    <mutant id="mutant_15677" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_13013" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="(keyEnd)" />
    <mutant id="mutant_14344" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="3" />
    <mutant id="mutant_15678" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_13016" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="bPtr" />
    <mutant id="mutant_14347" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset % 3)" />
    <mutant id="mutant_15675" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="1" />
    <mutant id="mutant_13015" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="((keyEnd) - bPtr)" to="((keyEnd) % bPtr)" />
    <mutant id="mutant_14346" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="srcOffset" />
    <mutant id="mutant_15676" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_15670" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_13029" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="(gt % 1)" />
    <mutant id="mutant_13028" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="(gt * 1)" />
    <mutant id="mutant_14359" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset % 2)" />
    <mutant id="mutant_13021" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'a'" />
    <mutant id="mutant_14352" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset - 1)" />
    <mutant id="mutant_15684" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="(idx + 1)" />
    <mutant id="mutant_13020" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'a' % 'A'" />
    <mutant id="mutant_14351" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="1" />
    <mutant id="mutant_15685" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="((cnt) * (idx + 1))" />
    <mutant id="mutant_13023" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'a' / 'A'" />
    <mutant id="mutant_14354" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="srcOffset" />
    <mutant id="mutant_15682" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="((cnt) + (idx + 1))" />
    <mutant id="mutant_13022" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'A'" />
    <mutant id="mutant_14353" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset * 1)" />
    <mutant id="mutant_15683" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="((cnt) % (idx + 1))" />
    <mutant id="mutant_13025" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="1" />
    <mutant id="mutant_14356" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset / 2)" />
    <mutant id="mutant_15688" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="((cnt) % 1)" />
    <mutant id="mutant_13024" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.matches(org.eclipse.jgit.revwalk.FooterKey)" from="'a' - 'A'" to="'a' * 'A'" />
    <mutant id="mutant_14355" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset % 1)" />
    <mutant id="mutant_15689" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="((cnt) * 1)" />
    <mutant id="mutant_13027" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="(gt + 1)" />
    <mutant id="mutant_14358" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset - 2)" />
    <mutant id="mutant_15686" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="cnt" />
    <mutant id="mutant_13026" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="(gt / 1)" />
    <mutant id="mutant_14357" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="2" />
    <mutant id="mutant_15687" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="1" />
    <mutant id="mutant_15680" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_15681" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - (idx + 1))" to="((cnt) / (idx + 1))" />
    <mutant id="mutant_14350" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset / 1)" />
    <mutant id="mutant_14327" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="(off % len)" />
    <mutant id="mutant_15659" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="(cnt) * 1" />
    <mutant id="mutant_14326" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="(off - len)" />
    <mutant id="mutant_14329" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="(off / len)" />
    <mutant id="mutant_15657" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="1" />
    <mutant id="mutant_14328" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="len" />
    <mutant id="mutant_15658" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="(cnt) % 1" />
    <mutant id="mutant_15651" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="1" />
    <mutant id="mutant_15652" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="((cnt) - 1)" />
    <mutant id="mutant_14321" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="len * 3" />
    <mutant id="mutant_14320" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="(len * 3) - 4" />
    <mutant id="mutant_15650" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="cnt" />
    <mutant id="mutant_14323" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="(len * 3) * 4" />
    <mutant id="mutant_15655" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="((cnt) / 1)" />
    <mutant id="mutant_14322" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="4" />
    <mutant id="mutant_15656" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="cnt" />
    <mutant id="mutant_14325" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="(len * 3) % 4" />
    <mutant id="mutant_15653" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="((cnt) % 1)" />
    <mutant id="mutant_14324" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3) / 4" to="(len * 3) + 4" />
    <mutant id="mutant_15654" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) + 1)" to="((cnt) * 1)" />
    <mutant id="mutant_13007" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="(&quot;FooterKey[&quot; + (name)) % &quot;]&quot;" />
    <mutant id="mutant_14338" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset / 1)" />
    <mutant id="mutant_13006" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="(&quot;FooterKey[&quot; - (name))" />
    <mutant id="mutant_14337" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset * 2)" />
    <mutant id="mutant_13009" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="&quot;FooterKey[&quot; + (name)" />
    <mutant id="mutant_15668" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_13008" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name)) + &quot;]&quot;" to="(&quot;FooterKey[&quot; + (name)) - &quot;]&quot;" />
    <mutant id="mutant_14339" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="1" />
    <mutant id="mutant_15669" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="1" />
    <mutant id="mutant_14330" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="off" />
    <mutant id="mutant_15662" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="cnt" />
    <mutant id="mutant_15663" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="1" />
    <mutant id="mutant_13001" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="&quot;FooterKey[&quot;" />
    <mutant id="mutant_14332" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset / 2)" />
    <mutant id="mutant_15660" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="(cnt) / 1" />
    <mutant id="mutant_13000" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) * &quot;)&quot;" />
    <mutant id="mutant_14331" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(off + len)" to="(off * len)" />
    <mutant id="mutant_15661" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(cnt) - 1" to="(cnt) + 1" />
    <mutant id="mutant_13003" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="(&quot;FooterKey[&quot; * (name))" />
    <mutant id="mutant_14334" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset - 2)" />
    <mutant id="mutant_15666" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_13002" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="(&quot;FooterKey[&quot; % (name))" />
    <mutant id="mutant_14333" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="2" />
    <mutant id="mutant_15667" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_13005" viable="false" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="(&quot;FooterKey[&quot; / (name))" />
    <mutant id="mutant_14336" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="srcOffset" />
    <mutant id="mutant_15664" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_13004" viable="true" in="org.eclipse.jgit.revwalk.FooterKey.toString()" from="(&quot;FooterKey[&quot; + (name))" to="(name)" />
    <mutant id="mutant_14335" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset % 2)" />
    <mutant id="mutant_15665" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_9840" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="(base / 4)" />
    <mutant id="mutant_8508" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="leftCost" />
    <mutant id="mutant_13054" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="nameEnd + 16" />
    <mutant id="mutant_14385" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset * 3)" />
    <mutant id="mutant_8507" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="leftCost * rightCost" />
    <mutant id="mutant_13053" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="nameEnd * 16" />
    <mutant id="mutant_14384" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset / 3)" />
    <mutant id="mutant_9838" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="4" />
    <mutant id="mutant_13056" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="(nameEnd / 16)" />
    <mutant id="mutant_14387" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset - 1)" />
    <mutant id="mutant_8509" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="leftCost % rightCost" />
    <mutant id="mutant_9839" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="(base * 4)" />
    <mutant id="mutant_13055" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="16" />
    <mutant id="mutant_14386" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="1" />
    <mutant id="mutant_13058" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="(nameEnd % 16)" />
    <mutant id="mutant_14389" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset % 1)" />
    <mutant id="mutant_13057" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="nameEnd" />
    <mutant id="mutant_14388" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="destOffset" />
    <mutant id="mutant_13059" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="(nameEnd * 16)" />
    <mutant id="mutant_8500" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="1" />
    <mutant id="mutant_9832" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="(infoOffset) * (DirCacheEntry.P_SIZE)" />
    <mutant id="mutant_9833" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="(infoOffset) - (DirCacheEntry.P_SIZE)" />
    <mutant id="mutant_8502" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="c.distance" />
    <mutant id="mutant_9830" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="infoOffset" />
    <mutant id="mutant_8501" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="(c.distance) - 1" />
    <mutant id="mutant_9831" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="(infoOffset) / (DirCacheEntry.P_SIZE)" />
    <mutant id="mutant_8504" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="(c.distance) % 1" />
    <mutant id="mutant_9836" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="infoOffset" />
    <mutant id="mutant_13050" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="nameEnd / 16" />
    <mutant id="mutant_14381" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset - 3)" />
    <mutant id="mutant_8503" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="(c.distance) / 1" />
    <mutant id="mutant_9837" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="(base % 4)" />
    <mutant id="mutant_14380" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="3" />
    <mutant id="mutant_8506" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="leftCost + rightCost" />
    <mutant id="mutant_9834" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="DirCacheEntry.P_SIZE" />
    <mutant id="mutant_13052" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="nameEnd % 16" />
    <mutant id="mutant_14383" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="(srcOffset % 3)" />
    <mutant id="mutant_8505" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="leftCost / rightCost" />
    <mutant id="mutant_9835" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(infoOffset) + (DirCacheEntry.P_SIZE)" to="(infoOffset) % (DirCacheEntry.P_SIZE)" />
    <mutant id="mutant_13051" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="nameEnd" />
    <mutant id="mutant_14382" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 3)" to="srcOffset" />
    <mutant id="mutant_9829" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) % (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_13065" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="c &lt;&lt; 24" />
    <mutant id="mutant_14396" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="(destOffset - 2)" />
    <mutant id="mutant_13064" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) % (c &lt;&lt; 24)" />
    <mutant id="mutant_14395" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="(destOffset * 2)" />
    <mutant id="mutant_9827" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) - (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_13067" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="(buf[startPtr]) + '0'" />
    <mutant id="mutant_14398" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="len" />
    <mutant id="mutant_9828" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="DirCacheEntry.P_SIZE" />
    <mutant id="mutant_13066" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) - (c &lt;&lt; 24)" />
    <mutant id="mutant_14397" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="(destOffset / 2)" />
    <mutant id="mutant_13069" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="(buf[startPtr]) / '0'" />
    <mutant id="mutant_13068" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="buf[startPtr]" />
    <mutant id="mutant_14399" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="4" />
    <mutant id="mutant_9821" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="DirCacheEntry.P_MODE" />
    <mutant id="mutant_9822" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) / (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_14390" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset / 1)" />
    <mutant id="mutant_9820" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) % (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_9825" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) / (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_13061" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) * (c &lt;&lt; 24)" />
    <mutant id="mutant_14392" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="2" />
    <mutant id="mutant_9826" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setLength(int)" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) * (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_13060" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - 16)" to="(nameEnd + 16)" />
    <mutant id="mutant_14391" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset * 1)" />
    <mutant id="mutant_9823" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) * (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_13063" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="(hash &gt;&gt;&gt; 2) / (c &lt;&lt; 24)" />
    <mutant id="mutant_14394" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="(destOffset % 2)" />
    <mutant id="mutant_9824" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="infoOffset" />
    <mutant id="mutant_13062" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(hash &gt;&gt;&gt; 2) + (c &lt;&lt; 24)" to="hash &gt;&gt;&gt; 2" />
    <mutant id="mutant_14393" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 2)" to="destOffset" />
    <mutant id="mutant_13039" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="getValue()" />
    <mutant id="mutant_9818" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_13032" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="(getKey())" />
    <mutant id="mutant_14363" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset - 1)" />
    <mutant id="mutant_15695" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) * 1)" />
    <mutant id="mutant_9819" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setFileMode(org.eclipse.jgit.lib.FileMode)" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) - (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_13031" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="((getKey()) / &quot;: &quot;)" />
    <mutant id="mutant_14362" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="1" />
    <mutant id="mutant_15696" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) % 1)" />
    <mutant id="mutant_9816" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_13034" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="((getKey()) % &quot;: &quot;)" />
    <mutant id="mutant_14365" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset % 1)" />
    <mutant id="mutant_15693" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="(packed.find(prefix))" />
    <mutant id="mutant_9817" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_13033" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="((getKey()) * &quot;: &quot;)" />
    <mutant id="mutant_14364" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="destOffset" />
    <mutant id="mutant_15694" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_13036" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="((getKey()) - &quot;: &quot;)" />
    <mutant id="mutant_14367" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset * 1)" />
    <mutant id="mutant_15699" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="(loose.find(prefix))" />
    <mutant id="mutant_13035" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_14366" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(destOffset + 1)" to="(destOffset / 1)" />
    <mutant id="mutant_13038" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="(getKey()) + &quot;: &quot;" />
    <mutant id="mutant_14369" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="1" />
    <mutant id="mutant_15697" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) - 1)" />
    <mutant id="mutant_13037" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="((getKey()) + &quot;: &quot;) % (getValue())" />
    <mutant id="mutant_14368" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset / 1)" />
    <mutant id="mutant_15698" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) / 1)" />
    <mutant id="mutant_9810" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9811" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9814" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15691" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="((cnt) + 1)" />
    <mutant id="mutant_9815" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_15692" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="cnt" />
    <mutant id="mutant_9812" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_13030" viable="true" in="org.eclipse.jgit.revwalk.FooterLine.getEmailAddress()" from="(gt - 1)" to="gt" />
    <mutant id="mutant_14361" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset * 2)" />
    <mutant id="mutant_9813" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_14360" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="srcOffset" />
    <mutant id="mutant_15690" viable="true" in="org.eclipse.jgit.util.RefList.remove(int)" from="((cnt) - 1)" to="((cnt) / 1)" />
    <mutant id="mutant_9807" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_13043" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="(tv.namePtr)" />
    <mutant id="mutant_14374" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset / 2)" />
    <mutant id="mutant_9808" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_13042" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="((getKey()) + &quot;: &quot;) / (getValue())" />
    <mutant id="mutant_14373" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset % 1)" />
    <mutant id="mutant_9805" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="(((int)((when % 1000))) % 1000000)" />
    <mutant id="mutant_13045" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="(nameEnd + (tv.namePtr))" />
    <mutant id="mutant_14376" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset - 2)" />
    <mutant id="mutant_9806" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="((int)(when % 1000))" />
    <mutant id="mutant_13044" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="(nameEnd / (tv.namePtr))" />
    <mutant id="mutant_14375" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="2" />
    <mutant id="mutant_13047" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="nameEnd" />
    <mutant id="mutant_14378" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="srcOffset" />
    <mutant id="mutant_13046" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="(nameEnd % (tv.namePtr))" />
    <mutant id="mutant_14377" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset % 2)" />
    <mutant id="mutant_9809" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.setAssumeValid(boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_13049" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="nameEnd - 16" to="16" />
    <mutant id="mutant_13048" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.getPathHashCode()" from="(nameEnd - (tv.namePtr))" to="(nameEnd * (tv.namePtr))" />
    <mutant id="mutant_14379" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset * 2)" />
    <mutant id="mutant_9800" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(when / 1000)" />
    <mutant id="mutant_9803" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="1000000" />
    <mutant id="mutant_14370" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset - 1)" />
    <mutant id="mutant_9804" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="(((int)((when % 1000))) - 1000000)" />
    <mutant id="mutant_9801" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="(((int)((when % 1000))) + 1000000)" />
    <mutant id="mutant_13041" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="((getKey()) + &quot;: &quot;) - (getValue())" />
    <mutant id="mutant_14372" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="srcOffset" />
    <mutant id="mutant_9802" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(((int)((when % 1000))) * 1000000)" to="(((int)((when % 1000))) / 1000000)" />
    <mutant id="mutant_13040" viable="false" in="org.eclipse.jgit.revwalk.FooterLine.toString()" from="((getKey()) + &quot;: &quot;) + (getValue())" to="((getKey()) + &quot;: &quot;) * (getValue())" />
    <mutant id="mutant_14371" viable="true" in="org.eclipse.jgit.util.Base64.decode4to3(byte[],int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset * 1)" />
    <mutant id="mutant_9880" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_7220" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) * (src.depth()))" />
    <mutant id="mutant_8551" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="((getDir().getName()) * &quot;/&quot;)" />
    <mutant id="mutant_9883" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_8550" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_9884" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) - 1)" />
    <mutant id="mutant_7222" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((maxDepth) - (src.depth()))" />
    <mutant id="mutant_8553" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="(getDir().getName()) + &quot;/&quot;" />
    <mutant id="mutant_9881" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="pathLen" />
    <mutant id="mutant_7221" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(src.depth())" />
    <mutant id="mutant_8552" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="((getDir().getName()) % &quot;/&quot;)" />
    <mutant id="mutant_9882" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_13098" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_13097" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_13099" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_7213" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) - 11" />
    <mutant id="mutant_8544" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="((Constants.R_HEADS) * (remoteBranchName))" />
    <mutant id="mutant_9876" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) * 1)" />
    <mutant id="mutant_13090" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_7212" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) / 11" />
    <mutant id="mutant_8543" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="((Constants.R_HEADS) - (remoteBranchName))" />
    <mutant id="mutant_9877" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) / 1)" />
    <mutant id="mutant_7215" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) * 11" />
    <mutant id="mutant_8546" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="((Constants.R_HEADS) / (remoteBranchName))" />
    <mutant id="mutant_9874" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) % 1)" />
    <mutant id="mutant_13092" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_7214" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="(insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)" />
    <mutant id="mutant_8545" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="((Constants.R_HEADS) % (remoteBranchName))" />
    <mutant id="mutant_9875" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="pathLen" />
    <mutant id="mutant_13091" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_7217" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) + (src.depth()))" />
    <mutant id="mutant_8548" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="((getDir().getName()) / &quot;/&quot;)" />
    <mutant id="mutant_13094" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_7216" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) / (src.depth()))" />
    <mutant id="mutant_8547" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="(getDir().getName())" />
    <mutant id="mutant_13093" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_7219" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(maxDepth)" />
    <mutant id="mutant_9878" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="((pathLen) - 1)" />
    <mutant id="mutant_13096" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_7218" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) % (src.depth()))" />
    <mutant id="mutant_8549" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;)" to="((getDir().getName()) - &quot;/&quot;)" />
    <mutant id="mutant_9879" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="1" />
    <mutant id="mutant_13095" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_8540" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) - (ConfigConstants.CONFIG_KEY_URL)" />
    <mutant id="mutant_9872" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="(treeStart) * (tree.getEntrySpan())" />
    <mutant id="mutant_9873" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.createEmptyTreeIterator()" from="((pathLen) + 1)" to="1" />
    <mutant id="mutant_7211" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) % 11" />
    <mutant id="mutant_8542" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="Constants.R_HEADS" />
    <mutant id="mutant_9870" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="tree.getEntrySpan()" />
    <mutant id="mutant_7210" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6)) + 11" to="11" />
    <mutant id="mutant_8541" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((Constants.R_HEADS) + (remoteBranchName))" to="remoteBranchName" />
    <mutant id="mutant_9871" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="(treeStart) % (tree.getEntrySpan())" />
    <mutant id="mutant_7209" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="((insz + 63) &gt;&gt; 6)" />
    <mutant id="mutant_7202" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="(insz - 63)" />
    <mutant id="mutant_8533" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="(PullCommand.DOT)" />
    <mutant id="mutant_9865" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="((p.pathLen) / 1)" />
    <mutant id="mutant_7201" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="insz" />
    <mutant id="mutant_8532" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) / (PullCommand.DOT))" />
    <mutant id="mutant_9866" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="((p.pathLen) - 1)" />
    <mutant id="mutant_7204" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="((insz + ((insz + 7) &gt;&gt; 3)) / ((insz + 63) &gt;&gt; 6))" />
    <mutant id="mutant_8535" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) * (ConfigConstants.CONFIG_KEY_URL)" />
    <mutant id="mutant_9863" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="p.pathLen" />
    <mutant id="mutant_7203" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="63" />
    <mutant id="mutant_8534" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) * (PullCommand.DOT))" />
    <mutant id="mutant_9864" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="((p.pathLen) * 1)" />
    <mutant id="mutant_7206" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="((insz + ((insz + 7) &gt;&gt; 3)) - ((insz + 63) &gt;&gt; 6))" />
    <mutant id="mutant_8537" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) % (ConfigConstants.CONFIG_KEY_URL)" />
    <mutant id="mutant_9869" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="(treeStart) - (tree.getEntrySpan())" />
    <mutant id="mutant_7205" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="((insz + ((insz + 7) &gt;&gt; 3)) % ((insz + 63) &gt;&gt; 6))" />
    <mutant id="mutant_8536" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)" />
    <mutant id="mutant_7208" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="((insz + ((insz + 7) &gt;&gt; 3)) * ((insz + 63) &gt;&gt; 6))" />
    <mutant id="mutant_8539" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="ConfigConstants.CONFIG_KEY_URL" />
    <mutant id="mutant_9867" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="treeStart" />
    <mutant id="mutant_7207" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="((insz + ((insz + 7) &gt;&gt; 3)) + ((insz + 63) &gt;&gt; 6))" to="(insz + ((insz + 7) &gt;&gt; 3))" />
    <mutant id="mutant_8538" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) + (ConfigConstants.CONFIG_KEY_URL)" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT)) / (ConfigConstants.CONFIG_KEY_URL)" />
    <mutant id="mutant_9868" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="(treeStart) + (tree.getEntrySpan())" to="(treeStart) / (tree.getEntrySpan())" />
    <mutant id="mutant_9861" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="1" />
    <mutant id="mutant_9862" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator(org.eclipse.jgit.dircache.DirCacheIterator,org.eclipse.jgit.dircache.DirCacheTree)" from="((p.pathLen) + 1)" to="((p.pathLen) % 1)" />
    <mutant id="mutant_7200" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="(insz * 63)" />
    <mutant id="mutant_8531" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) % (PullCommand.DOT))" />
    <mutant id="mutant_8530" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" />
    <mutant id="mutant_9860" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="expLen" />
    <mutant id="mutant_13076" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_8529" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) + (PullCommand.DOT))" to="((((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote)) - (PullCommand.DOT))" />
    <mutant id="mutant_13075" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_13078" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_13077" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_13079" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_8522" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="((ConfigConstants.CONFIG_REMOTE_SECTION) % (PullCommand.DOT))" />
    <mutant id="mutant_9854" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="(actLen - 8)" />
    <mutant id="mutant_8521" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="((ConfigConstants.CONFIG_REMOTE_SECTION) * (PullCommand.DOT))" />
    <mutant id="mutant_9855" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="(expLen * actLen)" />
    <mutant id="mutant_8524" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) * (remote))" />
    <mutant id="mutant_9852" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="8" />
    <mutant id="mutant_13070" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="(buf[startPtr]) % '0'" />
    <mutant id="mutant_8523" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) - (remote))" />
    <mutant id="mutant_9853" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="(actLen * 8)" />
    <mutant id="mutant_8526" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" />
    <mutant id="mutant_9858" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="(expLen / actLen)" />
    <mutant id="mutant_13072" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="'0'" />
    <mutant id="mutant_8525" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) / (remote))" />
    <mutant id="mutant_9859" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="(expLen + actLen)" />
    <mutant id="mutant_13071" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="(buf[startPtr]) - '0'" to="(buf[startPtr]) * '0'" />
    <mutant id="mutant_8528" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) % (remote))" />
    <mutant id="mutant_9856" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="actLen" />
    <mutant id="mutant_13074" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_8527" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="(((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT)) + (remote))" to="(remote)" />
    <mutant id="mutant_9857" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(expLen - actLen)" to="(expLen % actLen)" />
    <mutant id="mutant_13073" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_9850" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="(actLen / 8)" />
    <mutant id="mutant_9851" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="(actLen % 8)" />
    <mutant id="mutant_8520" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="((ConfigConstants.CONFIG_REMOTE_SECTION) - (PullCommand.DOT))" />
    <mutant id="mutant_8519" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="(PullCommand.DOT)" />
    <mutant id="mutant_13087" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_8518" viable="true" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="(ConfigConstants.CONFIG_REMOTE_SECTION)" />
    <mutant id="mutant_13086" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_9849" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="(actLen + 8)" to="actLen" />
    <mutant id="mutant_13089" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_13088" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_8511" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="li * ri" />
    <mutant id="mutant_9843" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="len % pathLen" />
    <mutant id="mutant_8510" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="leftCost - rightCost" to="rightCost" />
    <mutant id="mutant_9844" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="len / pathLen" />
    <mutant id="mutant_8513" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="ri" />
    <mutant id="mutant_9841" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="(base - 4)" />
    <mutant id="mutant_13081" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_8512" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="li + ri" />
    <mutant id="mutant_9842" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.smudgeRacilyClean()" from="(base + 4)" to="base" />
    <mutant id="mutant_13080" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_8515" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="li" />
    <mutant id="mutant_9847" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="pathLen" />
    <mutant id="mutant_13083" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_8514" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="li / ri" />
    <mutant id="mutant_9848" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="len * pathLen" />
    <mutant id="mutant_13082" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_8517" viable="false" in="org.eclipse.jgit.api.PullCommand.call()" from="((ConfigConstants.CONFIG_REMOTE_SECTION) + (PullCommand.DOT))" to="((ConfigConstants.CONFIG_REMOTE_SECTION) / (PullCommand.DOT))" />
    <mutant id="mutant_9845" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="len" />
    <mutant id="mutant_13085" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_8516" viable="true" in="org.eclipse.jgit.api.NameRevCommand.compare(java.lang.String,long,java.lang.String,long)" from="li - ri" to="li % ri" />
    <mutant id="mutant_9846" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.write(java.io.OutputStream)" from="len + pathLen" to="len - pathLen" />
    <mutant id="mutant_13084" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_7260" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="(DeltaIndex.estimateIndexSize(len)) % len" />
    <mutant id="mutant_8591" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="count + 10" />
    <mutant id="mutant_8590" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="count" />
    <mutant id="mutant_7262" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="(DeltaIndex.estimateIndexSize(len)) + len" />
    <mutant id="mutant_8593" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="count * 10" />
    <mutant id="mutant_7261" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="DeltaIndex.estimateIndexSize(len)" />
    <mutant id="mutant_8592" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="count - 10" />
    <mutant id="mutant_7264" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="(idx.getIndexSize()) / (idx.getSourceSize())" />
    <mutant id="mutant_8595" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="&quot;Upstream, based on &quot; / (Repository.shortenRefName(upstreamCommitName))" />
    <mutant id="mutant_7263" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="(DeltaIndex.estimateIndexSize(len)) / len" />
    <mutant id="mutant_8594" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="10" />
    <mutant id="mutant_7266" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="(idx.getIndexSize()) * (idx.getSourceSize())" />
    <mutant id="mutant_8597" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="&quot;Upstream, based on &quot; - (Repository.shortenRefName(upstreamCommitName))" />
    <mutant id="mutant_7265" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="(idx.getIndexSize()) % (idx.getSourceSize())" />
    <mutant id="mutant_8596" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="&quot;Upstream, based on &quot; * (Repository.shortenRefName(upstreamCommitName))" />
    <mutant id="mutant_7257" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="(n * ((maxDepth) - (src.depth()))) % ((maxDepth) - d)" />
    <mutant id="mutant_8588" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="((currSquashMessage.indexOf(&quot;\n&quot;)) / 1)" />
    <mutant id="mutant_7256" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="(n * ((maxDepth) - (src.depth()))) + ((maxDepth) - d)" />
    <mutant id="mutant_8587" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="((currSquashMessage.indexOf(&quot;\n&quot;)) * 1)" />
    <mutant id="mutant_7259" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="len" />
    <mutant id="mutant_7258" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.estimateIndexSize(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(DeltaIndex.estimateIndexSize(len)) - len" to="(DeltaIndex.estimateIndexSize(len)) * len" />
    <mutant id="mutant_8589" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOrdinal(int)" from="count % 10" to="count / 10" />
    <mutant id="mutant_8580" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) * (commit.getName()))" />
    <mutant id="mutant_7251" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="((maxDepth) + d)" />
    <mutant id="mutant_8582" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" />
    <mutant id="mutant_7250" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="((maxDepth) * d)" />
    <mutant id="mutant_8581" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) - (commit.getName()))" />
    <mutant id="mutant_7253" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="(n * ((maxDepth) - (src.depth()))) - ((maxDepth) - d)" />
    <mutant id="mutant_8584" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="((currSquashMessage.indexOf(&quot;\n&quot;)) % 1)" />
    <mutant id="mutant_7252" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="(n * ((maxDepth) - (src.depth()))) * ((maxDepth) - d)" />
    <mutant id="mutant_8583" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="1" />
    <mutant id="mutant_7255" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="n * ((maxDepth) - (src.depth()))" />
    <mutant id="mutant_8586" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="((currSquashMessage.indexOf(&quot;\n&quot;)) - 1)" />
    <mutant id="mutant_7254" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / ((maxDepth) - d)" to="(maxDepth) - d" />
    <mutant id="mutant_8585" viable="true" in="org.eclipse.jgit.api.RebaseCommand.composeSquashMessage(boolean,org.eclipse.jgit.revwalk.RevCommit,java.lang.String,int)" from="((currSquashMessage.indexOf(&quot;\n&quot;)) + 1)" to="currSquashMessage.indexOf(&quot;\n&quot;)" />
    <mutant id="mutant_7246" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="(maxDepth)" />
    <mutant id="mutant_8577" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="commit.getName()" />
    <mutant id="mutant_7245" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n % ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8576" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" />
    <mutant id="mutant_7248" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="d" />
    <mutant id="mutant_8579" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) % (commit.getName()))" />
    <mutant id="mutant_7247" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="((maxDepth) % d)" />
    <mutant id="mutant_8578" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) + (commit.getName()))" to="(((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;) / (commit.getName()))" />
    <mutant id="mutant_7249" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - d)" to="((maxDepth) / d)" />
    <mutant id="mutant_7240" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="((maxDepth) - (src.depth()))" />
    <mutant id="mutant_8571" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="&quot; to &quot;" />
    <mutant id="mutant_8570" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="(&quot;checkout: moving from &quot; % (Repository.shortenRefName(headName)))" />
    <mutant id="mutant_7242" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="n" />
    <mutant id="mutant_8573" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) / &quot; to &quot;)" />
    <mutant id="mutant_7241" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n - ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8572" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) * &quot; to &quot;)" />
    <mutant id="mutant_7244" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n + ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8575" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) - &quot; to &quot;)" />
    <mutant id="mutant_7243" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n / ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8574" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) + &quot; to &quot;)" to="((&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName))) % &quot; to &quot;)" />
    <mutant id="mutant_7235" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) + (src.depth()))" />
    <mutant id="mutant_8566" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="(&quot;checkout: moving from &quot; * (Repository.shortenRefName(headName)))" />
    <mutant id="mutant_9898" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="(pathOffset) / (s.nameLength())" />
    <mutant id="mutant_7234" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) / (src.depth()))" />
    <mutant id="mutant_8565" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="(&quot;checkout: moving from &quot; / (Repository.shortenRefName(headName)))" />
    <mutant id="mutant_9899" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="s.nameLength()" />
    <mutant id="mutant_7237" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(maxDepth)" />
    <mutant id="mutant_8568" viable="false" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="(&quot;checkout: moving from &quot; - (Repository.shortenRefName(headName)))" />
    <mutant id="mutant_9896" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="((nextSubtreePos) % 1)" />
    <mutant id="mutant_7236" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) % (src.depth()))" />
    <mutant id="mutant_8567" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="&quot;checkout: moving from &quot;" />
    <mutant id="mutant_9897" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="(pathOffset) + (s.nameLength())" to="(pathOffset) % (s.nameLength())" />
    <mutant id="mutant_7239" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="(src.depth())" />
    <mutant id="mutant_7238" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((maxDepth) - (src.depth()))" to="((maxDepth) * (src.depth()))" />
    <mutant id="mutant_8569" viable="true" in="org.eclipse.jgit.api.RebaseCommand.checkoutCommit(java.lang.String,org.eclipse.jgit.revwalk.RevCommit)" from="(&quot;checkout: moving from &quot; + (Repository.shortenRefName(headName)))" to="(Repository.shortenRefName(headName))" />
    <mutant id="mutant_9890" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="(currentSubtree.getEntrySpan()) % 1" />
    <mutant id="mutant_9891" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="1" />
    <mutant id="mutant_8560" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="(end * 1)" />
    <mutant id="mutant_7231" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="(n * ((maxDepth) - (src.depth()))) % (maxDepth)" />
    <mutant id="mutant_8562" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="(end % 1)" />
    <mutant id="mutant_9894" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="((nextSubtreePos) / 1)" />
    <mutant id="mutant_7230" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="(n * ((maxDepth) - (src.depth()))) + (maxDepth)" />
    <mutant id="mutant_8561" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="(end / 1)" />
    <mutant id="mutant_9895" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="((nextSubtreePos) * 1)" />
    <mutant id="mutant_7233" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="n * ((maxDepth) - (src.depth()))" />
    <mutant id="mutant_8564" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="end" />
    <mutant id="mutant_9892" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="nextSubtreePos" />
    <mutant id="mutant_7232" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="(n * ((maxDepth) - (src.depth()))) - (maxDepth)" />
    <mutant id="mutant_8563" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="(end - 1)" />
    <mutant id="mutant_9893" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.parseEntry(boolean)" from="((nextSubtreePos) - 1)" to="((nextSubtreePos) + 1)" />
    <mutant id="mutant_7224" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="n" />
    <mutant id="mutant_8555" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="name" />
    <mutant id="mutant_9887" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="currentSubtree.getEntrySpan()" />
    <mutant id="mutant_7223" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n - ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8554" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="((getDir().getName()) + &quot;/&quot;) * name" />
    <mutant id="mutant_9888" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="(currentSubtree.getEntrySpan()) * 1" />
    <mutant id="mutant_7226" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n + ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8557" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="((getDir().getName()) + &quot;/&quot;) / name" />
    <mutant id="mutant_9885" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="(currentSubtree.getEntrySpan()) / 1" />
    <mutant id="mutant_7225" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n / ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8556" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="((getDir().getName()) + &quot;/&quot;) % name" />
    <mutant id="mutant_9886" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="1" />
    <mutant id="mutant_7228" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="maxDepth" />
    <mutant id="mutant_8559" viable="true" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.readFile(java.io.File,java.lang.String)" from="(end + 1)" to="1" />
    <mutant id="mutant_7227" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth())))" to="(n % ((maxDepth) - (src.depth())))" />
    <mutant id="mutant_8558" viable="false" in="org.eclipse.jgit.api.RebaseCommand$RebaseState.getPath(java.lang.String)" from="((getDir().getName()) + &quot;/&quot;) + name" to="((getDir().getName()) + &quot;/&quot;) - name" />
    <mutant id="mutant_9889" viable="true" in="org.eclipse.jgit.dircache.DirCacheIterator.back(int)" from="(currentSubtree.getEntrySpan()) - 1" to="(currentSubtree.getEntrySpan()) + 1" />
    <mutant id="mutant_7229" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deltaSizeLimit(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(n * ((maxDepth) - (src.depth()))) / (maxDepth)" to="(n * ((maxDepth) - (src.depth()))) * (maxDepth)" />
    <mutant id="mutant_7293" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="split * 1" />
    <mutant id="mutant_7292" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="split + 1" />
    <mutant id="mutant_7295" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="1" />
    <mutant id="mutant_7294" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_7297" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_7296" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_7299" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_7298" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(p + 1)" to="p" />
    <mutant id="mutant_7291" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="split / 1" />
    <mutant id="mutant_7290" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="1" />
    <mutant id="mutant_7289" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="split" />
    <mutant id="mutant_7282" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="split % 1" />
    <mutant id="mutant_7281" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="e" />
    <mutant id="mutant_7284" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="1" />
    <mutant id="mutant_7283" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="split" />
    <mutant id="mutant_7286" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="split / 1" />
    <mutant id="mutant_7285" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="split - 1" />
    <mutant id="mutant_7288" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split - 1" to="split % 1" />
    <mutant id="mutant_7287" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="split + 1" to="split * 1" />
    <mutant id="mutant_7280" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="e / halfRemaining" />
    <mutant id="mutant_7279" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="e % halfRemaining" />
    <mutant id="mutant_7278" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="e + halfRemaining" />
    <mutant id="mutant_7271" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="(e % (cur))" />
    <mutant id="mutant_7270" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="(e * (cur))" />
    <mutant id="mutant_7273" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="(cur)" />
    <mutant id="mutant_7272" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="(e / (cur))" />
    <mutant id="mutant_7275" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="e" />
    <mutant id="mutant_7274" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="(e - (cur))" to="(e + (cur))" />
    <mutant id="mutant_7277" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="e * halfRemaining" />
    <mutant id="mutant_7276" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.remaining()" from="e - halfRemaining" to="halfRemaining" />
    <mutant id="mutant_7268" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="(idx.getIndexSize()) + (idx.getSourceSize())" />
    <mutant id="mutant_8599" viable="true" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="Repository.shortenRefName(upstreamCommitName)" />
    <mutant id="mutant_7267" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="idx.getSourceSize()" />
    <mutant id="mutant_8598" viable="false" in="org.eclipse.jgit.api.RebaseCommand.getOurCommitName()" from="&quot;Upstream, based on &quot; + (Repository.shortenRefName(upstreamCommitName))" to="&quot;Upstream, based on &quot; % (Repository.shortenRefName(upstreamCommitName))" />
    <mutant id="mutant_7269" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.index(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="(idx.getIndexSize()) - (idx.getSourceSize())" to="idx.getIndexSize()" />
    <mutant id="mutant_15604" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="((size) / (idx + 1))" />
    <mutant id="mutant_15605" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="(idx + 1)" />
    <mutant id="mutant_15602" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_15603" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="((size) * (idx + 1))" />
    <mutant id="mutant_15608" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="size" />
    <mutant id="mutant_15609" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_15606" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="((size) % (idx + 1))" />
    <mutant id="mutant_15607" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="((size) - (idx + 1))" to="((size) + (idx + 1))" />
    <mutant id="mutant_15600" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_15601" viable="true" in="org.eclipse.jgit.util.RefList$Builder.remove(int)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_14305" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="&quot;abcdefghijklmnopqrstuvwxyz&quot;" />
    <mutant id="mutant_15637" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="(cnt) / 1" />
    <mutant id="mutant_14304" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="(&quot;abcdefghijklmnopqrstuvwxyz&quot; - (&quot;0123456789&quot; + &quot;+/&quot;))" />
    <mutant id="mutant_15638" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="cnt" />
    <mutant id="mutant_14307" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="(&quot;abcdefghijklmnopqrstuvwxyz&quot; / (&quot;0123456789&quot; + &quot;+/&quot;))" />
    <mutant id="mutant_15635" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="(cnt) % 1" />
    <mutant id="mutant_14306" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="(&quot;abcdefghijklmnopqrstuvwxyz&quot; * (&quot;0123456789&quot; + &quot;+/&quot;))" />
    <mutant id="mutant_15636" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="(cnt) * 1" />
    <mutant id="mutant_14309" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; - (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" />
    <mutant id="mutant_14308" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; / (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" />
    <mutant id="mutant_15639" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="1" />
    <mutant id="mutant_15630" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_14301" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="(&quot;0123456789&quot; % &quot;+/&quot;)" />
    <mutant id="mutant_15633" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="1" />
    <mutant id="mutant_14300" viable="false" in="?" from="(&quot;0123456789&quot; + &quot;+/&quot;)" to="(&quot;0123456789&quot; - &quot;+/&quot;)" />
    <mutant id="mutant_15634" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(cnt) + 1" to="(cnt) - 1" />
    <mutant id="mutant_14303" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="(&quot;0123456789&quot; + &quot;+/&quot;)" />
    <mutant id="mutant_15631" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_14302" viable="false" in="?" from="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" to="(&quot;abcdefghijklmnopqrstuvwxyz&quot; % (&quot;0123456789&quot; + &quot;+/&quot;))" />
    <mutant id="mutant_15632" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_14316" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="(len - 3)" />
    <mutant id="mutant_15648" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="idx" />
    <mutant id="mutant_14315" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="3" />
    <mutant id="mutant_15649" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="((cnt) / idx)" />
    <mutant id="mutant_14318" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="(len / 3)" />
    <mutant id="mutant_15646" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="((cnt) + idx)" />
    <mutant id="mutant_14317" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="(len % 3)" />
    <mutant id="mutant_15647" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="((cnt) % idx)" />
    <mutant id="mutant_14319" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="(len + 3)" />
    <mutant id="mutant_15640" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_15641" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_14310" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;" />
    <mutant id="mutant_14312" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; * (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" />
    <mutant id="mutant_15644" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_14311" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; % (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" />
    <mutant id="mutant_15645" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="((cnt) - idx)" to="((cnt) * idx)" />
    <mutant id="mutant_14314" viable="true" in="org.eclipse.jgit.util.Base64.decode(byte[],int,int)" from="(len * 3)" to="len" />
    <mutant id="mutant_15642" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_14313" viable="false" in="?" from="(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + (&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;)))" to="(&quot;abcdefghijklmnopqrstuvwxyz&quot; + (&quot;0123456789&quot; + &quot;+/&quot;))" />
    <mutant id="mutant_15643" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_15615" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="mid" />
    <mutant id="mutant_15616" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="1" />
    <mutant id="mutant_15613" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="high" />
    <mutant id="mutant_15614" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_15619" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_15617" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_15618" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_15611" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_15612" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_15610" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + high)" to="low" />
    <mutant id="mutant_15626" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_15627" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="1" />
    <mutant id="mutant_15624" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_15625" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_15628" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_15629" viable="true" in="org.eclipse.jgit.util.RefList.add(int,T)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_15622" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_15623" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="low" />
    <mutant id="mutant_15620" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_15621" viable="true" in="org.eclipse.jgit.util.RefList.find(java.lang.String)" from="(low + 1)" to="1" />
    <mutant id="mutant_13139" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="ptr - nameLen" />
    <mutant id="mutant_13138" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="nameEnd * namePtr" />
    <mutant id="mutant_14469" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset / 2)" />
    <mutant id="mutant_13131" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="recEndPtr / ((ObjectWalk.ID_SZ) + 1)" />
    <mutant id="mutant_14462" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset / 1)" />
    <mutant id="mutant_15794" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="(unit % 2)" />
    <mutant id="mutant_13130" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="(ObjectWalk.ID_SZ) + 1" />
    <mutant id="mutant_14461" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset % 1)" />
    <mutant id="mutant_15795" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="(n / (unit / 2))" />
    <mutant id="mutant_13133" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="nameEnd + namePtr" />
    <mutant id="mutant_14464" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="2" />
    <mutant id="mutant_15792" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="(unit - 2)" />
    <mutant id="mutant_13132" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="recEndPtr + ((ObjectWalk.ID_SZ) + 1)" />
    <mutant id="mutant_14463" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset * 1)" />
    <mutant id="mutant_15793" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="(unit + 2)" />
    <mutant id="mutant_13135" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="nameEnd / namePtr" />
    <mutant id="mutant_14466" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset % 2)" />
    <mutant id="mutant_15798" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="(n - (unit / 2))" />
    <mutant id="mutant_13134" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="namePtr" />
    <mutant id="mutant_14465" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="destOffset" />
    <mutant id="mutant_15799" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="(unit / 2)" />
    <mutant id="mutant_13137" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="nameEnd" />
    <mutant id="mutant_14468" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset - 2)" />
    <mutant id="mutant_15796" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="(n % (unit / 2))" />
    <mutant id="mutant_13136" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="nameEnd - namePtr" to="nameEnd % namePtr" />
    <mutant id="mutant_14467" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset * 2)" />
    <mutant id="mutant_15797" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(n + (unit / 2))" to="n" />
    <mutant id="mutant_15790" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="2" />
    <mutant id="mutant_15791" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="unit" />
    <mutant id="mutant_14460" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="destOffset" />
    <mutant id="mutant_13149" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_13142" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="ptr % nameLen" />
    <mutant id="mutant_14473" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset % 3)" />
    <mutant id="mutant_13141" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="ptr / nameLen" />
    <mutant id="mutant_14472" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="destOffset" />
    <mutant id="mutant_13144" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="nameLen" />
    <mutant id="mutant_14475" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset * 3)" />
    <mutant id="mutant_13143" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="ptr" />
    <mutant id="mutant_14474" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset - 3)" />
    <mutant id="mutant_13146" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c" />
    <mutant id="mutant_14477" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset - 1)" />
    <mutant id="mutant_13145" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_14476" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="1" />
    <mutant id="mutant_13148" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_14479" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset % 1)" />
    <mutant id="mutant_13147" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_14478" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="destOffset" />
    <mutant id="mutant_13140" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.updatePathBuf(org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="ptr + nameLen" to="ptr * nameLen" />
    <mutant id="mutant_14471" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="3" />
    <mutant id="mutant_14470" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset / 3)" />
    <mutant id="mutant_13117" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="startPtr * 1" />
    <mutant id="mutant_14448" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset - 2)" />
    <mutant id="mutant_13116" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="startPtr % 1" />
    <mutant id="mutant_14447" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="2" />
    <mutant id="mutant_13119" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="startPtr / 1" />
    <mutant id="mutant_15778" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="RelativeDateFormatter.YEAR_IN_MILLIS" />
    <mutant id="mutant_13118" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="startPtr - 1" />
    <mutant id="mutant_14449" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset % 2)" />
    <mutant id="mutant_15779" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="ageMillis + (RelativeDateFormatter.YEAR_IN_MILLIS)" />
    <mutant id="mutant_14440" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="(len * d)" />
    <mutant id="mutant_15772" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="5" />
    <mutant id="mutant_15773" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(5 % (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13111" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_14442" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="len" />
    <mutant id="mutant_15770" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="10" />
    <mutant id="mutant_13110" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_14441" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="(len % d)" />
    <mutant id="mutant_15771" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(5 / (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13113" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_14444" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="(len / d)" />
    <mutant id="mutant_15776" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(5 + (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13112" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_14443" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="(len + d)" />
    <mutant id="mutant_15777" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="ageMillis" />
    <mutant id="mutant_13115" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="1" />
    <mutant id="mutant_14446" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset / 2)" />
    <mutant id="mutant_15774" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(RelativeDateFormatter.YEAR_IN_MILLIS)" />
    <mutant id="mutant_13114" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_14445" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len - d)" to="d" />
    <mutant id="mutant_15775" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(5 * (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(5 - (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13128" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="recEndPtr * ((ObjectWalk.ID_SZ) + 1)" />
    <mutant id="mutant_14459" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset - 1)" />
    <mutant id="mutant_13127" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="recEndPtr % ((ObjectWalk.ID_SZ) + 1)" />
    <mutant id="mutant_14458" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="1" />
    <mutant id="mutant_15789" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.round(long,long)" from="(unit / 2)" to="(unit * 2)" />
    <mutant id="mutant_13129" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="recEndPtr - ((ObjectWalk.ID_SZ) + 1)" to="recEndPtr" />
    <mutant id="mutant_13120" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="startPtr + 1" to="startPtr" />
    <mutant id="mutant_14451" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="(srcOffset * 2)" />
    <mutant id="mutant_15783" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="ageMillis" />
    <mutant id="mutant_14450" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 2)" to="srcOffset" />
    <mutant id="mutant_15784" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13122" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="1" />
    <mutant id="mutant_14453" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="1" />
    <mutant id="mutant_15781" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="ageMillis - (RelativeDateFormatter.YEAR_IN_MILLIS)" />
    <mutant id="mutant_13121" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="(ObjectWalk.ID_SZ)" />
    <mutant id="mutant_14452" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset / 1)" />
    <mutant id="mutant_15782" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="ageMillis * (RelativeDateFormatter.YEAR_IN_MILLIS)" />
    <mutant id="mutant_13124" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="((ObjectWalk.ID_SZ) % 1)" />
    <mutant id="mutant_14455" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset * 1)" />
    <mutant id="mutant_15787" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(ageMillis - (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13123" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="((ObjectWalk.ID_SZ) - 1)" />
    <mutant id="mutant_14454" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset - 1)" />
    <mutant id="mutant_15788" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(ageMillis * (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_13126" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="((ObjectWalk.ID_SZ) * 1)" />
    <mutant id="mutant_14457" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="(srcOffset % 1)" />
    <mutant id="mutant_15785" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="RelativeDateFormatter.YEAR_IN_MILLIS" />
    <mutant id="mutant_13125" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="((ObjectWalk.ID_SZ) + 1)" to="((ObjectWalk.ID_SZ) / 1)" />
    <mutant id="mutant_14456" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(srcOffset + 1)" to="srcOffset" />
    <mutant id="mutant_15786" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS))" to="(ageMillis + (RelativeDateFormatter.YEAR_IN_MILLIS))" />
    <mutant id="mutant_15780" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="ageMillis / (RelativeDateFormatter.YEAR_IN_MILLIS)" to="ageMillis % (RelativeDateFormatter.YEAR_IN_MILLIS)" />
    <mutant id="mutant_9719" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) / (getPathString()))" />
    <mutant id="mutant_13175" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="1" />
    <mutant id="mutant_13174" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="ptr" />
    <mutant id="mutant_9717" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="(getPathString())" />
    <mutant id="mutant_13177" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="keyEnd - 1" />
    <mutant id="mutant_9718" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) - (getPathString()))" />
    <mutant id="mutant_13176" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="keyEnd / 1" />
    <mutant id="mutant_13179" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="keyEnd" />
    <mutant id="mutant_13178" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="keyEnd * 1" />
    <mutant id="mutant_9711" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) / &quot; &quot;)" />
    <mutant id="mutant_9712" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" />
    <mutant id="mutant_9710" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" />
    <mutant id="mutant_9715" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) * &quot; &quot;)" />
    <mutant id="mutant_13171" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="2" />
    <mutant id="mutant_9716" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) - &quot; &quot;)" />
    <mutant id="mutant_13170" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="ptr * 2" />
    <mutant id="mutant_9713" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_13173" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="ptr / 2" />
    <mutant id="mutant_9714" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) % &quot; &quot;)" />
    <mutant id="mutant_13172" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="ptr % 2" />
    <mutant id="mutant_9708" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) / (getStage()))" />
    <mutant id="mutant_13186" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="(valEnd / 1)" />
    <mutant id="mutant_9709" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="(getStage())" />
    <mutant id="mutant_13185" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="(valEnd + 1)" />
    <mutant id="mutant_9706" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) - (getStage()))" />
    <mutant id="mutant_13188" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="(depth * 1)" />
    <mutant id="mutant_9707" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) * (getStage()))" />
    <mutant id="mutant_13187" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="1" />
    <mutant id="mutant_13189" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="depth" />
    <mutant id="mutant_9700" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9701" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) * &quot; &quot;)" />
    <mutant id="mutant_13180" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="keyEnd + 1" to="keyEnd % 1" />
    <mutant id="mutant_9704" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) - &quot; &quot;)" />
    <mutant id="mutant_13182" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="(valEnd * 1)" />
    <mutant id="mutant_9705" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage()))" to="(((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) % (getStage()))" />
    <mutant id="mutant_13181" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="valEnd" />
    <mutant id="mutant_9702" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) % &quot; &quot;)" />
    <mutant id="mutant_13184" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="(valEnd % 1)" />
    <mutant id="mutant_9703" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" />
    <mutant id="mutant_13183" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(valEnd - 1)" to="1" />
    <mutant id="mutant_13153" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_14484" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset % 2)" />
    <mutant id="mutant_13152" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c" />
    <mutant id="mutant_14483" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="destOffset" />
    <mutant id="mutant_13155" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_14486" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset - 2)" />
    <mutant id="mutant_13154" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_14485" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset * 2)" />
    <mutant id="mutant_13157" viable="false" in="?" from="5 + 1" to="1" />
    <mutant id="mutant_14488" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset / 3)" />
    <mutant id="mutant_13156" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="'0'" />
    <mutant id="mutant_14487" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="(destOffset / 2)" />
    <mutant id="mutant_13159" viable="false" in="?" from="5 + 1" to="5 % 1" />
    <mutant id="mutant_13158" viable="false" in="?" from="5 + 1" to="5" />
    <mutant id="mutant_14489" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="3" />
    <mutant id="mutant_14480" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset / 1)" />
    <mutant id="mutant_13151" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_14482" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 2)" to="2" />
    <mutant id="mutant_13150" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.markTreeUninteresting(org.eclipse.jgit.revwalk.RevTree)" from="c - '0'" to="'0'" />
    <mutant id="mutant_14481" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset * 1)" />
    <mutant id="mutant_13164" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="1" />
    <mutant id="mutant_14495" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset - 1)" />
    <mutant id="mutant_13163" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="(raw.length) / 1" />
    <mutant id="mutant_14494" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="1" />
    <mutant id="mutant_13166" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="(raw.length) * 1" />
    <mutant id="mutant_14497" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset % 1)" />
    <mutant id="mutant_13165" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="(raw.length) % 1" />
    <mutant id="mutant_14496" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="destOffset" />
    <mutant id="mutant_13168" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="raw.length" />
    <mutant id="mutant_14499" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset * 1)" />
    <mutant id="mutant_13167" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="(raw.length) - 1" to="(raw.length) + 1" />
    <mutant id="mutant_14498" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 1)" to="(destOffset / 1)" />
    <mutant id="mutant_13169" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.getFooterLines()" from="ptr + 2" to="ptr - 2" />
    <mutant id="mutant_13160" viable="false" in="?" from="5 + 1" to="5 * 1" />
    <mutant id="mutant_14491" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset % 3)" />
    <mutant id="mutant_14490" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="destOffset" />
    <mutant id="mutant_13162" viable="false" in="?" from="5 + 1" to="5 / 1" />
    <mutant id="mutant_14493" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset * 3)" />
    <mutant id="mutant_13161" viable="false" in="?" from="5 + 1" to="5 - 1" />
    <mutant id="mutant_14492" viable="true" in="org.eclipse.jgit.util.Base64.encode3to4(byte[],int,int,byte[],int)" from="(destOffset + 3)" to="(destOffset - 3)" />
    <mutant id="mutant_8430" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) % &quot;^{tree}&quot;)" />
    <mutant id="mutant_9762" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9763" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7101" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="DeltaIndex.BLKSZ" />
    <mutant id="mutant_8432" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) - &quot;^{tree}&quot;)" />
    <mutant id="mutant_9760" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7100" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="end + (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8431" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="&quot;^{tree}&quot;" />
    <mutant id="mutant_9761" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_8423" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="(o1.depth) * (o2.depth)" />
    <mutant id="mutant_9755" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="(1000L * sec) / ms" />
    <mutant id="mutant_8422" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) - (name))" />
    <mutant id="mutant_9756" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="(1000L * sec) % ms" />
    <mutant id="mutant_8425" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="(o1.depth) / (o2.depth)" />
    <mutant id="mutant_9753" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="1000L * sec" />
    <mutant id="mutant_8424" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="o1.depth" />
    <mutant id="mutant_9754" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="(1000L * sec) * ms" />
    <mutant id="mutant_8427" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="(o1.depth) % (o2.depth)" />
    <mutant id="mutant_9759" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8426" viable="true" in="org.eclipse.jgit.api.DescribeCommand$1.compare(Candidate,Candidate)" from="(o1.depth) - (o2.depth)" to="(o1.depth) + (o2.depth)" />
    <mutant id="mutant_8429" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) / &quot;^{tree}&quot;)" />
    <mutant id="mutant_9757" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="ms" />
    <mutant id="mutant_8428" viable="true" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_9758" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec) + ms" to="(1000L * sec) - ms" />
    <mutant id="mutant_9751" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="(1000L - sec)" />
    <mutant id="mutant_9752" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="(1000L % sec)" />
    <mutant id="mutant_8421" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) % (name))" />
    <mutant id="mutant_8420" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) * (name))" />
    <mutant id="mutant_9750" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="(1000L / sec)" />
    <mutant id="mutant_8419" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="Constants.R_HEADS" />
    <mutant id="mutant_8412" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="((Constants.R_HEADS) % branchName)" />
    <mutant id="mutant_9744" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="(NB.decodeInt32(info, (base + 4))) % 1000000" />
    <mutant id="mutant_8411" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="((Constants.R_HEADS) - branchName)" />
    <mutant id="mutant_9745" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="(NB.decodeInt32(info, (base + 4))) - 1000000" />
    <mutant id="mutant_8414" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="((Constants.R_HEADS) * branchName)" />
    <mutant id="mutant_9742" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="NB.decodeInt32(info, (base + 4))" />
    <mutant id="mutant_8413" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="Constants.R_HEADS" />
    <mutant id="mutant_9743" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="1000000" />
    <mutant id="mutant_8416" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="((Constants.R_HEADS) / branchName)" />
    <mutant id="mutant_9748" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="1000L" />
    <mutant id="mutant_8415" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + branchName)" to="branchName" />
    <mutant id="mutant_9749" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="sec" />
    <mutant id="mutant_8418" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="name" />
    <mutant id="mutant_9746" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="(NB.decodeInt32(info, (base + 4))) + 1000000" />
    <mutant id="mutant_8417" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) / (name))" />
    <mutant id="mutant_9747" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(1000L * sec)" to="(1000L + sec)" />
    <mutant id="mutant_9740" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="base" />
    <mutant id="mutant_9741" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(NB.decodeInt32(info, (base + 4))) / 1000000" to="(NB.decodeInt32(info, (base + 4))) * 1000000" />
    <mutant id="mutant_8410" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) - (name))" />
    <mutant id="mutant_8409" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) % (name))" />
    <mutant id="mutant_13197" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_8408" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) * (name))" />
    <mutant id="mutant_13196" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_9739" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="(base - 4)" />
    <mutant id="mutant_13199" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.parseCanonical(org.eclipse.jgit.revwalk.RevWalk,byte[])" from="(ptr + 7)" to="(ptr / 7)" />
    <mutant id="mutant_13198" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_8401" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="&quot;branch: Created from tag &quot; * startPointFullName" />
    <mutant id="mutant_9733" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="infoOffset" />
    <mutant id="mutant_8400" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="&quot;branch: Created from tag &quot; % startPointFullName" />
    <mutant id="mutant_9734" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="pIdx" />
    <mutant id="mutant_8403" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="&quot;branch: Created from tag &quot; / startPointFullName" />
    <mutant id="mutant_9731" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="(infoOffset) * pIdx" />
    <mutant id="mutant_13191" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="(depth % 1)" />
    <mutant id="mutant_8402" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="&quot;branch: Created from tag &quot;" />
    <mutant id="mutant_9732" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="(infoOffset) - pIdx" />
    <mutant id="mutant_13190" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="(depth / 1)" />
    <mutant id="mutant_8405" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) / (name))" />
    <mutant id="mutant_9737" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="(base * 4)" />
    <mutant id="mutant_13193" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_8404" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="startPointFullName" />
    <mutant id="mutant_9738" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="(base / 4)" />
    <mutant id="mutant_13192" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(depth + 1)" to="(depth - 1)" />
    <mutant id="mutant_8407" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="Constants.R_HEADS" />
    <mutant id="mutant_9735" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="(base % 4)" />
    <mutant id="mutant_13195" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="i" />
    <mutant id="mutant_8406" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="((Constants.R_HEADS) + (name))" to="name" />
    <mutant id="mutant_9736" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(base + 4)" to="4" />
    <mutant id="mutant_13194" viable="true" in="org.eclipse.jgit.revwalk.RevCommit.carryFlags1(org.eclipse.jgit.revwalk.RevCommit,int,int)" from="(i + 1)" to="1" />
    <mutant id="mutant_9730" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="(infoOffset) % pIdx" />
    <mutant id="mutant_9728" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="&quot;\n&quot;" />
    <mutant id="mutant_9729" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.decodeTS(int)" from="(infoOffset) + pIdx" to="(infoOffset) / pIdx" />
    <mutant id="mutant_9722" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) * (getPathString()))" />
    <mutant id="mutant_9723" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) * &quot;\n&quot;" />
    <mutant id="mutant_9720" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) % (getPathString()))" />
    <mutant id="mutant_9721" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString()))" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;)" />
    <mutant id="mutant_9726" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())" />
    <mutant id="mutant_9727" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) - &quot;\n&quot;" />
    <mutant id="mutant_9724" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) % &quot;\n&quot;" />
    <mutant id="mutant_9725" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) + &quot;\n&quot;" to="(((((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;) + (getStage())) + &quot; &quot;) + (getPathString())) / &quot;\n&quot;" />
    <mutant id="mutant_8470" viable="false" in="?" from="(60 * 60)" to="(60 / 60)" />
    <mutant id="mutant_7141" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_8472" viable="false" in="?" from="(60 * 60)" to="60" />
    <mutant id="mutant_7140" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="threads" />
    <mutant id="mutant_8471" viable="false" in="?" from="(60 * 60)" to="(60 % 60)" />
    <mutant id="mutant_7143" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="1" />
    <mutant id="mutant_8474" viable="false" in="?" from="(60 * 60)" to="(60 - 60)" />
    <mutant id="mutant_7142" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_8473" viable="false" in="?" from="(60 * 60)" to="(60 + 60)" />
    <mutant id="mutant_7145" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_8476" viable="false" in="?" from="(60 * 60) * 24" to="24" />
    <mutant id="mutant_7144" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="i" />
    <mutant id="mutant_8475" viable="false" in="?" from="(60 * 60) * 24" to="(60 * 60) / 24" />
    <mutant id="mutant_7136" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="((totalWeight) * (threads))" />
    <mutant id="mutant_8467" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="(mergedCommits.length) * 1" />
    <mutant id="mutant_9799" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="1000" />
    <mutant id="mutant_7135" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="((totalWeight) % (threads))" />
    <mutant id="mutant_8466" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="(mergedCommits.length) % 1" />
    <mutant id="mutant_7138" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="((totalWeight) + (threads))" />
    <mutant id="mutant_8469" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="mergedCommits.length" />
    <mutant id="mutant_9797" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="when" />
    <mutant id="mutant_7137" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="totalWeight" />
    <mutant id="mutant_8468" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="(mergedCommits.length) - 1" />
    <mutant id="mutant_9798" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(when * 1000)" />
    <mutant id="mutant_7139" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="((totalWeight) / (threads))" to="((totalWeight) - (threads))" />
    <mutant id="mutant_9791" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="(base * 4)" />
    <mutant id="mutant_9792" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="(base / 4)" />
    <mutant id="mutant_7130" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="(bytesPerUnit)" />
    <mutant id="mutant_8461" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="&quot;, &quot; * (description)" />
    <mutant id="mutant_8460" viable="true" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="description" />
    <mutant id="mutant_9790" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="4" />
    <mutant id="mutant_7132" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="((totalWeight) * (bytesPerUnit))" />
    <mutant id="mutant_8463" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="&quot;, &quot; - (description)" />
    <mutant id="mutant_9795" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(when + 1000)" />
    <mutant id="mutant_7131" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="((totalWeight) - (bytesPerUnit))" />
    <mutant id="mutant_8462" viable="true" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="&quot;, &quot;" />
    <mutant id="mutant_9796" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)((when % 1000)))" to="(when - 1000)" />
    <mutant id="mutant_7134" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="((totalWeight) % (bytesPerUnit))" />
    <mutant id="mutant_8465" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="1" />
    <mutant id="mutant_9793" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="(base - 4)" />
    <mutant id="mutant_7133" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="((totalWeight) + (bytesPerUnit))" />
    <mutant id="mutant_8464" viable="true" in="org.eclipse.jgit.api.MergeResult.addConflict(java.lang.String,org.eclipse.jgit.merge.MergeResult)" from="(mergedCommits.length) + 1" to="(mergedCommits.length) / 1" />
    <mutant id="mutant_9794" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="base" />
    <mutant id="mutant_7125" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="(a.slice.beginIndex) % (b.slice.beginIndex)" />
    <mutant id="mutant_8456" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="(&quot;: &quot; * (MergeResult.MergeStatus.FAST_FORWARD))" />
    <mutant id="mutant_9788" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(when % 1000)" />
    <mutant id="mutant_7124" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="(a.slice.beginIndex) / (b.slice.beginIndex)" />
    <mutant id="mutant_8455" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="(&quot;: &quot; % (MergeResult.MergeStatus.FAST_FORWARD))" />
    <mutant id="mutant_9789" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(base + 4)" to="(base % 4)" />
    <mutant id="mutant_7127" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="(a.slice.beginIndex) * (b.slice.beginIndex)" />
    <mutant id="mutant_8458" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="&quot;, &quot; / (description)" />
    <mutant id="mutant_9786" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(when * 1000)" />
    <mutant id="mutant_7126" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="a.slice.beginIndex" />
    <mutant id="mutant_8457" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="(&quot;: &quot; / (MergeResult.MergeStatus.FAST_FORWARD))" />
    <mutant id="mutant_9787" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="1000" />
    <mutant id="mutant_7129" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="((totalWeight) / (bytesPerUnit))" to="(totalWeight)" />
    <mutant id="mutant_7128" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block$1.compare(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath,org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(a.slice.beginIndex) - (b.slice.beginIndex)" to="(a.slice.beginIndex) + (b.slice.beginIndex)" />
    <mutant id="mutant_8459" viable="false" in="org.eclipse.jgit.api.MergeResult.toString()" from="&quot;, &quot; + (description)" to="&quot;, &quot; % (description)" />
    <mutant id="mutant_9780" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="(infoOffset) - pIdx" />
    <mutant id="mutant_9781" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="infoOffset" />
    <mutant id="mutant_8450" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="&quot;--&quot; - (name().toLowerCase().replace('_', '-'))" />
    <mutant id="mutant_7121" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="cp / 1" />
    <mutant id="mutant_8452" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="MergeResult.MergeStatus.FAST_FORWARD" />
    <mutant id="mutant_9784" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(when - 1000)" />
    <mutant id="mutant_7120" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="cp - 1" />
    <mutant id="mutant_8451" viable="true" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="name().toLowerCase().replace('_', '-')" />
    <mutant id="mutant_9785" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="when" />
    <mutant id="mutant_7123" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="cp" />
    <mutant id="mutant_8454" viable="false" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="(&quot;: &quot; - (MergeResult.MergeStatus.FAST_FORWARD))" />
    <mutant id="mutant_9782" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="pIdx" />
    <mutant id="mutant_7122" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="cp * 1" />
    <mutant id="mutant_8453" viable="true" in="org.eclipse.jgit.api.MergeCommand.call()" from="(&quot;: &quot; + (MergeResult.MergeStatus.FAST_FORWARD))" to="&quot;: &quot;" />
    <mutant id="mutant_9783" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="((int)(when / 1000))" to="(when + 1000)" />
    <mutant id="mutant_7114" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="((totalWeight) - (bytesPerUnit))" />
    <mutant id="mutant_8445" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="(&quot;Git[&quot; + (repo)) - &quot;]&quot;" />
    <mutant id="mutant_9777" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="(infoOffset) / pIdx" />
    <mutant id="mutant_7113" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="(bytesPerUnit)" />
    <mutant id="mutant_8444" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="(&quot;Git[&quot; + (repo)) / &quot;]&quot;" />
    <mutant id="mutant_9778" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="(infoOffset) % pIdx" />
    <mutant id="mutant_7116" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="((totalWeight) + (bytesPerUnit))" />
    <mutant id="mutant_8447" viable="true" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="&quot;--&quot;" />
    <mutant id="mutant_9775" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7115" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="((totalWeight) * (bytesPerUnit))" />
    <mutant id="mutant_8446" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="&quot;--&quot; * (name().toLowerCase().replace('_', '-'))" />
    <mutant id="mutant_9776" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_7118" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="1" />
    <mutant id="mutant_8449" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="&quot;--&quot; % (name().toLowerCase().replace('_', '-'))" />
    <mutant id="mutant_7117" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="((totalWeight) / (bytesPerUnit))" />
    <mutant id="mutant_8448" viable="false" in="org.eclipse.jgit.api.MergeCommand$FastForwardMode.toConfigValue()" from="&quot;--&quot; + (name().toLowerCase().replace('_', '-'))" to="&quot;--&quot; / (name().toLowerCase().replace('_', '-'))" />
    <mutant id="mutant_9779" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.encodeTS(int,long)" from="(infoOffset) + pIdx" to="(infoOffset) * pIdx" />
    <mutant id="mutant_7119" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.computeTopPaths()" from="cp + 1" to="cp % 1" />
    <mutant id="mutant_9770" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="src.infoOffset" />
    <mutant id="mutant_7110" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="(totalWeight) + (bytesPerUnit)" />
    <mutant id="mutant_8441" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="(&quot;Git[&quot; + (repo)) % &quot;]&quot;" />
    <mutant id="mutant_9773" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_8440" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="(&quot;Git[&quot; + (repo)) * &quot;]&quot;" />
    <mutant id="mutant_9774" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7112" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((totalWeight) % (bytesPerUnit))" to="(totalWeight)" />
    <mutant id="mutant_8443" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="&quot;Git[&quot; + (repo)" />
    <mutant id="mutant_9771" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7111" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="(totalWeight) % (bytesPerUnit)" />
    <mutant id="mutant_8442" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_9772" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7103" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="end % (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8434" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="(&quot;Git[&quot; / (repo))" />
    <mutant id="mutant_9766" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="((src.infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7102" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="end / (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8433" viable="false" in="org.eclipse.jgit.api.DiffCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) * &quot;^{tree}&quot;)" />
    <mutant id="mutant_9767" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_7105" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="end * (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8436" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="&quot;Git[&quot;" />
    <mutant id="mutant_9764" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_7104" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.scan(byte[],int)" from="end - (DeltaIndex.BLKSZ)" to="end" />
    <mutant id="mutant_8435" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="(&quot;Git[&quot; % (repo))" />
    <mutant id="mutant_9765" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="((src.infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7107" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="bytesPerUnit" />
    <mutant id="mutant_8438" viable="true" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="(repo)" />
    <mutant id="mutant_7106" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="totalWeight" />
    <mutant id="mutant_8437" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="(&quot;Git[&quot; * (repo))" />
    <mutant id="mutant_7109" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="(totalWeight) * (bytesPerUnit)" />
    <mutant id="mutant_9768" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="((src.infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7108" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.cost()" from="((int)((totalWeight) / (bytesPerUnit)))" to="(totalWeight) - (bytesPerUnit)" />
    <mutant id="mutant_8439" viable="false" in="org.eclipse.jgit.api.Git.toString()" from="(&quot;Git[&quot; + (repo))" to="(&quot;Git[&quot; - (repo))" />
    <mutant id="mutant_9769" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.copyMetaData(org.eclipse.jgit.dircache.DirCacheEntry,boolean)" from="((src.infoOffset) + (DirCacheEntry.P_FLAGS))" to="((src.infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_7183" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="((res.size()) * (src.size()))" />
    <mutant id="mutant_7182" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="((res.size()) % (src.size()))" />
    <mutant id="mutant_7185" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="((res.size()) / (src.size()))" />
    <mutant id="mutant_7184" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="((res.size()) + (src.size()))" />
    <mutant id="mutant_7187" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="(insz / 7)" />
    <mutant id="mutant_7186" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="insz" />
    <mutant id="mutant_7189" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="(insz * 7)" />
    <mutant id="mutant_7188" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="7" />
    <mutant id="mutant_7181" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.delta(org.eclipse.jgit.internal.storage.pack.DeltaWindowEntry)" from="((res.size()) - (src.size()))" to="(res.size())" />
    <mutant id="mutant_7180" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="((zbuf.length) * (outPtr))" />
    <mutant id="mutant_7179" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="((zbuf.length) % (outPtr))" />
    <mutant id="mutant_7172" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="zbuf.length" />
    <mutant id="mutant_7171" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="outPtr" />
    <mutant id="mutant_7174" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="((zbuf.length) * (outPtr))" />
    <mutant id="mutant_7173" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="((zbuf.length) % (outPtr))" />
    <mutant id="mutant_7176" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="((zbuf.length) / (outPtr))" />
    <mutant id="mutant_7175" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="((zbuf.length) + (outPtr))" />
    <mutant id="mutant_7178" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="zbuf.length" />
    <mutant id="mutant_7177" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.write(byte[],int,int)" from="((zbuf.length) - (outPtr))" to="outPtr" />
    <mutant id="mutant_7170" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="((zbuf.length) / (outPtr))" />
    <mutant id="mutant_7169" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ZipStream.finish()" from="((zbuf.length) - (outPtr))" to="((zbuf.length) + (outPtr))" />
    <mutant id="mutant_7168" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="(cnt)" />
    <mutant id="mutant_8499" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.distance) + 1" to="(c.distance) * 1" />
    <mutant id="mutant_7161" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="(slice.beginIndex) * (o.slice.beginIndex)" />
    <mutant id="mutant_8492" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="(c.cost) - (i &gt; 0 ? mergeCost : 1)" />
    <mutant id="mutant_7160" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="slice.beginIndex" />
    <mutant id="mutant_8491" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="c.cost" />
    <mutant id="mutant_7163" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="((buf.length) * (cnt))" />
    <mutant id="mutant_8494" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="1" />
    <mutant id="mutant_7162" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="(slice.beginIndex) + (o.slice.beginIndex)" />
    <mutant id="mutant_8493" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_7165" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="(buf.length)" />
    <mutant id="mutant_8496" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_7164" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="((buf.length) / (cnt))" />
    <mutant id="mutant_8495" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="i" />
    <mutant id="mutant_7167" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="((buf.length) % (cnt))" />
    <mutant id="mutant_8498" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_7166" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow$ArrayStream.write(byte[],int,int)" from="((buf.length) - (cnt))" to="((buf.length) + (cnt))" />
    <mutant id="mutant_8497" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_8490" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="i &gt; 0 ? mergeCost : 1" />
    <mutant id="mutant_7158" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="(slice.beginIndex) / (o.slice.beginIndex)" />
    <mutant id="mutant_8489" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="(c.cost) % (i &gt; 0 ? mergeCost : 1)" />
    <mutant id="mutant_7157" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="((weight) + (o.weight))" />
    <mutant id="mutant_8488" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="(c.cost) * (i &gt; 0 ? mergeCost : 1)" />
    <mutant id="mutant_7159" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="(slice.beginIndex) - (o.slice.beginIndex)" to="(slice.beginIndex) % (o.slice.beginIndex)" />
    <mutant id="mutant_7150" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="(endIndex) * (beginIndex)" />
    <mutant id="mutant_8481" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="NameRevCommand.COMMIT_TIME_SLOP" />
    <mutant id="mutant_8480" viable="false" in="?" from="(60 * 60) * 24" to="(60 * 60) - 24" />
    <mutant id="mutant_7152" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="(endIndex) + (beginIndex)" />
    <mutant id="mutant_8483" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="(minCommitTime()) / (NameRevCommand.COMMIT_TIME_SLOP)" />
    <mutant id="mutant_7151" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="beginIndex" />
    <mutant id="mutant_8482" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="minCommitTime()" />
    <mutant id="mutant_7154" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="((weight) * (o.weight))" />
    <mutant id="mutant_8485" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="(minCommitTime()) * (NameRevCommand.COMMIT_TIME_SLOP)" />
    <mutant id="mutant_7153" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="weight" />
    <mutant id="mutant_8484" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="(minCommitTime()) + (NameRevCommand.COMMIT_TIME_SLOP)" />
    <mutant id="mutant_7156" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="((weight) % (o.weight))" />
    <mutant id="mutant_8487" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(c.cost) + (i &gt; 0 ? mergeCost : 1)" to="(c.cost) / (i &gt; 0 ? mergeCost : 1)" />
    <mutant id="mutant_7155" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath.compareTo(org.eclipse.jgit.internal.storage.pack.DeltaTask$WeightedPath)" from="((weight) - (o.weight))" to="((weight) / (o.weight))" />
    <mutant id="mutant_8486" viable="true" in="org.eclipse.jgit.api.NameRevCommand.call()" from="(minCommitTime()) - (NameRevCommand.COMMIT_TIME_SLOP)" to="(minCommitTime()) % (NameRevCommand.COMMIT_TIME_SLOP)" />
    <mutant id="mutant_7147" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="(endIndex) / (beginIndex)" />
    <mutant id="mutant_8478" viable="false" in="?" from="(60 * 60) * 24" to="60 * 60" />
    <mutant id="mutant_7146" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Block.partitionTasks()" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_8477" viable="false" in="?" from="(60 * 60) * 24" to="(60 * 60) + 24" />
    <mutant id="mutant_7149" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="endIndex" />
    <mutant id="mutant_7148" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaTask$Slice.size()" from="(endIndex) - (beginIndex)" to="(endIndex) % (beginIndex)" />
    <mutant id="mutant_8479" viable="false" in="?" from="(60 * 60) * 24" to="(60 * 60) % 24" />
    <mutant id="mutant_7194" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="((insz + 7) &gt;&gt; 3)" />
    <mutant id="mutant_7193" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="insz" />
    <mutant id="mutant_7196" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="(insz / ((insz + 7) &gt;&gt; 3))" />
    <mutant id="mutant_7195" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="(insz * ((insz + 7) &gt;&gt; 3))" />
    <mutant id="mutant_7198" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="(insz / 63)" />
    <mutant id="mutant_7197" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="(insz % ((insz + 7) &gt;&gt; 3))" />
    <mutant id="mutant_7199" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 63)" to="(insz % 63)" />
    <mutant id="mutant_7190" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="(insz - 7)" />
    <mutant id="mutant_7192" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + ((insz + 7) &gt;&gt; 3))" to="(insz - ((insz + 7) &gt;&gt; 3))" />
    <mutant id="mutant_7191" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaWindow.deflateBound(int)" from="(insz + 7)" to="(insz % 7)" />
    <mutant id="mutant_15714" viable="true" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="prefix" />
    <mutant id="mutant_15715" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="(prefix) * name" />
    <mutant id="mutant_15712" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="(prefix) % name" />
    <mutant id="mutant_15713" viable="true" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="name" />
    <mutant id="mutant_15718" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="60 - (RelativeDateFormatter.SECOND_IN_MILLIS)" />
    <mutant id="mutant_15719" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="60" />
    <mutant id="mutant_15716" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="(prefix) - name" />
    <mutant id="mutant_15717" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="60 / (RelativeDateFormatter.SECOND_IN_MILLIS)" />
    <mutant id="mutant_15710" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="((resolved.find(prefix)) / 1)" />
    <mutant id="mutant_15711" viable="false" in="org.eclipse.jgit.util.RefMap.toRefName(java.lang.String)" from="(prefix) + name" to="(prefix) / name" />
    <mutant id="mutant_15725" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="60 % (RelativeDateFormatter.MINUTE_IN_MILLIS)" />
    <mutant id="mutant_15726" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="60" />
    <mutant id="mutant_15723" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="60 + (RelativeDateFormatter.MINUTE_IN_MILLIS)" />
    <mutant id="mutant_15724" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="60 - (RelativeDateFormatter.MINUTE_IN_MILLIS)" />
    <mutant id="mutant_15729" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="24" />
    <mutant id="mutant_15727" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="RelativeDateFormatter.MINUTE_IN_MILLIS" />
    <mutant id="mutant_15728" viable="false" in="?" from="60 * (RelativeDateFormatter.MINUTE_IN_MILLIS)" to="60 / (RelativeDateFormatter.MINUTE_IN_MILLIS)" />
    <mutant id="mutant_15721" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="60 + (RelativeDateFormatter.SECOND_IN_MILLIS)" />
    <mutant id="mutant_15722" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="RelativeDateFormatter.SECOND_IN_MILLIS" />
    <mutant id="mutant_15720" viable="false" in="?" from="60 * (RelativeDateFormatter.SECOND_IN_MILLIS)" to="60 % (RelativeDateFormatter.SECOND_IN_MILLIS)" />
    <mutant id="mutant_15709" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="((resolved.find(prefix)) - 1)" />
    <mutant id="mutant_15703" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) - 1)" />
    <mutant id="mutant_15704" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) / 1)" />
    <mutant id="mutant_15701" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) * 1)" />
    <mutant id="mutant_15702" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) % 1)" />
    <mutant id="mutant_15707" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="((resolved.find(prefix)) * 1)" />
    <mutant id="mutant_15708" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="((resolved.find(prefix)) % 1)" />
    <mutant id="mutant_15705" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="(resolved.find(prefix))" />
    <mutant id="mutant_15706" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((resolved.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_15700" viable="true" in="org.eclipse.jgit.util.RefMap$SetIterator()" from="((loose.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_14426" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="len / 2" />
    <mutant id="mutant_15758" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="SystemReader.getInstance().getCurrentTime()" />
    <mutant id="mutant_14425" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="len % 2" />
    <mutant id="mutant_15759" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="(14 % (RelativeDateFormatter.DAY_IN_MILLIS))" />
    <mutant id="mutant_14428" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d / off)" />
    <mutant id="mutant_15756" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="when.getTime()" />
    <mutant id="mutant_14427" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="len + 2" />
    <mutant id="mutant_15757" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="(SystemReader.getInstance().getCurrentTime()) / (when.getTime())" />
    <mutant id="mutant_14429" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d - off)" />
    <mutant id="mutant_15750" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="365 - (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_15751" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="RelativeDateFormatter.DAY_IN_MILLIS" />
    <mutant id="mutant_14420" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="len43 % ((len % 3) &gt; 0 ? 4 : 0)" />
    <mutant id="mutant_14422" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="len * 2" />
    <mutant id="mutant_15754" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="(SystemReader.getInstance().getCurrentTime()) + (when.getTime())" />
    <mutant id="mutant_14421" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="len43 - ((len % 3) &gt; 0 ? 4 : 0)" />
    <mutant id="mutant_15755" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="(SystemReader.getInstance().getCurrentTime()) * (when.getTime())" />
    <mutant id="mutant_14424" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="2" />
    <mutant id="mutant_15752" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="365 / (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14423" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len - 2" to="len" />
    <mutant id="mutant_15753" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(SystemReader.getInstance().getCurrentTime()) - (when.getTime())" to="(SystemReader.getInstance().getCurrentTime()) % (when.getTime())" />
    <mutant id="mutant_13106" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_14437" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="off" />
    <mutant id="mutant_15769" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="(10 + (RelativeDateFormatter.WEEK_IN_MILLIS))" />
    <mutant id="mutant_13105" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_14436" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="d" />
    <mutant id="mutant_13108" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_14439" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d % off)" />
    <mutant id="mutant_15767" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="(10 - (RelativeDateFormatter.WEEK_IN_MILLIS))" />
    <mutant id="mutant_13107" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_14438" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d * off)" />
    <mutant id="mutant_15768" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="(RelativeDateFormatter.WEEK_IN_MILLIS)" />
    <mutant id="mutant_13109" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_15761" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="(RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_15762" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="(14 / (RelativeDateFormatter.DAY_IN_MILLIS))" />
    <mutant id="mutant_13100" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_14431" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="off" />
    <mutant id="mutant_14430" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="d" />
    <mutant id="mutant_15760" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="14" />
    <mutant id="mutant_13102" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="'0'" />
    <mutant id="mutant_14433" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d % off)" />
    <mutant id="mutant_15765" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="(10 / (RelativeDateFormatter.WEEK_IN_MILLIS))" />
    <mutant id="mutant_13101" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_14432" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d * off)" />
    <mutant id="mutant_15766" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(10 * (RelativeDateFormatter.WEEK_IN_MILLIS))" to="(10 % (RelativeDateFormatter.WEEK_IN_MILLIS))" />
    <mutant id="mutant_13104" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c" />
    <mutant id="mutant_14435" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d - off)" />
    <mutant id="mutant_15763" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="(14 - (RelativeDateFormatter.DAY_IN_MILLIS))" />
    <mutant id="mutant_13103" viable="true" in="org.eclipse.jgit.revwalk.ObjectWalk.parseMode(byte[],int,int,org.eclipse.jgit.revwalk.ObjectWalk$TreeVisit)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_14434" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(d + off)" to="(d / off)" />
    <mutant id="mutant_15764" viable="true" in="org.eclipse.jgit.util.RelativeDateFormatter.format(java.util.Date)" from="(14 * (RelativeDateFormatter.DAY_IN_MILLIS))" to="(14 + (RelativeDateFormatter.DAY_IN_MILLIS))" />
    <mutant id="mutant_14404" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="3" />
    <mutant id="mutant_15736" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="7 - (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14403" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="(len + 4)" />
    <mutant id="mutant_15737" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="7" />
    <mutant id="mutant_14406" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="(len * 4) + 3" />
    <mutant id="mutant_15734" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="24 + (RelativeDateFormatter.HOUR_IN_MILLIS)" />
    <mutant id="mutant_14405" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="len * 4" />
    <mutant id="mutant_15735" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="7 / (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14408" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="(len * 4) - 3" />
    <mutant id="mutant_14407" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="(len * 4) * 3" />
    <mutant id="mutant_15738" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="RelativeDateFormatter.DAY_IN_MILLIS" />
    <mutant id="mutant_14409" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4) / 3" to="(len * 4) % 3" />
    <mutant id="mutant_15739" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="7 + (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14400" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="(len % 4)" />
    <mutant id="mutant_15732" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="RelativeDateFormatter.HOUR_IN_MILLIS" />
    <mutant id="mutant_15733" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="24 % (RelativeDateFormatter.HOUR_IN_MILLIS)" />
    <mutant id="mutant_14402" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="(len - 4)" />
    <mutant id="mutant_15730" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="24 - (RelativeDateFormatter.HOUR_IN_MILLIS)" />
    <mutant id="mutant_14401" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len * 4)" to="(len / 4)" />
    <mutant id="mutant_15731" viable="false" in="?" from="24 * (RelativeDateFormatter.HOUR_IN_MILLIS)" to="24 / (RelativeDateFormatter.HOUR_IN_MILLIS)" />
    <mutant id="mutant_14415" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="(len + 3)" />
    <mutant id="mutant_15747" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="365 % (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14414" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="(len / 3)" />
    <mutant id="mutant_15748" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="365 + (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14417" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="len43 / ((len % 3) &gt; 0 ? 4 : 0)" />
    <mutant id="mutant_15745" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="30 - (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14416" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="len43" />
    <mutant id="mutant_15746" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="30 + (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14419" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="len43 * ((len % 3) &gt; 0 ? 4 : 0)" />
    <mutant id="mutant_14418" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="len43 + ((len % 3) &gt; 0 ? 4 : 0)" to="(len % 3) &gt; 0 ? 4 : 0" />
    <mutant id="mutant_15749" viable="false" in="?" from="365 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="365" />
    <mutant id="mutant_15740" viable="false" in="?" from="7 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="7 % (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14411" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="(len * 3)" />
    <mutant id="mutant_15743" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="30 / (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14410" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="len" />
    <mutant id="mutant_15744" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="30" />
    <mutant id="mutant_14413" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="(len - 3)" />
    <mutant id="mutant_15741" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="30 % (RelativeDateFormatter.DAY_IN_MILLIS)" />
    <mutant id="mutant_14412" viable="true" in="org.eclipse.jgit.util.Base64.encodeBytes(byte[],int,int)" from="(len % 3)" to="3" />
    <mutant id="mutant_15742" viable="false" in="?" from="30 * (RelativeDateFormatter.DAY_IN_MILLIS)" to="RelativeDateFormatter.DAY_IN_MILLIS" />
    <mutant id="mutant_16328" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) * 1)" />
    <mutant id="mutant_16329" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) % 1)" />
    <mutant id="mutant_16322" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="(ptr * (FileHeader.INDEX.length))" />
    <mutant id="mutant_16323" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="(ptr / (FileHeader.INDEX.length))" />
    <mutant id="mutant_16320" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="FileHeader.INDEX.length" />
    <mutant id="mutant_16321" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="ptr" />
    <mutant id="mutant_16326" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) / 1)" />
    <mutant id="mutant_16327" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) - 1)" />
    <mutant id="mutant_16324" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="1" />
    <mutant id="mutant_16325" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="(getParentCount())" />
    <mutant id="mutant_15008" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="(offset * 4)" />
    <mutant id="mutant_16339" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="((endOffset) % (startOffset))" />
    <mutant id="mutant_15009" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_15002" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_16333" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) - 1)" />
    <mutant id="mutant_15003" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="(offset / 4)" />
    <mutant id="mutant_16334" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) * 1)" />
    <mutant id="mutant_15000" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_16331" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="getParentCount()" />
    <mutant id="mutant_15001" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt32(byte[],int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_16332" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) / 1)" />
    <mutant id="mutant_15006" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="offset" />
    <mutant id="mutant_16337" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="((endOffset) + (startOffset))" />
    <mutant id="mutant_15007" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="(offset % 4)" />
    <mutant id="mutant_16338" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="startOffset" />
    <mutant id="mutant_15004" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="(offset - 4)" />
    <mutant id="mutant_16335" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="((getParentCount()) % 1)" />
    <mutant id="mutant_15005" viable="true" in="org.eclipse.jgit.util.NB.decodeUInt64(byte[],int)" from="(offset + 4)" to="4" />
    <mutant id="mutant_16336" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="((endOffset) / (startOffset))" />
    <mutant id="mutant_16330" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((getParentCount()) + 1)" to="1" />
    <mutant id="mutant_16308" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="FileHeader.SIMILARITY_INDEX.length" />
    <mutant id="mutant_16309" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="ptr" />
    <mutant id="mutant_16306" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="(ptr - (FileHeader.SIMILARITY_INDEX.length))" />
    <mutant id="mutant_16307" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="(ptr % (FileHeader.SIMILARITY_INDEX.length))" />
    <mutant id="mutant_16300" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="(ptr - (FileHeader.RENAME_TO.length))" />
    <mutant id="mutant_16301" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="(ptr % (FileHeader.RENAME_TO.length))" />
    <mutant id="mutant_16304" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="(ptr * (FileHeader.RENAME_TO.length))" />
    <mutant id="mutant_16305" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="(ptr / (FileHeader.RENAME_TO.length))" />
    <mutant id="mutant_16302" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="FileHeader.RENAME_TO.length" />
    <mutant id="mutant_16303" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_TO.length))" to="ptr" />
    <mutant id="mutant_16319" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="(ptr % (FileHeader.INDEX.length))" />
    <mutant id="mutant_16317" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="(ptr / (FileHeader.DISSIMILARITY_INDEX.length))" />
    <mutant id="mutant_16318" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.INDEX.length))" to="(ptr - (FileHeader.INDEX.length))" />
    <mutant id="mutant_16311" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="(ptr / (FileHeader.SIMILARITY_INDEX.length))" />
    <mutant id="mutant_16312" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="(ptr - (FileHeader.DISSIMILARITY_INDEX.length))" />
    <mutant id="mutant_16310" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.SIMILARITY_INDEX.length))" to="(ptr * (FileHeader.SIMILARITY_INDEX.length))" />
    <mutant id="mutant_16315" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="ptr" />
    <mutant id="mutant_16316" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="(ptr * (FileHeader.DISSIMILARITY_INDEX.length))" />
    <mutant id="mutant_16313" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="(ptr % (FileHeader.DISSIMILARITY_INDEX.length))" />
    <mutant id="mutant_16314" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DISSIMILARITY_INDEX.length))" to="FileHeader.DISSIMILARITY_INDEX.length" />
    <mutant id="mutant_9641" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) - (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_9642" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="DirCacheEntry.P_SIZE" />
    <mutant id="mutant_8311" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) - &quot;*&quot;)" />
    <mutant id="mutant_8310" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="Constants.R_HEADS" />
    <mutant id="mutant_9640" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) * (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_15035" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="7" />
    <mutant id="mutant_16366" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="1" />
    <mutant id="mutant_8309" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) * &quot;*&quot;)" />
    <mutant id="mutant_15036" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="offset" />
    <mutant id="mutant_16367" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="getParentCount()" />
    <mutant id="mutant_15033" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="(offset - 7)" />
    <mutant id="mutant_16364" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab % 1)" />
    <mutant id="mutant_15034" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="(offset % 7)" />
    <mutant id="mutant_16365" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab * 1)" />
    <mutant id="mutant_15039" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="(offset - 6)" />
    <mutant id="mutant_15037" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="(offset / 7)" />
    <mutant id="mutant_16368" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="(getParentCount()) / 1" />
    <mutant id="mutant_15038" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 7)" to="(offset * 7)" />
    <mutant id="mutant_16369" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="(getParentCount()) - 1" />
    <mutant id="mutant_8302" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="((Constants.R_REMOTES) + (config.getName())) / &quot;/&quot;" />
    <mutant id="mutant_9634" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="((infoOffset) - (DirCacheEntry.P_FLAGS2))" />
    <mutant id="mutant_8301" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="((Constants.R_REMOTES) + (config.getName())) % &quot;/&quot;" />
    <mutant id="mutant_9635" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="((infoOffset) / (DirCacheEntry.P_FLAGS2))" />
    <mutant id="mutant_8304" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" />
    <mutant id="mutant_9632" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="base" />
    <mutant id="mutant_8303" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) * &quot;*&quot;" />
    <mutant id="mutant_9633" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="((infoOffset) % (DirCacheEntry.P_FLAGS2))" />
    <mutant id="mutant_8306" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) - &quot;*&quot;" />
    <mutant id="mutant_9638" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="infoOffset" />
    <mutant id="mutant_15031" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_16362" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="tab" />
    <mutant id="mutant_8305" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) / &quot;*&quot;" />
    <mutant id="mutant_9639" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) / (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_15032" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_16363" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab / 1)" />
    <mutant id="mutant_8308" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="&quot;*&quot;" />
    <mutant id="mutant_9636" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="((infoOffset) * (DirCacheEntry.P_FLAGS2))" />
    <mutant id="mutant_16360" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="1" />
    <mutant id="mutant_8307" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) + &quot;*&quot;" to="(bare ? Constants.R_HEADS : ((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;) % &quot;*&quot;" />
    <mutant id="mutant_9637" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getExtendedFlags()" from="((infoOffset) + (DirCacheEntry.P_FLAGS2))" to="DirCacheEntry.P_FLAGS2" />
    <mutant id="mutant_15030" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_16361" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab + 1)" />
    <mutant id="mutant_9630" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="(base / 4)" />
    <mutant id="mutant_9631" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="(base - 4)" />
    <mutant id="mutant_8300" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_15046" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="5" />
    <mutant id="mutant_16377" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_15047" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="offset" />
    <mutant id="mutant_16378" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="(buf[ptr++]) * '0'" />
    <mutant id="mutant_9629" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="(base * 4)" />
    <mutant id="mutant_15044" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="(offset / 6)" />
    <mutant id="mutant_16375" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_15045" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="(offset - 5)" />
    <mutant id="mutant_16376" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_15048" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="(offset % 5)" />
    <mutant id="mutant_16379" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="(buf[ptr++]) + '0'" />
    <mutant id="mutant_15049" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="(offset / 5)" />
    <mutant id="mutant_9623" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="(infoOffset) * (DirCacheEntry.P_MTIME)" />
    <mutant id="mutant_9624" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="(infoOffset) / (DirCacheEntry.P_MTIME)" />
    <mutant id="mutant_16370" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="(getParentCount()) * 1" />
    <mutant id="mutant_9621" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="(infoOffset) % (DirCacheEntry.P_MTIME)" />
    <mutant id="mutant_9622" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="(infoOffset) - (DirCacheEntry.P_MTIME)" />
    <mutant id="mutant_9627" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="(base % 4)" />
    <mutant id="mutant_15042" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="offset" />
    <mutant id="mutant_16373" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_9628" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(base + 4)" to="4" />
    <mutant id="mutant_15043" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="(offset * 6)" />
    <mutant id="mutant_16374" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_9625" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="DirCacheEntry.P_MTIME" />
    <mutant id="mutant_15040" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="(offset % 6)" />
    <mutant id="mutant_16371" viable="true" in="org.eclipse.jgit.patch.FileHeader.extractFileLines(java.nio.charset.Charset[])" from="(getParentCount()) + 1" to="(getParentCount()) % 1" />
    <mutant id="mutant_9626" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.mightBeRacilyClean(int,int)" from="(infoOffset) + (DirCacheEntry.P_MTIME)" to="infoOffset" />
    <mutant id="mutant_15041" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 6)" to="6" />
    <mutant id="mutant_16372" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_9620" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="infoOffset" />
    <mutant id="mutant_15019" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_15013" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_16344" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="(s / 1)" />
    <mutant id="mutant_15014" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_16345" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="(s % 1)" />
    <mutant id="mutant_9618" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="DirCacheEntry.P_OBJECTID" />
    <mutant id="mutant_15011" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_16342" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="1" />
    <mutant id="mutant_9619" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) * (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_15012" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_16343" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="(s * 1)" />
    <mutant id="mutant_15017" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_16348" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_15018" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_16349" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_15015" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_16346" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="s" />
    <mutant id="mutant_15016" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="3" />
    <mutant id="mutant_16347" viable="true" in="org.eclipse.jgit.patch.FileHeader.p1(java.lang.String)" from="(s + 1)" to="(s - 1)" />
    <mutant id="mutant_9612" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9613" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9610" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9611" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_9616" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) / (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_16340" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="endOffset" />
    <mutant id="mutant_9617" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) - (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_15010" viable="true" in="org.eclipse.jgit.util.NB.encodeInt16(byte[],int,int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_16341" viable="true" in="org.eclipse.jgit.patch.FileHeader.getScriptText(java.nio.charset.Charset[])" from="((endOffset) - (startOffset))" to="((endOffset) * (startOffset))" />
    <mutant id="mutant_9614" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_9615" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isSmudged()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) % (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_9609" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isExtended()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15024" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_16355" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab + 1)" />
    <mutant id="mutant_15025" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_16356" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="tab" />
    <mutant id="mutant_9607" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15022" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_16353" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_9608" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_15023" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_16354" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="1" />
    <mutant id="mutant_15028" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_16359" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab * 1)" />
    <mutant id="mutant_15029" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_15026" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_16357" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab / 1)" />
    <mutant id="mutant_15027" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 1)" to="1" />
    <mutant id="mutant_16358" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(tab - 1)" to="(tab % 1)" />
    <mutant id="mutant_9601" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="skipped" />
    <mutant id="mutant_9602" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="(expLen - actLen) * skipped" />
    <mutant id="mutant_9600" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="(expLen - actLen) + skipped" />
    <mutant id="mutant_9605" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_15020" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_16351" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_9606" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15021" viable="true" in="org.eclipse.jgit.util.NB.encodeInt32(byte[],int,int)" from="(offset + 2)" to="2" />
    <mutant id="mutant_16352" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_9603" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9604" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.isAssumeValid()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_16350" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseName(java.lang.String,int,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_9681" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) / (getLastModified()))" />
    <mutant id="mutant_9682" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="(getLastModified())" />
    <mutant id="mutant_7020" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="(&quot;DeltaIndex[&quot; % sz)" />
    <mutant id="mutant_8351" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) / &quot;\n&quot;)" />
    <mutant id="mutant_8350" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="&quot;\nChange-Id: I&quot;" />
    <mutant id="mutant_9680" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="((((getFileMode()) + &quot; &quot;) + (getLength())) * &quot; &quot;)" />
    <mutant id="mutant_7022" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="&quot;DeltaIndex[&quot;" />
    <mutant id="mutant_8353" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) * &quot;\n&quot;)" />
    <mutant id="mutant_9685" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) * (getLastModified()))" />
    <mutant id="mutant_7021" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="(&quot;DeltaIndex[&quot; * sz)" />
    <mutant id="mutant_8352" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) - &quot;\n&quot;)" />
    <mutant id="mutant_9686" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" />
    <mutant id="mutant_7024" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="((&quot;DeltaIndex[&quot; + sz) / &quot; &quot;)" />
    <mutant id="mutant_8355" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" />
    <mutant id="mutant_9683" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) - (getLastModified()))" />
    <mutant id="mutant_7023" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="(&quot;DeltaIndex[&quot; + sz)" />
    <mutant id="mutant_8354" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) % &quot;\n&quot;)" />
    <mutant id="mutant_9684" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) % (getLastModified()))" />
    <mutant id="mutant_15079" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ie" />
    <mutant id="mutant_15077" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ip" />
    <mutant id="mutant_15078" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ie / ip" />
    <mutant id="mutant_7015" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="sz + 1024" />
    <mutant id="mutant_8346" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="(&quot;\nChange-Id: I&quot; / (ObjectId.zeroId().getName()))" />
    <mutant id="mutant_9678" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_15071" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="(offset % 1)" />
    <mutant id="mutant_7014" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="1024" />
    <mutant id="mutant_8345" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="(ObjectId.zeroId().getName())" />
    <mutant id="mutant_9679" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="((((getFileMode()) + &quot; &quot;) + (getLength())) - &quot; &quot;)" />
    <mutant id="mutant_15072" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="offset" />
    <mutant id="mutant_7017" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="(&quot;DeltaIndex[&quot; / sz)" />
    <mutant id="mutant_8348" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="(&quot;\nChange-Id: I&quot; % (ObjectId.zeroId().getName()))" />
    <mutant id="mutant_9676" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="((((getFileMode()) + &quot; &quot;) + (getLength())) % &quot; &quot;)" />
    <mutant id="mutant_7016" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="sz * 1024" />
    <mutant id="mutant_8347" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="(&quot;\nChange-Id: I&quot; * (ObjectId.zeroId().getName()))" />
    <mutant id="mutant_9677" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="(((getFileMode()) + &quot; &quot;) + (getLength()))" />
    <mutant id="mutant_15070" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="(offset / 1)" />
    <mutant id="mutant_7019" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="sz" />
    <mutant id="mutant_15075" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ie % ip" />
    <mutant id="mutant_7018" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(&quot;DeltaIndex[&quot; + sz)" to="(&quot;DeltaIndex[&quot; - sz)" />
    <mutant id="mutant_8349" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName()))" to="(&quot;\nChange-Id: I&quot; - (ObjectId.zeroId().getName()))" />
    <mutant id="mutant_15076" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ie * ip" />
    <mutant id="mutant_15073" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="(offset * 1)" />
    <mutant id="mutant_15074" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="(offset - 1)" />
    <mutant id="mutant_9670" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="(((getFileMode()) + &quot; &quot;) * (getLength()))" />
    <mutant id="mutant_9671" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="((getFileMode()) + &quot; &quot;)" />
    <mutant id="mutant_8340" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="prefix" />
    <mutant id="mutant_7011" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="sz - 1024" />
    <mutant id="mutant_8342" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="(prefix % (revCommit.getShortMessage()))" />
    <mutant id="mutant_9674" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="(((getFileMode()) + &quot; &quot;) - (getLength()))" />
    <mutant id="mutant_7010" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="(units.length)" />
    <mutant id="mutant_8341" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="(prefix - (revCommit.getShortMessage()))" />
    <mutant id="mutant_9675" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;)" to="((((getFileMode()) + &quot; &quot;) + (getLength())) / &quot; &quot;)" />
    <mutant id="mutant_15090" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_7013" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="sz / 1024" />
    <mutant id="mutant_8344" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="(prefix * (revCommit.getShortMessage()))" />
    <mutant id="mutant_9672" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="(getLength())" />
    <mutant id="mutant_7012" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((int)(sz % 1024))" to="sz" />
    <mutant id="mutant_8343" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="revCommit.getShortMessage()" />
    <mutant id="mutant_9673" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="(((getFileMode()) + &quot; &quot;) % (getLength()))" />
    <mutant id="mutant_15088" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="in - &quot;/&quot;" />
    <mutant id="mutant_15089" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="in * &quot;/&quot;" />
    <mutant id="mutant_7004" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="12 % (len * entSize)" />
    <mutant id="mutant_8335" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_9667" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="((getFileMode()) / &quot; &quot;)" />
    <mutant id="mutant_15082" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_7003" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="12 / (len * entSize)" />
    <mutant id="mutant_8334" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) * &quot;^{commit}&quot;)" />
    <mutant id="mutant_9668" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="(getFileMode())" />
    <mutant id="mutant_15083" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_7006" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="1" />
    <mutant id="mutant_8337" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) / &quot;^{commit}&quot;)" />
    <mutant id="mutant_9665" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="((getFileMode()) % &quot; &quot;)" />
    <mutant id="mutant_15080" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.dequote(byte[],int,int)" from="ie - ip" to="ie + ip" />
    <mutant id="mutant_7005" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="((units.length) / 1)" />
    <mutant id="mutant_8336" viable="true" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="&quot;^{commit}&quot;" />
    <mutant id="mutant_9666" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="((getFileMode()) * &quot; &quot;)" />
    <mutant id="mutant_15081" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_7008" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="((units.length) * 1)" />
    <mutant id="mutant_8339" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="(prefix + (revCommit.getShortMessage()))" to="(prefix / (revCommit.getShortMessage()))" />
    <mutant id="mutant_15086" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_7007" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="((units.length) % 1)" />
    <mutant id="mutant_8338" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) % &quot;^{commit}&quot;)" />
    <mutant id="mutant_15087" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="in / &quot;/&quot;" />
    <mutant id="mutant_9669" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((getFileMode()) + &quot; &quot;) + (getLength()))" to="(((getFileMode()) + &quot; &quot;) / (getLength()))" />
    <mutant id="mutant_15084" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_7009" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((units.length) - 1)" to="((units.length) + 1)" />
    <mutant id="mutant_15085" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneStyle.quote(java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_9660" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="DirCacheEntry.P_OBJECTID" />
    <mutant id="mutant_7000" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="12 * (len * entSize)" />
    <mutant id="mutant_8331" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="((only.length()) % 1)" />
    <mutant id="mutant_9663" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="((getFileMode()) - &quot; &quot;)" />
    <mutant id="mutant_8330" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="((only.length()) + 1)" />
    <mutant id="mutant_9664" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((getFileMode()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_7002" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="len * entSize" />
    <mutant id="mutant_8333" viable="false" in="org.eclipse.jgit.api.CommitCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) - &quot;^{commit}&quot;)" />
    <mutant id="mutant_9661" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) * (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_7001" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="12 - (len * entSize)" />
    <mutant id="mutant_8332" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="((only.length()) * 1)" />
    <mutant id="mutant_9662" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="infoOffset" />
    <mutant id="mutant_15057" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="(offset / 3)" />
    <mutant id="mutant_16388" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 + 1)" />
    <mutant id="mutant_15058" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="3" />
    <mutant id="mutant_16389" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 % 1)" />
    <mutant id="mutant_15055" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="(offset % 4)" />
    <mutant id="mutant_16386" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="dot2" />
    <mutant id="mutant_15056" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="(offset * 4)" />
    <mutant id="mutant_16387" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 / 1)" />
    <mutant id="mutant_15059" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="(offset * 3)" />
    <mutant id="mutant_8324" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="Constants.R_TAGS" />
    <mutant id="mutant_9656" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_16380" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="(buf[ptr++]) / '0'" />
    <mutant id="mutant_8323" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="branch" />
    <mutant id="mutant_9657" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) % (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_15050" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 5)" to="(offset * 5)" />
    <mutant id="mutant_16381" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="buf[ptr++]" />
    <mutant id="mutant_8326" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="((Constants.R_TAGS) - (branch))" />
    <mutant id="mutant_9654" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8325" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="((Constants.R_TAGS) / (branch))" />
    <mutant id="mutant_9655" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8328" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="1" />
    <mutant id="mutant_15053" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="4" />
    <mutant id="mutant_16384" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 * 1)" />
    <mutant id="mutant_8327" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="only.length()" />
    <mutant id="mutant_15054" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="offset" />
    <mutant id="mutant_16385" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="1" />
    <mutant id="mutant_9658" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) / (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_15051" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="(offset / 4)" />
    <mutant id="mutant_16382" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="(buf[ptr++]) % '0'" />
    <mutant id="mutant_8329" viable="true" in="org.eclipse.jgit.api.CommitCommand.setOnly(java.lang.String)" from="((only.length()) - 1)" to="((only.length()) / 1)" />
    <mutant id="mutant_9659" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.idOffset()" from="(infoOffset) + (DirCacheEntry.P_OBJECTID)" to="(infoOffset) - (DirCacheEntry.P_OBJECTID)" />
    <mutant id="mutant_15052" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 4)" to="(offset - 4)" />
    <mutant id="mutant_16383" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseFileMode(int,int)" from="(buf[ptr++]) - '0'" to="'0'" />
    <mutant id="mutant_8320" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="((Constants.R_HEADS) * (branch))" />
    <mutant id="mutant_9652" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_9653" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_8322" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="((Constants.R_TAGS) % (branch))" />
    <mutant id="mutant_9650" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="infoOffset" />
    <mutant id="mutant_8321" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_TAGS) + (branch))" to="((Constants.R_TAGS) * (branch))" />
    <mutant id="mutant_9651" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getStage()" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15068" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="(offset % 2)" />
    <mutant id="mutant_16399" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="mode" />
    <mutant id="mutant_15069" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 1)" to="1" />
    <mutant id="mutant_15066" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="offset" />
    <mutant id="mutant_16397" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="1" />
    <mutant id="mutant_15067" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="(offset - 2)" />
    <mutant id="mutant_16398" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="(mode * 1)" />
    <mutant id="mutant_8313" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="&quot;*&quot;" />
    <mutant id="mutant_9645" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) - (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_15060" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="offset" />
    <mutant id="mutant_16391" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="1" />
    <mutant id="mutant_8312" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) % &quot;*&quot;)" />
    <mutant id="mutant_9646" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) % (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_15061" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="(offset - 3)" />
    <mutant id="mutant_16392" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="dot2" />
    <mutant id="mutant_8315" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="((Constants.R_HEADS) / (branch))" />
    <mutant id="mutant_9643" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="((infoOffset) % (DirCacheEntry.P_SIZE))" />
    <mutant id="mutant_8314" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) / &quot;*&quot;)" />
    <mutant id="mutant_9644" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getLength()" from="((infoOffset) + (DirCacheEntry.P_SIZE))" to="infoOffset" />
    <mutant id="mutant_16390" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 * 1)" />
    <mutant id="mutant_8317" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="((Constants.R_HEADS) % (branch))" />
    <mutant id="mutant_9649" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) * (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_15064" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="(offset / 2)" />
    <mutant id="mutant_16395" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 % 1)" />
    <mutant id="mutant_8316" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="Constants.R_HEADS" />
    <mutant id="mutant_15065" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="(offset * 2)" />
    <mutant id="mutant_16396" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="(mode % 1)" />
    <mutant id="mutant_8319" viable="false" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="((Constants.R_HEADS) - (branch))" />
    <mutant id="mutant_9647" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="DirCacheEntry.P_MODE" />
    <mutant id="mutant_15062" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 3)" to="(offset % 3)" />
    <mutant id="mutant_16393" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 / 1)" />
    <mutant id="mutant_8318" viable="true" in="org.eclipse.jgit.api.CloneCommand.checkout(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (branch))" to="branch" />
    <mutant id="mutant_9648" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.getRawMode()" from="((infoOffset) + (DirCacheEntry.P_MODE))" to="((infoOffset) / (DirCacheEntry.P_MODE))" />
    <mutant id="mutant_15063" viable="true" in="org.eclipse.jgit.util.NB.encodeInt64(byte[],int,long)" from="(offset + 2)" to="2" />
    <mutant id="mutant_16394" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 - 1)" />
    <mutant id="mutant_7062" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="4 - 4" />
    <mutant id="mutant_8393" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="&quot;branch: Reset start-point to tag &quot; % startPointFullName" />
    <mutant id="mutant_7061" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="4 % 4" />
    <mutant id="mutant_8392" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="&quot;branch: Created from branch &quot; / baseBranch" />
    <mutant id="mutant_7064" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="len" />
    <mutant id="mutant_8395" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="&quot;branch: Reset start-point to tag &quot;" />
    <mutant id="mutant_7063" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="4 / 4" />
    <mutant id="mutant_8394" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="&quot;branch: Reset start-point to tag &quot; / startPointFullName" />
    <mutant id="mutant_7066" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="len - (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8397" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="startPointFullName" />
    <mutant id="mutant_7065" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="len / (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8396" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="&quot;branch: Reset start-point to tag &quot; * startPointFullName" />
    <mutant id="mutant_7068" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="len * (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_8399" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from tag &quot; + startPointFullName" to="&quot;branch: Created from tag &quot; - startPointFullName" />
    <mutant id="mutant_7067" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="DeltaIndex.BLKSZ" />
    <mutant id="mutant_8398" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to tag &quot; + startPointFullName" to="&quot;branch: Reset start-point to tag &quot; - startPointFullName" />
    <mutant id="mutant_7060" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="4" />
    <mutant id="mutant_8391" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="&quot;branch: Created from branch &quot; % baseBranch" />
    <mutant id="mutant_8390" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="&quot;branch: Created from branch &quot; - baseBranch" />
    <mutant id="mutant_7059" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.getIndexSize()" from="4 * 4" to="4 + 4" />
    <mutant id="mutant_7058" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="(sourceLength * 3) / 4" />
    <mutant id="mutant_8389" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="&quot;branch: Created from branch &quot;" />
    <mutant id="mutant_7051" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="((sourceLength * 3) * 4)" />
    <mutant id="mutant_8382" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="&quot;branch: Reset start-point to branch &quot; % startPointFullName" />
    <mutant id="mutant_7050" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="((sourceLength * 3) % 4)" />
    <mutant id="mutant_8381" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="&quot;branch: Reset start-point to branch &quot; - startPointFullName" />
    <mutant id="mutant_7053" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="sourceLength % ((sourceLength * 3) / 4)" />
    <mutant id="mutant_8384" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="&quot;branch: Reset start-point to branch &quot; * startPointFullName" />
    <mutant id="mutant_7052" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="((sourceLength * 3) + 4)" />
    <mutant id="mutant_8383" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="&quot;branch: Reset start-point to branch &quot; / startPointFullName" />
    <mutant id="mutant_7055" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="sourceLength / ((sourceLength * 3) / 4)" />
    <mutant id="mutant_8386" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="&quot;branch: Reset start-point to branch &quot;" />
    <mutant id="mutant_7054" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="sourceLength - ((sourceLength * 3) / 4)" />
    <mutant id="mutant_8385" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to branch &quot; + startPointFullName" to="startPointFullName" />
    <mutant id="mutant_7057" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="sourceLength * ((sourceLength * 3) / 4)" />
    <mutant id="mutant_8388" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="baseBranch" />
    <mutant id="mutant_7056" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="sourceLength + ((sourceLength * 3) / 4)" to="sourceLength" />
    <mutant id="mutant_8387" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from branch &quot; + baseBranch" to="&quot;branch: Created from branch &quot; * baseBranch" />
    <mutant id="mutant_8380" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="baseCommit" />
    <mutant id="mutant_7048" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="4" />
    <mutant id="mutant_8379" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="&quot;branch: Created from commit &quot; * baseCommit" />
    <mutant id="mutant_7047" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="((sourceLength * 3) - 4)" />
    <mutant id="mutant_8378" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="&quot;branch: Created from commit &quot;" />
    <mutant id="mutant_7049" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="((sourceLength * 3) / 4)" to="(sourceLength * 3)" />
    <mutant id="mutant_7040" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) % &quot;]&quot;" />
    <mutant id="mutant_8371" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="&quot;branch: Reset start-point to commit &quot; - baseCommit" />
    <mutant id="mutant_8370" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="&quot;branch: Reset start-point to commit &quot; / baseCommit" />
    <mutant id="mutant_7042" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="(sourceLength / 3)" />
    <mutant id="mutant_8373" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="&quot;branch: Reset start-point to commit &quot; * baseCommit" />
    <mutant id="mutant_7041" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="(sourceLength + 3)" />
    <mutant id="mutant_8372" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="&quot;branch: Reset start-point to commit &quot; % baseCommit" />
    <mutant id="mutant_7044" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="(sourceLength % 3)" />
    <mutant id="mutant_8375" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="&quot;branch: Created from commit &quot; / baseCommit" />
    <mutant id="mutant_7043" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="3" />
    <mutant id="mutant_8374" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="baseCommit" />
    <mutant id="mutant_7046" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="(sourceLength - 3)" />
    <mutant id="mutant_8377" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="&quot;branch: Created from commit &quot; % baseCommit" />
    <mutant id="mutant_7045" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.estimateIndexSize(int)" from="(sourceLength * 3)" to="sourceLength" />
    <mutant id="mutant_8376" viable="false" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Created from commit &quot; + baseCommit" to="&quot;branch: Created from commit &quot; - baseCommit" />
    <mutant id="mutant_7037" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) - &quot;]&quot;" />
    <mutant id="mutant_8368" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_7036" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])" />
    <mutant id="mutant_8367" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" />
    <mutant id="mutant_7039" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_9698" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) - (getObjectId()))" />
    <mutant id="mutant_7038" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) / &quot;]&quot;" />
    <mutant id="mutant_8369" viable="true" in="org.eclipse.jgit.api.CreateBranchCommand.call()" from="&quot;branch: Reset start-point to commit &quot; + baseCommit" to="&quot;branch: Reset start-point to commit &quot;" />
    <mutant id="mutant_9699" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) + &quot; &quot;)" to="((((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId())) / &quot; &quot;)" />
    <mutant id="mutant_8360" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="(&quot;\nChange-Id: I&quot; % (changeId.getName()))" />
    <mutant id="mutant_9692" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) * &quot; &quot;)" />
    <mutant id="mutant_9693" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) / (getObjectId()))" />
    <mutant id="mutant_7031" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) % (units[u]))" />
    <mutant id="mutant_8362" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="&quot;\nChange-Id: I&quot;" />
    <mutant id="mutant_9690" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) / &quot; &quot;)" />
    <mutant id="mutant_7030" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) * (units[u]))" />
    <mutant id="mutant_8361" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="(&quot;\nChange-Id: I&quot; - (changeId.getName()))" />
    <mutant id="mutant_9691" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_7033" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="(units[u])" />
    <mutant id="mutant_8364" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) - &quot;\n&quot;)" />
    <mutant id="mutant_9696" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) % (getObjectId()))" />
    <mutant id="mutant_7032" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) - (units[u]))" />
    <mutant id="mutant_8363" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) / &quot;\n&quot;)" />
    <mutant id="mutant_9697" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) * (getObjectId()))" />
    <mutant id="mutant_7035" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) + &quot;]&quot;" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u])) * &quot;]&quot;" />
    <mutant id="mutant_8366" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) % &quot;\n&quot;)" />
    <mutant id="mutant_9694" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="(getObjectId())" />
    <mutant id="mutant_7034" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" />
    <mutant id="mutant_8365" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (changeId.getName())) + &quot;\n&quot;)" to="((&quot;\nChange-Id: I&quot; + (changeId.getName())) * &quot;\n&quot;)" />
    <mutant id="mutant_9695" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="(((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;) + (getObjectId()))" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" />
    <mutant id="mutant_7026" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_8357" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="(changeId.getName())" />
    <mutant id="mutant_9689" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) % &quot; &quot;)" />
    <mutant id="mutant_7025" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="((&quot;DeltaIndex[&quot; + sz) - &quot; &quot;)" />
    <mutant id="mutant_8356" viable="true" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="((&quot;\nChange-Id: I&quot; + (ObjectId.zeroId().getName())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_7028" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="((&quot;DeltaIndex[&quot; + sz) % &quot; &quot;)" />
    <mutant id="mutant_8359" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="(&quot;\nChange-Id: I&quot; * (changeId.getName()))" />
    <mutant id="mutant_9687" viable="false" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) - &quot; &quot;)" />
    <mutant id="mutant_7027" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;)" to="((&quot;DeltaIndex[&quot; + sz) * &quot; &quot;)" />
    <mutant id="mutant_8358" viable="false" in="org.eclipse.jgit.api.CommitCommand.insertChangeId(org.eclipse.jgit.lib.ObjectId)" from="(&quot;\nChange-Id: I&quot; + (changeId.getName()))" to="(&quot;\nChange-Id: I&quot; / (changeId.getName()))" />
    <mutant id="mutant_9688" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry.toString()" from="((((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified())) + &quot; &quot;)" to="(((((getFileMode()) + &quot; &quot;) + (getLength())) + &quot; &quot;) + (getLastModified()))" />
    <mutant id="mutant_7029" viable="false" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.toString()" from="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) + (units[u]))" to="(((&quot;DeltaIndex[&quot; + sz) + &quot; &quot;) / (units[u]))" />
    <mutant id="mutant_7095" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="(shift * 1)" />
    <mutant id="mutant_7094" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="1" />
    <mutant id="mutant_7097" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="(shift / 1)" />
    <mutant id="mutant_7096" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="shift" />
    <mutant id="mutant_7099" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="(shift + 1)" />
    <mutant id="mutant_7098" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="(shift - 1)" to="(shift % 1)" />
    <mutant id="mutant_7091" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="32 + (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" />
    <mutant id="mutant_7090" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="Integer.numberOfLeadingZeros(worstCaseBlockCnt)" />
    <mutant id="mutant_7093" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="32" />
    <mutant id="mutant_7092" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="32 * (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" />
    <mutant id="mutant_7084" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="1 * worstCaseBlockCnt" />
    <mutant id="mutant_7083" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="worstCaseBlockCnt" />
    <mutant id="mutant_7086" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="1 % worstCaseBlockCnt" />
    <mutant id="mutant_7085" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="1 / worstCaseBlockCnt" />
    <mutant id="mutant_7088" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="32 / (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" />
    <mutant id="mutant_7087" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="1 - worstCaseBlockCnt" />
    <mutant id="mutant_7089" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner.tableSize(int)" from="32 - (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" to="32 % (Integer.numberOfLeadingZeros(worstCaseBlockCnt))" />
    <mutant id="mutant_7080" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="(table.length) + 1" />
    <mutant id="mutant_7082" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="1 + worstCaseBlockCnt" to="1" />
    <mutant id="mutant_7081" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="table.length" />
    <mutant id="mutant_7073" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="DeltaIndex.BLKSZ" />
    <mutant id="mutant_7072" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="len % (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_7075" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="len + (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_7074" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="len * (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_7077" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="1" />
    <mutant id="mutant_7076" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="(table.length) / 1" />
    <mutant id="mutant_7079" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="(table.length) * 1" />
    <mutant id="mutant_7078" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="(table.length) - 1" to="(table.length) % 1" />
    <mutant id="mutant_7071" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="len - (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_7070" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len / (DeltaIndex.BLKSZ)" to="len" />
    <mutant id="mutant_7069" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndexScanner(byte[],int)" from="len % (DeltaIndex.BLKSZ)" to="len + (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_16407" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="(ptr / (FileHeader.NEW_FILE_MODE.length))" />
    <mutant id="mutant_16408" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="(ptr - (FileHeader.NEW_NAME.length))" />
    <mutant id="mutant_16405" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="ptr" />
    <mutant id="mutant_16406" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="(ptr * (FileHeader.NEW_FILE_MODE.length))" />
    <mutant id="mutant_16409" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="(ptr % (FileHeader.NEW_NAME.length))" />
    <mutant id="mutant_16400" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="(mode + 1)" />
    <mutant id="mutant_16403" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="(ptr % (FileHeader.NEW_FILE_MODE.length))" />
    <mutant id="mutant_16404" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="FileHeader.NEW_FILE_MODE.length" />
    <mutant id="mutant_16401" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseIndexLine(int,int)" from="(mode - 1)" to="(mode / 1)" />
    <mutant id="mutant_16402" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewFileMode(int,int)" from="(ptr + (FileHeader.NEW_FILE_MODE.length))" to="(ptr - (FileHeader.NEW_FILE_MODE.length))" />
    <mutant id="mutant_16418" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="(ptr * (FileHeader.OLD_NAME.length))" />
    <mutant id="mutant_16419" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="(ptr / (FileHeader.OLD_NAME.length))" />
    <mutant id="mutant_16416" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="FileHeader.OLD_NAME.length" />
    <mutant id="mutant_16417" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="ptr" />
    <mutant id="mutant_16410" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="FileHeader.NEW_NAME.length" />
    <mutant id="mutant_16411" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="ptr" />
    <mutant id="mutant_16414" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="(ptr - (FileHeader.OLD_NAME.length))" />
    <mutant id="mutant_16415" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseOldName(int,int)" from="(ptr + (FileHeader.OLD_NAME.length))" to="(ptr % (FileHeader.OLD_NAME.length))" />
    <mutant id="mutant_16412" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="(ptr * (FileHeader.NEW_NAME.length))" />
    <mutant id="mutant_16413" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseNewName(int,int)" from="(ptr + (FileHeader.NEW_NAME.length))" to="(ptr / (FileHeader.NEW_NAME.length))" />
    <mutant id="mutant_15118" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="1" />
    <mutant id="mutant_16449" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(nContext)" />
    <mutant id="mutant_15119" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="(inPtr - 1)" />
    <mutant id="mutant_15112" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd % 1)" />
    <mutant id="mutant_16443" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="(((nContext) + (old.nDeleted)) % 1)" />
    <mutant id="mutant_15113" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd / 1)" />
    <mutant id="mutant_16444" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) / (old.nAdded))" />
    <mutant id="mutant_15110" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="(inEnd * inPtr)" />
    <mutant id="mutant_16441" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="(((nContext) + (old.nDeleted)) + 1)" />
    <mutant id="mutant_15111" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="1" />
    <mutant id="mutant_16442" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="((nContext) + (old.nDeleted))" />
    <mutant id="mutant_15116" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd * 1)" />
    <mutant id="mutant_16447" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(old.nAdded)" />
    <mutant id="mutant_15117" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="(inPtr * 1)" />
    <mutant id="mutant_16448" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) % (old.nAdded))" />
    <mutant id="mutant_15114" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd + 1)" />
    <mutant id="mutant_16445" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) - (old.nAdded))" />
    <mutant id="mutant_15115" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="inEnd" />
    <mutant id="mutant_16446" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) * (old.nAdded))" />
    <mutant id="mutant_16440" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="(((nContext) + (old.nDeleted)) / 1)" />
    <mutant id="mutant_15129" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inEnd / inPtr" />
    <mutant id="mutant_15123" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="1" />
    <mutant id="mutant_16454" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(nContext)" />
    <mutant id="mutant_15124" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd % 1)" />
    <mutant id="mutant_16455" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) * (old.nDeleted))" />
    <mutant id="mutant_15121" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="inPtr" />
    <mutant id="mutant_16452" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) % (old.nDeleted))" />
    <mutant id="mutant_15122" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="(inPtr / 1)" />
    <mutant id="mutant_16453" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) / (old.nDeleted))" />
    <mutant id="mutant_15127" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="inEnd" />
    <mutant id="mutant_16458" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) % (old.nDeleted))" />
    <mutant id="mutant_15128" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd * 1)" />
    <mutant id="mutant_16459" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) / (old.nDeleted))" />
    <mutant id="mutant_15125" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd / 1)" />
    <mutant id="mutant_16456" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) - (old.nDeleted))" />
    <mutant id="mutant_15126" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - 1)" to="(inEnd + 1)" />
    <mutant id="mutant_16457" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(old.nDeleted)" />
    <mutant id="mutant_16450" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) - (old.nDeleted))" />
    <mutant id="mutant_15120" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inPtr + 1)" to="(inPtr % 1)" />
    <mutant id="mutant_16451" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(old.nDeleted)" />
    <mutant id="mutant_16429" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="newStartLine" />
    <mutant id="mutant_16427" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="(last.getEndB()) % (newStartLine)" />
    <mutant id="mutant_16428" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="last.getEndB()" />
    <mutant id="mutant_16421" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="((editList.size()) / 1)" />
    <mutant id="mutant_16422" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="((editList.size()) * 1)" />
    <mutant id="mutant_16420" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="1" />
    <mutant id="mutant_16425" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="((editList.size()) % 1)" />
    <mutant id="mutant_16426" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="(last.getEndB()) / (newStartLine)" />
    <mutant id="mutant_16423" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="((editList.size()) + 1)" />
    <mutant id="mutant_16424" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="((editList.size()) - 1)" to="editList.size()" />
    <mutant id="mutant_15109" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="inEnd" />
    <mutant id="mutant_15107" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="(inEnd % inPtr)" />
    <mutant id="mutant_16438" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="(((nContext) + (old.nDeleted)) * 1)" />
    <mutant id="mutant_15108" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="(inEnd + inPtr)" />
    <mutant id="mutant_16439" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) - 1)" to="1" />
    <mutant id="mutant_15101" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="(in.substring(0, i)) - (super.quote(in.substring(i)))" />
    <mutant id="mutant_16432" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) - (old.nDeleted))" />
    <mutant id="mutant_15102" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="in.substring(0, i)" />
    <mutant id="mutant_16433" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(old.nDeleted)" />
    <mutant id="mutant_16430" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="(last.getEndB()) * (newStartLine)" />
    <mutant id="mutant_15100" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="(in.substring(0, i)) % (super.quote(in.substring(i)))" />
    <mutant id="mutant_16431" viable="true" in="org.eclipse.jgit.patch.HunkHeader(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.EditList)" from="(last.getEndB()) - (newStartLine)" to="(last.getEndB()) + (newStartLine)" />
    <mutant id="mutant_15105" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="(inEnd / inPtr)" />
    <mutant id="mutant_16436" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(nContext)" />
    <mutant id="mutant_15106" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dequote(byte[],int,int)" from="(inEnd - inPtr)" to="inPtr" />
    <mutant id="mutant_16437" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) * (old.nDeleted))" />
    <mutant id="mutant_15103" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="super.quote(in.substring(i))" />
    <mutant id="mutant_16434" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) % (old.nDeleted))" />
    <mutant id="mutant_15104" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="(in.substring(0, i)) / (super.quote(in.substring(i)))" />
    <mutant id="mutant_16435" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) / (old.nDeleted))" />
    <mutant id="mutant_9520" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="ptr / (t.getNameLength())" />
    <mutant id="mutant_9521" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="t.getNameLength()" />
    <mutant id="mutant_15156" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_16487" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(old.nDeleted)" />
    <mutant id="mutant_15157" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_16488" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) % (old.nDeleted))" />
    <mutant id="mutant_9519" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="ptr - (t.getNameLength())" />
    <mutant id="mutant_15154" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="c" />
    <mutant id="mutant_16485" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="(nContext) + (old.nAdded)" />
    <mutant id="mutant_15155" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_16486" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) - (old.nDeleted))" />
    <mutant id="mutant_15158" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="'0'" />
    <mutant id="mutant_16489" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) / (old.nDeleted))" />
    <mutant id="mutant_15159" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr * 1)" />
    <mutant id="mutant_9513" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="1" />
    <mutant id="mutant_9514" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="bs" />
    <mutant id="mutant_16480" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="(newLineCount) / ((nContext) + (old.nAdded))" />
    <mutant id="mutant_9511" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="(as - 1)" />
    <mutant id="mutant_9512" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="(as % 1)" />
    <mutant id="mutant_9517" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="(bs - 1)" />
    <mutant id="mutant_15152" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="'0'" />
    <mutant id="mutant_16483" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="(newLineCount) * ((nContext) + (old.nAdded))" />
    <mutant id="mutant_9518" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="(bs % 1)" />
    <mutant id="mutant_15153" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_16484" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="(newLineCount) % ((nContext) + (old.nAdded))" />
    <mutant id="mutant_9515" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="(bs / 1)" />
    <mutant id="mutant_15150" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="(in[(inPtr - 1)]) + '0'" />
    <mutant id="mutant_16481" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="newLineCount" />
    <mutant id="mutant_9516" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(bs + 1)" to="(bs * 1)" />
    <mutant id="mutant_15151" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="(in[(inPtr - 1)]) % '0'" />
    <mutant id="mutant_16482" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + (old.nAdded))" to="(newLineCount) + ((nContext) + (old.nAdded))" />
    <mutant id="mutant_9510" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="(as * 1)" />
    <mutant id="mutant_15167" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="(2 * (in.length))" />
    <mutant id="mutant_16498" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="((old.lineCount) % &quot;:&quot;)" />
    <mutant id="mutant_15168" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="(2 / (in.length))" />
    <mutant id="mutant_16499" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="(old.lineCount)" />
    <mutant id="mutant_9508" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="(as / 1)" />
    <mutant id="mutant_15165" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="2" />
    <mutant id="mutant_16496" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) % (old.nAdded))" />
    <mutant id="mutant_9509" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="as" />
    <mutant id="mutant_15166" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="(2 - (in.length))" />
    <mutant id="mutant_16497" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(nContext)" />
    <mutant id="mutant_15169" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="(2 % (in.length))" />
    <mutant id="mutant_9502" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="(removed.size()) / 1" />
    <mutant id="mutant_16490" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(nContext)" />
    <mutant id="mutant_9503" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="(removed.size()) * 1" />
    <mutant id="mutant_15160" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="1" />
    <mutant id="mutant_16491" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) * (old.nDeleted))" />
    <mutant id="mutant_9500" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="(entryIdx % 1)" />
    <mutant id="mutant_9501" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="1" />
    <mutant id="mutant_9506" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="(removed.size()) % 1" />
    <mutant id="mutant_15163" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr / 1)" />
    <mutant id="mutant_16494" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) * (old.nAdded))" />
    <mutant id="mutant_9507" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.isSamePrefix(java.lang.String,java.lang.String)" from="(as + 1)" to="1" />
    <mutant id="mutant_15164" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr + 1)" />
    <mutant id="mutant_16495" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(old.nAdded)" />
    <mutant id="mutant_9504" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="(removed.size()) + 1" />
    <mutant id="mutant_15161" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr % 1)" />
    <mutant id="mutant_16492" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) / (old.nAdded))" />
    <mutant id="mutant_9505" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.doCheckout()" from="(removed.size()) - 1" to="removed.size()" />
    <mutant id="mutant_15162" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="inPtr" />
    <mutant id="mutant_16493" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) - (old.nAdded))" />
    <mutant id="mutant_15134" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inEnd * inPtr" />
    <mutant id="mutant_16465" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="(old.lineCount) / ((nContext) + (old.nDeleted))" />
    <mutant id="mutant_15135" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr * 1)" />
    <mutant id="mutant_16466" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="(old.lineCount) % ((nContext) + (old.nDeleted))" />
    <mutant id="mutant_15132" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inEnd + inPtr" />
    <mutant id="mutant_16463" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="old.lineCount" />
    <mutant id="mutant_15133" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inEnd" />
    <mutant id="mutant_16464" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="(old.lineCount) + ((nContext) + (old.nDeleted))" />
    <mutant id="mutant_15138" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="inPtr" />
    <mutant id="mutant_16469" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) - (old.nAdded))" />
    <mutant id="mutant_15139" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr / 1)" />
    <mutant id="mutant_15136" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="1" />
    <mutant id="mutant_16467" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="(nContext) + (old.nDeleted)" />
    <mutant id="mutant_15137" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr % 1)" />
    <mutant id="mutant_16468" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) / (old.nAdded))" />
    <mutant id="mutant_15130" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inPtr" />
    <mutant id="mutant_16461" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) * (old.nDeleted))" />
    <mutant id="mutant_15131" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="inEnd - inPtr" to="inEnd % inPtr" />
    <mutant id="mutant_16462" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(old.lineCount) - ((nContext) + (old.nDeleted))" to="(old.lineCount) * ((nContext) + (old.nDeleted))" />
    <mutant id="mutant_16460" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(nContext)" />
    <mutant id="mutant_15145" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr / 1)" />
    <mutant id="mutant_16476" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) * (old.nAdded))" />
    <mutant id="mutant_15146" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr + 1)" />
    <mutant id="mutant_16477" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(old.nAdded)" />
    <mutant id="mutant_15143" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr % 1)" />
    <mutant id="mutant_16474" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) / (old.nAdded))" />
    <mutant id="mutant_15144" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="inPtr" />
    <mutant id="mutant_16475" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) - (old.nAdded))" />
    <mutant id="mutant_15149" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="in[(inPtr - 1)]" />
    <mutant id="mutant_15147" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="(in[(inPtr - 1)]) / '0'" />
    <mutant id="mutant_16478" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) % (old.nAdded))" />
    <mutant id="mutant_15148" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(in[(inPtr - 1)]) - '0'" to="(in[(inPtr - 1)]) * '0'" />
    <mutant id="mutant_16479" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(nContext)" />
    <mutant id="mutant_15141" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr * 1)" />
    <mutant id="mutant_16472" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) % (old.nAdded))" />
    <mutant id="mutant_15142" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="1" />
    <mutant id="mutant_16473" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(nContext)" />
    <mutant id="mutant_16470" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) * (old.nAdded))" />
    <mutant id="mutant_15140" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.dq(byte[],int,int)" from="(inPtr - 1)" to="(inPtr + 1)" />
    <mutant id="mutant_16471" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(old.nAdded)" />
    <mutant id="mutant_9560" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_9561" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="((infoOffset) / (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8230" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="(refLogMessage - &quot; to &quot;)" />
    <mutant id="mutant_8232" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="(refLogMessage + &quot; to &quot;)" />
    <mutant id="mutant_9564" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="((infoOffset) * (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8231" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="((refLogMessage + &quot; to &quot;) % toName)" />
    <mutant id="mutant_9565" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="((infoOffset) - (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8234" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="((refLogMessage + &quot; to &quot;) * toName)" />
    <mutant id="mutant_9562" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="DirCacheEntry.INFO_LEN" />
    <mutant id="mutant_8233" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="((refLogMessage + &quot; to &quot;) - toName)" />
    <mutant id="mutant_9563" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="((infoOffset) % (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_15198" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="startPtr" />
    <mutant id="mutant_15199" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="(endPtr) / (startPtr)" />
    <mutant id="mutant_8225" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="(refLogMessage * &quot; to &quot;)" />
    <mutant id="mutant_9557" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_15192" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="((startPtr) * index)" />
    <mutant id="mutant_8224" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="&quot;checkout: moving from &quot; - shortHeadRef" />
    <mutant id="mutant_9558" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15193" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="startPtr" />
    <mutant id="mutant_8227" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="(refLogMessage / &quot; to &quot;)" />
    <mutant id="mutant_9555" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15190" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="((startPtr) - index)" />
    <mutant id="mutant_8226" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="&quot; to &quot;" />
    <mutant id="mutant_9556" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15191" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="index" />
    <mutant id="mutant_8229" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="refLogMessage" />
    <mutant id="mutant_15196" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="endPtr" />
    <mutant id="mutant_8228" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="(refLogMessage + &quot; to &quot;)" to="(refLogMessage % &quot; to &quot;)" />
    <mutant id="mutant_15197" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="(endPtr) % (startPtr)" />
    <mutant id="mutant_9559" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15194" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="((startPtr) / index)" />
    <mutant id="mutant_15195" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="(endPtr) + (startPtr)" />
    <mutant id="mutant_9550" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="maxIdx + lastIdx" />
    <mutant id="mutant_8221" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="shortHeadRef" />
    <mutant id="mutant_9553" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="maxIdx * lastIdx" />
    <mutant id="mutant_8220" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="&quot;checkout: moving from &quot; / shortHeadRef" />
    <mutant id="mutant_9554" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="maxIdx" />
    <mutant id="mutant_8223" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="&quot;checkout: moving from &quot; % shortHeadRef" />
    <mutant id="mutant_9551" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="maxIdx % lastIdx" />
    <mutant id="mutant_8222" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="&quot;checkout: moving from &quot; * shortHeadRef" />
    <mutant id="mutant_9552" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="maxIdx / lastIdx" />
    <mutant id="mutant_8214" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="Constants.R_HEADS" />
    <mutant id="mutant_9546" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="(Math.min(eIdx, maxIdx)) / lastIdx" />
    <mutant id="mutant_8213" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="name" />
    <mutant id="mutant_9547" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="(Math.min(eIdx, maxIdx)) + lastIdx" />
    <mutant id="mutant_8216" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="(Constants.R_HEADS) - (name)" />
    <mutant id="mutant_9544" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="lastIdx" />
    <mutant id="mutant_8215" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="(Constants.R_HEADS) * (name)" />
    <mutant id="mutant_9545" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="(Math.min(eIdx, maxIdx)) % lastIdx" />
    <mutant id="mutant_8218" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="(Constants.R_HEADS) % (name)" />
    <mutant id="mutant_8217" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.getBranchName()" from="(Constants.R_HEADS) + (name)" to="(Constants.R_HEADS) / (name)" />
    <mutant id="mutant_9548" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="Math.min(eIdx, maxIdx)" />
    <mutant id="mutant_8219" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="&quot;checkout: moving from &quot; + shortHeadRef" to="&quot;checkout: moving from &quot;" />
    <mutant id="mutant_9549" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="maxIdx - lastIdx" to="lastIdx" />
    <mutant id="mutant_8210" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="(&quot;Unknown autocrlf option &quot; / autoCRLF)" />
    <mutant id="mutant_9542" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="(eIdx * 1)" />
    <mutant id="mutant_9543" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(Math.min(eIdx, maxIdx)) - lastIdx" to="(Math.min(eIdx, maxIdx)) * lastIdx" />
    <mutant id="mutant_8212" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="(&quot;Unknown autocrlf option &quot; % autoCRLF)" />
    <mutant id="mutant_9540" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="(eIdx - 1)" />
    <mutant id="mutant_8211" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="(&quot;Unknown autocrlf option &quot; - autoCRLF)" />
    <mutant id="mutant_9541" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="(eIdx / 1)" />
    <mutant id="mutant_15178" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((c &gt;&gt; 3) &amp; 7) - '0')" />
    <mutant id="mutant_15179" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((c &gt;&gt; 3) &amp; 7) / '0')" />
    <mutant id="mutant_15176" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((c &gt;&gt; 6) &amp; 3) * '0')" />
    <mutant id="mutant_15177" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((c &gt;&gt; 3) &amp; 7) * '0')" />
    <mutant id="mutant_8203" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="((old.refcnt) % 1)" />
    <mutant id="mutant_9535" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="entryPath" />
    <mutant id="mutant_15170" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="(2 + (in.length))" to="in.length" />
    <mutant id="mutant_8202" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="1" />
    <mutant id="mutant_9536" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="entryPath % &quot;/&quot;" />
    <mutant id="mutant_15171" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((c &gt;&gt; 6) &amp; 3) / '0')" />
    <mutant id="mutant_8205" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="((old.refcnt) * 1)" />
    <mutant id="mutant_9533" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="entryPath * &quot;/&quot;" />
    <mutant id="mutant_8204" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="old.refcnt" />
    <mutant id="mutant_9534" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="entryPath / &quot;/&quot;" />
    <mutant id="mutant_8207" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="(&quot;Unknown autocrlf option &quot; * autoCRLF)" />
    <mutant id="mutant_9539" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="eIdx" />
    <mutant id="mutant_15174" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((c &gt;&gt; 6) &amp; 3) % '0')" />
    <mutant id="mutant_8206" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="((old.refcnt) + 1)" />
    <mutant id="mutant_15175" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="'0'" />
    <mutant id="mutant_8209" viable="true" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="&quot;Unknown autocrlf option &quot;" />
    <mutant id="mutant_9537" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="(eIdx % 1)" />
    <mutant id="mutant_15172" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="((c &gt;&gt; 6) &amp; 3)" />
    <mutant id="mutant_8208" viable="false" in="org.eclipse.jgit.api.BlameCommand.getRawText(java.io.File)" from="(&quot;Unknown autocrlf option &quot; + autoCRLF)" to="autoCRLF" />
    <mutant id="mutant_9538" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor.applyEdits()" from="(eIdx + 1)" to="1" />
    <mutant id="mutant_15173" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 6) &amp; 3) + '0'))" to="(((c &gt;&gt; 6) &amp; 3) - '0')" />
    <mutant id="mutant_9531" viable="false" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="entryPath - &quot;/&quot;" />
    <mutant id="mutant_9532" viable="true" in="org.eclipse.jgit.dircache.DirCacheEditor$DeleteTree(java.lang.String)" from="entryPath + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_8201" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.unregisterFormat(java.lang.String)" from="((old.refcnt) - 1)" to="((old.refcnt) / 1)" />
    <mutant id="mutant_8200" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="((old.refcnt) * 1)" />
    <mutant id="mutant_9530" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="&quot;._&quot;" />
    <mutant id="mutant_15189" viable="true" in="org.eclipse.jgit.util.RawCharSequence.charAt(int)" from="((startPtr) + index)" to="((startPtr) % index)" />
    <mutant id="mutant_15187" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="'0'" />
    <mutant id="mutant_15188" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((c &gt;&gt; 0) &amp; 7) * '0')" />
    <mutant id="mutant_9524" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="ptr * (t.getNameLength())" />
    <mutant id="mutant_15181" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="'0'" />
    <mutant id="mutant_9525" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="f.getName()" />
    <mutant id="mutant_15182" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="(((c &gt;&gt; 3) &amp; 7) % '0')" />
    <mutant id="mutant_9522" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="ptr" />
    <mutant id="mutant_9523" viable="true" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkValidPathSegment(org.eclipse.jgit.lib.ObjectChecker,org.eclipse.jgit.treewalk.CanonicalTreeParser)" from="ptr + (t.getNameLength())" to="ptr % (t.getNameLength())" />
    <mutant id="mutant_15180" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 3) &amp; 7) + '0'))" to="((c &gt;&gt; 3) &amp; 7)" />
    <mutant id="mutant_9528" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="(&quot;._&quot; / (f.getName()))" />
    <mutant id="mutant_15185" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((c &gt;&gt; 0) &amp; 7) - '0')" />
    <mutant id="mutant_9529" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="(&quot;._&quot; - (f.getName()))" />
    <mutant id="mutant_15186" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((c &gt;&gt; 0) &amp; 7) / '0')" />
    <mutant id="mutant_9526" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="(&quot;._&quot; * (f.getName()))" />
    <mutant id="mutant_15183" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="((c &gt;&gt; 0) &amp; 7)" />
    <mutant id="mutant_9527" viable="false" in="org.eclipse.jgit.dircache.DirCacheCheckout.checkoutEntry(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.lib.ObjectReader)" from="(&quot;._&quot; + (f.getName()))" to="(&quot;._&quot; % (f.getName()))" />
    <mutant id="mutant_15184" viable="true" in="org.eclipse.jgit.util.QuotedString$GitPathStyle.quote(java.lang.String)" from="((char)(((c &gt;&gt; 0) &amp; 7) + '0'))" to="(((c &gt;&gt; 0) &amp; 7) % '0')" />
    <mutant id="mutant_8272" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="((mainlineParentNumber.intValue()) % 1)" />
    <mutant id="mutant_8271" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="((mainlineParentNumber.intValue()) * 1)" />
    <mutant id="mutant_8274" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="(dir % &quot;/&quot;)" />
    <mutant id="mutant_8273" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="dir" />
    <mutant id="mutant_8276" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="(dir - &quot;/&quot;)" />
    <mutant id="mutant_8275" viable="true" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_8278" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="(dir * &quot;/&quot;)" />
    <mutant id="mutant_8277" viable="false" in="org.eclipse.jgit.api.CleanCommand.call()" from="(dir + &quot;/&quot;)" to="(dir / &quot;/&quot;)" />
    <mutant id="mutant_8270" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="mainlineParentNumber.intValue()" />
    <mutant id="mutant_8269" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="((mainlineParentNumber.intValue()) + 1)" />
    <mutant id="mutant_8268" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="1" />
    <mutant id="mutant_9599" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="expLen - actLen" />
    <mutant id="mutant_8261" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="((reflogPrefix) + &quot; &quot;)" />
    <mutant id="mutant_9593" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="(expLen % actLen)" />
    <mutant id="mutant_8260" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="((reflogPrefix) / &quot; &quot;)" />
    <mutant id="mutant_9594" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="(expLen / actLen)" />
    <mutant id="mutant_8263" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="(((reflogPrefix) + &quot; &quot;) - (srcCommit.getShortMessage()))" />
    <mutant id="mutant_9591" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="(expLen * actLen)" />
    <mutant id="mutant_8262" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="(((reflogPrefix) + &quot; &quot;) / (srcCommit.getShortMessage()))" />
    <mutant id="mutant_9592" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="actLen" />
    <mutant id="mutant_8265" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="srcCommit.getShortMessage()" />
    <mutant id="mutant_9597" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="(expLen - actLen) / skipped" />
    <mutant id="mutant_8264" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="(((reflogPrefix) + &quot; &quot;) % (srcCommit.getShortMessage()))" />
    <mutant id="mutant_9598" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen) - skipped" to="(expLen - actLen) % skipped" />
    <mutant id="mutant_8267" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.getParentCommit(org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevWalk)" from="((mainlineParentNumber.intValue()) - 1)" to="((mainlineParentNumber.intValue()) / 1)" />
    <mutant id="mutant_9595" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="(expLen + actLen)" />
    <mutant id="mutant_8266" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="(((reflogPrefix) + &quot; &quot;) + (srcCommit.getShortMessage()))" to="(((reflogPrefix) + &quot; &quot;) * (srcCommit.getShortMessage()))" />
    <mutant id="mutant_9596" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(expLen - actLen)" to="expLen" />
    <mutant id="mutant_9590" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="(actLen - 8)" />
    <mutant id="mutant_8258" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="((reflogPrefix) - &quot; &quot;)" />
    <mutant id="mutant_8257" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9588" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="8" />
    <mutant id="mutant_8259" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="((reflogPrefix) * &quot; &quot;)" />
    <mutant id="mutant_9589" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="(actLen * 8)" />
    <mutant id="mutant_8250" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) - (srcCommit.getShortMessage())" />
    <mutant id="mutant_9582" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="len - pathLen" />
    <mutant id="mutant_9583" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="pathLen" />
    <mutant id="mutant_8252" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(srcCommit.getId().abbreviate(7).name()) + &quot; &quot;" />
    <mutant id="mutant_9580" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="len / pathLen" />
    <mutant id="mutant_8251" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) % (srcCommit.getShortMessage())" />
    <mutant id="mutant_9581" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="len" />
    <mutant id="mutant_8254" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) / (srcCommit.getShortMessage())" />
    <mutant id="mutant_9586" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="(actLen / 8)" />
    <mutant id="mutant_8253" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="srcCommit.getShortMessage()" />
    <mutant id="mutant_9587" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="(actLen % 8)" />
    <mutant id="mutant_8256" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="((reflogPrefix) % &quot; &quot;)" />
    <mutant id="mutant_9584" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="len * pathLen" />
    <mutant id="mutant_8255" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((reflogPrefix) + &quot; &quot;)" to="(reflogPrefix)" />
    <mutant id="mutant_9585" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="(actLen + 8)" to="actLen" />
    <mutant id="mutant_15099" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.substring(0, i)) + (super.quote(in.substring(i)))" to="(in.substring(0, i)) * (super.quote(in.substring(i)))" />
    <mutant id="mutant_8247" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) - &quot; &quot;)" />
    <mutant id="mutant_9579" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="len + pathLen" to="len % pathLen" />
    <mutant id="mutant_15093" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="in.indexOf('/')" />
    <mutant id="mutant_8246" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) * &quot; &quot;)" />
    <mutant id="mutant_15094" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="1" />
    <mutant id="mutant_8249" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) * (srcCommit.getShortMessage())" />
    <mutant id="mutant_9577" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) * (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_15091" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="in" />
    <mutant id="mutant_8248" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) % &quot; &quot;)" />
    <mutant id="mutant_9578" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="infoOffset" />
    <mutant id="mutant_15092" viable="false" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="in + &quot;/&quot;" to="in % &quot;/&quot;" />
    <mutant id="mutant_15097" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="(in.indexOf('/')) * 1" />
    <mutant id="mutant_15098" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="(in.indexOf('/')) % 1" />
    <mutant id="mutant_15095" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="(in.indexOf('/')) - 1" />
    <mutant id="mutant_15096" viable="true" in="org.eclipse.jgit.util.QuotedString$BourneUserPathStyle.quote(java.lang.String)" from="(in.indexOf('/')) + 1" to="(in.indexOf('/')) / 1" />
    <mutant id="mutant_9571" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="((DirCacheEntry.INFO_LEN_EXTENDED) / (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_9572" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="((DirCacheEntry.INFO_LEN_EXTENDED) % (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8241" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) / (name))" />
    <mutant id="mutant_8240" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) - (name))" />
    <mutant id="mutant_9570" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="DirCacheEntry.INFO_LEN" />
    <mutant id="mutant_8243" viable="false" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) / &quot; &quot;)" />
    <mutant id="mutant_9575" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="DirCacheEntry.P_FLAGS" />
    <mutant id="mutant_8242" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) % (name))" />
    <mutant id="mutant_9576" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) - (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8245" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(srcCommit.getId().abbreviate(7).name())" />
    <mutant id="mutant_9573" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) % (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8244" viable="true" in="org.eclipse.jgit.api.CherryPickCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_9574" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.P_FLAGS))" to="((infoOffset) / (DirCacheEntry.P_FLAGS))" />
    <mutant id="mutant_8236" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="toName" />
    <mutant id="mutant_9568" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="((DirCacheEntry.INFO_LEN_EXTENDED) * (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8235" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.call()" from="((refLogMessage + &quot; to &quot;) + toName)" to="((refLogMessage + &quot; to &quot;) / toName)" />
    <mutant id="mutant_9569" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="DirCacheEntry.INFO_LEN_EXTENDED" />
    <mutant id="mutant_8238" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="Constants.R_HEADS" />
    <mutant id="mutant_9566" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((infoOffset) + (DirCacheEntry.INFO_LEN))" to="infoOffset" />
    <mutant id="mutant_8237" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="name" />
    <mutant id="mutant_9567" viable="true" in="org.eclipse.jgit.dircache.DirCacheEntry(byte[],org.eclipse.jgit.util.MutableInteger,java.io.InputStream,java.security.MessageDigest,int,int)" from="((DirCacheEntry.INFO_LEN_EXTENDED) - (DirCacheEntry.INFO_LEN))" to="((DirCacheEntry.INFO_LEN_EXTENDED) + (DirCacheEntry.INFO_LEN))" />
    <mutant id="mutant_8239" viable="false" in="org.eclipse.jgit.api.CheckoutCommand.processOptions()" from="((Constants.R_HEADS) + (name))" to="((Constants.R_HEADS) * (name))" />
    <mutant id="mutant_8294" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="((Constants.R_REMOTES) * (config.getName()))" />
    <mutant id="mutant_8293" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="((Constants.R_REMOTES) - (config.getName()))" />
    <mutant id="mutant_8296" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="((Constants.R_REMOTES) % (config.getName()))" />
    <mutant id="mutant_8295" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="(config.getName())" />
    <mutant id="mutant_8298" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="((Constants.R_REMOTES) + (config.getName())) * &quot;/&quot;" />
    <mutant id="mutant_8297" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="(Constants.R_REMOTES) + (config.getName())" />
    <mutant id="mutant_8299" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName())) + &quot;/&quot;" to="((Constants.R_REMOTES) + (config.getName())) - &quot;/&quot;" />
    <mutant id="mutant_8290" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.MASTER" />
    <mutant id="mutant_8292" viable="true" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="(Constants.R_REMOTES)" />
    <mutant id="mutant_8291" viable="false" in="org.eclipse.jgit.api.CloneCommand.fetch(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((Constants.R_REMOTES) + (config.getName()))" to="((Constants.R_REMOTES) / (config.getName()))" />
    <mutant id="mutant_8283" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="&quot;*&quot;" />
    <mutant id="mutant_8282" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) % &quot;*&quot;)" />
    <mutant id="mutant_8285" viable="true" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.R_HEADS" />
    <mutant id="mutant_8284" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) / &quot;*&quot;)" />
    <mutant id="mutant_8287" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) - (Constants.MASTER))" />
    <mutant id="mutant_8286" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) * (Constants.MASTER))" />
    <mutant id="mutant_8289" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) / (Constants.MASTER))" />
    <mutant id="mutant_8288" viable="false" in="org.eclipse.jgit.api.CloneCommand.findBranchToCheckout(org.eclipse.jgit.transport.FetchResult)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) % (Constants.MASTER))" />
    <mutant id="mutant_8281" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) - &quot;*&quot;)" />
    <mutant id="mutant_8280" viable="true" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="Constants.R_HEADS" />
    <mutant id="mutant_8279" viable="false" in="org.eclipse.jgit.api.CloneCommand.calculateRefSpecs(java.lang.String)" from="((Constants.R_HEADS) + &quot;*&quot;)" to="((Constants.R_HEADS) * &quot;*&quot;)" />
    <mutant id="mutant_16528" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="(((nContext) + (old.nDeleted)) + &quot;:&quot;) % ((nContext) + (old.nAdded))" />
    <mutant id="mutant_16529" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="(((nContext) + (old.nDeleted)) + &quot;:&quot;) - ((nContext) + (old.nAdded))" />
    <mutant id="mutant_16526" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) % (old.nAdded))" />
    <mutant id="mutant_16527" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(nContext)" />
    <mutant id="mutant_16520" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_16521" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="(((nContext) + (old.nDeleted)) - &quot;:&quot;)" />
    <mutant id="mutant_16524" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) * (old.nAdded))" />
    <mutant id="mutant_16525" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="(old.nAdded)" />
    <mutant id="mutant_16522" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) / (old.nAdded))" />
    <mutant id="mutant_16523" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nAdded))" to="((nContext) - (old.nAdded))" />
    <mutant id="mutant_15208" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="((startPtr) * end)" />
    <mutant id="mutant_16539" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine % 1)" />
    <mutant id="mutant_15209" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="((startPtr) / end)" />
    <mutant id="mutant_15206" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="((startPtr) / start)" />
    <mutant id="mutant_16537" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine + 1)" />
    <mutant id="mutant_15207" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="((startPtr) % end)" />
    <mutant id="mutant_16538" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine / 1)" />
    <mutant id="mutant_15200" viable="true" in="org.eclipse.jgit.util.RawCharSequence.length()" from="(endPtr) - (startPtr)" to="(endPtr) * (startPtr)" />
    <mutant id="mutant_16531" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="(((nContext) + (old.nDeleted)) + &quot;:&quot;) * ((nContext) + (old.nAdded))" />
    <mutant id="mutant_15201" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="((startPtr) % start)" />
    <mutant id="mutant_16532" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="(((nContext) + (old.nDeleted)) + &quot;:&quot;) / ((nContext) + (old.nAdded))" />
    <mutant id="mutant_16530" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="(nContext) + (old.nAdded)" />
    <mutant id="mutant_15204" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="((startPtr) * start)" />
    <mutant id="mutant_16535" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="1" />
    <mutant id="mutant_15205" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="startPtr" />
    <mutant id="mutant_16536" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="oLine" />
    <mutant id="mutant_15202" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="((startPtr) - start)" />
    <mutant id="mutant_16533" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;) + ((nContext) + (old.nAdded))" to="((nContext) + (old.nDeleted)) + &quot;:&quot;" />
    <mutant id="mutant_15203" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + start)" to="start" />
    <mutant id="mutant_16534" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine * 1)" />
    <mutant id="mutant_16506" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="newLineCount" />
    <mutant id="mutant_16507" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="((old.lineCount) + &quot;:&quot;) * (newLineCount)" />
    <mutant id="mutant_16504" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="((old.lineCount) + &quot;:&quot;) - (newLineCount)" />
    <mutant id="mutant_16505" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="((old.lineCount) + &quot;:&quot;) % (newLineCount)" />
    <mutant id="mutant_16508" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="(old.lineCount) + &quot;:&quot;" />
    <mutant id="mutant_16509" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;) + (newLineCount)" to="((old.lineCount) + &quot;:&quot;) / (newLineCount)" />
    <mutant id="mutant_16502" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="((old.lineCount) - &quot;:&quot;)" />
    <mutant id="mutant_16503" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_16500" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="((old.lineCount) / &quot;:&quot;)" />
    <mutant id="mutant_16501" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.lineCount) + &quot;:&quot;)" to="((old.lineCount) * &quot;:&quot;)" />
    <mutant id="mutant_16517" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="(((nContext) + (old.nDeleted)) * &quot;:&quot;)" />
    <mutant id="mutant_16518" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="(((nContext) + (old.nDeleted)) % &quot;:&quot;)" />
    <mutant id="mutant_16515" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) * (old.nDeleted))" />
    <mutant id="mutant_16516" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="(((nContext) + (old.nDeleted)) / &quot;:&quot;)" />
    <mutant id="mutant_16519" viable="false" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(((nContext) + (old.nDeleted)) + &quot;:&quot;)" to="((nContext) + (old.nDeleted))" />
    <mutant id="mutant_16510" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) - (old.nDeleted))" />
    <mutant id="mutant_16513" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) / (old.nDeleted))" />
    <mutant id="mutant_16514" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(nContext)" />
    <mutant id="mutant_16511" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="(old.nDeleted)" />
    <mutant id="mutant_16512" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + (old.nDeleted))" to="((nContext) % (old.nDeleted))" />
    <mutant id="mutant_15239" viable="false" in="?" from="'f' + 1" to="'f' % 1" />
    <mutant id="mutant_15233" viable="false" in="?" from="((byte)(i - '0'))" to="i" />
    <mutant id="mutant_16564" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_15234" viable="false" in="?" from="((byte)(i - '0'))" to="i * '0'" />
    <mutant id="mutant_16565" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_15231" viable="false" in="?" from="((byte)(i - '0'))" to="i % '0'" />
    <mutant id="mutant_16562" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_15232" viable="false" in="?" from="((byte)(i - '0'))" to="i + '0'" />
    <mutant id="mutant_16563" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_15237" viable="false" in="?" from="'f' + 1" to="1" />
    <mutant id="mutant_16568" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_15238" viable="false" in="?" from="'f' + 1" to="'f'" />
    <mutant id="mutant_16569" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_15235" viable="false" in="?" from="((byte)(i - '0'))" to="i / '0'" />
    <mutant id="mutant_16566" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_15236" viable="false" in="?" from="((byte)(i - '0'))" to="'0'" />
    <mutant id="mutant_16567" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_16560" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_15230" viable="false" in="?" from="'9' + 1" to="'9' / 1" />
    <mutant id="mutant_16561" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_15244" viable="false" in="?" from="((byte)(i - '0'))" to="i + '0'" />
    <mutant id="mutant_16575" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_15245" viable="false" in="?" from="((byte)(i - '0'))" to="i" />
    <mutant id="mutant_16576" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_15242" viable="false" in="?" from="'f' + 1" to="'f' - 1" />
    <mutant id="mutant_16573" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_15243" viable="false" in="?" from="((byte)(i - '0'))" to="i % '0'" />
    <mutant id="mutant_16574" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_15248" viable="false" in="?" from="((byte)(i - '0'))" to="'0'" />
    <mutant id="mutant_16579" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_15249" viable="false" in="?" from="(i - 'a')" to="(i % 'a')" />
    <mutant id="mutant_15246" viable="false" in="?" from="((byte)(i - '0'))" to="i * '0'" />
    <mutant id="mutant_16577" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_15247" viable="false" in="?" from="((byte)(i - '0'))" to="i / '0'" />
    <mutant id="mutant_16578" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_15240" viable="false" in="?" from="'f' + 1" to="'f' / 1" />
    <mutant id="mutant_16571" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_15241" viable="false" in="?" from="'f' + 1" to="'f' * 1" />
    <mutant id="mutant_16572" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16570" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_15219" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="ptr * 1" />
    <mutant id="mutant_15217" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="end % 1" />
    <mutant id="mutant_16548" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="oLine" />
    <mutant id="mutant_15218" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="end" />
    <mutant id="mutant_16549" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine + 1)" />
    <mutant id="mutant_15211" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="end" />
    <mutant id="mutant_16542" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="nLine" />
    <mutant id="mutant_15212" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="((startPtr) - end)" />
    <mutant id="mutant_16543" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine / 1)" />
    <mutant id="mutant_16540" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine + 1)" />
    <mutant id="mutant_15210" viable="true" in="org.eclipse.jgit.util.RawCharSequence.subSequence(int,int)" from="((startPtr) + end)" to="startPtr" />
    <mutant id="mutant_16541" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="1" />
    <mutant id="mutant_15215" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="end / 1" />
    <mutant id="mutant_16546" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine * 1)" />
    <mutant id="mutant_15216" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="end + 1" />
    <mutant id="mutant_16547" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="1" />
    <mutant id="mutant_15213" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="1" />
    <mutant id="mutant_16544" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine * 1)" />
    <mutant id="mutant_15214" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="end - 1" to="end * 1" />
    <mutant id="mutant_16545" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine % 1)" />
    <mutant id="mutant_15228" viable="false" in="?" from="'9' + 1" to="'9'" />
    <mutant id="mutant_16559" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_15229" viable="false" in="?" from="'9' + 1" to="'9' - 1" />
    <mutant id="mutant_15222" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="ptr % 1" />
    <mutant id="mutant_16553" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="1" />
    <mutant id="mutant_15223" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="ptr / 1" />
    <mutant id="mutant_16554" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="nLine" />
    <mutant id="mutant_15220" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="ptr - 1" />
    <mutant id="mutant_16551" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine % 1)" />
    <mutant id="mutant_15221" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="1" />
    <mutant id="mutant_16552" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine + 1)" />
    <mutant id="mutant_15226" viable="false" in="?" from="'9' + 1" to="'9' * 1" />
    <mutant id="mutant_16557" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine % 1)" />
    <mutant id="mutant_15227" viable="false" in="?" from="'9' + 1" to="'9' % 1" />
    <mutant id="mutant_16558" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_15224" viable="true" in="org.eclipse.jgit.util.RawCharUtil.trimTrailingWhitespace(byte[],int,int)" from="ptr + 1" to="ptr" />
    <mutant id="mutant_16555" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine / 1)" />
    <mutant id="mutant_15225" viable="false" in="?" from="'9' + 1" to="1" />
    <mutant id="mutant_16556" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(nLine - 1)" to="(nLine * 1)" />
    <mutant id="mutant_16550" viable="true" in="org.eclipse.jgit.patch.HunkHeader.toEditList()" from="(oLine - 1)" to="(oLine / 1)" />
    <mutant id="mutant_9400" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="((entryCnt) - 16)" />
    <mutant id="mutant_15277" viable="false" in="?" from="'z' + 1" to="'z' * 1" />
    <mutant id="mutant_15278" viable="false" in="?" from="'z' + 1" to="'z' % 1" />
    <mutant id="mutant_15275" viable="false" in="?" from="'z' + 1" to="'z'" />
    <mutant id="mutant_15276" viable="false" in="?" from="'z' + 1" to="'z' - 1" />
    <mutant id="mutant_15279" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr * 1)" />
    <mutant id="mutant_15270" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="(i - 'A') - 10" />
    <mutant id="mutant_15273" viable="false" in="?" from="'z' + 1" to="1" />
    <mutant id="mutant_15274" viable="false" in="?" from="'z' + 1" to="'z' / 1" />
    <mutant id="mutant_15271" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="i - 'A'" />
    <mutant id="mutant_15272" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="10" />
    <mutant id="mutant_15288" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr + 1)" />
    <mutant id="mutant_15289" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr / 1)" />
    <mutant id="mutant_15286" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="1" />
    <mutant id="mutant_15287" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr % 1)" />
    <mutant id="mutant_15280" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="1" />
    <mutant id="mutant_15281" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr % 1)" />
    <mutant id="mutant_15284" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="ptr" />
    <mutant id="mutant_15285" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr * 1)" />
    <mutant id="mutant_15282" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr + 1)" />
    <mutant id="mutant_15283" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="(ptr / 1)" />
    <mutant id="mutant_15255" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="(i - 'a') - 10" />
    <mutant id="mutant_16586" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_15256" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="i - 'a'" />
    <mutant id="mutant_16587" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_15253" viable="false" in="?" from="(i - 'a')" to="(i * 'a')" />
    <mutant id="mutant_16584" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_15254" viable="false" in="?" from="(i - 'a')" to="'a'" />
    <mutant id="mutant_16585" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_15259" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="(i - 'a') % 10" />
    <mutant id="mutant_15257" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="(i - 'a') * 10" />
    <mutant id="mutant_16588" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_15258" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="(i - 'a') / 10" />
    <mutant id="mutant_16589" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_15251" viable="false" in="?" from="(i - 'a')" to="i" />
    <mutant id="mutant_16582" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_15252" viable="false" in="?" from="(i - 'a')" to="(i / 'a')" />
    <mutant id="mutant_16583" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_16580" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_15250" viable="false" in="?" from="(i - 'a')" to="(i + 'a')" />
    <mutant id="mutant_16581" viable="true" in="org.eclipse.jgit.patch.HunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_15266" viable="false" in="?" from="(i - 'A')" to="'A'" />
    <mutant id="mutant_16597" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_15267" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="(i - 'A') * 10" />
    <mutant id="mutant_16598" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_15264" viable="false" in="?" from="(i - 'A')" to="(i / 'A')" />
    <mutant id="mutant_16595" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_15265" viable="false" in="?" from="(i - 'A')" to="(i * 'A')" />
    <mutant id="mutant_16596" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_15268" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="(i - 'A') / 10" />
    <mutant id="mutant_16599" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_15269" viable="false" in="?" from="((byte)((i - 'A') + 10))" to="(i - 'A') % 10" />
    <mutant id="mutant_16590" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_15262" viable="false" in="?" from="(i - 'A')" to="(i + 'A')" />
    <mutant id="mutant_16593" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_15263" viable="false" in="?" from="(i - 'A')" to="i" />
    <mutant id="mutant_16594" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_15260" viable="false" in="?" from="((byte)((i - 'a') + 10))" to="10" />
    <mutant id="mutant_16591" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_15261" viable="false" in="?" from="(i - 'A')" to="(i % 'A')" />
    <mutant id="mutant_16592" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_9440" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="infoLength - (entryCnt)" />
    <mutant id="mutant_8111" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="((fh.getHunks().size()) / 1)" />
    <mutant id="mutant_9443" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) % 1000" />
    <mutant id="mutant_8110" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) * (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_9444" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="snapshot.lastModified()" />
    <mutant id="mutant_8113" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="((fh.getHunks().size()) % 1)" />
    <mutant id="mutant_9441" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) - 1000" />
    <mutant id="mutant_8112" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="1" />
    <mutant id="mutant_9442" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) + 1000" />
    <mutant id="mutant_8104" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="&quot;. &quot;" />
    <mutant id="mutant_9436" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="infoLength % (entryCnt)" />
    <mutant id="mutant_8103" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="(message / &quot;. &quot;)" />
    <mutant id="mutant_9437" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="infoLength / (entryCnt)" />
    <mutant id="mutant_8106" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) - (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_9434" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) + 1000000" />
    <mutant id="mutant_8105" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="message + &quot;. &quot;" />
    <mutant id="mutant_9435" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="infoLength + (entryCnt)" />
    <mutant id="mutant_8108" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) % (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_8107" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc)" />
    <mutant id="mutant_9438" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="infoLength" />
    <mutant id="mutant_8109" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) / (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_9439" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="infoLength * (entryCnt)" to="entryCnt" />
    <mutant id="mutant_8100" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="(message * &quot;. &quot;)" />
    <mutant id="mutant_9432" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)((snapshot.lastModified()) % 1000))" />
    <mutant id="mutant_9433" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) / 1000000" />
    <mutant id="mutant_8102" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="(message % &quot;. &quot;)" />
    <mutant id="mutant_9430" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) % 1000000" />
    <mutant id="mutant_8101" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="(message - &quot;. &quot;)" />
    <mutant id="mutant_9431" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="1000000" />
    <mutant id="mutant_9425" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(snapshot.lastModified())" />
    <mutant id="mutant_9426" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) * 1000)" />
    <mutant id="mutant_9423" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) - 1000)" />
    <mutant id="mutant_9424" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) + 1000)" />
    <mutant id="mutant_9429" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) - 1000000" />
    <mutant id="mutant_9427" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="1000" />
    <mutant id="mutant_9428" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) / 1000)" />
    <mutant id="mutant_9421" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) * 1000" />
    <mutant id="mutant_9422" viable="true" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="1000" />
    <mutant id="mutant_9420" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="snapshot.lastModified()" />
    <mutant id="mutant_15299" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="(src.length)" />
    <mutant id="mutant_15297" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="(ptr - (src.length))" />
    <mutant id="mutant_15298" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="(ptr % (src.length))" />
    <mutant id="mutant_9414" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="lastIdx + eIdx" />
    <mutant id="mutant_15291" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="(value / 10)" />
    <mutant id="mutant_9415" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="lastIdx / eIdx" />
    <mutant id="mutant_15292" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="(value * 10)" />
    <mutant id="mutant_9412" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="lastIdx % eIdx" />
    <mutant id="mutant_9413" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="eIdx" />
    <mutant id="mutant_15290" viable="true" in="org.eclipse.jgit.util.RawParseUtils.endOfParagraph(byte[],int)" from="(ptr - 1)" to="ptr" />
    <mutant id="mutant_9418" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) + 1000" />
    <mutant id="mutant_15295" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="value" />
    <mutant id="mutant_9419" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) % 1000" />
    <mutant id="mutant_15296" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="10" />
    <mutant id="mutant_9416" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="lastIdx * eIdx" />
    <mutant id="mutant_15293" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="(value - 10)" />
    <mutant id="mutant_9417" viable="false" in="org.eclipse.jgit.dircache.DirCache.readFrom(java.io.InputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) - 1000" />
    <mutant id="mutant_15294" viable="true" in="org.eclipse.jgit.util.RawParseUtils.formatBase10(byte[],int,int)" from="(value % 10)" to="(value + 10)" />
    <mutant id="mutant_9410" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="(eIdx * 1)" />
    <mutant id="mutant_9411" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="lastIdx - eIdx" to="lastIdx" />
    <mutant id="mutant_9409" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="(eIdx / 1)" />
    <mutant id="mutant_9403" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="16" />
    <mutant id="mutant_9404" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="entryCnt" />
    <mutant id="mutant_9401" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="((entryCnt) % 16)" />
    <mutant id="mutant_9402" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="((entryCnt) / 16)" />
    <mutant id="mutant_9407" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="eIdx" />
    <mutant id="mutant_9408" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="(eIdx - 1)" />
    <mutant id="mutant_9405" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="(eIdx % 1)" />
    <mutant id="mutant_9406" viable="true" in="org.eclipse.jgit.dircache.DirCache.getEntriesWithin(java.lang.String)" from="(eIdx + 1)" to="1" />
    <mutant id="mutant_8151" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) / 1)" />
    <mutant id="mutant_9483" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="a.getPathString()" />
    <mutant id="mutant_8150" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) % 1)" />
    <mutant id="mutant_9484" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" />
    <mutant id="mutant_8153" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) - pos)" />
    <mutant id="mutant_9481" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="(((msg + &quot;: &quot;) + (a.getStage())) % &quot; &quot;)" />
    <mutant id="mutant_8152" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) + 1)" />
    <mutant id="mutant_9482" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="((msg + &quot;: &quot;) + (a.getStage()))" />
    <mutant id="mutant_8155" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) / pos)" />
    <mutant id="mutant_9487" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) - (a.getPathString()))" />
    <mutant id="mutant_8154" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="pos" />
    <mutant id="mutant_9488" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) / (a.getPathString()))" />
    <mutant id="mutant_8157" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) % pos)" />
    <mutant id="mutant_9485" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) * (a.getPathString()))" />
    <mutant id="mutant_8156" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) * pos)" />
    <mutant id="mutant_9486" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) + (a.getPathString()))" to="((((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;) % (a.getPathString()))" />
    <mutant id="mutant_9480" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="(((msg + &quot;: &quot;) + (a.getStage())) - &quot; &quot;)" />
    <mutant id="mutant_8148" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(hh.getNewStartLine())" />
    <mutant id="mutant_8147" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="1" />
    <mutant id="mutant_9478" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="(((msg + &quot;: &quot;) + (a.getStage())) * &quot; &quot;)" />
    <mutant id="mutant_8149" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) * 1)" />
    <mutant id="mutant_9479" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_8140" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) + 1)" />
    <mutant id="mutant_9472" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="((msg + &quot;: &quot;) % (a.getStage()))" />
    <mutant id="mutant_9473" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="(msg + &quot;: &quot;)" />
    <mutant id="mutant_8142" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="pos" />
    <mutant id="mutant_9470" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="(msg % &quot;: &quot;)" />
    <mutant id="mutant_8141" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) - pos)" />
    <mutant id="mutant_9471" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="((msg + &quot;: &quot;) - (a.getStage()))" />
    <mutant id="mutant_8144" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) * pos)" />
    <mutant id="mutant_9476" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="((msg + &quot;: &quot;) / (a.getStage()))" />
    <mutant id="mutant_8143" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) / pos)" />
    <mutant id="mutant_9477" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(((msg + &quot;: &quot;) + (a.getStage())) + &quot; &quot;)" to="(((msg + &quot;: &quot;) + (a.getStage())) / &quot; &quot;)" />
    <mutant id="mutant_8146" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((hh.getNewStartLine()) - 1)" />
    <mutant id="mutant_9474" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="((msg + &quot;: &quot;) * (a.getStage()))" />
    <mutant id="mutant_8145" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) % pos)" />
    <mutant id="mutant_9475" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="((msg + &quot;: &quot;) + (a.getStage()))" to="(a.getStage())" />
    <mutant id="mutant_8137" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) * 1)" />
    <mutant id="mutant_9469" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="(msg * &quot;: &quot;)" />
    <mutant id="mutant_8136" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(hh.getNewStartLine())" />
    <mutant id="mutant_8139" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) / 1)" />
    <mutant id="mutant_9467" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="(msg / &quot;: &quot;)" />
    <mutant id="mutant_8138" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) % 1)" />
    <mutant id="mutant_9468" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_9461" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="cur" />
    <mutant id="mutant_9462" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="(cnt * cur)" />
    <mutant id="mutant_8131" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) / pos)" />
    <mutant id="mutant_8130" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="pos" />
    <mutant id="mutant_9460" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="(cnt / cur)" />
    <mutant id="mutant_8133" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) % pos)" />
    <mutant id="mutant_9465" viable="false" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="(msg - &quot;: &quot;)" />
    <mutant id="mutant_8132" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) * pos)" />
    <mutant id="mutant_9466" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.bad(org.eclipse.jgit.dircache.DirCacheEntry,java.lang.String)" from="(msg + &quot;: &quot;)" to="msg" />
    <mutant id="mutant_8135" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="1" />
    <mutant id="mutant_9463" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="(cnt % cur)" />
    <mutant id="mutant_8134" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((hh.getNewStartLine()) - 1)" />
    <mutant id="mutant_9464" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="cnt" />
    <mutant id="mutant_8126" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) % 1)" />
    <mutant id="mutant_9458" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) + 1000000" />
    <mutant id="mutant_8125" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) * 1)" />
    <mutant id="mutant_9459" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuildIterator.stopWalk()" from="(cnt - cur)" to="(cnt + cur)" />
    <mutant id="mutant_8128" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) + 1)" />
    <mutant id="mutant_9456" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)((snapshot.lastModified()) % 1000))" />
    <mutant id="mutant_8127" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) / 1)" />
    <mutant id="mutant_9457" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) / 1000000" />
    <mutant id="mutant_8129" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) - pos)" />
    <mutant id="mutant_9450" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) * 1000)" />
    <mutant id="mutant_9451" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="1000" />
    <mutant id="mutant_8120" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="((lhrt.size()) % 1)" />
    <mutant id="mutant_8122" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="lhrt.size()" />
    <mutant id="mutant_9454" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) % 1000000" />
    <mutant id="mutant_8121" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="((lhrt.size()) / 1)" />
    <mutant id="mutant_9455" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="1000000" />
    <mutant id="mutant_8124" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(hh.getNewStartLine())" />
    <mutant id="mutant_9452" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) / 1000)" />
    <mutant id="mutant_8123" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="1" />
    <mutant id="mutant_9453" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000))) * 1000000" to="((int)(((snapshot.lastModified()) % 1000))) - 1000000" />
    <mutant id="mutant_8115" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="fh.getHunks().size()" />
    <mutant id="mutant_9447" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) - 1000)" />
    <mutant id="mutant_8114" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="((fh.getHunks().size()) * 1)" />
    <mutant id="mutant_9448" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="((snapshot.lastModified()) + 1000)" />
    <mutant id="mutant_8117" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="((lhrt.size()) * 1)" />
    <mutant id="mutant_9445" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="(snapshot.lastModified()) * 1000" />
    <mutant id="mutant_8116" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((fh.getHunks().size()) - 1)" to="((fh.getHunks().size()) + 1)" />
    <mutant id="mutant_9446" viable="true" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)((snapshot.lastModified()) / 1000))" to="1000" />
    <mutant id="mutant_8119" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="((lhrt.size()) + 1)" />
    <mutant id="mutant_8118" viable="true" in="org.eclipse.jgit.api.ApplyCommand.isNoNewlineAtEndOfFile(org.eclipse.jgit.patch.FileHeader)" from="((lhrt.size()) - 1)" to="1" />
    <mutant id="mutant_9449" viable="false" in="org.eclipse.jgit.dircache.DirCache.writeTo(java.io.File,java.io.OutputStream)" from="((int)(((snapshot.lastModified()) % 1000)))" to="(snapshot.lastModified())" />
    <mutant id="mutant_8195" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="((old.refcnt) / 1)" />
    <mutant id="mutant_8194" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_8197" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="((old.refcnt) % 1)" />
    <mutant id="mutant_8196" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="1" />
    <mutant id="mutant_8199" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="((old.refcnt) - 1)" />
    <mutant id="mutant_8198" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.registerFormat(java.lang.String,org.eclipse.jgit.api.ArchiveCommand$Format)" from="((old.refcnt) + 1)" to="old.refcnt" />
    <mutant id="mutant_8191" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_8190" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_8193" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_8192" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_8184" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="name" />
    <mutant id="mutant_8183" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="(name / &quot;/&quot;)" />
    <mutant id="mutant_8186" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="(name - &quot;/&quot;)" />
    <mutant id="mutant_8185" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_8188" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="(name * &quot;/&quot;)" />
    <mutant id="mutant_8187" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="(name + &quot;/&quot;)" to="(name % &quot;/&quot;)" />
    <mutant id="mutant_8189" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.setFilename(java.lang.String)" from="(slash + 1)" to="1" />
    <mutant id="mutant_8180" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="pfx - (walk.getPathString())" />
    <mutant id="mutant_8182" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="pfx * (walk.getPathString())" />
    <mutant id="mutant_8181" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="pfx / (walk.getPathString())" />
    <mutant id="mutant_8173" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="((sb.length()) + 1)" />
    <mutant id="mutant_8172" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="((sb.length()) * 1)" />
    <mutant id="mutant_8175" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="((sb.length()) / 1)" />
    <mutant id="mutant_8174" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="sb.length()" />
    <mutant id="mutant_8177" viable="false" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="pfx % (walk.getPathString())" />
    <mutant id="mutant_8176" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="((sb.length()) % 1)" />
    <mutant id="mutant_8179" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="walk.getPathString()" />
    <mutant id="mutant_8178" viable="true" in="org.eclipse.jgit.api.ArchiveCommand.writeArchive(org.eclipse.jgit.api.ArchiveCommand$Format)" from="pfx + (walk.getPathString())" to="pfx" />
    <mutant id="mutant_8171" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((sb.length()) - 1)" to="1" />
    <mutant id="mutant_8170" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((hh.getNewStartLine()) - 1)" />
    <mutant id="mutant_8169" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) % pos)" />
    <mutant id="mutant_8162" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) % 1)" />
    <mutant id="mutant_9494" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="((entryCnt) % 1)" />
    <mutant id="mutant_8161" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) * 1)" />
    <mutant id="mutant_9495" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="(entryIdx / 1)" />
    <mutant id="mutant_8164" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) + 1)" />
    <mutant id="mutant_9492" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="entryCnt" />
    <mutant id="mutant_8163" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="((hh.getNewStartLine()) / 1)" />
    <mutant id="mutant_9493" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="((entryCnt) / 1)" />
    <mutant id="mutant_8166" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="pos" />
    <mutant id="mutant_9498" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="entryIdx" />
    <mutant id="mutant_8165" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) - pos)" />
    <mutant id="mutant_9499" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="(entryIdx * 1)" />
    <mutant id="mutant_8168" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) * pos)" />
    <mutant id="mutant_9496" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="1" />
    <mutant id="mutant_8167" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="(((hh.getNewStartLine()) - 1) / pos)" />
    <mutant id="mutant_9497" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.resort()" from="(entryIdx - 1)" to="(entryIdx + 1)" />
    <mutant id="mutant_9490" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="1" />
    <mutant id="mutant_9491" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="((entryCnt) * 1)" />
    <mutant id="mutant_8160" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="(hh.getNewStartLine())" />
    <mutant id="mutant_8159" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="((hh.getNewStartLine()) - 1)" to="1" />
    <mutant id="mutant_8158" viable="true" in="org.eclipse.jgit.api.ApplyCommand.apply(java.io.File,org.eclipse.jgit.patch.FileHeader)" from="(((hh.getNewStartLine()) - 1) + pos)" to="((hh.getNewStartLine()) - 1)" />
    <mutant id="mutant_9489" viable="true" in="org.eclipse.jgit.dircache.DirCacheBuilder.beforeAdd(org.eclipse.jgit.dircache.DirCacheEntry)" from="((entryCnt) - 1)" to="((entryCnt) + 1)" />
    <mutant id="mutant_15318" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_15319" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_15316" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_15317" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_15310" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) / v" />
    <mutant id="mutant_16641" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="(eol + (Patch.BIN_TRAILER.length))" />
    <mutant id="mutant_15311" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="v" />
    <mutant id="mutant_16640" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="Patch.BIN_TRAILER.length" />
    <mutant id="mutant_15314" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) * v" />
    <mutant id="mutant_15315" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_15312" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) - v" />
    <mutant id="mutant_15313" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="r * 10" />
    <mutant id="mutant_15329" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_15327" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_15328" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_15321" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_15322" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_15320" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_15325" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_15326" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_15323" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_15324" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_16627" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="(n % c)" />
    <mutant id="mutant_16628" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="c" />
    <mutant id="mutant_16625" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="n" />
    <mutant id="mutant_16626" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="(n + c)" />
    <mutant id="mutant_16629" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="(n * c)" />
    <mutant id="mutant_16620" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="(start - (Patch.DIFF_GIT.length))" />
    <mutant id="mutant_16623" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="(start * (Patch.DIFF_GIT.length))" />
    <mutant id="mutant_16624" viable="true" in="org.eclipse.jgit.patch.Patch.parseFile(byte[],int,int)" from="(n - c)" to="(n / c)" />
    <mutant id="mutant_16621" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="start" />
    <mutant id="mutant_16622" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="Patch.DIFF_GIT.length" />
    <mutant id="mutant_15307" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r - 10)" />
    <mutant id="mutant_16638" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="eol" />
    <mutant id="mutant_15308" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="10" />
    <mutant id="mutant_16639" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="(eol % (Patch.BIN_TRAILER.length))" />
    <mutant id="mutant_15305" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r + 10)" />
    <mutant id="mutant_16636" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="(eol / (Patch.BIN_TRAILER.length))" />
    <mutant id="mutant_15306" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r / 10)" />
    <mutant id="mutant_16637" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - (Patch.BIN_TRAILER.length))" to="(eol * (Patch.BIN_TRAILER.length))" />
    <mutant id="mutant_15309" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10) + v" to="(r * 10) % v" />
    <mutant id="mutant_16630" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="(eol / c)" />
    <mutant id="mutant_15300" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="ptr" />
    <mutant id="mutant_16631" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="(eol + c)" />
    <mutant id="mutant_15303" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="(r % 10)" />
    <mutant id="mutant_16634" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="c" />
    <mutant id="mutant_15304" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseBase10(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(r * 10)" to="r" />
    <mutant id="mutant_16635" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="(eol % c)" />
    <mutant id="mutant_15301" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="(ptr * (src.length))" />
    <mutant id="mutant_16632" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="(eol * c)" />
    <mutant id="mutant_15302" viable="true" in="org.eclipse.jgit.util.RawParseUtils.match(byte[],int,byte[])" from="(ptr + (src.length))" to="(ptr / (src.length))" />
    <mutant id="mutant_16633" viable="true" in="org.eclipse.jgit.patch.Patch.parseHunks(org.eclipse.jgit.patch.FileHeader,int,int)" from="(eol - c)" to="eol" />
    <mutant id="mutant_14029" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH) / 2" />
    <mutant id="mutant_14022" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_15354" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_14021" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_15355" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_14024" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_15352" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_14023" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_15353" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_14026" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx / ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15358" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="5" />
    <mutant id="mutant_14025" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_15359" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="(p / 5)" />
    <mutant id="mutant_14028" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15356" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_14027" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx" />
    <mutant id="mutant_15357" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="p" />
    <mutant id="mutant_15350" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_15351" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_14020" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_14033" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_15365" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="(p - 6)" />
    <mutant id="mutant_14032" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_15366" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="(p % 6)" />
    <mutant id="mutant_14035" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_15363" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="p" />
    <mutant id="mutant_14034" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_15364" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="6" />
    <mutant id="mutant_14037" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_15369" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="p" />
    <mutant id="mutant_14036" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_14039" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15367" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="(p * 6)" />
    <mutant id="mutant_14038" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx / ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15368" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 6)" to="(p / 6)" />
    <mutant id="mutant_15361" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="(p % 5)" />
    <mutant id="mutant_15362" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="(p * 5)" />
    <mutant id="mutant_14031" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx % ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_14030" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx - ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx * ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15360" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 5)" to="(p - 5)" />
    <mutant id="mutant_14008" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_14007" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15338" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_14009" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15339" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_14000" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15332" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_15333" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_14002" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15330" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_14001" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15331" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt16(byte[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_14004" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15336" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_14003" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15337" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_14006" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15334" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_14005" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15335" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_14019" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="myLaneX" />
    <mutant id="mutant_14018" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX / cx)" />
    <mutant id="mutant_15349" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_14011" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15343" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_14010" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15344" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_14013" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15341" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_14012" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15342" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_14015" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX * cx)" />
    <mutant id="mutant_15347" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_14014" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="cx" />
    <mutant id="mutant_15348" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_14017" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX % cx)" />
    <mutant id="mutant_15345" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_14016" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(myLaneX - cx)" to="(myLaneX + cx)" />
    <mutant id="mutant_15346" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_15340" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_14066" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15398" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="(tzHours * 60) - tzMins" />
    <mutant id="mutant_14065" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15399" viable="true" in="org.eclipse.jgit.util.RawParseUtils.tagMessage(byte[],int)" from="ptr + 1" to="ptr * 1" />
    <mutant id="mutant_14068" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="commit.getChildCount()" />
    <mutant id="mutant_15396" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="tzHours * 60" />
    <mutant id="mutant_14067" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15397" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="tzMins" />
    <mutant id="mutant_14069" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="(commit.getChildCount()) % (commit.forkingOffLanes.length)" />
    <mutant id="mutant_15390" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="60" />
    <mutant id="mutant_15391" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="(tzHours - 60)" />
    <mutant id="mutant_14060" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_14062" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15394" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="(tzHours * 60) % tzMins" />
    <mutant id="mutant_14061" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15395" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="(tzHours * 60) * tzMins" />
    <mutant id="mutant_14064" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15392" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="(tzHours % 60)" />
    <mutant id="mutant_14063" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15393" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60) + tzMins" to="(tzHours * 60) / tzMins" />
    <mutant id="mutant_14077" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) % 2)" />
    <mutant id="mutant_14076" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) - 2)" />
    <mutant id="mutant_14079" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH)" />
    <mutant id="mutant_14078" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) * 2)" />
    <mutant id="mutant_14071" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="(commit.getChildCount()) / (commit.forkingOffLanes.length)" />
    <mutant id="mutant_14070" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="(commit.getChildCount()) + (commit.forkingOffLanes.length)" />
    <mutant id="mutant_14073" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="(commit.getChildCount()) * (commit.forkingOffLanes.length)" />
    <mutant id="mutant_14072" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(commit.getChildCount()) - (commit.forkingOffLanes.length)" to="commit.forkingOffLanes.length" />
    <mutant id="mutant_14075" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="2" />
    <mutant id="mutant_14074" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="((AbstractPlotRenderer.LANE_WIDTH) + 2)" />
    <mutant id="mutant_14044" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15376" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="v - 100" />
    <mutant id="mutant_14043" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx % ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15377" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="v + 100" />
    <mutant id="mutant_14046" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15374" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="(p / 7)" />
    <mutant id="mutant_14045" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15375" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="100" />
    <mutant id="mutant_14048" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_14047" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15378" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="v * 100" />
    <mutant id="mutant_14049" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15379" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="v / 100" />
    <mutant id="mutant_14040" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx" />
    <mutant id="mutant_15372" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="(p % 7)" />
    <mutant id="mutant_15373" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="(p * 7)" />
    <mutant id="mutant_14042" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="cx * ((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_15370" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="7" />
    <mutant id="mutant_14041" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="cx + ((AbstractPlotRenderer.LANE_WIDTH) / 2)" to="(AbstractPlotRenderer.LANE_WIDTH) / 2" />
    <mutant id="mutant_15371" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseHexInt32(byte[],int)" from="(p + 7)" to="(p - 7)" />
    <mutant id="mutant_14055" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="h" />
    <mutant id="mutant_15387" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="(tzHours + 60)" />
    <mutant id="mutant_14054" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h + 2)" />
    <mutant id="mutant_15388" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="tzHours" />
    <mutant id="mutant_14057" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15385" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="v * 100" />
    <mutant id="mutant_14056" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15386" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="v" />
    <mutant id="mutant_14059" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_14058" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15389" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="(tzHours * 60)" to="(tzHours / 60)" />
    <mutant id="mutant_15380" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v % 100" to="v" />
    <mutant id="mutant_14051" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h - 2)" />
    <mutant id="mutant_15383" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="v - 100" />
    <mutant id="mutant_14050" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="2" />
    <mutant id="mutant_15384" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="v + 100" />
    <mutant id="mutant_14053" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h * 2)" />
    <mutant id="mutant_15381" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="100" />
    <mutant id="mutant_14052" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(h / 2)" to="(h % 2)" />
    <mutant id="mutant_15382" viable="true" in="org.eclipse.jgit.util.RawParseUtils.parseTimeZoneOffset(byte[],int,org.eclipse.jgit.util.MutableInteger)" from="v / 100" to="v % 100" />
    <mutant id="mutant_9322" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="(entryCnt) - cnt" />
    <mutant id="mutant_9323" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="entryCnt" />
    <mutant id="mutant_9320" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) - 2" />
    <mutant id="mutant_9321" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) * 2" />
    <mutant id="mutant_9315" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) - 3)" />
    <mutant id="mutant_9316" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) + 2" />
    <mutant id="mutant_9313" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) + 3)" />
    <mutant id="mutant_9314" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) / 3)" />
    <mutant id="mutant_9319" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="((entryCnt) + 16) * 3" />
    <mutant id="mutant_9317" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="2" />
    <mutant id="mutant_9318" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3) / 2" to="(((entryCnt) + 16) * 3) % 2" />
    <mutant id="mutant_9311" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="3" />
    <mutant id="mutant_9312" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="((entryCnt) + 16)" />
    <mutant id="mutant_9310" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(((entryCnt) + 16) * 3)" to="(((entryCnt) + 16) % 3)" />
    <mutant id="mutant_9304" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="((entryCnt) - 16)" />
    <mutant id="mutant_9305" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="(entryCnt)" />
    <mutant id="mutant_9302" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="cnt" />
    <mutant id="mutant_9303" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="((entryCnt) % cnt)" />
    <mutant id="mutant_9308" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="((entryCnt) / 16)" />
    <mutant id="mutant_9309" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="((entryCnt) % 16)" />
    <mutant id="mutant_9306" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="16" />
    <mutant id="mutant_9307" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + 16)" to="((entryCnt) * 16)" />
    <mutant id="mutant_9300" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="((entryCnt) / cnt)" />
    <mutant id="mutant_9301" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="((entryCnt) + cnt)" to="((entryCnt) * cnt)" />
    <mutant id="mutant_14088" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="(dotX / dotSize)" />
    <mutant id="mutant_14087" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="dotX" />
    <mutant id="mutant_14089" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="(dotX - dotSize)" />
    <mutant id="mutant_14080" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="(maxCenter * ((AbstractPlotRenderer.LANE_WIDTH) / 2))" />
    <mutant id="mutant_14082" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="((AbstractPlotRenderer.LANE_WIDTH) / 2)" />
    <mutant id="mutant_14081" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="maxCenter" />
    <mutant id="mutant_14084" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="(maxCenter % ((AbstractPlotRenderer.LANE_WIDTH) / 2))" />
    <mutant id="mutant_14083" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="(maxCenter - ((AbstractPlotRenderer.LANE_WIDTH) / 2))" />
    <mutant id="mutant_14086" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="(dotX * dotSize)" />
    <mutant id="mutant_14085" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(maxCenter + ((AbstractPlotRenderer.LANE_WIDTH) / 2))" to="(maxCenter / ((AbstractPlotRenderer.LANE_WIDTH) / 2))" />
    <mutant id="mutant_14099" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx / dotSize)" />
    <mutant id="mutant_14098" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(textx + dotSize)" to="(textx - dotSize)" />
    <mutant id="mutant_14091" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="dotSize" />
    <mutant id="mutant_14090" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(dotX + dotSize)" to="(dotX % dotSize)" />
    <mutant id="mutant_14093" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) - 8" />
    <mutant id="mutant_14092" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) / 8" />
    <mutant id="mutant_14095" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="8" />
    <mutant id="mutant_14094" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) * 8" />
    <mutant id="mutant_14097" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) % 8" />
    <mutant id="mutant_14096" viable="true" in="org.eclipse.jgit.revplot.AbstractPlotRenderer.paintCommit(org.eclipse.jgit.revplot.PlotCommit,int)" from="(Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))) + 8" to="Math.max((maxCenter + ((org.eclipse.jgit.revplot.AbstractPlotRenderer.LANE_WIDTH) / 2)), (dotX + dotSize))" />
    <mutant id="mutant_8030" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="(index / 1)" />
    <mutant id="mutant_9362" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="(mid / 1)" />
    <mutant id="mutant_9363" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="mid" />
    <mutant id="mutant_8032" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="(index % 1)" />
    <mutant id="mutant_9360" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="(mid * 1)" />
    <mutant id="mutant_8031" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="index" />
    <mutant id="mutant_9361" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="(mid % 1)" />
    <mutant id="mutant_8034" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="(filename.substring(0, (index + 1))) - name" />
    <mutant id="mutant_9366" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_8033" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="(filename.substring(0, (index + 1))) % name" />
    <mutant id="mutant_9367" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_8036" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="(filename.substring(0, (index + 1))) * name" />
    <mutant id="mutant_9364" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="1" />
    <mutant id="mutant_8035" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="name" />
    <mutant id="mutant_9365" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_8027" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="1" />
    <mutant id="mutant_9359" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="(mid + 1)" />
    <mutant id="mutant_8026" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="proj.getName()" />
    <mutant id="mutant_8029" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="(index - 1)" />
    <mutant id="mutant_9357" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="mid" />
    <mutant id="mutant_8028" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(index + 1)" to="(index * 1)" />
    <mutant id="mutant_9358" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(mid - 1)" to="1" />
    <mutant id="mutant_9351" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_9352" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="low" />
    <mutant id="mutant_8021" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="remoteUrl" />
    <mutant id="mutant_8020" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="remoteUrl / &quot;/&quot;" />
    <mutant id="mutant_9350" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="bLen" />
    <mutant id="mutant_8023" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="(remoteUrl / (proj.getName()))" />
    <mutant id="mutant_9355" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="high" />
    <mutant id="mutant_8022" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="(remoteUrl * (proj.getName()))" />
    <mutant id="mutant_9356" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_8025" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="(remoteUrl % (proj.getName()))" />
    <mutant id="mutant_9353" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_8024" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="(remoteUrl + (proj.getName()))" to="(remoteUrl - (proj.getName()))" />
    <mutant id="mutant_9354" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_8016" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="remoteUrl" />
    <mutant id="mutant_9348" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="aLen + bLen" />
    <mutant id="mutant_8015" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="remoteUrl % &quot;/&quot;" />
    <mutant id="mutant_9349" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="aLen" />
    <mutant id="mutant_8018" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_9346" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="aLen * bLen" />
    <mutant id="mutant_8017" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="remoteUrl - &quot;/&quot;" />
    <mutant id="mutant_9347" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="aLen % bLen" />
    <mutant id="mutant_8019" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.endDocument()" from="remoteUrl + &quot;/&quot;" to="remoteUrl * &quot;/&quot;" />
    <mutant id="mutant_9340" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="((aPath[cPos]) &amp; 255) + ((bPath[cPos]) &amp; 255)" />
    <mutant id="mutant_9341" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="((aPath[cPos]) &amp; 255) * ((bPath[cPos]) &amp; 255)" />
    <mutant id="mutant_8010" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="1" />
    <mutant id="mutant_8012" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="(lastIndex / 1)" />
    <mutant id="mutant_9344" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="((aPath[cPos]) &amp; 255) % ((bPath[cPos]) &amp; 255)" />
    <mutant id="mutant_8011" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="lastIndex" />
    <mutant id="mutant_9345" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="aLen - bLen" to="aLen / bLen" />
    <mutant id="mutant_8014" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="(lastIndex % 1)" />
    <mutant id="mutant_9342" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="((aPath[cPos]) &amp; 255) / ((bPath[cPos]) &amp; 255)" />
    <mutant id="mutant_8013" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="(lastIndex * 1)" />
    <mutant id="mutant_9343" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="(bPath[cPos]) &amp; 255" />
    <mutant id="mutant_8005" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="(baseUrl.length()) / 1" />
    <mutant id="mutant_9337" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="o1.getStage()" />
    <mutant id="mutant_8004" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="1" />
    <mutant id="mutant_9338" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="(o1.getStage()) % (o2.getStage())" />
    <mutant id="mutant_8007" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="(baseUrl.length()) % 1" />
    <mutant id="mutant_9335" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="(o1.getStage()) * (o2.getStage())" />
    <mutant id="mutant_8006" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="(baseUrl.length()) + 1" />
    <mutant id="mutant_9336" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="(o1.getStage()) + (o2.getStage())" />
    <mutant id="mutant_8009" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(lastIndex + 1)" to="(lastIndex - 1)" />
    <mutant id="mutant_8008" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="(baseUrl.length()) * 1" />
    <mutant id="mutant_9339" viable="true" in="org.eclipse.jgit.dircache.DirCache.cmp(byte[],int,byte[],int)" from="((aPath[cPos]) &amp; 255) - ((bPath[cPos]) &amp; 255)" to="(aPath[cPos]) &amp; 255" />
    <mutant id="mutant_9330" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="((entries.length) * 2)" />
    <mutant id="mutant_8001" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="rules.size()" />
    <mutant id="mutant_9333" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="(entries.length)" />
    <mutant id="mutant_8000" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="(rules.size()) * 1" />
    <mutant id="mutant_9334" viable="true" in="org.eclipse.jgit.dircache.DirCache$1.compare(org.eclipse.jgit.dircache.DirCacheEntry,org.eclipse.jgit.dircache.DirCacheEntry)" from="(o1.getStage()) - (o2.getStage())" to="(o1.getStage()) / (o2.getStage())" />
    <mutant id="mutant_8003" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser(org.eclipse.jgit.gitrepo.ManifestParser$IncludedFileReader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository)" from="(baseUrl.length()) - 1" to="baseUrl.length()" />
    <mutant id="mutant_9331" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="((entries.length) + 2)" />
    <mutant id="mutant_8002" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="(rules.size()) + 1" />
    <mutant id="mutant_9332" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="((entries.length) - 2)" />
    <mutant id="mutant_9326" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="cnt" />
    <mutant id="mutant_9327" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="(entryCnt) % cnt" />
    <mutant id="mutant_9324" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="(entryCnt) / cnt" />
    <mutant id="mutant_9325" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.fastKeep(int,int)" from="(entryCnt) + cnt" to="(entryCnt) * cnt" />
    <mutant id="mutant_9328" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="2" />
    <mutant id="mutant_9329" viable="true" in="org.eclipse.jgit.dircache.BaseDirCacheEditor.replace()" from="((entries.length) / 2)" to="((entries.length) % 2)" />
    <mutant id="mutant_8074" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="((path) - &quot;/&quot;)" />
    <mutant id="mutant_8073" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="(path)" />
    <mutant id="mutant_8076" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="src" />
    <mutant id="mutant_8075" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="(((path) + &quot;/&quot;) % (src))" />
    <mutant id="mutant_8078" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="(((path) + &quot;/&quot;) - (src))" />
    <mutant id="mutant_8077" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="(((path) + &quot;/&quot;) * (src))" />
    <mutant id="mutant_8079" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="(((path) + &quot;/&quot;) / (src))" />
    <mutant id="mutant_8070" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_8072" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="((path) / &quot;/&quot;)" />
    <mutant id="mutant_8071" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="((path) * &quot;/&quot;)" />
    <mutant id="mutant_8063" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) - &quot;^{commit}&quot;)" />
    <mutant id="mutant_9395" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="((entryCnt) % 16)" />
    <mutant id="mutant_8062" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="ref" />
    <mutant id="mutant_9396" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="((entryCnt) / 16)" />
    <mutant id="mutant_8065" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_9393" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="((entryCnt) * 16)" />
    <mutant id="mutant_8064" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) * &quot;^{commit}&quot;)" />
    <mutant id="mutant_9394" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="((entryCnt) - 16)" />
    <mutant id="mutant_8067" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) / &quot;^{commit}&quot;)" />
    <mutant id="mutant_9399" viable="true" in="org.eclipse.jgit.dircache.DirCache.editor()" from="((entryCnt) + 16)" to="((entryCnt) * 16)" />
    <mutant id="mutant_8066" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="&quot;^{commit}&quot;" />
    <mutant id="mutant_8069" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="((path) + &quot;/&quot;)" to="((path) % &quot;/&quot;)" />
    <mutant id="mutant_9397" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="16" />
    <mutant id="mutant_8068" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) % &quot;^{commit}&quot;)" />
    <mutant id="mutant_9398" viable="true" in="org.eclipse.jgit.dircache.DirCache.builder()" from="((entryCnt) + 16)" to="entryCnt" />
    <mutant id="mutant_9391" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) - &quot;\'&quot;" />
    <mutant id="mutant_9392" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) / &quot;\'&quot;" />
    <mutant id="mutant_8061" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) % ref)" />
    <mutant id="mutant_8060" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) - ref)" />
    <mutant id="mutant_9390" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) * &quot;\'&quot;" />
    <mutant id="mutant_8059" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) / ref)" />
    <mutant id="mutant_8052" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="((Constants.DEFAULT_REMOTE_NAME) - &quot;/&quot;)" />
    <mutant id="mutant_9384" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="(&quot;\'&quot; % (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" />
    <mutant id="mutant_8051" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="((Constants.DEFAULT_REMOTE_NAME) * &quot;/&quot;)" />
    <mutant id="mutant_9385" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="(&quot;\'&quot; / (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" />
    <mutant id="mutant_8054" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="((Constants.DEFAULT_REMOTE_NAME) / &quot;/&quot;)" />
    <mutant id="mutant_9382" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="(&quot;\'&quot; - (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" />
    <mutant id="mutant_8053" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="(Constants.DEFAULT_REMOTE_NAME)" />
    <mutant id="mutant_9383" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="(&quot;\'&quot; * (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" />
    <mutant id="mutant_8056" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="((Constants.DEFAULT_REMOTE_NAME) % &quot;/&quot;)" />
    <mutant id="mutant_9388" viable="false" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) % &quot;\'&quot;" />
    <mutant id="mutant_8055" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_9389" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="&quot;\'&quot;" />
    <mutant id="mutant_8058" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;)" />
    <mutant id="mutant_9386" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="(new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))" />
    <mutant id="mutant_8057" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand.findRef(java.lang.String,org.eclipse.jgit.lib.Repository)" from="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) + ref)" to="(((Constants.DEFAULT_REMOTE_NAME) + &quot;/&quot;) * ref)" />
    <mutant id="mutant_9387" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))) + &quot;\'&quot;" to="&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;))" />
    <mutant id="mutant_9380" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="position - 1" />
    <mutant id="mutant_9381" viable="true" in="org.eclipse.jgit.dircache.DirCache.formatExtensionName(byte[])" from="(&quot;\'&quot; + (new String(hdr , 0 , 4 , &quot;ISO-8859-1&quot;)))" to="&quot;\'&quot;" />
    <mutant id="mutant_8050" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="((ref + &quot;:&quot;) * path)" />
    <mutant id="mutant_8049" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="((ref + &quot;:&quot;) - path)" />
    <mutant id="mutant_8048" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="(ref + &quot;:&quot;)" />
    <mutant id="mutant_9379" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="position * 1" />
    <mutant id="mutant_8041" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="(ref - &quot;:&quot;)" />
    <mutant id="mutant_9373" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_8040" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="(ref % &quot;:&quot;)" />
    <mutant id="mutant_9374" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_8043" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_9371" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="low" />
    <mutant id="mutant_8042" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="ref" />
    <mutant id="mutant_9372" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_8045" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="((ref + &quot;:&quot;) % path)" />
    <mutant id="mutant_9377" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="position" />
    <mutant id="mutant_8044" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="(ref / &quot;:&quot;)" />
    <mutant id="mutant_9378" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="position % 1" />
    <mutant id="mutant_8047" viable="true" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="path" />
    <mutant id="mutant_9375" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="position / 1" />
    <mutant id="mutant_8046" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="((ref + &quot;:&quot;) + path)" to="((ref + &quot;:&quot;) / path)" />
    <mutant id="mutant_9376" viable="true" in="org.eclipse.jgit.dircache.DirCache.nextEntry(int)" from="position + 1" to="1" />
    <mutant id="mutant_9370" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_8038" viable="true" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="filename.substring(0, (index + 1))" />
    <mutant id="mutant_8037" viable="false" in="org.eclipse.jgit.gitrepo.ManifestParser.startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)" from="(filename.substring(0, (index + 1))) + name" to="(filename.substring(0, (index + 1))) / name" />
    <mutant id="mutant_9368" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_8039" viable="false" in="org.eclipse.jgit.gitrepo.RepoCommand$DefaultRemoteReader.readFileFromRepo(org.eclipse.jgit.lib.Repository,java.lang.String,java.lang.String)" from="(ref + &quot;:&quot;)" to="(ref * &quot;:&quot;)" />
    <mutant id="mutant_9369" viable="true" in="org.eclipse.jgit.dircache.DirCache.findEntry(byte[],int)" from="(low + 1)" to="1" />
    <mutant id="mutant_8096" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) % (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_8095" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc)" />
    <mutant id="mutant_8098" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) * (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_8097" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) / (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_8099" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result,java.lang.Throwable)" from="(message + &quot;. &quot;)" to="message" />
    <mutant id="mutant_8090" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="(message % &quot;. &quot;)" />
    <mutant id="mutant_8092" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="&quot;. &quot;" />
    <mutant id="mutant_8091" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="(message / &quot;. &quot;)" />
    <mutant id="mutant_8094" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="(message + &quot;. &quot;) - (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" />
    <mutant id="mutant_8093" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;) + (MessageFormat.format(org.eclipse.jgit.internal.JGitText.get().refUpdateReturnCodeWas, rc))" to="message + &quot;. &quot;" />
    <mutant id="mutant_8085" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="(path) - &quot;/&quot;" />
    <mutant id="mutant_8084" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="(path) * &quot;/&quot;" />
    <mutant id="mutant_8087" viable="true" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="message" />
    <mutant id="mutant_8086" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="(path) % &quot;/&quot;" />
    <mutant id="mutant_8089" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="(message - &quot;. &quot;)" />
    <mutant id="mutant_8088" viable="false" in="org.eclipse.jgit.api.errors.ConcurrentRefUpdateException(java.lang.String,org.eclipse.jgit.lib.Ref,org.eclipse.jgit.lib.RefUpdate$Result)" from="(message + &quot;. &quot;)" to="(message * &quot;. &quot;)" />
    <mutant id="mutant_8081" viable="false" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="(path) / &quot;/&quot;" />
    <mutant id="mutant_8080" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject$CopyFile.copy()" from="(((path) + &quot;/&quot;) + (src))" to="((path) + &quot;/&quot;)" />
    <mutant id="mutant_8083" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="path" />
    <mutant id="mutant_8082" viable="true" in="org.eclipse.jgit.gitrepo.RepoProject.getPathWithSlash()" from="(path) + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_16605" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_16606" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="1" />
    <mutant id="mutant_16603" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_16604" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_16609" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="end % 1" />
    <mutant id="mutant_16607" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="end * 1" />
    <mutant id="mutant_16608" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="end / 1" />
    <mutant id="mutant_16601" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_16602" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_16600" viable="true" in="org.eclipse.jgit.patch.HunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_16616" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="hdr.length" />
    <mutant id="mutant_16617" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="(start * (hdr.length))" />
    <mutant id="mutant_16614" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="(start - (hdr.length))" />
    <mutant id="mutant_16615" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="start" />
    <mutant id="mutant_16618" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="(start / (Patch.DIFF_GIT.length))" />
    <mutant id="mutant_16619" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffGit(byte[],int,int)" from="(start + (Patch.DIFF_GIT.length))" to="(start % (Patch.DIFF_GIT.length))" />
    <mutant id="mutant_16612" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="(start / (hdr.length))" />
    <mutant id="mutant_16613" viable="true" in="org.eclipse.jgit.patch.Patch.parseDiffCombined(byte[],byte[],int,int)" from="(start + (hdr.length))" to="(start % (hdr.length))" />
    <mutant id="mutant_16610" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="end - 1" />
    <mutant id="mutant_16611" viable="true" in="org.eclipse.jgit.patch.HunkHeader.skipLine(java.lang.String[],int[],int)" from="end + 1" to="end" />
    <mutant id="mutant_569" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="(bEndLine % bStartLine)" />
    <mutant id="mutant_565" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="(bStartLine * 1)" />
    <mutant id="mutant_566" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="(bStartLine - 1)" />
    <mutant id="mutant_5680" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)" />
    <mutant id="mutant_567" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="(bStartLine % 1)" />
    <mutant id="mutant_5681" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="2" />
    <mutant id="mutant_568" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="bStartLine" />
    <mutant id="mutant_5682" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) / 2" />
    <mutant id="mutant_3020" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4351" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) + 1" />
    <mutant id="mutant_4350" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) * 1" />
    <mutant id="mutant_3017" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4348" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="1" />
    <mutant id="mutant_3016" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4347" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) / 1" />
    <mutant id="mutant_3015" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4346" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="nameLen" />
    <mutant id="mutant_3014" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4345" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="nameLen % 1" />
    <mutant id="mutant_3013" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_4344" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="nameLen / 1" />
    <mutant id="mutant_3012" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4343" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="nameLen - 1" />
    <mutant id="mutant_3011" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4342" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="1" />
    <mutant id="mutant_3010" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4341" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="nameLen + 1" to="nameLen * 1" />
    <mutant id="mutant_561" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="(aEndLine % aStartLine)" />
    <mutant id="mutant_5672" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="((all.size()) % 1)" />
    <mutant id="mutant_562" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="aEndLine" />
    <mutant id="mutant_5673" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="all.size()" />
    <mutant id="mutant_563" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="(bStartLine / 1)" />
    <mutant id="mutant_5674" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="(sp / 1)" />
    <mutant id="mutant_564" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bStartLine + 1)" to="1" />
    <mutant id="mutant_5675" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="1" />
    <mutant id="mutant_5676" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="(sp * 1)" />
    <mutant id="mutant_5677" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="(sp - 1)" />
    <mutant id="mutant_3019" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_5678" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="sp" />
    <mutant id="mutant_560" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="(aEndLine + aStartLine)" />
    <mutant id="mutant_3018" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4349" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) % 1" />
    <mutant id="mutant_5679" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="(sp + 1)" to="(sp % 1)" />
    <mutant id="mutant_576" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="1" />
    <mutant id="mutant_577" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="(begin * 1)" />
    <mutant id="mutant_578" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="(begin % 1)" />
    <mutant id="mutant_5670" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="((all.size()) * 1)" />
    <mutant id="mutant_579" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="begin" />
    <mutant id="mutant_5671" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="((all.size()) + 1)" />
    <mutant id="mutant_4340" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="nameLen" />
    <mutant id="mutant_3006" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4337" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="(rawPtr % nameLen)" />
    <mutant id="mutant_5669" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="((all.size()) / 1)" />
    <mutant id="mutant_3005" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4336" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="(rawPtr / nameLen)" />
    <mutant id="mutant_3004" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4335" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="(rawPtr * nameLen)" />
    <mutant id="mutant_3003" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4334" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="'0'" />
    <mutant id="mutant_3002" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4333" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_3001" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4332" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_3000" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4331" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c" />
    <mutant id="mutant_4330" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_572" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="bStartLine" />
    <mutant id="mutant_5661" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix * needle)" />
    <mutant id="mutant_6992" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="start + resPtr" />
    <mutant id="mutant_573" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="(bEndLine / bStartLine)" />
    <mutant id="mutant_5662" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="1" />
    <mutant id="mutant_6993" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="(len + entSize)" />
    <mutant id="mutant_574" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="(bEndLine * bStartLine)" />
    <mutant id="mutant_5663" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth * 1)" />
    <mutant id="mutant_6994" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="len" />
    <mutant id="mutant_575" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="(begin + 1)" />
    <mutant id="mutant_5664" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="depth" />
    <mutant id="mutant_6995" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="entSize" />
    <mutant id="mutant_5665" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth / 1)" />
    <mutant id="mutant_6996" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="(len - entSize)" />
    <mutant id="mutant_3009" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_5666" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth % 1)" />
    <mutant id="mutant_6997" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="(len / entSize)" />
    <mutant id="mutant_570" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="(bEndLine + bStartLine)" />
    <mutant id="mutant_3008" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4339" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="(rawPtr - nameLen)" />
    <mutant id="mutant_5667" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.resolve(org.eclipse.jgit.lib.Ref,int,java.lang.String,org.eclipse.jgit.util.RefList,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth - 1)" />
    <mutant id="mutant_6998" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="(len * entSize)" to="(len % entSize)" />
    <mutant id="mutant_571" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(bEndLine - bStartLine)" to="bEndLine" />
    <mutant id="mutant_3007" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4338" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="(rawPtr + nameLen)" to="rawPtr" />
    <mutant id="mutant_5668" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.parsePackedRefs(java.io.BufferedReader)" from="((all.size()) - 1)" to="1" />
    <mutant id="mutant_6999" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.sizeOfArray(int,int)" from="12 + (len * entSize)" to="12" />
    <mutant id="mutant_587" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="endB" />
    <mutant id="mutant_588" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="(endB) % (beginB)" />
    <mutant id="mutant_589" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="(endB) * (beginB)" />
    <mutant id="mutant_6990" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="start % resPtr" />
    <mutant id="mutant_5660" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix - needle)" />
    <mutant id="mutant_6991" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="start * resPtr" />
    <mutant id="mutant_4326" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_5658" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix % needle)" />
    <mutant id="mutant_6989" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="resPtr" />
    <mutant id="mutant_4325" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c" />
    <mutant id="mutant_5659" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="prefix" />
    <mutant id="mutant_4324" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_4323" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_4322" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p + 1" />
    <mutant id="mutant_4321" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p" />
    <mutant id="mutant_4320" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p / 1" />
    <mutant id="mutant_583" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="(endA) * (beginA)" />
    <mutant id="mutant_5650" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="(Constants.R_REFS) / (tmp.getName())" />
    <mutant id="mutant_6981" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="(ptr * 15)" />
    <mutant id="mutant_584" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="(endA) / (beginA)" />
    <mutant id="mutant_5651" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="Constants.R_REFS" />
    <mutant id="mutant_6982" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="15" />
    <mutant id="mutant_585" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="(endA) + (beginA)" />
    <mutant id="mutant_5652" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="tmp.getName()" />
    <mutant id="mutant_6983" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="ptr" />
    <mutant id="mutant_586" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="beginA" />
    <mutant id="mutant_5653" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="(Constants.R_REFS) - (tmp.getName())" />
    <mutant id="mutant_6984" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="(ptr / 15)" />
    <mutant id="mutant_5654" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="(Constants.R_REFS) * (tmp.getName())" />
    <mutant id="mutant_6985" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="(ptr % 15)" />
    <mutant id="mutant_580" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeRange(char,int,int)" from="(begin - 1)" to="(begin / 1)" />
    <mutant id="mutant_4329" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_5655" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.newTemporaryUpdate()" from="(Constants.R_REFS) + (tmp.getName())" to="(Constants.R_REFS) % (tmp.getName())" />
    <mutant id="mutant_6986" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 15)" to="(ptr - 15)" />
    <mutant id="mutant_581" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="endA" />
    <mutant id="mutant_4328" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="'0'" />
    <mutant id="mutant_5656" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="needle" />
    <mutant id="mutant_6987" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="start / resPtr" />
    <mutant id="mutant_582" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthA()" from="(endA) - (beginA)" to="(endA) % (beginA)" />
    <mutant id="mutant_4327" viable="true" in="org.eclipse.jgit.lib.Tree.readTree(byte[])" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_5657" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix / needle)" />
    <mutant id="mutant_6988" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.negmatch(byte[],int,byte[],int,int)" from="start - resPtr" to="start" />
    <mutant id="mutant_598" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_599" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="((t + &quot;(&quot;) * (beginA))" />
    <mutant id="mutant_6980" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="(ptr % 14)" />
    <mutant id="mutant_4315" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="(k / 1)" />
    <mutant id="mutant_5647" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n * 1)" />
    <mutant id="mutant_6978" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="ptr" />
    <mutant id="mutant_4314" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="(k - 1)" />
    <mutant id="mutant_5648" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n + 1)" />
    <mutant id="mutant_6979" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="(ptr - 14)" />
    <mutant id="mutant_4313" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="1" />
    <mutant id="mutant_5649" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n % 1)" />
    <mutant id="mutant_4312" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="k" />
    <mutant id="mutant_4311" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="(k % 1)" />
    <mutant id="mutant_4310" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="c.length" />
    <mutant id="mutant_594" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="t" />
    <mutant id="mutant_6970" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="(ptr % 13)" />
    <mutant id="mutant_595" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="(t / &quot;(&quot;)" />
    <mutant id="mutant_5640" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="n" />
    <mutant id="mutant_6971" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="13" />
    <mutant id="mutant_596" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="(t - &quot;(&quot;)" />
    <mutant id="mutant_5641" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n * 1)" />
    <mutant id="mutant_6972" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="(ptr * 13)" />
    <mutant id="mutant_597" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="(t % &quot;(&quot;)" />
    <mutant id="mutant_5642" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n + 1)" />
    <mutant id="mutant_6973" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="ptr" />
    <mutant id="mutant_590" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="(endB) / (beginB)" />
    <mutant id="mutant_4319" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p * 1" />
    <mutant id="mutant_5643" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n % 1)" />
    <mutant id="mutant_6974" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="(ptr - 13)" />
    <mutant id="mutant_591" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="(endB) + (beginB)" />
    <mutant id="mutant_4318" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="1" />
    <mutant id="mutant_5644" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="1" />
    <mutant id="mutant_6975" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="(ptr * 14)" />
    <mutant id="mutant_592" viable="true" in="org.eclipse.jgit.diff.Edit.getLengthB()" from="(endB) - (beginB)" to="beginB" />
    <mutant id="mutant_4317" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p % 1" />
    <mutant id="mutant_5645" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n / 1)" />
    <mutant id="mutant_6976" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="(ptr / 14)" />
    <mutant id="mutant_593" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(t + &quot;(&quot;)" to="(t * &quot;(&quot;)" />
    <mutant id="mutant_4316" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(k + 1)" to="(k * 1)" />
    <mutant id="mutant_5646" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="n" />
    <mutant id="mutant_6977" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 14)" to="14" />
    <mutant id="mutant_3064" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4395" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="(username - &quot;@&quot;)" />
    <mutant id="mutant_3063" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_4394" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) % 2" />
    <mutant id="mutant_3062" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4393" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) - 2" />
    <mutant id="mutant_3061" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_4392" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) * 2" />
    <mutant id="mutant_3060" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4391" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_4390" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="2" />
    <mutant id="mutant_3059" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_3058" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4389" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) + 2" to="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH)) / 2" />
    <mutant id="mutant_3057" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4388" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="(((mode.copyToLength()) + nameLen) / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_3056" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4387" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="(((mode.copyToLength()) + nameLen) - (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_3055" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4386" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="(((mode.copyToLength()) + nameLen) * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_3054" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4385" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_3053" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_4384" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="(((mode.copyToLength()) + nameLen) % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_3052" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_4383" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="(((mode.copyToLength()) + nameLen) + (Constants.OBJECT_ID_LENGTH))" to="((mode.copyToLength()) + nameLen)" />
    <mutant id="mutant_3051" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_4382" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="nameLen" />
    <mutant id="mutant_3050" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4381" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="((mode.copyToLength()) - nameLen)" />
    <mutant id="mutant_4380" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="((mode.copyToLength()) / nameLen)" />
    <mutant id="mutant_3049" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3048" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4379" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="((mode.copyToLength()) * nameLen)" />
    <mutant id="mutant_3047" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4378" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="((mode.copyToLength()) % nameLen)" />
    <mutant id="mutant_3046" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4377" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode,int)" from="((mode.copyToLength()) + nameLen)" to="(mode.copyToLength())" />
    <mutant id="mutant_3045" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4376" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="((ptr) - (TreeFormatter.entrySize(mode, nameLen)))" />
    <mutant id="mutant_3044" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4375" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="(ptr)" />
    <mutant id="mutant_3043" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_4374" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="((ptr) % (TreeFormatter.entrySize(mode, nameLen)))" />
    <mutant id="mutant_3042" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4373" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="((ptr) * (TreeFormatter.entrySize(mode, nameLen)))" />
    <mutant id="mutant_3041" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4372" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="((ptr) / (TreeFormatter.entrySize(mode, nameLen)))" />
    <mutant id="mutant_3040" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4371" viable="true" in="org.eclipse.jgit.lib.TreeFormatter.fmtBuf(byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((ptr) + (TreeFormatter.entrySize(mode, nameLen)))" to="(org.eclipse.jgit.lib.TreeFormatter.entrySize(mode, nameLen))" />
    <mutant id="mutant_4370" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p + 1" />
    <mutant id="mutant_3039" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_3038" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4369" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p" />
    <mutant id="mutant_3037" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4368" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p / 1" />
    <mutant id="mutant_3036" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4367" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p * 1" />
    <mutant id="mutant_3035" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4366" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="1" />
    <mutant id="mutant_3034" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4365" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="p - 1" to="p % 1" />
    <mutant id="mutant_3033" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4364" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_3032" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4363" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_5694" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="(RefDirectory.levelsIn(src.getName())) % 2" />
    <mutant id="mutant_5695" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="RefDirectory.levelsIn(src.getName())" />
    <mutant id="mutant_5696" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="(RefDirectory.levelsIn(src.getName())) * 2" />
    <mutant id="mutant_5697" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="(RefDirectory.levelsIn(src.getName())) / 2" />
    <mutant id="mutant_5698" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="((RefDirectory.SYMREF) / target)" />
    <mutant id="mutant_5699" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="(RefDirectory.SYMREF)" />
    <mutant id="mutant_5690" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) + 2" />
    <mutant id="mutant_5691" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) * 2" />
    <mutant id="mutant_5692" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="(RefDirectory.levelsIn(src.getName())) + 2" />
    <mutant id="mutant_5693" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryRename.renameLog(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(RefDirectory.levelsIn(src.getName())) - 2" to="2" />
    <mutant id="mutant_3031" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_4362" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_3030" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4361" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="1" />
    <mutant id="mutant_4360" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="k" />
    <mutant id="mutant_3028" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4359" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_3027" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4358" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="c.length" />
    <mutant id="mutant_3026" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4357" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) + 1" />
    <mutant id="mutant_3025" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4356" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) * 1" />
    <mutant id="mutant_3024" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4355" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) % 1" />
    <mutant id="mutant_3023" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_4354" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="1" />
    <mutant id="mutant_3022" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_4353" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) / 1" />
    <mutant id="mutant_3021" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_4352" viable="true" in="org.eclipse.jgit.lib.Tree.removeEntry(org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="c.length" />
    <mutant id="mutant_5683" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) * 2" />
    <mutant id="mutant_5684" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) % 2" />
    <mutant id="mutant_5685" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.delete(org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(name)) + 2" />
    <mutant id="mutant_5686" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) / 2" />
    <mutant id="mutant_5687" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="2" />
    <mutant id="mutant_5688" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) % 2" />
    <mutant id="mutant_5689" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.pack(java.util.List)" from="(org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)) - 2" to="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(refName)" />
    <mutant id="mutant_3029" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_3099" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_3098" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_3097" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_3096" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_3095" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_3094" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_3093" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_3092" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_3091" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3090" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_3089" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3088" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_3087" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3086" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_3085" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_3084" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_3083" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_3082" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_3081" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_3080" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr - 4)" />
    <mutant id="mutant_3079" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="ptr" />
    <mutant id="mutant_3078" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr * 4)" />
    <mutant id="mutant_3077" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr / 4)" />
    <mutant id="mutant_3076" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr % 4)" />
    <mutant id="mutant_3075" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="4" />
    <mutant id="mutant_3074" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_3073" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3072" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_3071" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3070" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_3069" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3068" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4399" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="(username % &quot;@&quot;)" />
    <mutant id="mutant_3067" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_4398" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="(username * &quot;@&quot;)" />
    <mutant id="mutant_3066" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4397" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="&quot;@&quot;" />
    <mutant id="mutant_3065" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4396" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="(username / &quot;@&quot;)" />
    <mutant id="mutant_5713" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_5714" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="(msg * &quot;: &quot;)" />
    <mutant id="mutant_5715" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="(msg % &quot;: &quot;)" />
    <mutant id="mutant_5716" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="(msg + &quot;: &quot;) % strResult" />
    <mutant id="mutant_5717" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="(msg + &quot;: &quot;) * strResult" />
    <mutant id="mutant_5718" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="msg + &quot;: &quot;" />
    <mutant id="mutant_5719" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="(msg + &quot;: &quot;) - strResult" />
    <mutant id="mutant_5710" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="(msg - &quot;: &quot;)" />
    <mutant id="mutant_5711" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="msg" />
    <mutant id="mutant_5712" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;)" to="(msg / &quot;: &quot;)" />
    <mutant id="mutant_5702" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="((RefDirectory.SYMREF) % target)" />
    <mutant id="mutant_5703" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="target" />
    <mutant id="mutant_5704" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="(((RefDirectory.SYMREF) + target) / '\n')" />
    <mutant id="mutant_5705" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="(((RefDirectory.SYMREF) + target) - '\n')" />
    <mutant id="mutant_5706" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="(((RefDirectory.SYMREF) + target) % '\n')" />
    <mutant id="mutant_5707" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="(((RefDirectory.SYMREF) + target) * '\n')" />
    <mutant id="mutant_5708" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="'\n'" />
    <mutant id="mutant_5709" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="(((RefDirectory.SYMREF) + target) + '\n')" to="((RefDirectory.SYMREF) + target)" />
    <mutant id="mutant_5700" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="((RefDirectory.SYMREF) - target)" />
    <mutant id="mutant_5701" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doLink(java.lang.String)" from="((RefDirectory.SYMREF) + target)" to="((RefDirectory.SYMREF) * target)" />
    <mutant id="mutant_503" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="oldp" />
    <mutant id="mutant_504" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="(&quot;--- &quot; - oldp)" />
    <mutant id="mutant_505" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="(&quot;--- &quot; % oldp)" />
    <mutant id="mutant_506" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="(&quot;--- &quot; * oldp)" />
    <mutant id="mutant_500" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) * (ent.getNewPath()))" />
    <mutant id="mutant_501" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="ent.getNewPath()" />
    <mutant id="mutant_502" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) - (ent.getNewPath()))" />
    <mutant id="mutant_507" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="&quot;--- &quot;" />
    <mutant id="mutant_508" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;--- &quot; + oldp)" to="(&quot;--- &quot; / oldp)" />
    <mutant id="mutant_509" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="((&quot;--- &quot; + oldp) * &quot;\n&quot;)" />
    <mutant id="mutant_514" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_515" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="(&quot;+++ &quot; - newp)" />
    <mutant id="mutant_516" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="(&quot;+++ &quot; / newp)" />
    <mutant id="mutant_517" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="newp" />
    <mutant id="mutant_510" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="((&quot;--- &quot; + oldp) / &quot;\n&quot;)" />
    <mutant id="mutant_511" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="((&quot;--- &quot; + oldp) - &quot;\n&quot;)" />
    <mutant id="mutant_512" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="((&quot;--- &quot; + oldp) % &quot;\n&quot;)" />
    <mutant id="mutant_513" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;--- &quot; + oldp) + &quot;\n&quot;)" to="(&quot;--- &quot; + oldp)" />
    <mutant id="mutant_518" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="(&quot;+++ &quot; % newp)" />
    <mutant id="mutant_519" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="(&quot;+++ &quot; * newp)" />
    <mutant id="mutant_525" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_526" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="((&quot;+++ &quot; + newp) / &quot;\n&quot;)" />
    <mutant id="mutant_527" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="(&quot;-Subproject commit &quot; / (ent.getOldId().name()))" />
    <mutant id="mutant_528" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="(&quot;-Subproject commit &quot; % (ent.getOldId().name()))" />
    <mutant id="mutant_521" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="(&quot;+++ &quot; + newp)" />
    <mutant id="mutant_522" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="((&quot;+++ &quot; + newp) * &quot;\n&quot;)" />
    <mutant id="mutant_523" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="((&quot;+++ &quot; + newp) % &quot;\n&quot;)" />
    <mutant id="mutant_524" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+++ &quot; + newp) + &quot;\n&quot;)" to="((&quot;+++ &quot; + newp) - &quot;\n&quot;)" />
    <mutant id="mutant_529" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="(&quot;-Subproject commit &quot; * (ent.getOldId().name()))" />
    <mutant id="mutant_4425" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position - (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_5757" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" />
    <mutant id="mutant_4424" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="2 - (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" />
    <mutant id="mutant_5758" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) % &quot;, &quot;)" />
    <mutant id="mutant_4423" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="2 + (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" />
    <mutant id="mutant_5759" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) * &quot;, &quot;)" />
    <mutant id="mutant_4422" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="org.eclipse.jgit.internal.storage.file.BitSet.block(position)" />
    <mutant id="mutant_4421" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="2 % (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" />
    <mutant id="mutant_4420" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="2 / (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" />
    <mutant id="mutant_5750" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" />
    <mutant id="mutant_5751" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_520" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+++ &quot; + newp)" to="&quot;+++ &quot;" />
    <mutant id="mutant_5752" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="(getWho())" />
    <mutant id="mutant_4429" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="BitmapIndexImpl.EXTRA_BITS" />
    <mutant id="mutant_5753" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) * (getWho()))" />
    <mutant id="mutant_4428" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position / (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_5754" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) - (getWho()))" />
    <mutant id="mutant_4427" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position % (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_5755" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) / (getWho()))" />
    <mutant id="mutant_4426" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="position" />
    <mutant id="mutant_5756" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) % (getWho()))" />
    <mutant id="mutant_536" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" />
    <mutant id="mutant_537" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) % &quot;\n&quot;)" />
    <mutant id="mutant_538" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_539" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="(&quot;+Subproject commit &quot; / (ent.getNewId().name()))" />
    <mutant id="mutant_532" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="&quot;-Subproject commit &quot;" />
    <mutant id="mutant_533" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) / &quot;\n&quot;)" />
    <mutant id="mutant_534" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) - &quot;\n&quot;)" />
    <mutant id="mutant_535" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) + &quot;\n&quot;)" to="((&quot;-Subproject commit &quot; + (ent.getOldId().name())) * &quot;\n&quot;)" />
    <mutant id="mutant_4414" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="64 / (Long.numberOfLeadingZeros(lastNonEmptyWord))" />
    <mutant id="mutant_5746" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) / &quot;, &quot;)" />
    <mutant id="mutant_4413" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="Long.numberOfLeadingZeros(lastNonEmptyWord)" />
    <mutant id="mutant_5747" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) - &quot;, &quot;)" />
    <mutant id="mutant_4412" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) - 1" />
    <mutant id="mutant_5748" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) * &quot;, &quot;)" />
    <mutant id="mutant_4411" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) % 1" />
    <mutant id="mutant_5749" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;)" to="((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) % &quot;, &quot;)" />
    <mutant id="mutant_4410" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)" />
    <mutant id="mutant_530" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="(ent.getOldId().name())" />
    <mutant id="mutant_5740" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) % (newId.name()))" />
    <mutant id="mutant_531" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;-Subproject commit &quot; + (ent.getOldId().name()))" to="(&quot;-Subproject commit &quot; - (ent.getOldId().name()))" />
    <mutant id="mutant_4419" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.set(int)" from="2 * (org.eclipse.jgit.internal.storage.file.BitSet.block(position))" to="2" />
    <mutant id="mutant_5741" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) - (newId.name()))" />
    <mutant id="mutant_4418" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="64" />
    <mutant id="mutant_5742" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="(newId.name())" />
    <mutant id="mutant_4417" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="64 % (Long.numberOfLeadingZeros(lastNonEmptyWord))" />
    <mutant id="mutant_5743" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) / (newId.name()))" />
    <mutant id="mutant_4416" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="64 + (Long.numberOfLeadingZeros(lastNonEmptyWord))" />
    <mutant id="mutant_5744" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" />
    <mutant id="mutant_4415" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet.toEWAHCompressedBitmap()" from="64 - (Long.numberOfLeadingZeros(lastNonEmptyWord))" to="64 * (Long.numberOfLeadingZeros(lastNonEmptyWord))" />
    <mutant id="mutant_5745" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name()))" to="(((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) * (newId.name()))" />
    <mutant id="mutant_547" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) % &quot;\n&quot;)" />
    <mutant id="mutant_548" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) / &quot;\n&quot;)" />
    <mutant id="mutant_549" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) - &quot;\n&quot;)" />
    <mutant id="mutant_543" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="(ent.getNewId().name())" />
    <mutant id="mutant_544" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="&quot;+Subproject commit &quot;" />
    <mutant id="mutant_545" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" />
    <mutant id="mutant_546" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) * &quot;\n&quot;)" />
    <mutant id="mutant_4403" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="org.eclipse.jgit.lib.UserConfig.system().getHostname()" />
    <mutant id="mutant_5735" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="(&quot;Entry[&quot; + (oldId.name()))" />
    <mutant id="mutant_4402" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="(username + &quot;@&quot;) % (org.eclipse.jgit.lib.UserConfig.system().getHostname())" />
    <mutant id="mutant_5736" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="((&quot;Entry[&quot; + (oldId.name())) / &quot;, &quot;)" />
    <mutant id="mutant_4401" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="(username + &quot;@&quot;) * (org.eclipse.jgit.lib.UserConfig.system().getHostname())" />
    <mutant id="mutant_5737" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="((&quot;Entry[&quot; + (oldId.name())) - &quot;, &quot;)" />
    <mutant id="mutant_4400" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;)" to="username" />
    <mutant id="mutant_5738" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="((&quot;Entry[&quot; + (oldId.name())) * &quot;, &quot;)" />
    <mutant id="mutant_5739" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_540" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="(&quot;+Subproject commit &quot; % (ent.getNewId().name()))" />
    <mutant id="mutant_541" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="(&quot;+Subproject commit &quot; - (ent.getNewId().name()))" />
    <mutant id="mutant_4409" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) * 1" />
    <mutant id="mutant_542" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;+Subproject commit &quot; + (ent.getNewId().name()))" to="(&quot;+Subproject commit &quot; * (ent.getNewId().name()))" />
    <mutant id="mutant_4408" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="1" />
    <mutant id="mutant_5730" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="&quot;Entry[&quot;" />
    <mutant id="mutant_4407" viable="true" in="org.eclipse.jgit.internal.storage.file.BitSet(int)" from="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) + 1" to="(org.eclipse.jgit.internal.storage.file.BitSet.block(initialCapacity)) / 1" />
    <mutant id="mutant_5731" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="(oldId.name())" />
    <mutant id="mutant_4406" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="(username + &quot;@&quot;) - (org.eclipse.jgit.lib.UserConfig.system().getHostname())" />
    <mutant id="mutant_5732" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="(&quot;Entry[&quot; % (oldId.name()))" />
    <mutant id="mutant_4405" viable="false" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="(username + &quot;@&quot;) / (org.eclipse.jgit.lib.UserConfig.system().getHostname())" />
    <mutant id="mutant_5733" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="(&quot;Entry[&quot; - (oldId.name()))" />
    <mutant id="mutant_4404" viable="true" in="org.eclipse.jgit.lib.UserConfig.getDefaultEmail()" from="(username + &quot;@&quot;) + (org.eclipse.jgit.lib.UserConfig.system().getHostname())" to="username + &quot;@&quot;" />
    <mutant id="mutant_5734" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;)" to="((&quot;Entry[&quot; + (oldId.name())) % &quot;, &quot;)" />
    <mutant id="mutant_558" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="(aEndLine / aStartLine)" />
    <mutant id="mutant_559" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="aStartLine" />
    <mutant id="mutant_554" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="(aStartLine * 1)" />
    <mutant id="mutant_555" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="(aStartLine - 1)" />
    <mutant id="mutant_556" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="(aStartLine % 1)" />
    <mutant id="mutant_557" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aEndLine - aStartLine)" to="(aEndLine * aStartLine)" />
    <mutant id="mutant_5724" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="(p1 * 1)" />
    <mutant id="mutant_5725" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="(p1 + 1)" />
    <mutant id="mutant_5726" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="(p1 / 1)" />
    <mutant id="mutant_5727" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="(p1 % 1)" />
    <mutant id="mutant_5728" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="(&quot;Entry[&quot; / (oldId.name()))" />
    <mutant id="mutant_5729" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(&quot;Entry[&quot; + (oldId.name()))" to="(&quot;Entry[&quot; * (oldId.name()))" />
    <mutant id="mutant_550" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeGitLinkDiffText(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;+Subproject commit &quot; + (ent.getNewId().name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_551" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="(aStartLine / 1)" />
    <mutant id="mutant_552" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="1" />
    <mutant id="mutant_553" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.writeHunkHeader(int,int,int,int)" from="(aStartLine + 1)" to="aStartLine" />
    <mutant id="mutant_5720" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="strResult" />
    <mutant id="mutant_5721" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectoryUpdate.doUpdate(org.eclipse.jgit.lib.RefUpdate$Result)" from="(msg + &quot;: &quot;) + strResult" to="(msg + &quot;: &quot;) / strResult" />
    <mutant id="mutant_5722" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="1" />
    <mutant id="mutant_5723" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl(byte[],int)" from="(p1 - 1)" to="p1" />
    <mutant id="mutant_448" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="(100 / (ent.getScore()))" />
    <mutant id="mutant_449" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="(100 - (ent.getScore()))" />
    <mutant id="mutant_444" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="(100 * (ent.getScore()))" />
    <mutant id="mutant_445" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="(ent.getScore())" />
    <mutant id="mutant_6890" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="end" />
    <mutant id="mutant_446" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="(100 + (ent.getScore()))" />
    <mutant id="mutant_5560" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="mid" />
    <mutant id="mutant_6891" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="resPtr / start" />
    <mutant id="mutant_447" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="(100 % (ent.getScore()))" />
    <mutant id="mutant_5561" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="1" />
    <mutant id="mutant_6892" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="resPtr % start" />
    <mutant id="mutant_4230" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_4227" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="1" />
    <mutant id="mutant_5559" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_4226" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_4225" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_4224" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_4223" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_4222" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="1" />
    <mutant id="mutant_4221" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="mid + 1" to="mid" />
    <mutant id="mutant_4220" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_440" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;copy to &quot; - (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_5551" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="(bucket % 1)" />
    <mutant id="mutant_6882" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="blkPtr" />
    <mutant id="mutant_441" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;copy to &quot; * (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_5552" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="bucket" />
    <mutant id="mutant_6883" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="blkPtr % (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_442" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="&quot;copy to &quot;" />
    <mutant id="mutant_5553" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="(bucket + 1)" />
    <mutant id="mutant_6884" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="blkPtr / (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_443" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(100 - (ent.getScore()))" to="100" />
    <mutant id="mutant_5554" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_6885" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="end / resPtr" />
    <mutant id="mutant_5555" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="low" />
    <mutant id="mutant_6886" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="end % resPtr" />
    <mutant id="mutant_5556" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_6887" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="end + resPtr" />
    <mutant id="mutant_4229" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="low" />
    <mutant id="mutant_5557" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_6888" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="end * resPtr" />
    <mutant id="mutant_4228" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_5558" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(low + high)" to="high" />
    <mutant id="mutant_6889" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="end - resPtr" to="resPtr" />
    <mutant id="mutant_459" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) % &quot;%&quot;)" />
    <mutant id="mutant_455" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) * &quot;%&quot;)" />
    <mutant id="mutant_456" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) / &quot;%&quot;)" />
    <mutant id="mutant_457" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" />
    <mutant id="mutant_6880" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="DeltaIndex.BLKSZ" />
    <mutant id="mutant_458" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) - &quot;%&quot;)" />
    <mutant id="mutant_5550" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="(bucket * 1)" />
    <mutant id="mutant_6881" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="blkPtr - (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_4216" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="low" />
    <mutant id="mutant_5548" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="1" />
    <mutant id="mutant_6879" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr + (DeltaIndex.BLKSZ)" to="blkPtr * (DeltaIndex.BLKSZ)" />
    <mutant id="mutant_4215" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_5549" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="(bucket - 1)" to="(bucket / 1)" />
    <mutant id="mutant_4214" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameEnd / nameStart" />
    <mutant id="mutant_4213" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameEnd" />
    <mutant id="mutant_4212" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameEnd * nameStart" />
    <mutant id="mutant_4211" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameEnd % nameStart" />
    <mutant id="mutant_4210" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameStart" />
    <mutant id="mutant_451" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="(&quot;dissimilarity index &quot; % (100 - (ent.getScore())))" />
    <mutant id="mutant_5540" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="insertion" />
    <mutant id="mutant_6871" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="resPtr" />
    <mutant id="mutant_452" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="(&quot;dissimilarity index &quot; * (100 - (ent.getScore())))" />
    <mutant id="mutant_5541" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion % 1)" />
    <mutant id="mutant_6872" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr / resPtr" />
    <mutant id="mutant_453" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="(&quot;dissimilarity index &quot; - (100 - (ent.getScore())))" />
    <mutant id="mutant_5542" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="offset % (bucketSize)" />
    <mutant id="mutant_6873" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="bestNeg" />
    <mutant id="mutant_454" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="&quot;dissimilarity index &quot;" />
    <mutant id="mutant_5543" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="offset" />
    <mutant id="mutant_6874" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="bestPtr" />
    <mutant id="mutant_5544" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="bucketSize" />
    <mutant id="mutant_6875" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="(bestPtr + bestNeg)" />
    <mutant id="mutant_4219" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="high" />
    <mutant id="mutant_5545" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="offset + (bucketSize)" />
    <mutant id="mutant_6876" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="(bestPtr * bestNeg)" />
    <mutant id="mutant_4218" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_5546" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="offset - (bucketSize)" />
    <mutant id="mutant_6877" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="(bestPtr / bestNeg)" />
    <mutant id="mutant_450" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;dissimilarity index &quot; + (100 - (ent.getScore())))" to="(&quot;dissimilarity index &quot; / (100 - (ent.getScore())))" />
    <mutant id="mutant_4217" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_5547" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="((int)(offset / (bucketSize)))" to="offset * (bucketSize)" />
    <mutant id="mutant_6878" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="(bestPtr - bestNeg)" to="(bestPtr % bestNeg)" />
    <mutant id="mutant_466" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="&quot;index &quot;" />
    <mutant id="mutant_467" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="&quot;..&quot;" />
    <mutant id="mutant_468" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="((&quot;index &quot; + (format(ent.getOldId()))) / &quot;..&quot;)" />
    <mutant id="mutant_469" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="((&quot;index &quot; + (format(ent.getOldId()))) * &quot;..&quot;)" />
    <mutant id="mutant_6870" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr" />
    <mutant id="mutant_4205" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="&quot; &quot; % curStr" />
    <mutant id="mutant_5537" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="1" />
    <mutant id="mutant_6868" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr % resPtr" />
    <mutant id="mutant_4204" viable="true" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="curStr" />
    <mutant id="mutant_5538" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion + 1)" />
    <mutant id="mutant_6869" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr * resPtr" />
    <mutant id="mutant_4203" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="&quot; &quot; * curStr" />
    <mutant id="mutant_5539" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion * 1)" />
    <mutant id="mutant_4202" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="openLocks.length" />
    <mutant id="mutant_4201" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="(((location.hashCode()) &gt;&gt;&gt; 1) - (openLocks.length))" />
    <mutant id="mutant_4200" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="(((location.hashCode()) &gt;&gt;&gt; 1) * (openLocks.length))" />
    <mutant id="mutant_462" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="(&quot;index &quot; % (format(ent.getOldId())))" />
    <mutant id="mutant_6860" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr / resPtr" />
    <mutant id="mutant_463" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="(&quot;index &quot; * (format(ent.getOldId())))" />
    <mutant id="mutant_5530" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion / 1)" />
    <mutant id="mutant_6861" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="neg * (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" />
    <mutant id="mutant_464" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="(&quot;index &quot; / (format(ent.getOldId())))" />
    <mutant id="mutant_5531" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="1" />
    <mutant id="mutant_6862" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="neg % (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" />
    <mutant id="mutant_465" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="(&quot;index &quot; - (format(ent.getOldId())))" />
    <mutant id="mutant_5532" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion + 1)" />
    <mutant id="mutant_6863" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="neg / (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" />
    <mutant id="mutant_4209" viable="true" in="org.eclipse.jgit.lib.Tree.substring(byte[],int,int)" from="nameEnd - nameStart" to="nameEnd + nameStart" />
    <mutant id="mutant_5533" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion * 1)" />
    <mutant id="mutant_6864" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="neg" />
    <mutant id="mutant_4208" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="&quot; &quot; / curStr" />
    <mutant id="mutant_5534" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="insertion" />
    <mutant id="mutant_6865" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="neg - (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" />
    <mutant id="mutant_460" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;dissimilarity index &quot; + (100 - (ent.getScore()))) + &quot;%&quot;)" to="&quot;%&quot;" />
    <mutant id="mutant_4207" viable="false" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="&quot; &quot; - curStr" />
    <mutant id="mutant_5535" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion % 1)" />
    <mutant id="mutant_6866" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="neg + (org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent)))" to="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(res, blkPtr, src, org.eclipse.jgit.internal.storage.pack.DeltaIndex.valOf(ent))" />
    <mutant id="mutant_461" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;index &quot; + (format(ent.getOldId())))" to="(format(ent.getOldId()))" />
    <mutant id="mutant_4206" viable="true" in="org.eclipse.jgit.lib.TextProgressMonitor.format(java.lang.StringBuilder,java.lang.String,int,int,int)" from="&quot; &quot; + curStr" to="&quot; &quot;" />
    <mutant id="mutant_5536" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(insertion - 1)" to="(insertion / 1)" />
    <mutant id="mutant_6867" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr + resPtr" />
    <mutant id="mutant_477" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) * (format(ent.getNewId())))" />
    <mutant id="mutant_478" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) % (format(ent.getNewId())))" />
    <mutant id="mutant_479" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="newPrefix" />
    <mutant id="mutant_5526" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="vi + 1" />
    <mutant id="mutant_6857" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr * resPtr" />
    <mutant id="mutant_5527" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="vi % 1" />
    <mutant id="mutant_6858" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr" />
    <mutant id="mutant_5528" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="vi / 1" />
    <mutant id="mutant_6859" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="resPtr" />
    <mutant id="mutant_5529" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="vi * 1" />
    <mutant id="mutant_473" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) / (format(ent.getNewId())))" />
    <mutant id="mutant_474" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" />
    <mutant id="mutant_6850" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="1 % (countEntries(scan))" />
    <mutant id="mutant_475" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="format(ent.getNewId())" />
    <mutant id="mutant_5520" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="oi * 1" />
    <mutant id="mutant_6851" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="countEntries(scan)" />
    <mutant id="mutant_476" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) + (format(ent.getNewId())))" to="(((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;) - (format(ent.getNewId())))" />
    <mutant id="mutant_5521" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="oi % 1" />
    <mutant id="mutant_6852" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="1 * (countEntries(scan))" />
    <mutant id="mutant_5522" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="oi - 1" />
    <mutant id="mutant_6853" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="1 - (countEntries(scan))" />
    <mutant id="mutant_470" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="((&quot;index &quot; + (format(ent.getOldId()))) % &quot;..&quot;)" />
    <mutant id="mutant_5523" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="oi" />
    <mutant id="mutant_6854" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="1 / (countEntries(scan))" />
    <mutant id="mutant_471" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="(&quot;index &quot; + (format(ent.getOldId())))" />
    <mutant id="mutant_5524" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="1" />
    <mutant id="mutant_6855" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr + resPtr" />
    <mutant id="mutant_472" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatIndexLine(java.io.OutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;index &quot; + (format(ent.getOldId()))) + &quot;..&quot;)" to="((&quot;index &quot; + (format(ent.getOldId()))) - &quot;..&quot;)" />
    <mutant id="mutant_5525" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="vi - 1" to="vi" />
    <mutant id="mutant_6856" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.encode(java.io.OutputStream,byte[],int)" from="blkPtr - resPtr" to="blkPtr % resPtr" />
    <mutant id="mutant_488" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="ent.getOldPath()" />
    <mutant id="mutant_489" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) / (ent.getOldPath()))" />
    <mutant id="mutant_4274" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_4273" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_4272" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_4271" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_4270" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_4269" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="1" />
    <mutant id="mutant_4268" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_4267" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_4266" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_4265" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_4264" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_484" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) - (ent.getNewPath()))" />
    <mutant id="mutant_5595" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix - name)" />
    <mutant id="mutant_485" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="oldPrefix" />
    <mutant id="mutant_5596" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_486" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) * (ent.getOldPath()))" />
    <mutant id="mutant_5597" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="((curLoose.find(prefix)) - 1)" />
    <mutant id="mutant_487" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) - (ent.getOldPath()))" />
    <mutant id="mutant_5598" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="((curLoose.find(prefix)) % 1)" />
    <mutant id="mutant_480" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) % (ent.getNewPath()))" />
    <mutant id="mutant_5599" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="((curLoose.find(prefix)) / 1)" />
    <mutant id="mutant_481" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) / (ent.getNewPath()))" />
    <mutant id="mutant_482" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) * (ent.getNewPath()))" />
    <mutant id="mutant_483" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="ent.getNewPath()" />
    <mutant id="mutant_5590" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix * name)" />
    <mutant id="mutant_499" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) / (ent.getNewPath()))" />
    <mutant id="mutant_5591" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix / name)" />
    <mutant id="mutant_5592" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="name" />
    <mutant id="mutant_5593" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix % name)" />
    <mutant id="mutant_5594" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="prefix" />
    <mutant id="mutant_4263" viable="true" in="org.eclipse.jgit.lib.Tree.addTree(byte[],int)" from="(slash + 1)" to="1" />
    <mutant id="mutant_4262" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_4261" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_4260" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_4259" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_4258" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_490" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) % (ent.getOldPath()))" />
    <mutant id="mutant_4257" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="1" />
    <mutant id="mutant_4256" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_4255" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_4254" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_4253" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_495" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) / (ent.getOldPath()))" />
    <mutant id="mutant_5584" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix * name)" />
    <mutant id="mutant_496" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) % (ent.getOldPath()))" />
    <mutant id="mutant_5585" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix / name)" />
    <mutant id="mutant_497" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="newPrefix" />
    <mutant id="mutant_5586" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="name" />
    <mutant id="mutant_498" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((newPrefix) + (ent.getNewPath()))" to="((newPrefix) % (ent.getNewPath()))" />
    <mutant id="mutant_5587" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix % name)" />
    <mutant id="mutant_491" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="oldPrefix" />
    <mutant id="mutant_5588" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="prefix" />
    <mutant id="mutant_492" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) * (ent.getOldPath()))" />
    <mutant id="mutant_5589" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="(prefix + name)" to="(prefix - name)" />
    <mutant id="mutant_493" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="((oldPrefix) - (ent.getOldPath()))" />
    <mutant id="mutant_494" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatOldNewPaths(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((oldPrefix) + (ent.getOldPath()))" to="ent.getOldPath()" />
    <mutant id="mutant_5580" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="((name.length()) / 1)" />
    <mutant id="mutant_5581" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="((name.length()) + 1)" />
    <mutant id="mutant_5582" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="((name.length()) % 1)" />
    <mutant id="mutant_5583" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="((name.length()) * 1)" />
    <mutant id="mutant_4252" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_4251" viable="true" in="org.eclipse.jgit.lib.Tree.addFile(byte[],int)" from="(slash + 1)" to="1" />
    <mutant id="mutant_4250" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameEnd / nameStart" />
    <mutant id="mutant_4249" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameEnd" />
    <mutant id="mutant_4248" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameEnd * nameStart" />
    <mutant id="mutant_4247" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameEnd % nameStart" />
    <mutant id="mutant_4246" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameStart" />
    <mutant id="mutant_4245" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="nameEnd - nameStart" to="nameEnd + nameStart" />
    <mutant id="mutant_4244" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="(nameEnd / 1)" />
    <mutant id="mutant_4243" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="nameEnd" />
    <mutant id="mutant_4242" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="(nameEnd % 1)" />
    <mutant id="mutant_5573" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="1" />
    <mutant id="mutant_5574" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith % 1)" />
    <mutant id="mutant_5575" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="ith" />
    <mutant id="mutant_5576" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith * 1)" />
    <mutant id="mutant_5577" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith - 1)" />
    <mutant id="mutant_5578" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="name.length()" />
    <mutant id="mutant_5579" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scanTree(java.lang.String,java.io.File)" from="((name.length()) - 1)" to="1" />
    <mutant id="mutant_5570" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith * 1)" />
    <mutant id="mutant_5571" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith - 1)" />
    <mutant id="mutant_5572" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith / 1)" />
    <mutant id="mutant_4241" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="(nameEnd * 1)" />
    <mutant id="mutant_4240" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="(nameEnd + 1)" />
    <mutant id="mutant_4238" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="(a.length)" />
    <mutant id="mutant_4237" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="((a.length) + 1)" />
    <mutant id="mutant_4236" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="((a.length) * 1)" />
    <mutant id="mutant_4235" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="((a.length) % 1)" />
    <mutant id="mutant_4234" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="1" />
    <mutant id="mutant_4233" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="((a.length) - 1)" to="((a.length) / 1)" />
    <mutant id="mutant_4232" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_4231" viable="true" in="org.eclipse.jgit.lib.Tree.binarySearch(org.eclipse.jgit.lib.TreeEntry[],byte[],int,int,int)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_5562" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_6893" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="resPtr * start" />
    <mutant id="mutant_5563" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_6894" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="start" />
    <mutant id="mutant_5564" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_6895" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="resPtr + start" />
    <mutant id="mutant_5565" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.binarySearch(long)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_6896" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.fwdmatch(byte[],int,byte[],int)" from="resPtr - start" to="resPtr" />
    <mutant id="mutant_5566" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith / 1)" />
    <mutant id="mutant_6897" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_5567" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="1" />
    <mutant id="mutant_6898" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_5568" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="(ith % 1)" />
    <mutant id="mutant_6899" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_4239" viable="true" in="org.eclipse.jgit.lib.Tree.compareNames(byte[],byte[],int,int,int,int)" from="(nameEnd - 1)" to="1" />
    <mutant id="mutant_5569" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex.findNextOffset(long,long)" from="(ith + 1)" to="ith" />
    <mutant id="mutant_16009" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="ptr" />
    <mutant id="mutant_16003" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="ptr" />
    <mutant id="mutant_16004" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="(ptr * (CombinedFileHeader.INDEX.length))" />
    <mutant id="mutant_16001" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="(ptr % (CombinedFileHeader.INDEX.length))" />
    <mutant id="mutant_16002" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="CombinedFileHeader.INDEX.length" />
    <mutant id="mutant_16007" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="(ptr % (CombinedFileHeader.MODE.length))" />
    <mutant id="mutant_16008" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="CombinedFileHeader.MODE.length" />
    <mutant id="mutant_16005" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="(ptr / (CombinedFileHeader.INDEX.length))" />
    <mutant id="mutant_16006" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="(ptr - (CombinedFileHeader.MODE.length))" />
    <mutant id="mutant_16000" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.INDEX.length))" to="(ptr - (CombinedFileHeader.INDEX.length))" />
    <mutant id="mutant_16014" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="CombinedFileHeader.DELETED_FILE_MODE.length" />
    <mutant id="mutant_16015" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="ptr" />
    <mutant id="mutant_16012" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="(ptr - (CombinedFileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16013" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="(ptr % (CombinedFileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16018" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="(getParentCount()) / 1" />
    <mutant id="mutant_4299" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_16019" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="1" />
    <mutant id="mutant_4298" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="c.length" />
    <mutant id="mutant_16016" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="(ptr * (CombinedFileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_4297" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="(c.length) - 1" />
    <mutant id="mutant_16017" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.DELETED_FILE_MODE.length))" to="(ptr / (CombinedFileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16010" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="(ptr * (CombinedFileHeader.MODE.length))" />
    <mutant id="mutant_16011" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseGitHeaders(int,int)" from="(ptr + (CombinedFileHeader.MODE.length))" to="(ptr / (CombinedFileHeader.MODE.length))" />
    <mutant id="mutant_4296" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="(c.length) * 1" />
    <mutant id="mutant_4295" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="(c.length) % 1" />
    <mutant id="mutant_4294" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="1" />
    <mutant id="mutant_4293" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) + 1" to="(c.length) / 1" />
    <mutant id="mutant_4292" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="c.length" />
    <mutant id="mutant_4291" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="(c.length) + 1" />
    <mutant id="mutant_4290" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="(c.length) * 1" />
    <mutant id="mutant_4289" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="(c.length) % 1" />
    <mutant id="mutant_4288" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="1" />
    <mutant id="mutant_4287" viable="true" in="org.eclipse.jgit.lib.Tree.members()" from="(c.length) - 1" to="(c.length) / 1" />
    <mutant id="mutant_4286" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_4285" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_4284" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_4283" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_4282" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_4281" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="(slash + 1)" to="1" />
    <mutant id="mutant_4280" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="(s.length)" />
    <mutant id="mutant_4279" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="((s.length) + 1)" />
    <mutant id="mutant_4278" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="((s.length) * 1)" />
    <mutant id="mutant_4277" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="((s.length) % 1)" />
    <mutant id="mutant_4276" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="1" />
    <mutant id="mutant_4275" viable="true" in="org.eclipse.jgit.lib.Tree.findMember(byte[],byte,int)" from="((s.length) - 1)" to="((s.length) / 1)" />
    <mutant id="mutant_16047" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 % 1)" />
    <mutant id="mutant_16048" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="(eol + 1)" />
    <mutant id="mutant_16045" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 / 1)" />
    <mutant id="mutant_16046" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 - 1)" />
    <mutant id="mutant_16049" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="1" />
    <mutant id="mutant_16040" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 + 1)" />
    <mutant id="mutant_16043" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="1" />
    <mutant id="mutant_16044" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="dot2" />
    <mutant id="mutant_16041" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 % 1)" />
    <mutant id="mutant_16042" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 + 1)" to="(dot2 * 1)" />
    <mutant id="mutant_16058" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="(dot2 - 1)" />
    <mutant id="mutant_16059" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="(dot2 % 1)" />
    <mutant id="mutant_16056" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="dot2" />
    <mutant id="mutant_16057" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="(dot2 / 1)" />
    <mutant id="mutant_16050" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="(eol / 1)" />
    <mutant id="mutant_16051" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="(eol * 1)" />
    <mutant id="mutant_16054" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="(dot2 * 1)" />
    <mutant id="mutant_16055" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseModeLine(int,int)" from="(dot2 + 1)" to="1" />
    <mutant id="mutant_16052" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="eol" />
    <mutant id="mutant_16053" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(eol - 1)" to="(eol % 1)" />
    <mutant id="mutant_16025" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="comma" />
    <mutant id="mutant_16026" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="(comma + 1)" />
    <mutant id="mutant_16023" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="(getParentCount()) * 1" />
    <mutant id="mutant_16024" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="1" />
    <mutant id="mutant_16029" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="(comma % 1)" />
    <mutant id="mutant_16027" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="(comma * 1)" />
    <mutant id="mutant_16028" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(comma - 1)" to="(comma / 1)" />
    <mutant id="mutant_16021" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="(getParentCount()) % 1" />
    <mutant id="mutant_16022" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="getParentCount()" />
    <mutant id="mutant_16020" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.getScriptText(java.nio.charset.Charset,java.nio.charset.Charset)" from="(getParentCount()) + 1" to="(getParentCount()) - 1" />
    <mutant id="mutant_16036" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 * 1)" />
    <mutant id="mutant_16037" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="1" />
    <mutant id="mutant_16034" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="(ids.size()) - 1" />
    <mutant id="mutant_16035" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="ids.size()" />
    <mutant id="mutant_16038" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="dot2" />
    <mutant id="mutant_16039" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(dot2 - 1)" to="(dot2 / 1)" />
    <mutant id="mutant_16032" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="(ids.size()) % 1" />
    <mutant id="mutant_16033" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="(ids.size()) * 1" />
    <mutant id="mutant_16030" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="(ids.size()) / 1" />
    <mutant id="mutant_16031" viable="true" in="org.eclipse.jgit.patch.CombinedFileHeader.parseIndexLine(int,int)" from="(ids.size()) + 1" to="1" />
    <mutant id="mutant_6923" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="(ptr / 5)" />
    <mutant id="mutant_6924" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="(ptr % 5)" />
    <mutant id="mutant_6925" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="ptr" />
    <mutant id="mutant_6926" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="(ptr - 5)" />
    <mutant id="mutant_6927" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="(ptr / 6)" />
    <mutant id="mutant_6928" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="(ptr * 6)" />
    <mutant id="mutant_6929" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="6" />
    <mutant id="mutant_6920" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="(ptr - 4)" />
    <mutant id="mutant_6921" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="(ptr * 5)" />
    <mutant id="mutant_6922" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 5)" to="5" />
    <mutant id="mutant_6912" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_6913" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_6914" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_6915" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="4" />
    <mutant id="mutant_6916" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="(ptr % 4)" />
    <mutant id="mutant_6917" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="(ptr / 4)" />
    <mutant id="mutant_6918" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="(ptr * 4)" />
    <mutant id="mutant_6919" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 4)" to="ptr" />
    <mutant id="mutant_6910" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_6911" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_6909" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_6901" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_6902" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_6903" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_6904" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_6905" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_6906" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_6907" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_6908" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_6900" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_404" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) / &quot;%&quot;)" />
    <mutant id="mutant_405" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) * &quot;%&quot;)" />
    <mutant id="mutant_406" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="&quot;%&quot;" />
    <mutant id="mutant_407" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;rename from &quot; - (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_400" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; - (ent.getScore()))" />
    <mutant id="mutant_401" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) % &quot;%&quot;)" />
    <mutant id="mutant_402" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(&quot;similarity index &quot; + (ent.getScore()))" />
    <mutant id="mutant_403" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) - &quot;%&quot;)" />
    <mutant id="mutant_408" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;rename from &quot; % (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_409" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;rename from &quot; / (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_4304" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_5636" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="end" />
    <mutant id="mutant_6967" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="ptr" />
    <mutant id="mutant_4303" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="p" />
    <mutant id="mutant_5637" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="(end * off)" />
    <mutant id="mutant_6968" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="(ptr - 12)" />
    <mutant id="mutant_4302" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_5638" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="1" />
    <mutant id="mutant_6969" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 13)" to="(ptr / 13)" />
    <mutant id="mutant_4301" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_5639" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.scanRef(org.eclipse.jgit.internal.storage.file.RefDirectory$LooseRef,java.lang.String)" from="(n - 1)" to="(n / 1)" />
    <mutant id="mutant_4300" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(p + 1)" to="1" />
    <mutant id="mutant_6960" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="(ptr - 11)" />
    <mutant id="mutant_5630" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="p" />
    <mutant id="mutant_6961" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="ptr" />
    <mutant id="mutant_4309" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) + 1" />
    <mutant id="mutant_5631" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_6962" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="(ptr * 11)" />
    <mutant id="mutant_4308" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) * 1" />
    <mutant id="mutant_5632" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="(end % off)" />
    <mutant id="mutant_6963" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="(ptr % 12)" />
    <mutant id="mutant_4307" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) % 1" />
    <mutant id="mutant_5633" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="off" />
    <mutant id="mutant_6964" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="12" />
    <mutant id="mutant_4306" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="1" />
    <mutant id="mutant_5634" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="(end + off)" />
    <mutant id="mutant_6965" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="(ptr * 12)" />
    <mutant id="mutant_4305" viable="true" in="org.eclipse.jgit.lib.Tree.insertEntry(int,org.eclipse.jgit.lib.TreeEntry)" from="(c.length) - 1" to="(c.length) / 1" />
    <mutant id="mutant_5635" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.copy(java.lang.String,int,int)" from="(end - off)" to="(end / off)" />
    <mutant id="mutant_6966" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 12)" to="(ptr / 12)" />
    <mutant id="mutant_415" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;rename to &quot; % (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_416" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;rename to &quot; - (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_417" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;rename to &quot; / (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_418" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;rename to &quot; * (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_411" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;rename from &quot; * (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_412" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)" />
    <mutant id="mutant_413" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="&quot;rename to &quot;" />
    <mutant id="mutant_414" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)" />
    <mutant id="mutant_419" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="&quot;similarity index &quot;" />
    <mutant id="mutant_5625" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="(loose.find(prefix))" />
    <mutant id="mutant_6956" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="10" />
    <mutant id="mutant_5626" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_6957" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="11" />
    <mutant id="mutant_5627" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="1" />
    <mutant id="mutant_6958" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="(ptr / 11)" />
    <mutant id="mutant_5628" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_6959" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 11)" to="(ptr % 11)" />
    <mutant id="mutant_5629" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.levelsIn(java.lang.String)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_6950" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="(ptr % 9)" />
    <mutant id="mutant_410" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;rename from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="&quot;rename from &quot;" />
    <mutant id="mutant_5620" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_6951" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="(ptr % 10)" />
    <mutant id="mutant_5621" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) - 1)" />
    <mutant id="mutant_6952" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="(ptr / 10)" />
    <mutant id="mutant_5622" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) % 1)" />
    <mutant id="mutant_6953" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="(ptr - 10)" />
    <mutant id="mutant_5623" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) / 1)" />
    <mutant id="mutant_6954" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="ptr" />
    <mutant id="mutant_5624" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((loose.find(prefix)) + 1)" to="((loose.find(prefix)) * 1)" />
    <mutant id="mutant_6955" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 10)" to="(ptr * 10)" />
    <mutant id="mutant_426" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="(&quot;similarity index &quot; + (ent.getScore()))" />
    <mutant id="mutant_427" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) - &quot;%&quot;)" />
    <mutant id="mutant_428" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) / &quot;%&quot;)" />
    <mutant id="mutant_429" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) * &quot;%&quot;)" />
    <mutant id="mutant_422" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; / (ent.getScore()))" />
    <mutant id="mutant_423" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(ent.getScore())" />
    <mutant id="mutant_424" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; - (ent.getScore()))" />
    <mutant id="mutant_425" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="((&quot;similarity index &quot; + (ent.getScore())) % &quot;%&quot;)" />
    <mutant id="mutant_5614" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_6945" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="(ptr / 9)" />
    <mutant id="mutant_5615" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) - 1)" />
    <mutant id="mutant_6946" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="(ptr * 9)" />
    <mutant id="mutant_5616" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) % 1)" />
    <mutant id="mutant_6947" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="(ptr - 9)" />
    <mutant id="mutant_5617" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) / 1)" />
    <mutant id="mutant_6948" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="9" />
    <mutant id="mutant_5618" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="((packed.find(prefix)) * 1)" />
    <mutant id="mutant_6949" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 9)" to="ptr" />
    <mutant id="mutant_5619" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="((packed.find(prefix)) + 1)" to="(packed.find(prefix))" />
    <mutant id="mutant_420" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; * (ent.getScore()))" />
    <mutant id="mutant_421" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; % (ent.getScore()))" />
    <mutant id="mutant_6940" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="8" />
    <mutant id="mutant_5610" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="name * '/'" />
    <mutant id="mutant_6941" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="(ptr % 8)" />
    <mutant id="mutant_5611" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="name - '/'" />
    <mutant id="mutant_6942" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="(ptr - 8)" />
    <mutant id="mutant_5612" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="name / '/'" />
    <mutant id="mutant_6943" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="(ptr * 8)" />
    <mutant id="mutant_5613" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="'/'" />
    <mutant id="mutant_6944" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="ptr" />
    <mutant id="mutant_437" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)" />
    <mutant id="mutant_438" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;copy to &quot; / (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_439" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy to &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" to="(&quot;copy to &quot; % (org.eclipse.jgit.diff.DiffFormatter.quotePath(newp)))" />
    <mutant id="mutant_433" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="&quot;copy from &quot;" />
    <mutant id="mutant_434" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;copy from &quot; % (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_435" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;copy from &quot; / (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_436" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)" />
    <mutant id="mutant_5603" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="lastSlash" />
    <mutant id="mutant_6934" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="7" />
    <mutant id="mutant_5604" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash % 1)" />
    <mutant id="mutant_6935" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="(ptr % 7)" />
    <mutant id="mutant_5605" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash / 1)" />
    <mutant id="mutant_6936" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="(ptr * 7)" />
    <mutant id="mutant_5606" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash * 1)" />
    <mutant id="mutant_6937" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="(ptr - 7)" />
    <mutant id="mutant_5607" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash + 1)" />
    <mutant id="mutant_6938" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="ptr" />
    <mutant id="mutant_5608" viable="false" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="name % '/'" />
    <mutant id="mutant_6939" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 8)" to="(ptr / 8)" />
    <mutant id="mutant_5609" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="name + '/'" to="name" />
    <mutant id="mutant_430" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="((&quot;similarity index &quot; + (ent.getScore())) + &quot;%&quot;)" to="&quot;%&quot;" />
    <mutant id="mutant_431" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;copy from &quot; * (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_432" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;copy from &quot; + (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" to="(&quot;copy from &quot; - (org.eclipse.jgit.diff.DiffFormatter.quotePath(oldp)))" />
    <mutant id="mutant_6930" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="(ptr % 6)" />
    <mutant id="mutant_5600" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="((curLoose.find(prefix)) * 1)" />
    <mutant id="mutant_6931" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="ptr" />
    <mutant id="mutant_5601" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory$LooseScanner.scan(java.lang.String)" from="((curLoose.find(prefix)) + 1)" to="(curLoose.find(prefix))" />
    <mutant id="mutant_6932" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 6)" to="(ptr - 6)" />
    <mutant id="mutant_5602" viable="true" in="org.eclipse.jgit.internal.storage.file.RefDirectory.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="1" />
    <mutant id="mutant_6933" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex.hashBlock(byte[],int)" from="(ptr + 7)" to="(ptr / 7)" />
    <mutant id="mutant_6770" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="end" />
    <mutant id="mutant_5440" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="p" />
    <mutant id="mutant_6771" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="(deltaPtr * cmd)" />
    <mutant id="mutant_4106" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) * &quot;/&quot;" />
    <mutant id="mutant_5438" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="offset64.length" />
    <mutant id="mutant_6769" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="end - 1" />
    <mutant id="mutant_4105" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(Constants.R_REMOTES) + remote" />
    <mutant id="mutant_5439" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="(offset64.length) % 8" />
    <mutant id="mutant_4104" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) % &quot;/&quot;" />
    <mutant id="mutant_4103" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) - &quot;/&quot;" />
    <mutant id="mutant_4102" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_4101" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) / &quot;/&quot;" />
    <mutant id="mutant_4100" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) / remote)" />
    <mutant id="mutant_5430" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="(8 + ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" />
    <mutant id="mutant_6761" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) * (headerLength))" />
    <mutant id="mutant_5431" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="((int)(p &amp; (~(PackIndexV2.IS_O64))))" />
    <mutant id="mutant_6762" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) % (headerLength))" />
    <mutant id="mutant_5432" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="8" />
    <mutant id="mutant_6763" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) - (headerLength))" />
    <mutant id="mutant_5433" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="(8 % ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" />
    <mutant id="mutant_6764" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="headerLength" />
    <mutant id="mutant_5434" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="(offset64.length) * 8" />
    <mutant id="mutant_6765" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="1" />
    <mutant id="mutant_4109" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="((workDirPath.length()) / 1)" />
    <mutant id="mutant_5435" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="(offset64.length) + 8" />
    <mutant id="mutant_6766" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="end * 1" />
    <mutant id="mutant_4108" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="1" />
    <mutant id="mutant_5436" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="(offset64.length) - 8" />
    <mutant id="mutant_6767" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="end / 1" />
    <mutant id="mutant_4107" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="workDirPath.length()" />
    <mutant id="mutant_5437" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset64Count()" from="(offset64.length) / 8" to="8" />
    <mutant id="mutant_6768" viable="true" in="org.eclipse.jgit.internal.storage.pack.BaseSearch.addBase(int,byte[],int,int)" from="end + 1" to="end % 1" />
    <mutant id="mutant_6760" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="objectOffset" />
    <mutant id="mutant_5427" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="p &lt;&lt; 2" />
    <mutant id="mutant_6758" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="((d.length) / ((int)(position)))" />
    <mutant id="mutant_5428" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="(8 / ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" />
    <mutant id="mutant_6759" viable="true" in="org.eclipse.jgit.internal.storage.dfs.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) / (headerLength))" />
    <mutant id="mutant_5429" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getOffset(int,int)" from="(8 * ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" to="(8 - ((int)((p &amp; (~(PackIndexV2.IS_O64))))))" />
    <mutant id="mutant_6750" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="((desc.size()) % (packs.size()))" />
    <mutant id="mutant_5420" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition % base" />
    <mutant id="mutant_6751" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="packs.size()" />
    <mutant id="mutant_5421" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition" />
    <mutant id="mutant_6752" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="desc.size()" />
    <mutant id="mutant_5422" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="(p &lt;&lt; 2) / p" />
    <mutant id="mutant_6753" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="((d.length) % ((int)(position)))" />
    <mutant id="mutant_5423" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="(p &lt;&lt; 2) - p" />
    <mutant id="mutant_6754" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="((int)(position))" />
    <mutant id="mutant_5424" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="p" />
    <mutant id="mutant_6755" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="((d.length) + ((int)(position)))" />
    <mutant id="mutant_5425" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="(p &lt;&lt; 2) % p" />
    <mutant id="mutant_6756" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="d.length" />
    <mutant id="mutant_5426" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.idOffset(int)" from="(p &lt;&lt; 2) + p" to="(p &lt;&lt; 2) * p" />
    <mutant id="mutant_6757" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$Out.read(long,java.nio.ByteBuffer)" from="((d.length) - ((int)(position)))" to="((d.length) * ((int)(position)))" />
    <mutant id="mutant_5416" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition * base" />
    <mutant id="mutant_6747" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="((desc.size()) * (packs.size()))" />
    <mutant id="mutant_5417" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition + base" />
    <mutant id="mutant_6748" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="((desc.size()) - (packs.size()))" />
    <mutant id="mutant_5418" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="base" />
    <mutant id="mutant_6749" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.commitPackImpl(java.util.Collection,java.util.Collection)" from="((desc.size()) + (packs.size()))" to="((desc.size()) / (packs.size()))" />
    <mutant id="mutant_5419" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition / base" />
    <mutant id="mutant_6740" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="((&quot;pack-&quot; + id) % &quot;-&quot;)" />
    <mutant id="mutant_5410" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="1" />
    <mutant id="mutant_6741" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) * (source.name()))" />
    <mutant id="mutant_5411" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne / 1)" />
    <mutant id="mutant_6742" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) / (source.name()))" />
    <mutant id="mutant_5412" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6743" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="source.name()" />
    <mutant id="mutant_5413" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6744" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) % (source.name()))" />
    <mutant id="mutant_5414" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne + 1)" />
    <mutant id="mutant_6745" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="(((&quot;pack-&quot; + id) + &quot;-&quot;) - (source.name()))" />
    <mutant id="mutant_5415" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getLevelTwo(long,int)" from="(levelOne - 1)" to="levelOne" />
    <mutant id="mutant_6746" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(((&quot;pack-&quot; + id) + &quot;-&quot;) + (source.name()))" to="((&quot;pack-&quot; + id) + &quot;-&quot;)" />
    <mutant id="mutant_5405" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne / 1)" />
    <mutant id="mutant_6736" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="((&quot;pack-&quot; + id) * &quot;-&quot;)" />
    <mutant id="mutant_5406" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne - 1)" />
    <mutant id="mutant_6737" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="(&quot;pack-&quot; + id)" />
    <mutant id="mutant_5407" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6738" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="&quot;-&quot;" />
    <mutant id="mutant_5408" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6739" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="((&quot;pack-&quot; + id) - &quot;-&quot;)" />
    <mutant id="mutant_5409" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="levelOne" />
    <mutant id="mutant_6730" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="(&quot;pack-&quot; * id)" />
    <mutant id="mutant_5400" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6731" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="id" />
    <mutant id="mutant_5401" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6732" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="(&quot;pack-&quot; - id)" />
    <mutant id="mutant_5402" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne + 1)" />
    <mutant id="mutant_6733" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="(&quot;pack-&quot; / id)" />
    <mutant id="mutant_5403" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="levelOne" />
    <mutant id="mutant_6734" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="(&quot;pack-&quot; % id)" />
    <mutant id="mutant_5404" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne + 1)" to="1" />
    <mutant id="mutant_6735" viable="false" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="((&quot;pack-&quot; + id) + &quot;-&quot;)" to="((&quot;pack-&quot; + id) / &quot;-&quot;)" />
    <mutant id="mutant_5480" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="((n.length()) % 5)" />
    <mutant id="mutant_5481" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="((n.length()) * 5)" />
    <mutant id="mutant_5482" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="((n.substring(0, ((n.length()) - 5))) * &quot;.keep&quot;)" />
    <mutant id="mutant_5483" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="&quot;.keep&quot;" />
    <mutant id="mutant_5484" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="((n.substring(0, ((n.length()) - 5))) % &quot;.keep&quot;)" />
    <mutant id="mutant_4153" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="(dashg - 5)" />
    <mutant id="mutant_4152" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="(dashg / 5)" />
    <mutant id="mutant_4151" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="(dashg * 5)" />
    <mutant id="mutant_4150" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="5" />
    <mutant id="mutant_4149" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="(dashg % 5)" />
    <mutant id="mutant_4148" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="revstr" />
    <mutant id="mutant_4147" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="(&quot;x/&quot; % revstr)" />
    <mutant id="mutant_4146" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="(&quot;x/&quot; - revstr)" />
    <mutant id="mutant_4145" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="&quot;x/&quot;" />
    <mutant id="mutant_4144" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="(&quot;x/&quot; * revstr)" />
    <mutant id="mutant_4143" viable="false" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(&quot;x/&quot; + revstr)" to="(&quot;x/&quot; / revstr)" />
    <mutant id="mutant_5474" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_5475" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_5476" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="((n.length()) / 5)" />
    <mutant id="mutant_5477" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="n.length()" />
    <mutant id="mutant_5478" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="5" />
    <mutant id="mutant_5479" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.length()) - 5)" to="((n.length()) + 5)" />
    <mutant id="mutant_5470" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_5471" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_5472" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="1" />
    <mutant id="mutant_5473" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter.writeFanOutTable()" from="(i - 1)" to="i" />
    <mutant id="mutant_4142" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="(p / (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_4141" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="(p % (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_4140" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="(p - (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_4139" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="p" />
    <mutant id="mutant_4138" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_4137" viable="true" in="org.eclipse.jgit.lib.Repository.readMergeHeads()" from="(p + (Constants.OBJECT_ID_STRING_LENGTH))" to="(p * (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_4136" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="&quot;Repository[&quot; + desc" />
    <mutant id="mutant_4135" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="(&quot;Repository[&quot; + desc) - &quot;]&quot;" />
    <mutant id="mutant_4134" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="(&quot;Repository[&quot; + desc) % &quot;]&quot;" />
    <mutant id="mutant_4133" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_4132" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="(&quot;Repository[&quot; + desc) * &quot;]&quot;" />
    <mutant id="mutant_5463" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p - 1" />
    <mutant id="mutant_6794" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="((src.getWeight()) &gt;&gt; 20)" />
    <mutant id="mutant_5464" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="4" />
    <mutant id="mutant_6795" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="(DeltaEncoder.MAX_COPY_CMD_SIZE) % 4" />
    <mutant id="mutant_5465" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_6796" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="(DeltaEncoder.MAX_COPY_CMD_SIZE) / 4" />
    <mutant id="mutant_5466" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="4 / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6797" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="(DeltaEncoder.MAX_COPY_CMD_SIZE) - 4" />
    <mutant id="mutant_5467" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="4 % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6798" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="DeltaEncoder.MAX_COPY_CMD_SIZE" />
    <mutant id="mutant_5468" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="4 * (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6799" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="4" />
    <mutant id="mutant_5469" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexWriter(java.io.OutputStream)" from="4 + (Constants.OBJECT_ID_LENGTH)" to="4 - (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6790" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="(((src.getWeight()) &gt;&gt; 20) % ((res.getWeight()) &gt;&gt; 21))" />
    <mutant id="mutant_5460" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p * 1" />
    <mutant id="mutant_6791" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="(((src.getWeight()) &gt;&gt; 20) * ((res.getWeight()) &gt;&gt; 21))" />
    <mutant id="mutant_5461" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p / 1" />
    <mutant id="mutant_6792" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="(((src.getWeight()) &gt;&gt; 20) / ((res.getWeight()) &gt;&gt; 21))" />
    <mutant id="mutant_5462" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p" />
    <mutant id="mutant_6793" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="((res.getWeight()) &gt;&gt; 21)" />
    <mutant id="mutant_4131" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc) + &quot;]&quot;" to="(&quot;Repository[&quot; + desc) / &quot;]&quot;" />
    <mutant id="mutant_4130" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="(&quot;Repository[&quot; % desc)" />
    <mutant id="mutant_4128" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="(&quot;Repository[&quot; / desc)" />
    <mutant id="mutant_4127" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="(&quot;Repository[&quot; - desc)" />
    <mutant id="mutant_4126" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="desc" />
    <mutant id="mutant_4125" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="(&quot;Repository[&quot; * desc)" />
    <mutant id="mutant_4124" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="(getClass().getSimpleName()) + &quot;-&quot;" />
    <mutant id="mutant_4123" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="((getClass().getSimpleName()) + &quot;-&quot;) / (System.identityHashCode(this))" />
    <mutant id="mutant_4122" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="((getClass().getSimpleName()) + &quot;-&quot;) * (System.identityHashCode(this))" />
    <mutant id="mutant_4121" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="((getClass().getSimpleName()) + &quot;-&quot;) % (System.identityHashCode(this))" />
    <mutant id="mutant_5452" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p % 1)" />
    <mutant id="mutant_6783" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) * length)" />
    <mutant id="mutant_5453" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="1" />
    <mutant id="mutant_6784" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="length" />
    <mutant id="mutant_5454" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p * 1)" />
    <mutant id="mutant_6785" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) / length)" />
    <mutant id="mutant_5455" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p / 1)" />
    <mutant id="mutant_6786" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) - length)" />
    <mutant id="mutant_5456" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="p" />
    <mutant id="mutant_6787" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(used)" />
    <mutant id="mutant_5457" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p + 1)" />
    <mutant id="mutant_6788" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) % length)" />
    <mutant id="mutant_5458" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p % 1" />
    <mutant id="mutant_6789" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(((src.getWeight()) &gt;&gt; 20) + ((res.getWeight()) &gt;&gt; 21))" to="(((src.getWeight()) &gt;&gt; 20) - ((res.getWeight()) &gt;&gt; 21))" />
    <mutant id="mutant_4129" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="(&quot;Repository[&quot; + desc)" to="&quot;Repository[&quot;" />
    <mutant id="mutant_5459" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="1" />
    <mutant id="mutant_6780" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) - length)" />
    <mutant id="mutant_5450" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="high" />
    <mutant id="mutant_6781" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="(used)" />
    <mutant id="mutant_5451" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_6782" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) % length)" />
    <mutant id="mutant_4120" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="((getClass().getSimpleName()) + &quot;-&quot;) - (System.identityHashCode(this))" />
    <mutant id="mutant_4117" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="((getClass().getSimpleName()) - &quot;-&quot;)" />
    <mutant id="mutant_5449" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_4116" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="(getClass().getSimpleName())" />
    <mutant id="mutant_4115" viable="true" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="&quot;-&quot;" />
    <mutant id="mutant_4114" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="((getClass().getSimpleName()) % &quot;-&quot;)" />
    <mutant id="mutant_4113" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="((getClass().getSimpleName()) * &quot;-&quot;)" />
    <mutant id="mutant_4112" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="((workDirPath.length()) - 1)" />
    <mutant id="mutant_4111" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="((workDirPath.length()) * 1)" />
    <mutant id="mutant_4110" viable="true" in="org.eclipse.jgit.lib.Repository.stripWorkDir(java.io.File,java.io.File)" from="((workDirPath.length()) + 1)" to="((workDirPath.length()) % 1)" />
    <mutant id="mutant_5441" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="p4" />
    <mutant id="mutant_6772" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="(deltaPtr / cmd)" />
    <mutant id="mutant_5442" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="(p4 / p)" />
    <mutant id="mutant_6773" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="(deltaPtr - cmd)" />
    <mutant id="mutant_5443" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="(p4 * p)" />
    <mutant id="mutant_6774" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="(deltaPtr % cmd)" />
    <mutant id="mutant_5444" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="(p4 - p)" />
    <mutant id="mutant_6775" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="deltaPtr" />
    <mutant id="mutant_5445" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.getObjectId(long)" from="(p4 + p)" to="(p4 % p)" />
    <mutant id="mutant_6776" viable="true" in="org.eclipse.jgit.internal.storage.pack.BinaryDelta.format(byte[],boolean)" from="(deltaPtr + cmd)" to="cmd" />
    <mutant id="mutant_5446" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_6777" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) * length)" />
    <mutant id="mutant_4119" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;) + (System.identityHashCode(this))" to="System.identityHashCode(this)" />
    <mutant id="mutant_5447" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="low" />
    <mutant id="mutant_6778" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="length" />
    <mutant id="mutant_4118" viable="false" in="org.eclipse.jgit.lib.Repository.toString()" from="((getClass().getSimpleName()) + &quot;-&quot;)" to="((getClass().getSimpleName()) / &quot;-&quot;)" />
    <mutant id="mutant_5448" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_6779" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaCache.canCache(int,org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((used) + length)" to="((used) / length)" />
    <mutant id="mutant_4197" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="(((location.hashCode()) &gt;&gt;&gt; 1) / (openLocks.length))" />
    <mutant id="mutant_4196" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="(n % 1)" />
    <mutant id="mutant_4195" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="(n + 1)" />
    <mutant id="mutant_4194" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="(n * 1)" />
    <mutant id="mutant_4193" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="n" />
    <mutant id="mutant_4192" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="(n / 1)" />
    <mutant id="mutant_4191" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.readFirstLine(java.io.File)" from="(n - 1)" to="1" />
    <mutant id="mutant_4190" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="Constants.DOT_GIT_EXT" />
    <mutant id="mutant_16124" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_16125" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_16122" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16123" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_16128" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="((old.length) % 1)" />
    <mutant id="mutant_4189" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name % (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_16129" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="((old.length) * 1)" />
    <mutant id="mutant_4188" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="name" />
    <mutant id="mutant_16126" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="((old.length) / 1)" />
    <mutant id="mutant_4187" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name * (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_16127" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="1" />
    <mutant id="mutant_16120" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_16121" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_4186" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name / (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_4185" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name - (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_4184" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="Constants.DOT_GIT_EXT" />
    <mutant id="mutant_4183" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name % (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_4182" viable="true" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="name" />
    <mutant id="mutant_4181" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name * (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_4180" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name / (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_16135" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="ptr" />
    <mutant id="mutant_16136" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="(ptr - ancestor)" />
    <mutant id="mutant_16133" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="(ptr * ancestor)" />
    <mutant id="mutant_16134" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="(ptr % ancestor)" />
    <mutant id="mutant_4179" viable="false" in="org.eclipse.jgit.lib.RepositoryCache$FileKey.resolve(java.io.File,org.eclipse.jgit.util.FS)" from="(name + (Constants.DOT_GIT_EXT))" to="(name - (Constants.DOT_GIT_EXT))" />
    <mutant id="mutant_16139" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_4178" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="dashg" />
    <mutant id="mutant_4177" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg / 2)" />
    <mutant id="mutant_16137" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="ancestor" />
    <mutant id="mutant_4176" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg % 2)" />
    <mutant id="mutant_16138" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_16131" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="(old.length)" />
    <mutant id="mutant_16132" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(ptr + ancestor)" to="(ptr / ancestor)" />
    <mutant id="mutant_16130" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="((old.length) + 1)" to="((old.length) - 1)" />
    <mutant id="mutant_4175" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg - 2)" />
    <mutant id="mutant_4174" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="2" />
    <mutant id="mutant_4173" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg * 2)" />
    <mutant id="mutant_16108" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="(newLineCount) + ((nContext) + nAdded)" />
    <mutant id="mutant_4172" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="dashg" />
    <mutant id="mutant_16109" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="(newLineCount) % ((nContext) + nAdded)" />
    <mutant id="mutant_4171" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="(dashg - 4)" />
    <mutant id="mutant_4170" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="(dashg / 4)" />
    <mutant id="mutant_16102" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) / nAdded)" />
    <mutant id="mutant_16103" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) % nAdded)" />
    <mutant id="mutant_16100" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="nAdded" />
    <mutant id="mutant_4169" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="(dashg * 4)" />
    <mutant id="mutant_16101" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) - nAdded)" />
    <mutant id="mutant_4168" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="(dashg % 4)" />
    <mutant id="mutant_16106" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="nAdded" />
    <mutant id="mutant_4167" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 4)" to="4" />
    <mutant id="mutant_16107" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) - nAdded)" />
    <mutant id="mutant_4166" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="dashg" />
    <mutant id="mutant_16104" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(nContext)" />
    <mutant id="mutant_4165" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="(dashg / 3)" />
    <mutant id="mutant_16105" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) * nAdded)" />
    <mutant id="mutant_5496" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="maxOffset" />
    <mutant id="mutant_5497" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="cnt" />
    <mutant id="mutant_5498" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="(maxOffset * cnt)" />
    <mutant id="mutant_5499" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="(maxOffset + cnt)" />
    <mutant id="mutant_5490" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="(cnt - 1)" />
    <mutant id="mutant_5491" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="(cnt % 1)" />
    <mutant id="mutant_5492" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="(cnt / 1)" />
    <mutant id="mutant_5493" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="(cnt * 1)" />
    <mutant id="mutant_5494" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="(maxOffset - cnt)" />
    <mutant id="mutant_5495" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt)" to="(maxOffset % cnt)" />
    <mutant id="mutant_4164" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="(dashg % 3)" />
    <mutant id="mutant_4163" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="(dashg - 3)" />
    <mutant id="mutant_4162" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="3" />
    <mutant id="mutant_16119" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_4161" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 3)" to="(dashg * 3)" />
    <mutant id="mutant_4160" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="dashg" />
    <mutant id="mutant_16113" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="(newLineCount) * ((nContext) + nAdded)" />
    <mutant id="mutant_16114" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_4159" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg / 2)" />
    <mutant id="mutant_16111" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="newLineCount" />
    <mutant id="mutant_4158" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg % 2)" />
    <mutant id="mutant_16112" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="(newLineCount) / ((nContext) + nAdded)" />
    <mutant id="mutant_4157" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg - 2)" />
    <mutant id="mutant_16117" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_4156" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="2" />
    <mutant id="mutant_16118" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_4155" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 2)" to="(dashg * 2)" />
    <mutant id="mutant_16115" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_4154" viable="true" in="org.eclipse.jgit.lib.Repository.resolveSimple(java.lang.String)" from="(dashg + 5)" to="dashg" />
    <mutant id="mutant_16116" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_5485" viable="true" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="n.substring(0, ((n.length()) - 5))" />
    <mutant id="mutant_5486" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="((n.substring(0, ((n.length()) - 5))) - &quot;.keep&quot;)" />
    <mutant id="mutant_5487" viable="false" in="org.eclipse.jgit.internal.storage.file.PackLock(java.io.File,org.eclipse.jgit.util.FS)" from="((n.substring(0, ((n.length()) - 5))) + &quot;.keep&quot;)" to="((n.substring(0, ((n.length()) - 5))) / &quot;.keep&quot;)" />
    <mutant id="mutant_5488" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="1" />
    <mutant id="mutant_5489" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(cnt + 1)" to="cnt" />
    <mutant id="mutant_16110" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(newLineCount) - ((nContext) + nAdded)" to="(nContext) + nAdded" />
    <mutant id="mutant_16168" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="(ptr / ancestor)" />
    <mutant id="mutant_16169" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="(ptr * ancestor)" />
    <mutant id="mutant_16166" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="((old.length) - 1)" />
    <mutant id="mutant_16167" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="(old.length)" />
    <mutant id="mutant_16160" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_16161" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_16164" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="((old.length) % 1)" />
    <mutant id="mutant_16165" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="((old.length) * 1)" />
    <mutant id="mutant_16162" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="((old.length) / 1)" />
    <mutant id="mutant_16163" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="((old.length) + 1)" to="1" />
    <mutant id="mutant_16179" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_16177" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_16178" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_16171" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="ptr" />
    <mutant id="mutant_16172" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="(ptr - ancestor)" />
    <mutant id="mutant_16170" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="(ptr % ancestor)" />
    <mutant id="mutant_16175" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_16176" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_16173" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(ptr + ancestor)" to="ancestor" />
    <mutant id="mutant_16174" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_16146" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16147" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_16144" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_16145" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_16148" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_16149" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_16142" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_16143" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_16140" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16141" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_16157" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_16158" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16155" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol / ptr)" />
    <mutant id="mutant_16156" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_4199" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="(((location.hashCode()) &gt;&gt;&gt; 1) + (openLocks.length))" />
    <mutant id="mutant_16159" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.lang.StringBuilder,java.lang.String[],int[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_4198" viable="true" in="org.eclipse.jgit.lib.RepositoryCache.lockFor(org.eclipse.jgit.lib.RepositoryCache$Key)" from="(((location.hashCode()) &gt;&gt;&gt; 1) % (openLocks.length))" to="((location.hashCode()) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_16150" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol % ptr)" />
    <mutant id="mutant_16153" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol * ptr)" />
    <mutant id="mutant_16154" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="ptr" />
    <mutant id="mutant_16151" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="(eol + ptr)" />
    <mutant id="mutant_16152" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.extractFileLines(java.io.OutputStream[])" from="(eol - ptr)" to="eol" />
    <mutant id="mutant_16090" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="(ancestor - 1)" />
    <mutant id="mutant_16091" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="1" />
    <mutant id="mutant_16089" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="(o.lineCount) * cmp" />
    <mutant id="mutant_16083" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="(o.nContext) / (o.nDeleted)" />
    <mutant id="mutant_16084" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="(o.lineCount) + cmp" />
    <mutant id="mutant_16081" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="(o.nContext) % (o.nDeleted)" />
    <mutant id="mutant_16082" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="o.nDeleted" />
    <mutant id="mutant_16087" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="cmp" />
    <mutant id="mutant_16088" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="(o.lineCount) % cmp" />
    <mutant id="mutant_16085" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="(o.lineCount) / cmp" />
    <mutant id="mutant_16086" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.lineCount) - cmp" to="o.lineCount" />
    <mutant id="mutant_16094" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="(ancestor % 1)" />
    <mutant id="mutant_16095" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="ancestor" />
    <mutant id="mutant_16092" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="(ancestor * 1)" />
    <mutant id="mutant_16093" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(ancestor + 1)" to="(ancestor / 1)" />
    <mutant id="mutant_16098" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="(nContext)" />
    <mutant id="mutant_16099" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) * nAdded)" />
    <mutant id="mutant_16096" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) / nAdded)" />
    <mutant id="mutant_16097" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((nContext) + nAdded)" to="((nContext) % nAdded)" />
    <mutant id="mutant_16069" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="((old.length) * 1)" />
    <mutant id="mutant_16067" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="1" />
    <mutant id="mutant_16068" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="((old.length) % 1)" />
    <mutant id="mutant_16061" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="(eol + c)" />
    <mutant id="mutant_16062" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="(eol * c)" />
    <mutant id="mutant_16060" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="(eol / c)" />
    <mutant id="mutant_16065" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="(eol % c)" />
    <mutant id="mutant_16066" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="((old.length) / 1)" />
    <mutant id="mutant_16063" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="eol" />
    <mutant id="mutant_16064" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(eol - c)" to="c" />
    <mutant id="mutant_16080" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="o.nContext" />
    <mutant id="mutant_16078" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="(o.nContext) * (o.nDeleted)" />
    <mutant id="mutant_16079" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(o.nContext) + (o.nDeleted)" to="(o.nContext) - (o.nDeleted)" />
    <mutant id="mutant_16072" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="(c - ancestor)" />
    <mutant id="mutant_16073" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="c" />
    <mutant id="mutant_16070" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="((old.length) - 1)" />
    <mutant id="mutant_16071" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="((old.length) + 1)" to="(old.length)" />
    <mutant id="mutant_16076" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="(c / ancestor)" />
    <mutant id="mutant_16077" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="ancestor" />
    <mutant id="mutant_16074" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="(c % ancestor)" />
    <mutant id="mutant_16075" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseBody(org.eclipse.jgit.patch.Patch,int)" from="(c + ancestor)" to="(c * ancestor)" />
    <mutant id="mutant_701" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr % (ptrShift))" />
    <mutant id="mutant_702" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_703" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr / (ptrShift))" />
    <mutant id="mutant_704" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr * (ptrShift))" />
    <mutant id="mutant_700" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) / 1" />
    <mutant id="mutant_709" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr / (ptrShift))" />
    <mutant id="mutant_705" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptr" />
    <mutant id="mutant_706" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr + (ptrShift))" />
    <mutant id="mutant_707" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr % (ptrShift))" />
    <mutant id="mutant_708" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_712" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr + (ptrShift))" />
    <mutant id="mutant_713" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="1" />
    <mutant id="mutant_714" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="(1 * (region.getLengthA()))" />
    <mutant id="mutant_715" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="(1 / (region.getLengthA()))" />
    <mutant id="mutant_710" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr * (ptrShift))" />
    <mutant id="mutant_711" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptr" />
    <mutant id="mutant_716" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="(1 - (region.getLengthA()))" />
    <mutant id="mutant_717" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="(1 % (region.getLengthA()))" />
    <mutant id="mutant_718" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(1 + (region.getLengthA()))" to="region.getLengthA()" />
    <mutant id="mutant_719" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr % (ptrShift))" />
    <mutant id="mutant_723" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptr" />
    <mutant id="mutant_724" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr + (ptrShift))" />
    <mutant id="mutant_725" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="((cmp.hash(s, idx)) + -1640562687)" />
    <mutant id="mutant_726" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="(cmp.hash(s, idx))" />
    <mutant id="mutant_720" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_721" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr / (ptrShift))" />
    <mutant id="mutant_722" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(ptr - (ptrShift))" to="(ptr * (ptrShift))" />
    <mutant id="mutant_727" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="((cmp.hash(s, idx)) / -1640562687)" />
    <mutant id="mutant_728" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="((cmp.hash(s, idx)) - -1640562687)" />
    <mutant id="mutant_729" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="-1640562687" />
    <mutant id="mutant_6802" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="(p - (DeltaEncoder.MAX_COPY_CMD_SIZE))" />
    <mutant id="mutant_6803" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="p" />
    <mutant id="mutant_6804" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="(DeltaEncoder.MAX_COPY_CMD_SIZE)" />
    <mutant id="mutant_6805" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="(p / (DeltaEncoder.MAX_COPY_CMD_SIZE))" />
    <mutant id="mutant_6806" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="(p * (DeltaEncoder.MAX_COPY_CMD_SIZE))" />
    <mutant id="mutant_6807" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) / p)" />
    <mutant id="mutant_6808" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) - p)" />
    <mutant id="mutant_6809" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="p" />
    <mutant id="mutant_6800" viable="false" in="?" from="(DeltaEncoder.MAX_COPY_CMD_SIZE) * 4" to="(DeltaEncoder.MAX_COPY_CMD_SIZE) + 4" />
    <mutant id="mutant_6801" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="(p + (DeltaEncoder.MAX_COPY_CMD_SIZE))" to="(p % (DeltaEncoder.MAX_COPY_CMD_SIZE))" />
    <mutant id="mutant_734" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="31 * (Integer.numberOfLeadingZeros(sz))" />
    <mutant id="mutant_735" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="Integer.numberOfLeadingZeros(sz)" />
    <mutant id="mutant_736" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="31" />
    <mutant id="mutant_737" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="1" />
    <mutant id="mutant_730" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.hash(org.eclipse.jgit.diff.HashedSequence,int)" from="((cmp.hash(s, idx)) * -1640562687)" to="((cmp.hash(s, idx)) % -1640562687)" />
    <mutant id="mutant_731" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="31 / (Integer.numberOfLeadingZeros(sz))" />
    <mutant id="mutant_732" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="31 % (Integer.numberOfLeadingZeros(sz))" />
    <mutant id="mutant_733" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tableBits(int)" from="31 - (Integer.numberOfLeadingZeros(sz))" to="31 + (Integer.numberOfLeadingZeros(sz))" />
    <mutant id="mutant_738" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="bPtr * 1" />
    <mutant id="mutant_739" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="bPtr % 1" />
    <mutant id="mutant_745" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as * (ptrShift))" />
    <mutant id="mutant_746" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as / (ptrShift))" />
    <mutant id="mutant_747" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as + (ptrShift))" />
    <mutant id="mutant_748" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as % (ptrShift))" />
    <mutant id="mutant_741" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="bPtr / 1" />
    <mutant id="mutant_742" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="bPtr - 1" />
    <mutant id="mutant_743" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="as" />
    <mutant id="mutant_744" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_749" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="1" />
    <mutant id="mutant_740" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bPtr + 1" to="bPtr" />
    <mutant id="mutant_756" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="bs" />
    <mutant id="mutant_757" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="bs / 1" />
    <mutant id="mutant_758" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="bs * 1" />
    <mutant id="mutant_759" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="bs - 1" />
    <mutant id="mutant_752" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="as * 1" />
    <mutant id="mutant_753" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="as - 1" />
    <mutant id="mutant_754" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="as % 1" />
    <mutant id="mutant_755" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="1" />
    <mutant id="mutant_750" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="as / 1" />
    <mutant id="mutant_751" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="as + 1" to="as" />
    <mutant id="mutant_767" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="1" />
    <mutant id="mutant_768" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="bs" />
    <mutant id="mutant_769" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="(bs / 1)" />
    <mutant id="mutant_763" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="as" />
    <mutant id="mutant_764" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="(as * 1)" />
    <mutant id="mutant_765" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="(as % 1)" />
    <mutant id="mutant_766" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="(as + 1)" />
    <mutant id="mutant_5515" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="o % (bucketSize)" />
    <mutant id="mutant_6846" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="n" />
    <mutant id="mutant_5516" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="o * (bucketSize)" />
    <mutant id="mutant_6847" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="1 % n" />
    <mutant id="mutant_5517" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="o - (bucketSize)" />
    <mutant id="mutant_6848" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="1 * n" />
    <mutant id="mutant_5518" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="1" />
    <mutant id="mutant_6849" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaIndex(byte[])" from="1 + (countEntries(scan))" to="1" />
    <mutant id="mutant_5519" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="oi + 1" to="oi / 1" />
    <mutant id="mutant_760" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="bs + 1" to="bs % 1" />
    <mutant id="mutant_761" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="1" />
    <mutant id="mutant_6840" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="cnt" />
    <mutant id="mutant_762" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - 1)" to="(as / 1)" />
    <mutant id="mutant_5510" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="((int)(cnt)) / 1" />
    <mutant id="mutant_6841" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="(((size) + hdrs) * cnt)" />
    <mutant id="mutant_5511" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="((int)(cnt)) * 1" />
    <mutant id="mutant_6842" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="(((size) + hdrs) - cnt)" />
    <mutant id="mutant_5512" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="o" />
    <mutant id="mutant_6843" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="1 / n" />
    <mutant id="mutant_5513" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="o + (bucketSize)" />
    <mutant id="mutant_6844" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="1" />
    <mutant id="mutant_5514" viable="false" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(o / (bucketSize)))" to="bucketSize" />
    <mutant id="mutant_6845" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="1 + n" to="1 - n" />
    <mutant id="mutant_778" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as % (ptrShift))" />
    <mutant id="mutant_779" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="(ae % (ptrShift))" />
    <mutant id="mutant_774" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_775" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as * (ptrShift))" />
    <mutant id="mutant_776" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as / (ptrShift))" />
    <mutant id="mutant_777" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="(as + (ptrShift))" />
    <mutant id="mutant_5504" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="(maxOffset / cnt) % 1" />
    <mutant id="mutant_6835" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="(size)" />
    <mutant id="mutant_5505" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="maxOffset / cnt" />
    <mutant id="mutant_6836" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="((size) - hdrs)" />
    <mutant id="mutant_5506" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="1" />
    <mutant id="mutant_6837" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="(((size) + hdrs) / cnt)" />
    <mutant id="mutant_5507" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="((int)(cnt))" />
    <mutant id="mutant_6838" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="((size) + hdrs)" />
    <mutant id="mutant_5508" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="((int)(cnt)) - 1" />
    <mutant id="mutant_6839" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(((size) + hdrs) + cnt)" to="(((size) + hdrs) % cnt)" />
    <mutant id="mutant_5509" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="((int)(cnt)) + 1" to="((int)(cnt)) % 1" />
    <mutant id="mutant_770" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="(bs * 1)" />
    <mutant id="mutant_771" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="(bs + 1)" />
    <mutant id="mutant_772" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(bs - 1)" to="(bs % 1)" />
    <mutant id="mutant_773" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(as - (ptrShift))" to="as" />
    <mutant id="mutant_6830" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="cnt" />
    <mutant id="mutant_5500" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="1" />
    <mutant id="mutant_6831" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="((size) / hdrs)" />
    <mutant id="mutant_5501" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="(maxOffset / cnt) - 1" />
    <mutant id="mutant_6832" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="hdrs" />
    <mutant id="mutant_5502" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="(maxOffset / cnt) / 1" />
    <mutant id="mutant_6833" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="((size) % hdrs)" />
    <mutant id="mutant_5503" viable="true" in="org.eclipse.jgit.internal.storage.file.PackReverseIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(maxOffset / cnt) + 1" to="(maxOffset / cnt) * 1" />
    <mutant id="mutant_6834" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="((size) + hdrs)" to="((size) * hdrs)" />
    <mutant id="mutant_789" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="ae" />
    <mutant id="mutant_785" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="(ae * as)" />
    <mutant id="mutant_786" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="(ae + as)" />
    <mutant id="mutant_787" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="as" />
    <mutant id="mutant_788" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="(ae / as)" />
    <mutant id="mutant_6824" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="cnt" />
    <mutant id="mutant_6825" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="(cnt + (DeltaEncoder.MAX_INSERT_DATA_SIZE))" />
    <mutant id="mutant_6826" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="(DeltaEncoder.MAX_INSERT_DATA_SIZE)" />
    <mutant id="mutant_6827" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="(cnt - (DeltaEncoder.MAX_INSERT_DATA_SIZE))" />
    <mutant id="mutant_6828" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="(cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE))" />
    <mutant id="mutant_6829" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="(cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE))" to="(cnt * (DeltaEncoder.MAX_INSERT_DATA_SIZE))" />
    <mutant id="mutant_781" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="(ae + (ptrShift))" />
    <mutant id="mutant_782" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="ae" />
    <mutant id="mutant_783" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="(ae / (ptrShift))" />
    <mutant id="mutant_784" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="(ae * (ptrShift))" />
    <mutant id="mutant_6820" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="DeltaEncoder.MAX_INSERT_DATA_SIZE" />
    <mutant id="mutant_6821" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="cnt - (DeltaEncoder.MAX_INSERT_DATA_SIZE)" />
    <mutant id="mutant_6822" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="cnt % (DeltaEncoder.MAX_INSERT_DATA_SIZE)" />
    <mutant id="mutant_780" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_6823" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="cnt * (DeltaEncoder.MAX_INSERT_DATA_SIZE)" />
    <mutant id="mutant_796" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="(np % (ptrShift))" />
    <mutant id="mutant_797" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="1" />
    <mutant id="mutant_798" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="(maxChainLength) % 1" />
    <mutant id="mutant_799" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="maxChainLength" />
    <mutant id="mutant_6813" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) / p)" />
    <mutant id="mutant_6814" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) - p)" />
    <mutant id="mutant_6815" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="p" />
    <mutant id="mutant_6816" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(size)" />
    <mutant id="mutant_6817" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) % p)" />
    <mutant id="mutant_6818" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) * p)" />
    <mutant id="mutant_6819" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.insert(byte[],int,int)" from="cnt / (DeltaEncoder.MAX_INSERT_DATA_SIZE)" to="cnt + (DeltaEncoder.MAX_INSERT_DATA_SIZE)" />
    <mutant id="mutant_792" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="np" />
    <mutant id="mutant_793" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="ptrShift" />
    <mutant id="mutant_794" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="(np + (ptrShift))" />
    <mutant id="mutant_795" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="(np / (ptrShift))" />
    <mutant id="mutant_6810" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="(size)" />
    <mutant id="mutant_790" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(ae - as)" to="(ae % as)" />
    <mutant id="mutant_6811" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) % p)" />
    <mutant id="mutant_791" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.tryLongestCommonSequence(int)" from="(np - (ptrShift))" to="(np * (ptrShift))" />
    <mutant id="mutant_6812" viable="true" in="org.eclipse.jgit.internal.storage.pack.DeltaEncoder.copy(long,int)" from="((size) + p)" to="((size) * p)" />
    <mutant id="mutant_9" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) * 2)" />
    <mutant id="mutant_8" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) % 2)" />
    <mutant id="mutant_5" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) / 2)" />
    <mutant id="mutant_686" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="32 * tableBits" />
    <mutant id="mutant_4" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="((lo.getSize()) % (lt.getSize()))" />
    <mutant id="mutant_687" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="32 % tableBits" />
    <mutant id="mutant_7" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="2" />
    <mutant id="mutant_688" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="32" />
    <mutant id="mutant_7981" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="dirOnly ? 1231 : 1237" />
    <mutant id="mutant_6" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) - 2)" />
    <mutant id="mutant_689" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="region.endA" />
    <mutant id="mutant_6650" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="(cnt * 1)" />
    <mutant id="mutant_7980" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="(prime * result) - (dirOnly ? 1231 : 1237)" />
    <mutant id="mutant_85" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_84" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="1" />
    <mutant id="mutant_87" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="p" />
    <mutant id="mutant_86" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_89" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) + p)" />
    <mutant id="mutant_88" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_5317" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="4 / (PackIndexV2.FANOUT)" />
    <mutant id="mutant_6648" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="(cnt + 1)" />
    <mutant id="mutant_5318" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="4 + (PackIndexV2.FANOUT)" />
    <mutant id="mutant_6649" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="(cnt / 1)" />
    <mutant id="mutant_7979" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="(prime * result) / (dirOnly ? 1231 : 1237)" />
    <mutant id="mutant_90" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) / p)" />
    <mutant id="mutant_5319" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="PackIndexV2.FANOUT" />
    <mutant id="mutant_92" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) % p)" />
    <mutant id="mutant_91" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="(cnt)" />
    <mutant id="mutant_94" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) * p)" />
    <mutant id="mutant_93" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="p" />
    <mutant id="mutant_1" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="((lo.getSize()) - (lt.getSize()))" />
    <mutant id="mutant_682" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) / 1" />
    <mutant id="mutant_6640" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) % dstoff)" />
    <mutant id="mutant_7972" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="prime * result" />
    <mutant id="mutant_0" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="((lo.getSize()) * (lt.getSize()))" />
    <mutant id="mutant_683" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="tableBits" />
    <mutant id="mutant_5310" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="4" />
    <mutant id="mutant_6641" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) / dstoff)" />
    <mutant id="mutant_7971" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="inverse ? 1231 : 1237" />
    <mutant id="mutant_3" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="lo.getSize()" />
    <mutant id="mutant_684" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="32 + tableBits" />
    <mutant id="mutant_5311" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="(Constants.OBJECT_ID_LENGTH) * 4" />
    <mutant id="mutant_6642" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) + dstoff)" />
    <mutant id="mutant_7974" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_2" viable="true" in="org.eclipse.jgit.notes.DefaultNoteMerger.merge(org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.notes.Note,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.lib.ObjectInserter)" from="((lo.getSize()) + (lt.getSize()))" to="((lo.getSize()) / (lt.getSize()))" />
    <mutant id="mutant_685" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex(int,org.eclipse.jgit.diff.HashedSequenceComparator,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.HashedSequence,org.eclipse.jgit.diff.Edit)" from="32 - tableBits" to="32 / tableBits" />
    <mutant id="mutant_5312" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_6643" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="dstbuf.length" />
    <mutant id="mutant_7973" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_5313" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="(Constants.OBJECT_ID_LENGTH) + 4" />
    <mutant id="mutant_6644" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="dstoff" />
    <mutant id="mutant_7976" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_5314" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="4 - (PackIndexV2.FANOUT)" />
    <mutant id="mutant_6645" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="1" />
    <mutant id="mutant_7975" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_680" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) + 1" />
    <mutant id="mutant_5315" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="4 % (PackIndexV2.FANOUT)" />
    <mutant id="mutant_6646" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="cnt" />
    <mutant id="mutant_7978" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_681" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="1 &lt;&lt; 8" />
    <mutant id="mutant_5316" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="4 * (PackIndexV2.FANOUT)" to="4" />
    <mutant id="mutant_6647" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(cnt - 1)" to="(cnt % 1)" />
    <mutant id="mutant_7977" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_697" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) * 1" />
    <mutant id="mutant_698" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)" />
    <mutant id="mutant_699" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) - 1" />
    <mutant id="mutant_7970" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="(prime * result) * (inverse ? 1231 : 1237)" />
    <mutant id="mutant_74" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="(cnt) / (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" />
    <mutant id="mutant_73" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="cnt" />
    <mutant id="mutant_76" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen)" />
    <mutant id="mutant_75" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="(cnt) % (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" />
    <mutant id="mutant_78" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="(Constants.OBJECT_ID_STRING_LENGTH) % (prefixLen)" />
    <mutant id="mutant_77" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="(Constants.OBJECT_ID_STRING_LENGTH) * (prefixLen)" />
    <mutant id="mutant_79" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_5306" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="8" />
    <mutant id="mutant_6637" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="cnt % need" />
    <mutant id="mutant_7969" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="(prime * result) / (inverse ? 1231 : 1237)" />
    <mutant id="mutant_5307" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="8 / ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" />
    <mutant id="mutant_6638" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="cnt" />
    <mutant id="mutant_7968" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="(prime * result) % (inverse ? 1231 : 1237)" />
    <mutant id="mutant_5308" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="(Constants.OBJECT_ID_LENGTH) - 4" />
    <mutant id="mutant_6639" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.inflate(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) * dstoff)" />
    <mutant id="mutant_5309" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="(Constants.OBJECT_ID_LENGTH) / 4" to="(Constants.OBJECT_ID_LENGTH) % 4" />
    <mutant id="mutant_81" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="(Constants.OBJECT_ID_STRING_LENGTH) + (prefixLen)" />
    <mutant id="mutant_80" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="(Constants.OBJECT_ID_STRING_LENGTH) / (prefixLen)" />
    <mutant id="mutant_83" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_82" viable="true" in="org.eclipse.jgit.notes.LeafBucket.build()" from="(Constants.OBJECT_ID_STRING_LENGTH) - (prefixLen)" to="prefixLen" />
    <mutant id="mutant_693" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="(region.endA) / 1" />
    <mutant id="mutant_7961" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_694" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="(region.endA) % 1" />
    <mutant id="mutant_6630" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) % (b.getOffset()))" />
    <mutant id="mutant_7960" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_695" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) % 1" />
    <mutant id="mutant_5300" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) - 4" />
    <mutant id="mutant_6631" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) * (b.getOffset()))" />
    <mutant id="mutant_7963" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_696" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(org.eclipse.jgit.diff.HistogramDiffIndex.recCnt(rec)) + 1" to="1" />
    <mutant id="mutant_5301" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) + 4" />
    <mutant id="mutant_6632" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) / (b.getOffset()))" />
    <mutant id="mutant_7962" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_5302" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="8 - ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" />
    <mutant id="mutant_6633" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="cnt + need" />
    <mutant id="mutant_7965" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_690" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="(region.endA) * 1" />
    <mutant id="mutant_5303" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="8 + ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" />
    <mutant id="mutant_6634" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="need" />
    <mutant id="mutant_7964" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_691" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="1" />
    <mutant id="mutant_5304" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="((int)(offset &amp; (~(PackIndexV2.IS_O64))))" />
    <mutant id="mutant_6635" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="cnt / need" />
    <mutant id="mutant_7967" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (inverse ? 1231 : 1237)" to="(prime * result) - (inverse ? 1231 : 1237)" />
    <mutant id="mutant_692" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.scanA()" from="(region.endA) - 1" to="(region.endA) + 1" />
    <mutant id="mutant_5305" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="8 * ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" to="8 % ((int)((offset &amp; (~(PackIndexV2.IS_O64)))))" />
    <mutant id="mutant_6636" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.copy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,byte[],int,int)" from="cnt - need" to="cnt * need" />
    <mutant id="mutant_7966" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_6626" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="((a.offset) + (b.offset))" />
    <mutant id="mutant_7958" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_6627" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="a.offset" />
    <mutant id="mutant_7957" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_6628" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) + (b.getOffset()))" />
    <mutant id="mutant_6629" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$2.compare(org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="a.getOffset()" />
    <mutant id="mutant_7959" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_7950" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i % startIncl)" />
    <mutant id="mutant_6620" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="(a.packIndex) % (b.packIndex)" />
    <mutant id="mutant_7952" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i * startIncl)" />
    <mutant id="mutant_6621" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="a.packIndex" />
    <mutant id="mutant_7951" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="i" />
    <mutant id="mutant_6622" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="(a.packIndex) + (b.packIndex)" />
    <mutant id="mutant_7954" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="startIncl" />
    <mutant id="mutant_6623" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="((a.offset) * (b.offset))" />
    <mutant id="mutant_7953" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i - startIncl)" />
    <mutant id="mutant_6624" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="((a.offset) % (b.offset))" />
    <mutant id="mutant_7956" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_6625" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="((a.offset) - (b.offset))" to="((a.offset) / (b.offset))" />
    <mutant id="mutant_7955" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule(java.lang.String)" from="((pattern.length()) - 1)" to="pattern.length()" />
    <mutant id="mutant_96" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="(((cnt) - p) % 1)" />
    <mutant id="mutant_95" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="((cnt) - p)" />
    <mutant id="mutant_98" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="(((cnt) - p) / 1)" />
    <mutant id="mutant_97" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="1" />
    <mutant id="mutant_99" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="(((cnt) - p) * 1)" />
    <mutant id="mutant_6615" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="((blockCache.getBlockSize()) / size) + size" />
    <mutant id="mutant_7947" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl / startIncl)" />
    <mutant id="mutant_6616" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="(blockCache.getBlockSize()) / size" />
    <mutant id="mutant_7946" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="endExcl" />
    <mutant id="mutant_6617" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="((blockCache.getBlockSize()) / size) % size" />
    <mutant id="mutant_7949" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i / startIncl)" />
    <mutant id="mutant_6618" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="(a.packIndex) / (b.packIndex)" />
    <mutant id="mutant_7948" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="startIncl" />
    <mutant id="mutant_6619" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader$1.compare(org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject,org.eclipse.jgit.internal.storage.dfs.DfsReader$FoundObject)" from="(a.packIndex) - (b.packIndex)" to="(a.packIndex) * (b.packIndex)" />
    <mutant id="mutant_7941" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) % 1" />
    <mutant id="mutant_6610" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="((blockCache.getBlockSize()) * size)" />
    <mutant id="mutant_7940" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) + 1" />
    <mutant id="mutant_6611" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="((blockCache.getBlockSize()) - size)" />
    <mutant id="mutant_7943" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl * startIncl)" />
    <mutant id="mutant_6612" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="((blockCache.getBlockSize()) / size) / size" />
    <mutant id="mutant_7942" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) * 1" />
    <mutant id="mutant_6613" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="((blockCache.getBlockSize()) / size) - size" />
    <mutant id="mutant_7945" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl % startIncl)" />
    <mutant id="mutant_6614" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size) * size" to="size" />
    <mutant id="mutant_7944" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl + startIncl)" />
    <mutant id="mutant_6690" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="((all.find(prefix)) / 1)" />
    <mutant id="mutant_5360" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt + 4" />
    <mutant id="mutant_6691" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="((all.find(prefix)) * 1)" />
    <mutant id="mutant_5361" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt % 4" />
    <mutant id="mutant_6692" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="(all.find(prefix))" />
    <mutant id="mutant_5362" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt / 4" />
    <mutant id="mutant_6693" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="needle" />
    <mutant id="mutant_5363" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt - 4" />
    <mutant id="mutant_6694" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix / needle)" />
    <mutant id="mutant_4032" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="(m + i)" />
    <mutant id="mutant_16209" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="(ptr + start)" />
    <mutant id="mutant_4031" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="m" />
    <mutant id="mutant_4030" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="i" />
    <mutant id="mutant_16207" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="start" />
    <mutant id="mutant_16208" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="ptr" />
    <mutant id="mutant_4029" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="(m % i)" />
    <mutant id="mutant_16201" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="bPtr" />
    <mutant id="mutant_4028" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i - 2)" />
    <mutant id="mutant_16202" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="(bEnd + bPtr)" />
    <mutant id="mutant_4027" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i * 2)" />
    <mutant id="mutant_4026" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i % 2)" />
    <mutant id="mutant_16200" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="(bEnd / bPtr)" />
    <mutant id="mutant_4025" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="i" />
    <mutant id="mutant_16205" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="(ptr % start)" />
    <mutant id="mutant_4024" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="2" />
    <mutant id="mutant_16206" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="(ptr * start)" />
    <mutant id="mutant_4023" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i / 2)" />
    <mutant id="mutant_16203" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="(bEnd % bPtr)" />
    <mutant id="mutant_4022" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i - 2" />
    <mutant id="mutant_16204" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - start)" to="(ptr / start)" />
    <mutant id="mutant_5353" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) * 8)" />
    <mutant id="mutant_6684" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="refName - '/'" />
    <mutant id="mutant_5354" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) + 8)" />
    <mutant id="mutant_6685" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="refName" />
    <mutant id="mutant_5355" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="(Integer.MAX_VALUE)" />
    <mutant id="mutant_6686" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="'/'" />
    <mutant id="mutant_5356" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt / 4" />
    <mutant id="mutant_6687" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="1" />
    <mutant id="mutant_5357" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt - 4" />
    <mutant id="mutant_6688" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="((all.find(prefix)) - 1)" />
    <mutant id="mutant_5358" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt" />
    <mutant id="mutant_6689" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="((all.find(prefix)) + 1)" to="((all.find(prefix)) % 1)" />
    <mutant id="mutant_5359" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="4" />
    <mutant id="mutant_6680" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash + 1)" />
    <mutant id="mutant_5350" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) / 8)" />
    <mutant id="mutant_6681" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="refName % '/'" />
    <mutant id="mutant_5351" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="8" />
    <mutant id="mutant_6682" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="refName * '/'" />
    <mutant id="mutant_5352" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) % 8)" />
    <mutant id="mutant_6683" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="refName + '/'" to="refName / '/'" />
    <mutant id="mutant_4021" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i * 2" />
    <mutant id="mutant_4020" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i % 2" />
    <mutant id="mutant_16218" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="(ptr - 3) / start" />
    <mutant id="mutant_16219" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="start" />
    <mutant id="mutant_4018" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="2" />
    <mutant id="mutant_16212" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="(ptr * 3)" />
    <mutant id="mutant_4017" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i / 2" />
    <mutant id="mutant_16213" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="(ptr / 3)" />
    <mutant id="mutant_4016" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_16210" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="3" />
    <mutant id="mutant_4015" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_16211" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="(ptr % 3)" />
    <mutant id="mutant_4014" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_16216" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="(ptr - 3) + start" />
    <mutant id="mutant_4013" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_16217" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="(ptr - 3) % start" />
    <mutant id="mutant_4012" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_16214" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="ptr" />
    <mutant id="mutant_4011" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_16215" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3)" to="(ptr + 3)" />
    <mutant id="mutant_5342" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="fanoutTable[k]" />
    <mutant id="mutant_6673" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem - 4)" />
    <mutant id="mutant_5343" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="(fanoutTable[k]) % (fanoutTable[(k - 1)])" />
    <mutant id="mutant_6674" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="maxMem" />
    <mutant id="mutant_5344" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="bucketCnt / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6675" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="1" />
    <mutant id="mutant_5345" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="bucketCnt - (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6676" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="lastSlash" />
    <mutant id="mutant_5346" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="bucketCnt" />
    <mutant id="mutant_6677" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash % 1)" />
    <mutant id="mutant_5347" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="bucketCnt % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6678" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash / 1)" />
    <mutant id="mutant_5348" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_6679" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.isNameConflicting(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash * 1)" />
    <mutant id="mutant_4019" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i" />
    <mutant id="mutant_5349" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="bucketCnt * (Constants.OBJECT_ID_LENGTH)" to="bucketCnt + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6670" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem % 4)" />
    <mutant id="mutant_5340" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="(fanoutTable[k]) / (fanoutTable[(k - 1)])" />
    <mutant id="mutant_6671" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="4" />
    <mutant id="mutant_5341" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="(fanoutTable[k]) + (fanoutTable[(k - 1)])" />
    <mutant id="mutant_6672" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem + 4)" />
    <mutant id="mutant_4010" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_4007" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_5339" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="(fanoutTable[k]) * (fanoutTable[(k - 1)])" />
    <mutant id="mutant_4006" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_4005" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_4004" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="l * 1" />
    <mutant id="mutant_4003" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="l % 1" />
    <mutant id="mutant_4002" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="l / 1" />
    <mutant id="mutant_4001" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="1" />
    <mutant id="mutant_4000" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="l + 1" />
    <mutant id="mutant_5331" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="((PackIndexV2.FANOUT) + 1)" />
    <mutant id="mutant_6662" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="1024 + (DfsReaderOptions.KiB)" />
    <mutant id="mutant_7994" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="(prime * result) * ((matcher) == null ? 0 : matcher.hashCode())" />
    <mutant id="mutant_5332" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_6663" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="(10 - (DfsReaderOptions.MiB))" />
    <mutant id="mutant_7993" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="(matcher) == null ? 0 : matcher.hashCode()" />
    <mutant id="mutant_5333" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="k" />
    <mutant id="mutant_6664" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="DfsReaderOptions.MiB" />
    <mutant id="mutant_7996" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="prime * result" />
    <mutant id="mutant_5334" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="1" />
    <mutant id="mutant_6665" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="(10 / (DfsReaderOptions.MiB))" />
    <mutant id="mutant_7995" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="(prime * result) % ((matcher) == null ? 0 : matcher.hashCode())" />
    <mutant id="mutant_5335" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_6666" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="(10 % (DfsReaderOptions.MiB))" />
    <mutant id="mutant_7998" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="1" />
    <mutant id="mutant_5336" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_6667" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="(10 + (DfsReaderOptions.MiB))" />
    <mutant id="mutant_7997" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="(rules.size()) / 1" />
    <mutant id="mutant_4009" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_5337" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_6668" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions()" from="(10 * (DfsReaderOptions.MiB))" to="10" />
    <mutant id="mutant_4008" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_5338" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(fanoutTable[k]) - (fanoutTable[(k - 1)])" to="fanoutTable[(k - 1)]" />
    <mutant id="mutant_6669" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReaderOptions.fromConfig(org.eclipse.jgit.lib.Config)" from="(maxMem / 4)" to="(maxMem * 4)" />
    <mutant id="mutant_7999" viable="true" in="org.eclipse.jgit.ignore.IgnoreNode.isIgnored(java.lang.String,boolean,boolean)" from="(rules.size()) - 1" to="(rules.size()) % 1" />
    <mutant id="mutant_7990" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="prime" />
    <mutant id="mutant_6660" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="1024" />
    <mutant id="mutant_7992" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="(prime * result) / ((matcher) == null ? 0 : matcher.hashCode())" />
    <mutant id="mutant_5330" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="PackIndexV2.FANOUT" />
    <mutant id="mutant_6661" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="1024 / (DfsReaderOptions.KiB)" />
    <mutant id="mutant_7991" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + ((matcher) == null ? 0 : matcher.hashCode())" to="(prime * result) - ((matcher) == null ? 0 : matcher.hashCode())" />
    <mutant id="mutant_5328" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="((PackIndexV2.FANOUT) * 1)" />
    <mutant id="mutant_6659" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="1024 % (DfsReaderOptions.KiB)" />
    <mutant id="mutant_5329" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="((PackIndexV2.FANOUT) % 1)" />
    <mutant id="mutant_5320" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="k" />
    <mutant id="mutant_6651" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="pos" />
    <mutant id="mutant_7983" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="(prime * result) % (dirOnly ? 1231 : 1237)" />
    <mutant id="mutant_5321" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="(k - 4)" />
    <mutant id="mutant_6652" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="(pos * (cnt - 1))" />
    <mutant id="mutant_7982" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="(prime * result) * (dirOnly ? 1231 : 1237)" />
    <mutant id="mutant_5322" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="(k % 4)" />
    <mutant id="mutant_6653" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="(cnt - 1)" />
    <mutant id="mutant_7985" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime / result)" />
    <mutant id="mutant_5323" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="4" />
    <mutant id="mutant_6654" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="(pos / (cnt - 1))" />
    <mutant id="mutant_7984" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result) + (dirOnly ? 1231 : 1237)" to="prime * result" />
    <mutant id="mutant_5324" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="(k + 4)" />
    <mutant id="mutant_6655" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="(pos % (cnt - 1))" />
    <mutant id="mutant_7987" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime + result)" />
    <mutant id="mutant_5325" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="(k * 4)" to="(k / 4)" />
    <mutant id="mutant_6656" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsReader.quickCopy(org.eclipse.jgit.internal.storage.dfs.DfsPackFile,long,long)" from="(pos + (cnt - 1))" to="(pos - (cnt - 1))" />
    <mutant id="mutant_7986" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="result" />
    <mutant id="mutant_5326" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="1" />
    <mutant id="mutant_6657" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="DfsReaderOptions.KiB" />
    <mutant id="mutant_7989" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime % result)" />
    <mutant id="mutant_5327" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((PackIndexV2.FANOUT) - 1)" to="((PackIndexV2.FANOUT) / 1)" />
    <mutant id="mutant_6658" viable="false" in="?" from="1024 * (DfsReaderOptions.KiB)" to="1024 - (DfsReaderOptions.KiB)" />
    <mutant id="mutant_7988" viable="true" in="org.eclipse.jgit.ignore.FastIgnoreRule.hashCode()" from="(prime * result)" to="(prime - result)" />
    <mutant id="mutant_4076" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="(((revChars.length) - i) * 1)" />
    <mutant id="mutant_4075" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="(((revChars.length) - i) % 1)" />
    <mutant id="mutant_4074" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="(((revChars.length) - i) / 1)" />
    <mutant id="mutant_4073" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="((revChars.length) - i)" />
    <mutant id="mutant_4072" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="(((revChars.length) - i) + 1)" />
    <mutant id="mutant_4071" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(((revChars.length) - i) - 1)" to="1" />
    <mutant id="mutant_4070" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="((revChars.length) + i)" />
    <mutant id="mutant_16245" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp % 1)" />
    <mutant id="mutant_16246" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp / 1)" />
    <mutant id="mutant_16243" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp * 1)" />
    <mutant id="mutant_16244" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="sp" />
    <mutant id="mutant_4069" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="(revChars.length)" />
    <mutant id="mutant_16249" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp * 1)" />
    <mutant id="mutant_4068" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="((revChars.length) % i)" />
    <mutant id="mutant_4067" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="((revChars.length) * i)" />
    <mutant id="mutant_16247" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="1" />
    <mutant id="mutant_4066" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="i" />
    <mutant id="mutant_16248" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp + 1)" />
    <mutant id="mutant_5397" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition * 1)" />
    <mutant id="mutant_5398" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="1" />
    <mutant id="mutant_5399" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne / 1)" />
    <mutant id="mutant_16241" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="1" />
    <mutant id="mutant_16242" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp + 1)" />
    <mutant id="mutant_16240" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp / 1)" />
    <mutant id="mutant_5390" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_5391" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_5392" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition / 1)" />
    <mutant id="mutant_5393" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="1" />
    <mutant id="mutant_5394" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition - 1)" />
    <mutant id="mutant_5395" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="nthPosition" />
    <mutant id="mutant_5396" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition % 1)" />
    <mutant id="mutant_4065" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - i)" to="((revChars.length) / i)" />
    <mutant id="mutant_4064" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_4063" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_4062" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_4061" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_4060" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_16256" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="(ptr * (FileHeader.OLD_MODE.length))" />
    <mutant id="mutant_16257" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="(ptr / (FileHeader.OLD_MODE.length))" />
    <mutant id="mutant_16254" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="FileHeader.OLD_MODE.length" />
    <mutant id="mutant_4059" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_16255" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="ptr" />
    <mutant id="mutant_4058" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="(revChars.length)" />
    <mutant id="mutant_4057" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="((revChars.length) + 1)" />
    <mutant id="mutant_4056" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="((revChars.length) * 1)" />
    <mutant id="mutant_16258" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="(ptr - (FileHeader.NEW_MODE.length))" />
    <mutant id="mutant_4055" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="((revChars.length) % 1)" />
    <mutant id="mutant_16259" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="(ptr % (FileHeader.NEW_MODE.length))" />
    <mutant id="mutant_5386" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="mid" />
    <mutant id="mutant_5387" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="1" />
    <mutant id="mutant_5388" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_5389" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_16252" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="(ptr - (FileHeader.OLD_MODE.length))" />
    <mutant id="mutant_16253" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.OLD_MODE.length))" to="(ptr % (FileHeader.OLD_MODE.length))" />
    <mutant id="mutant_16250" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="sp" />
    <mutant id="mutant_16251" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp % 1)" />
    <mutant id="mutant_27" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="1 / (LeafBucket.MAX_SIZE)" />
    <mutant id="mutant_26" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="1 - (LeafBucket.MAX_SIZE)" />
    <mutant id="mutant_29" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="cnt" />
    <mutant id="mutant_5380" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="mid" />
    <mutant id="mutant_28" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="1 % (LeafBucket.MAX_SIZE)" />
    <mutant id="mutant_5381" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="(mid4 - mid)" />
    <mutant id="mutant_5382" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="(mid4 % mid)" />
    <mutant id="mutant_5383" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="(mid4 / mid)" />
    <mutant id="mutant_5384" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="mid4" />
    <mutant id="mutant_5385" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(mid4 + mid)" to="(mid4 * mid)" />
    <mutant id="mutant_4054" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="1" />
    <mutant id="mutant_4053" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((revChars.length) - 1)" to="((revChars.length) / 1)" />
    <mutant id="mutant_21" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="(((LeafBucket.MAX_SIZE) * 3) * 4)" />
    <mutant id="mutant_4052" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; % name)" />
    <mutant id="mutant_16229" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="1" />
    <mutant id="mutant_20" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="((LeafBucket.MAX_SIZE) * 3)" />
    <mutant id="mutant_4051" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; / name)" />
    <mutant id="mutant_23" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="1" />
    <mutant id="mutant_4050" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="&quot;x/&quot;" />
    <mutant id="mutant_22" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="(((LeafBucket.MAX_SIZE) * 3) % 4)" />
    <mutant id="mutant_25" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="LeafBucket.MAX_SIZE" />
    <mutant id="mutant_24" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="1 + (LeafBucket.MAX_SIZE)" to="1 * (LeafBucket.MAX_SIZE)" />
    <mutant id="mutant_16223" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="1" />
    <mutant id="mutant_16224" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp + 1)" />
    <mutant id="mutant_4049" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="name" />
    <mutant id="mutant_16221" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="ptr - 3" />
    <mutant id="mutant_4048" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; - name)" />
    <mutant id="mutant_16222" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp / 1)" />
    <mutant id="mutant_4047" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; * name)" />
    <mutant id="mutant_16227" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp % 1)" />
    <mutant id="mutant_4046" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; % name)" />
    <mutant id="mutant_16228" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="(eol + 1)" />
    <mutant id="mutant_4045" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; / name)" />
    <mutant id="mutant_16225" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="(sp * 1)" />
    <mutant id="mutant_4044" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="&quot;x/&quot;" />
    <mutant id="mutant_16226" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 1)" to="sp" />
    <mutant id="mutant_5375" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="low" />
    <mutant id="mutant_5376" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_5377" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_5378" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="high" />
    <mutant id="mutant_5379" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_16220" viable="true" in="org.eclipse.jgit.patch.FileHeader.isHunkHdr(byte[],int,int)" from="(ptr - 3) - start" to="(ptr - 3) * start" />
    <mutant id="mutant_16" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="((LeafBucket.MAX_SIZE) - 3)" />
    <mutant id="mutant_15" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="((LeafBucket.MAX_SIZE) + 3)" />
    <mutant id="mutant_18" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="(((LeafBucket.MAX_SIZE) * 3) - 4)" />
    <mutant id="mutant_17" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="(((LeafBucket.MAX_SIZE) * 3) + 4)" />
    <mutant id="mutant_5370" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="8" />
    <mutant id="mutant_5371" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="o64cnt + 8" />
    <mutant id="mutant_19" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((LeafBucket.MAX_SIZE) * 3) / 4)" to="4" />
    <mutant id="mutant_5372" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="o64cnt / 8" />
    <mutant id="mutant_5373" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="o64cnt" />
    <mutant id="mutant_5374" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2.binarySearchLevelTwo(org.eclipse.jgit.lib.AnyObjectId,int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_4043" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="name" />
    <mutant id="mutant_4042" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; - name)" />
    <mutant id="mutant_10" viable="true" in="org.eclipse.jgit.notes.FanoutBucket$LazyNoteBucket.load(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="prefixLen" />
    <mutant id="mutant_4041" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; * name)" />
    <mutant id="mutant_4040" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="((m - i) / 2)" />
    <mutant id="mutant_12" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="(LeafBucket.MAX_SIZE)" />
    <mutant id="mutant_11" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="((LeafBucket.MAX_SIZE) / 3)" />
    <mutant id="mutant_14" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="((LeafBucket.MAX_SIZE) % 3)" />
    <mutant id="mutant_13" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.estimateSize(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((LeafBucket.MAX_SIZE) * 3)" to="3" />
    <mutant id="mutant_16234" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="(sp + 2)" />
    <mutant id="mutant_4039" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="((m - i) + 2)" />
    <mutant id="mutant_16235" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="(sp / 2)" />
    <mutant id="mutant_4038" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="((m - i) % 2)" />
    <mutant id="mutant_16232" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="eol" />
    <mutant id="mutant_4037" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="2" />
    <mutant id="mutant_16233" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="(eol % 1)" />
    <mutant id="mutant_4036" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="((m - i) * 2)" />
    <mutant id="mutant_16238" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="(sp * 2)" />
    <mutant id="mutant_4035" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((m - i) - 2)" to="(m - i)" />
    <mutant id="mutant_16239" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="sp" />
    <mutant id="mutant_4034" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="(m * i)" />
    <mutant id="mutant_16236" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="2" />
    <mutant id="mutant_4033" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(m - i)" to="(m / i)" />
    <mutant id="mutant_16237" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(sp - 2)" to="(sp % 2)" />
    <mutant id="mutant_5364" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt" />
    <mutant id="mutant_6695" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix % needle)" />
    <mutant id="mutant_5365" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="4" />
    <mutant id="mutant_6696" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="prefix" />
    <mutant id="mutant_5366" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt + 4" />
    <mutant id="mutant_6697" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix - needle)" />
    <mutant id="mutant_5367" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="((int)(bucketCnt * 4))" to="bucketCnt % 4" />
    <mutant id="mutant_6698" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.getRef(java.lang.String)" from="(prefix + needle)" to="(prefix * needle)" />
    <mutant id="mutant_5368" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="o64cnt % 8" />
    <mutant id="mutant_6699" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="1" />
    <mutant id="mutant_16230" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="(eol / 1)" />
    <mutant id="mutant_5369" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2(java.io.InputStream)" from="o64cnt * 8" to="o64cnt - 8" />
    <mutant id="mutant_16231" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitFileName(int,int)" from="(eol - 1)" to="(eol * 1)" />
    <mutant id="mutant_49" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="2" />
    <mutant id="mutant_48" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="((prefixLen) - 2)" />
    <mutant id="mutant_41" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) / 2)" />
    <mutant id="mutant_40" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="prefixLen" />
    <mutant id="mutant_43" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="2" />
    <mutant id="mutant_42" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) - 2)" />
    <mutant id="mutant_45" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) * 2)" />
    <mutant id="mutant_44" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="((prefixLen) % 2)" />
    <mutant id="mutant_47" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="((prefixLen) / 2)" />
    <mutant id="mutant_46" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((prefixLen) + 2)" to="prefixLen" />
    <mutant id="mutant_16289" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="(ptr % (FileHeader.RENAME_NEW.length))" />
    <mutant id="mutant_16287" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="(ptr / (FileHeader.RENAME_OLD.length))" />
    <mutant id="mutant_16288" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="(ptr - (FileHeader.RENAME_NEW.length))" />
    <mutant id="mutant_50" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="((prefixLen) % 2)" />
    <mutant id="mutant_16281" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="(ptr / (FileHeader.COPY_TO.length))" />
    <mutant id="mutant_16282" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="(ptr - (FileHeader.RENAME_OLD.length))" />
    <mutant id="mutant_16280" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="(ptr * (FileHeader.COPY_TO.length))" />
    <mutant id="mutant_16285" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="ptr" />
    <mutant id="mutant_16286" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="(ptr * (FileHeader.RENAME_OLD.length))" />
    <mutant id="mutant_16283" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="(ptr % (FileHeader.RENAME_OLD.length))" />
    <mutant id="mutant_16284" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_OLD.length))" to="FileHeader.RENAME_OLD.length" />
    <mutant id="mutant_38" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="((prefixLen) % 2)" />
    <mutant id="mutant_37" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="2" />
    <mutant id="mutant_39" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="((prefixLen) * 2)" />
    <mutant id="mutant_30" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="(cnt) + (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" />
    <mutant id="mutant_32" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="(cnt) % (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" />
    <mutant id="mutant_31" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="(cnt) - (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" />
    <mutant id="mutant_34" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2)" />
    <mutant id="mutant_33" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.treeSize()" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" to="(cnt) / (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.TREE, 2))" />
    <mutant id="mutant_36" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="((prefixLen) - 2)" />
    <mutant id="mutant_35" viable="true" in="org.eclipse.jgit.notes.FanoutBucket.append(org.eclipse.jgit.notes.Note)" from="((prefixLen) + 2)" to="((prefixLen) / 2)" />
    <mutant id="mutant_16298" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="(ptr * (FileHeader.RENAME_FROM.length))" />
    <mutant id="mutant_16299" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="(ptr / (FileHeader.RENAME_FROM.length))" />
    <mutant id="mutant_4099" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) - remote)" />
    <mutant id="mutant_16292" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="(ptr * (FileHeader.RENAME_NEW.length))" />
    <mutant id="mutant_16293" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="(ptr / (FileHeader.RENAME_NEW.length))" />
    <mutant id="mutant_16290" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="FileHeader.RENAME_NEW.length" />
    <mutant id="mutant_16291" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_NEW.length))" to="ptr" />
    <mutant id="mutant_16296" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="FileHeader.RENAME_FROM.length" />
    <mutant id="mutant_16297" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="ptr" />
    <mutant id="mutant_16294" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="(ptr - (FileHeader.RENAME_FROM.length))" />
    <mutant id="mutant_16295" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.RENAME_FROM.length))" to="(ptr % (FileHeader.RENAME_FROM.length))" />
    <mutant id="mutant_4090" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="&quot;/&quot;" />
    <mutant id="mutant_63" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_4098" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) % remote)" />
    <mutant id="mutant_62" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_4097" viable="false" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) * remote)" />
    <mutant id="mutant_65" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="1" />
    <mutant id="mutant_4096" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="remote" />
    <mutant id="mutant_64" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_4095" viable="true" in="org.eclipse.jgit.lib.Repository.shortenRemoteBranchName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(Constants.R_REMOTES)" />
    <mutant id="mutant_67" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="low" />
    <mutant id="mutant_4094" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) * &quot;/&quot;" />
    <mutant id="mutant_66" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_4093" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="(Constants.R_REMOTES) + remote" />
    <mutant id="mutant_69" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_4092" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) % &quot;/&quot;" />
    <mutant id="mutant_68" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_4091" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) - &quot;/&quot;" />
    <mutant id="mutant_16267" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="ptr" />
    <mutant id="mutant_16268" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="(ptr * (FileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16265" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="(ptr % (FileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16266" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="FileHeader.DELETED_FILE_MODE.length" />
    <mutant id="mutant_70" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_72" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="(cnt) + (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" />
    <mutant id="mutant_4089" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote) + &quot;/&quot;" to="((Constants.R_REMOTES) + remote) / &quot;/&quot;" />
    <mutant id="mutant_16269" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="(ptr / (FileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_71" viable="true" in="org.eclipse.jgit.notes.LeafBucket.treeSize(int)" from="(cnt) * (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" to="(cnt) - (TreeFormatter.entrySize(org.eclipse.jgit.lib.FileMode.REGULAR_FILE, nameLen))" />
    <mutant id="mutant_4088" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) / remote)" />
    <mutant id="mutant_16260" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="FileHeader.NEW_MODE.length" />
    <mutant id="mutant_16263" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="(ptr / (FileHeader.NEW_MODE.length))" />
    <mutant id="mutant_16264" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.DELETED_FILE_MODE.length))" to="(ptr - (FileHeader.DELETED_FILE_MODE.length))" />
    <mutant id="mutant_16261" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="ptr" />
    <mutant id="mutant_16262" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.NEW_MODE.length))" to="(ptr * (FileHeader.NEW_MODE.length))" />
    <mutant id="mutant_59" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid" />
    <mutant id="mutant_52" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="(prefixLen)" />
    <mutant id="mutant_4087" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) - remote)" />
    <mutant id="mutant_51" viable="true" in="org.eclipse.jgit.notes.LeafBucket.shouldSplit()" from="((prefixLen) + 2)" to="((prefixLen) * 2)" />
    <mutant id="mutant_4086" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) % remote)" />
    <mutant id="mutant_54" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="low" />
    <mutant id="mutant_4085" viable="false" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="((Constants.R_REMOTES) * remote)" />
    <mutant id="mutant_53" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_4084" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="remote" />
    <mutant id="mutant_56" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_4083" viable="true" in="org.eclipse.jgit.lib.Repository.getRemoteName(java.lang.String)" from="((Constants.R_REMOTES) + remote)" to="(Constants.R_REMOTES)" />
    <mutant id="mutant_55" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_4082" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; % name)" />
    <mutant id="mutant_58" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_4081" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; / name)" />
    <mutant id="mutant_57" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="high" />
    <mutant id="mutant_4080" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="&quot;x/&quot;" />
    <mutant id="mutant_16278" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="FileHeader.COPY_TO.length" />
    <mutant id="mutant_16279" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="ptr" />
    <mutant id="mutant_16276" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="(ptr - (FileHeader.COPY_TO.length))" />
    <mutant id="mutant_16277" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_TO.length))" to="(ptr % (FileHeader.COPY_TO.length))" />
    <mutant id="mutant_4079" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="name" />
    <mutant id="mutant_61" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_4078" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; - name)" />
    <mutant id="mutant_60" viable="true" in="org.eclipse.jgit.notes.LeafBucket.search(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="1" />
    <mutant id="mutant_4077" viable="false" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(&quot;x/&quot; + name)" to="(&quot;x/&quot; * name)" />
    <mutant id="mutant_16270" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="(ptr - (FileHeader.COPY_FROM.length))" />
    <mutant id="mutant_16271" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="(ptr % (FileHeader.COPY_FROM.length))" />
    <mutant id="mutant_16274" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="(ptr * (FileHeader.COPY_FROM.length))" />
    <mutant id="mutant_16275" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="(ptr / (FileHeader.COPY_FROM.length))" />
    <mutant id="mutant_16272" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="FileHeader.COPY_FROM.length" />
    <mutant id="mutant_16273" viable="true" in="org.eclipse.jgit.patch.FileHeader.parseGitHeaders(int,int)" from="(ptr + (FileHeader.COPY_FROM.length))" to="ptr" />
    <mutant id="mutant_16190" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_16188" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_16189" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_16182" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) * 1)" />
    <mutant id="mutant_16183" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) % 1)" />
    <mutant id="mutant_16180" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_16181" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_16186" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) - 1)" />
    <mutant id="mutant_16187" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="1" />
    <mutant id="mutant_16184" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="ptr.value" />
    <mutant id="mutant_16185" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_16199" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="bEnd" />
    <mutant id="mutant_16193" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="(aEnd + aPtr)" />
    <mutant id="mutant_16194" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="aPtr" />
    <mutant id="mutant_16191" viable="true" in="org.eclipse.jgit.patch.CombinedHunkHeader.parseHeader()" from="((ptr.value) + 1)" to="((ptr.value) / 1)" />
    <mutant id="mutant_16192" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="aEnd" />
    <mutant id="mutant_16197" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="(aEnd / aPtr)" />
    <mutant id="mutant_16198" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(bEnd - bPtr)" to="(bEnd * bPtr)" />
    <mutant id="mutant_16195" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="(aEnd % aPtr)" />
    <mutant id="mutant_16196" viable="true" in="org.eclipse.jgit.patch.FileHeader.eq(int,int,int,int)" from="(aEnd - aPtr)" to="(aEnd * aPtr)" />
    <mutant id="mutant_602" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="((t + &quot;(&quot;) - (beginA))" />
    <mutant id="mutant_603" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="((t + &quot;(&quot;) / (beginA))" />
    <mutant id="mutant_604" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="(t + &quot;(&quot;)" />
    <mutant id="mutant_605" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="(((t + &quot;(&quot;) + (beginA)) * &quot;-&quot;)" />
    <mutant id="mutant_600" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="((t + &quot;(&quot;) % (beginA))" />
    <mutant id="mutant_601" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((t + &quot;(&quot;) + (beginA))" to="(beginA)" />
    <mutant id="mutant_606" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="(((t + &quot;(&quot;) + (beginA)) % &quot;-&quot;)" />
    <mutant id="mutant_607" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="((t + &quot;(&quot;) + (beginA))" />
    <mutant id="mutant_608" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="(((t + &quot;(&quot;) + (beginA)) - &quot;-&quot;)" />
    <mutant id="mutant_609" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="&quot;-&quot;" />
    <mutant id="mutant_613" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) * (endA))" />
    <mutant id="mutant_614" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" />
    <mutant id="mutant_615" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) - (endA))" />
    <mutant id="mutant_616" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) / (endA))" />
    <mutant id="mutant_610" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;)" to="(((t + &quot;(&quot;) + (beginA)) / &quot;-&quot;)" />
    <mutant id="mutant_611" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="(endA)" />
    <mutant id="mutant_612" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) % (endA))" />
    <mutant id="mutant_617" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) / &quot;,&quot;)" />
    <mutant id="mutant_618" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) - &quot;,&quot;)" />
    <mutant id="mutant_619" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA))" />
    <mutant id="mutant_624" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) - (beginB))" />
    <mutant id="mutant_625" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) % (beginB))" />
    <mutant id="mutant_626" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" />
    <mutant id="mutant_627" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="(beginB)" />
    <mutant id="mutant_620" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) * &quot;,&quot;)" />
    <mutant id="mutant_621" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="&quot;,&quot;" />
    <mutant id="mutant_622" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;)" to="(((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) % &quot;,&quot;)" />
    <mutant id="mutant_623" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) / (beginB))" />
    <mutant id="mutant_628" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) * (beginB))" />
    <mutant id="mutant_629" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB))" />
    <mutant id="mutant_635" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="(endB)" />
    <mutant id="mutant_636" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) / (endB))" />
    <mutant id="mutant_637" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) % (endB))" />
    <mutant id="mutant_638" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) - (endB))" />
    <mutant id="mutant_631" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) % &quot;-&quot;)" />
    <mutant id="mutant_632" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="&quot;-&quot;" />
    <mutant id="mutant_633" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) - &quot;-&quot;)" />
    <mutant id="mutant_634" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) / &quot;-&quot;)" />
    <mutant id="mutant_639" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) * (endB))" />
    <mutant id="mutant_630" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) * &quot;-&quot;)" />
    <mutant id="mutant_646" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) % &quot;)&quot;" />
    <mutant id="mutant_647" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="&quot;EditList&quot; % (super.toString())" />
    <mutant id="mutant_648" viable="true" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="&quot;EditList&quot;" />
    <mutant id="mutant_649" viable="true" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="super.toString()" />
    <mutant id="mutant_642" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)" />
    <mutant id="mutant_643" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) * &quot;)&quot;" />
    <mutant id="mutant_644" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_645" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) - &quot;)&quot;" />
    <mutant id="mutant_6725" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="((data.length) * (position))" />
    <mutant id="mutant_6726" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="((data.length) / (position))" />
    <mutant id="mutant_6727" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="data.length" />
    <mutant id="mutant_6728" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="((data.length) + (position))" />
    <mutant id="mutant_6729" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$MemObjDatabase.newPack(org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase$PackSource)" from="(&quot;pack-&quot; + id)" to="&quot;pack-&quot;" />
    <mutant id="mutant_640" viable="true" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB))" to="(((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;)" />
    <mutant id="mutant_641" viable="false" in="org.eclipse.jgit.diff.Edit.toString()" from="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) + &quot;)&quot;" to="((((((((t + &quot;(&quot;) + (beginA)) + &quot;-&quot;) + (endA)) + &quot;,&quot;) + (beginB)) + &quot;-&quot;) + (endB)) / &quot;)&quot;" />
    <mutant id="mutant_6720" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) * &quot;]&quot;" />
    <mutant id="mutant_6721" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())" />
    <mutant id="mutant_6722" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) / &quot;]&quot;" />
    <mutant id="mutant_6723" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="((data.length) % (position))" />
    <mutant id="mutant_6724" viable="true" in="org.eclipse.jgit.internal.storage.dfs.InMemoryRepository$ByteArrayReadableChannel.read(java.nio.ByteBuffer)" from="((data.length) - (position))" to="position" />
    <mutant id="mutant_657" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="queue.size()" />
    <mutant id="mutant_658" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="((queue.size()) + 1)" />
    <mutant id="mutant_659" viable="false" in="?" from="28 + 8" to="28 * 8" />
    <mutant id="mutant_653" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="((queue.size()) / 1)" />
    <mutant id="mutant_654" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="1" />
    <mutant id="mutant_655" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="((queue.size()) % 1)" />
    <mutant id="mutant_656" viable="true" in="org.eclipse.jgit.diff.HistogramDiff$State.diffRegion(org.eclipse.jgit.diff.Edit)" from="((queue.size()) - 1)" to="((queue.size()) * 1)" />
    <mutant id="mutant_6714" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="(&quot;DfsRepositoryDescription[&quot; - (getRepositoryName()))" />
    <mutant id="mutant_6715" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="&quot;DfsRepositoryDescription[&quot;" />
    <mutant id="mutant_6716" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="(getRepositoryName())" />
    <mutant id="mutant_6717" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) % &quot;]&quot;" />
    <mutant id="mutant_6718" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) - &quot;]&quot;" />
    <mutant id="mutant_6719" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_650" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="&quot;EditList&quot; - (super.toString())" />
    <mutant id="mutant_651" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="&quot;EditList&quot; * (super.toString())" />
    <mutant id="mutant_652" viable="false" in="org.eclipse.jgit.diff.EditList.toString()" from="&quot;EditList&quot; + (super.toString())" to="&quot;EditList&quot; / (super.toString())" />
    <mutant id="mutant_6710" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="Constants.MASTER" />
    <mutant id="mutant_6711" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="(&quot;DfsRepositoryDescription[&quot; / (getRepositoryName()))" />
    <mutant id="mutant_6712" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="(&quot;DfsRepositoryDescription[&quot; * (getRepositoryName()))" />
    <mutant id="mutant_6713" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription.toString()" from="(&quot;DfsRepositoryDescription[&quot; + (getRepositoryName()))" to="(&quot;DfsRepositoryDescription[&quot; % (getRepositoryName()))" />
    <mutant id="mutant_668" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="(1 &lt;&lt; 28) * 1" />
    <mutant id="mutant_669" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="(1 &lt;&lt; 28) + 1" />
    <mutant id="mutant_664" viable="false" in="?" from="28 + 8" to="28 / 8" />
    <mutant id="mutant_665" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="1" />
    <mutant id="mutant_666" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="1 &lt;&lt; 28" />
    <mutant id="mutant_667" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="(1 &lt;&lt; 28) / 1" />
    <mutant id="mutant_6703" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth % 1)" />
    <mutant id="mutant_6704" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth - 1)" />
    <mutant id="mutant_6705" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="Constants.R_HEADS" />
    <mutant id="mutant_6706" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="(Constants.R_HEADS) * (Constants.MASTER)" />
    <mutant id="mutant_6707" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="(Constants.R_HEADS) - (Constants.MASTER)" />
    <mutant id="mutant_6708" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="(Constants.R_HEADS) % (Constants.MASTER)" />
    <mutant id="mutant_6709" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsRepository.create(boolean)" from="(Constants.R_HEADS) + (Constants.MASTER)" to="(Constants.R_HEADS) / (Constants.MASTER)" />
    <mutant id="mutant_660" viable="false" in="?" from="28 + 8" to="28" />
    <mutant id="mutant_661" viable="false" in="?" from="28 + 8" to="28 % 8" />
    <mutant id="mutant_662" viable="false" in="?" from="28 + 8" to="28 - 8" />
    <mutant id="mutant_663" viable="false" in="?" from="28 + 8" to="8" />
    <mutant id="mutant_6700" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth * 1)" />
    <mutant id="mutant_6701" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="depth" />
    <mutant id="mutant_6702" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsRefDatabase.resolve(org.eclipse.jgit.lib.Ref,int,org.eclipse.jgit.util.RefList)" from="(depth + 1)" to="(depth / 1)" />
    <mutant id="mutant_679" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) % 1" />
    <mutant id="mutant_675" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="1 &lt;&lt; 8" />
    <mutant id="mutant_676" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) / 1" />
    <mutant id="mutant_677" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="1" />
    <mutant id="mutant_678" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) * 1" />
    <mutant id="mutant_671" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="1" />
    <mutant id="mutant_672" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) * 1" />
    <mutant id="mutant_673" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) % 1" />
    <mutant id="mutant_674" viable="false" in="?" from="(1 &lt;&lt; 8) - 1" to="(1 &lt;&lt; 8) + 1" />
    <mutant id="mutant_670" viable="false" in="?" from="(1 &lt;&lt; 28) - 1" to="(1 &lt;&lt; 28) % 1" />
    <mutant id="mutant_7860" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="1" />
    <mutant id="mutant_6527" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len / p" />
    <mutant id="mutant_7859" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="i / 1" />
    <mutant id="mutant_6528" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7858" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="((&quot;[&quot; + (Strings.DL)) % &quot;_]&quot;)" />
    <mutant id="mutant_6529" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7851" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="(&quot;[&quot; / (Strings.DL))" />
    <mutant id="mutant_6520" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="(pos * ofs)" />
    <mutant id="mutant_7850" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="(&quot;[&quot; - (Strings.DL))" />
    <mutant id="mutant_6521" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="(pos + ofs)" />
    <mutant id="mutant_7853" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="(&quot;[&quot; + (Strings.DL))" />
    <mutant id="mutant_6522" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len % p" />
    <mutant id="mutant_7852" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="(&quot;[&quot; * (Strings.DL))" />
    <mutant id="mutant_6523" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len" />
    <mutant id="mutant_7855" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="((&quot;[&quot; + (Strings.DL)) / &quot;_]&quot;)" />
    <mutant id="mutant_6524" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="p" />
    <mutant id="mutant_7854" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="&quot;_]&quot;" />
    <mutant id="mutant_6525" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len * p" />
    <mutant id="mutant_7857" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="((&quot;[&quot; + (Strings.DL)) - &quot;_]&quot;)" />
    <mutant id="mutant_6526" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len + p" />
    <mutant id="mutant_7856" viable="false" in="?" from="((&quot;[&quot; + (Strings.DL)) + &quot;_]&quot;)" to="((&quot;[&quot; + (Strings.DL)) * &quot;_]&quot;)" />
    <mutant id="mutant_6516" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="pos" />
    <mutant id="mutant_7848" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="(&quot;[&quot; % (Strings.DL))" />
    <mutant id="mutant_6517" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="(pos / ofs)" />
    <mutant id="mutant_7847" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="(Strings.DL)" />
    <mutant id="mutant_6518" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="ofs" />
    <mutant id="mutant_6519" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos - ofs)" to="(pos % ofs)" />
    <mutant id="mutant_7849" viable="false" in="?" from="(&quot;[&quot; + (Strings.DL))" to="&quot;[&quot;" />
    <mutant id="mutant_7840" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="(&quot;[\\p{Print}&quot; * (Strings.DL))" />
    <mutant id="mutant_6510" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len % p" />
    <mutant id="mutant_7842" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(&quot;[\\p{Print}&quot; + (Strings.DL))" />
    <mutant id="mutant_6511" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len" />
    <mutant id="mutant_7841" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) / &quot;]&quot;)" />
    <mutant id="mutant_6512" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="p" />
    <mutant id="mutant_7844" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_6513" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len * p" />
    <mutant id="mutant_7843" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) * &quot;]&quot;)" />
    <mutant id="mutant_6514" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len + p" />
    <mutant id="mutant_7846" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) - &quot;]&quot;)" />
    <mutant id="mutant_6515" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="len - p" to="len / p" />
    <mutant id="mutant_7845" viable="false" in="?" from="((&quot;[\\p{Print}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Print}&quot; + (Strings.DL)) % &quot;]&quot;)" />
    <mutant id="mutant_6505" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="rev.findNextOffset(pos, ((length) - 20))" />
    <mutant id="mutant_7837" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="(&quot;[\\p{Print}&quot; - (Strings.DL))" />
    <mutant id="mutant_6506" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="pos" />
    <mutant id="mutant_7836" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="(Strings.DL)" />
    <mutant id="mutant_6507" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="(rev.findNextOffset(pos, ((length) - 20))) / pos" />
    <mutant id="mutant_7839" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="&quot;[\\p{Print}&quot;" />
    <mutant id="mutant_6508" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="(rev.findNextOffset(pos, ((length) - 20))) + pos" />
    <mutant id="mutant_7838" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="(&quot;[\\p{Print}&quot; / (Strings.DL))" />
    <mutant id="mutant_6509" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="(rev.findNextOffset(pos, ((length) - 20))) % pos" />
    <mutant id="mutant_7831" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) * &quot;]&quot;)" />
    <mutant id="mutant_6500" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="((length) + 20)" />
    <mutant id="mutant_7830" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) - &quot;]&quot;)" />
    <mutant id="mutant_6501" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="length" />
    <mutant id="mutant_7833" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_6502" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="20" />
    <mutant id="mutant_7832" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="(&quot;[\\p{Graph}&quot; + (Strings.DL))" />
    <mutant id="mutant_6503" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="((length) * 20)" />
    <mutant id="mutant_7835" viable="false" in="?" from="(&quot;[\\p{Print}&quot; + (Strings.DL))" to="(&quot;[\\p{Print}&quot; % (Strings.DL))" />
    <mutant id="mutant_6504" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(rev.findNextOffset(pos, ((length) - 20))) - pos" to="(rev.findNextOffset(pos, ((length) - 20))) * pos" />
    <mutant id="mutant_7834" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) % &quot;]&quot;)" />
    <mutant id="mutant_7826" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="(&quot;[\\p{Graph}&quot; % (Strings.DL))" />
    <mutant id="mutant_7825" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="(&quot;[\\p{Graph}&quot; - (Strings.DL))" />
    <mutant id="mutant_7828" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="&quot;[\\p{Graph}&quot;" />
    <mutant id="mutant_7827" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="(&quot;[\\p{Graph}&quot; / (Strings.DL))" />
    <mutant id="mutant_7829" viable="false" in="?" from="((&quot;[\\p{Graph}&quot; + (Strings.DL)) + &quot;]&quot;)" to="((&quot;[\\p{Graph}&quot; + (Strings.DL)) / &quot;]&quot;)" />
    <mutant id="mutant_7820" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_7822" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_7821" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_7824" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="(&quot;[\\p{Graph}&quot; * (Strings.DL))" />
    <mutant id="mutant_7823" viable="false" in="?" from="(&quot;[\\p{Graph}&quot; + (Strings.DL))" to="(Strings.DL)" />
    <mutant id="mutant_6570" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="(readPos) * (currPos)" />
    <mutant id="mutant_5240" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="4 + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6571" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="readPos" />
    <mutant id="mutant_5241" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="(4 + (Constants.OBJECT_ID_LENGTH)) + levelTwo" />
    <mutant id="mutant_6572" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="currPos" />
    <mutant id="mutant_5242" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="4" />
    <mutant id="mutant_6573" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="(readPos) % (currPos)" />
    <mutant id="mutant_5232" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6563" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="31" />
    <mutant id="mutant_7895" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="1" />
    <mutant id="mutant_5233" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6564" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len * 1)" />
    <mutant id="mutant_7894" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="(right / left)" />
    <mutant id="mutant_5234" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6565" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="1" />
    <mutant id="mutant_7897" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="(left * 1)" />
    <mutant id="mutant_5235" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 - (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6566" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="len" />
    <mutant id="mutant_7896" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="(left / 1)" />
    <mutant id="mutant_5236" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="(4 + (Constants.OBJECT_ID_LENGTH)) / levelTwo" />
    <mutant id="mutant_6567" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_7899" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="left" />
    <mutant id="mutant_5237" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="(4 + (Constants.OBJECT_ID_LENGTH)) % levelTwo" />
    <mutant id="mutant_6568" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_7898" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="(left % 1)" />
    <mutant id="mutant_5238" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="levelTwo" />
    <mutant id="mutant_6569" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len + 1)" />
    <mutant id="mutant_5239" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH)) * levelTwo" to="(4 + (Constants.OBJECT_ID_LENGTH)) - levelTwo" />
    <mutant id="mutant_7891" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="(right * left)" />
    <mutant id="mutant_6560" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="System.identityHashCode(this)" />
    <mutant id="mutant_7890" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="right" />
    <mutant id="mutant_5230" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="4" />
    <mutant id="mutant_6561" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) / 31" />
    <mutant id="mutant_7893" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="left" />
    <mutant id="mutant_5231" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getOffset(long)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6562" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) % 31" />
    <mutant id="mutant_7892" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="(right % left)" />
    <mutant id="mutant_5229" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_5221" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="(pos % 1)" />
    <mutant id="mutant_6552" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="(objCnt / recSize)" />
    <mutant id="mutant_7884" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="(&quot;Pattern must have at least two segments: &quot; - pattern)" />
    <mutant id="mutant_5222" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="pos" />
    <mutant id="mutant_6553" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="(objCnt % recSize)" />
    <mutant id="mutant_7883" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="(&quot;Pattern must have at least two segments: &quot; % pattern)" />
    <mutant id="mutant_5223" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="(pos / 1)" />
    <mutant id="mutant_6554" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="(objCnt - recSize)" />
    <mutant id="mutant_7886" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="&quot;Pattern must have at least two segments: &quot;" />
    <mutant id="mutant_5224" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid" />
    <mutant id="mutant_6555" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="objCnt" />
    <mutant id="mutant_7885" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="pattern" />
    <mutant id="mutant_5225" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="1" />
    <mutant id="mutant_6556" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="recSize" />
    <mutant id="mutant_7888" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="(&quot;Pattern must have at least two segments: &quot; / pattern)" />
    <mutant id="mutant_5226" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_6557" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(objCnt * recSize)" to="(objCnt + recSize)" />
    <mutant id="mutant_7887" viable="false" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(&quot;Pattern must have at least two segments: &quot; + pattern)" to="(&quot;Pattern must have at least two segments: &quot; * pattern)" />
    <mutant id="mutant_5227" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_6558" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) + 31" />
    <mutant id="mutant_5228" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_6559" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackKey()" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) - 31" />
    <mutant id="mutant_7889" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right - left)" to="(right + left)" />
    <mutant id="mutant_7880" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_6550" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="(Constants.OBJECT_ID_LENGTH) - 8" />
    <mutant id="mutant_7882" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_5220" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="(pos + 1)" />
    <mutant id="mutant_6551" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="(Constants.OBJECT_ID_LENGTH) % 8" />
    <mutant id="mutant_7881" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_5218" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="(pos * 1)" />
    <mutant id="mutant_6549" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="8" />
    <mutant id="mutant_5219" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 1)" to="1" />
    <mutant id="mutant_5210" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="pos" />
    <mutant id="mutant_6541" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="(len - p) / 20" />
    <mutant id="mutant_7873" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_5211" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="(pos / 3)" />
    <mutant id="mutant_6542" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="len - p" />
    <mutant id="mutant_7872" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_5212" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="(pos * 2)" />
    <mutant id="mutant_6543" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="(len - p) % 20" />
    <mutant id="mutant_7875" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_5213" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="2" />
    <mutant id="mutant_6544" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="(len - p) * 20" />
    <mutant id="mutant_7874" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_5214" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="(pos + 2)" />
    <mutant id="mutant_6545" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="20" />
    <mutant id="mutant_7877" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="pattern.length()" />
    <mutant id="mutant_5215" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="(pos % 2)" />
    <mutant id="mutant_6546" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="(Constants.OBJECT_ID_LENGTH) * 8" />
    <mutant id="mutant_7876" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_5216" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="pos" />
    <mutant id="mutant_6547" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="(Constants.OBJECT_ID_LENGTH) / 8" />
    <mutant id="mutant_7879" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_5217" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 2)" to="(pos / 2)" />
    <mutant id="mutant_6548" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.setPackIndex(org.eclipse.jgit.internal.storage.file.PackIndex)" from="(Constants.OBJECT_ID_LENGTH) + 8" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_7878" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_7871" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.stripTrailing(java.lang.String,char)" from="((pattern.length()) - 1)" to="pattern.length()" />
    <mutant id="mutant_6540" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p) - 20" to="(len - p) + 20" />
    <mutant id="mutant_7870" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="((buffer.length()) % 1)" />
    <mutant id="mutant_5207" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="(pos * 3)" />
    <mutant id="mutant_6538" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="(len + p)" />
    <mutant id="mutant_5208" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="3" />
    <mutant id="mutant_6539" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="(len / p)" />
    <mutant id="mutant_7869" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="((buffer.length()) / 1)" />
    <mutant id="mutant_5209" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="(pos % 3)" />
    <mutant id="mutant_6530" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="pos" />
    <mutant id="mutant_7862" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="i * 1" />
    <mutant id="mutant_5200" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="(pos + 4)" />
    <mutant id="mutant_6531" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="p" />
    <mutant id="mutant_7861" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="i" />
    <mutant id="mutant_5201" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="(pos * 4)" />
    <mutant id="mutant_6532" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_7864" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="i % 1" />
    <mutant id="mutant_5202" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="4" />
    <mutant id="mutant_6533" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7863" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookAhead(java.lang.String,int)" from="i + 1" to="i - 1" />
    <mutant id="mutant_5203" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="(pos % 4)" />
    <mutant id="mutant_6534" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="(len % p)" />
    <mutant id="mutant_7866" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="((buffer.length()) * 1)" />
    <mutant id="mutant_5204" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="pos" />
    <mutant id="mutant_6535" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="len" />
    <mutant id="mutant_7865" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="1" />
    <mutant id="mutant_5205" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 4)" to="(pos / 4)" />
    <mutant id="mutant_6536" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="p" />
    <mutant id="mutant_7868" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="buffer.length()" />
    <mutant id="mutant_5206" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(pos - 3)" to="(pos + 3)" />
    <mutant id="mutant_6537" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(len - p)" to="(len * p)" />
    <mutant id="mutant_7867" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.lookBehind(java.lang.StringBuilder)" from="((buffer.length()) - 1)" to="((buffer.length()) + 1)" />
    <mutant id="mutant_5280" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5281" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) + ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5282" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) % ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5283" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="levelTwo" />
    <mutant id="mutant_5284" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) - 4)" />
    <mutant id="mutant_5285" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) % 4)" />
    <mutant id="mutant_5286" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="4" />
    <mutant id="mutant_5276" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_5277" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_5278" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) * ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5279" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" to="((Constants.OBJECT_ID_LENGTH) / 4)" />
    <mutant id="mutant_5270" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p" />
    <mutant id="mutant_5271" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p - 1" />
    <mutant id="mutant_5272" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) - 4)" />
    <mutant id="mutant_5273" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) % 4)" />
    <mutant id="mutant_5274" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="4" />
    <mutant id="mutant_5275" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2$1.ensureId()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) * 4)" />
    <mutant id="mutant_5265" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p + 1)" />
    <mutant id="mutant_6596" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="blockSize" />
    <mutant id="mutant_5266" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p % 1" />
    <mutant id="mutant_6597" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) + (blockSize)" />
    <mutant id="mutant_5267" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="1" />
    <mutant id="mutant_6598" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="pos / (blockSize)" />
    <mutant id="mutant_5268" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p * 1" />
    <mutant id="mutant_6599" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) % (blockSize)" />
    <mutant id="mutant_5269" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="p + 1" to="p / 1" />
    <mutant id="mutant_6590" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="(pos - (blockSize))" />
    <mutant id="mutant_5260" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p % 1)" />
    <mutant id="mutant_6591" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="(pos + (blockSize))" />
    <mutant id="mutant_5261" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="1" />
    <mutant id="mutant_6592" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="(blockSize)" />
    <mutant id="mutant_5262" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p * 1)" />
    <mutant id="mutant_6593" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="(pos % (blockSize))" />
    <mutant id="mutant_5263" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="(p / 1)" />
    <mutant id="mutant_6594" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) - (blockSize)" />
    <mutant id="mutant_5264" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(p - 1)" to="p" />
    <mutant id="mutant_6595" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) / (blockSize)" />
    <mutant id="mutant_5254" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_6585" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="((packEnd) * start)" />
    <mutant id="mutant_5255" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="low" />
    <mutant id="mutant_6586" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="start" />
    <mutant id="mutant_5256" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_6587" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="packEnd" />
    <mutant id="mutant_5257" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_6588" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="(pos * (blockSize))" />
    <mutant id="mutant_5258" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="high" />
    <mutant id="mutant_6589" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.toBlockStart(long)" from="(pos / (blockSize))" to="pos" />
    <mutant id="mutant_5259" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_6580" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="((currEnd) % p)" />
    <mutant id="mutant_5250" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) - (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6581" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="currEnd" />
    <mutant id="mutant_5251" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="data.length" />
    <mutant id="mutant_6582" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="((packEnd) + start)" />
    <mutant id="mutant_5252" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="4 + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6583" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="((packEnd) / start)" />
    <mutant id="mutant_5253" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) % (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6584" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((packEnd) - start)" to="((packEnd) % start)" />
    <mutant id="mutant_5243" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6574" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="(readPos) / (currPos)" />
    <mutant id="mutant_5244" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6575" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((int)((readPos) - (currPos)))" to="(readPos) + (currPos)" />
    <mutant id="mutant_5245" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6576" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="((currEnd) * p)" />
    <mutant id="mutant_5246" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6577" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="p" />
    <mutant id="mutant_5247" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 - (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6578" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="((currEnd) / p)" />
    <mutant id="mutant_5248" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) * (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6579" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.readDatabase(byte[],int,int)" from="((currEnd) - p)" to="((currEnd) + p)" />
    <mutant id="mutant_5249" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId,int)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) + (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5298" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) % 4" />
    <mutant id="mutant_5299" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="(levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)" />
    <mutant id="mutant_5290" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) * ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5291" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="((Constants.OBJECT_ID_LENGTH) / 4)" />
    <mutant id="mutant_5292" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) + ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5293" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) % ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5294" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="((levelTwo) - ((Constants.OBJECT_ID_LENGTH) / 4))" />
    <mutant id="mutant_5295" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4))" to="(levelTwo)" />
    <mutant id="mutant_5296" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) / 4" />
    <mutant id="mutant_5297" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((levelTwo) / ((Constants.OBJECT_ID_LENGTH) / 4)) * 4" to="4" />
    <mutant id="mutant_5287" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) * 4)" />
    <mutant id="mutant_5288" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_5289" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV2$EntriesIteratorV2.next()" from="((Constants.OBJECT_ID_LENGTH) / 4)" to="((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_900" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d / 1)" />
    <mutant id="mutant_901" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d + 1)" />
    <mutant id="mutant_902" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d % 1)" />
    <mutant id="mutant_907" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="1" />
    <mutant id="mutant_908" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k - 1)" />
    <mutant id="mutant_909" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k / 1)" />
    <mutant id="mutant_903" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d * 1)" />
    <mutant id="mutant_904" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="d" />
    <mutant id="mutant_905" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k % 1)" />
    <mutant id="mutant_906" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="k" />
    <mutant id="mutant_910" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k * 1)" />
    <mutant id="mutant_911" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k % 1)" />
    <mutant id="mutant_912" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="k" />
    <mutant id="mutant_913" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="1" />
    <mutant id="mutant_918" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="k" />
    <mutant id="mutant_919" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="1" />
    <mutant id="mutant_914" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k - 1)" />
    <mutant id="mutant_915" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k / 1)" />
    <mutant id="mutant_916" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k * 1)" />
    <mutant id="mutant_917" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k % 1)" />
    <mutant id="mutant_921" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k / 1)" />
    <mutant id="mutant_922" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k * 1)" />
    <mutant id="mutant_923" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k % 1)" />
    <mutant id="mutant_924" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="k" />
    <mutant id="mutant_920" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k - 1)" />
    <mutant id="mutant_929" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="(minK) - ((k ^ (minK)) &amp; 1)" />
    <mutant id="mutant_925" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="1" />
    <mutant id="mutant_926" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k - 1)" />
    <mutant id="mutant_927" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k / 1)" />
    <mutant id="mutant_928" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k + 1)" to="(k * 1)" />
    <mutant id="mutant_932" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="(minK) * ((k ^ (minK)) &amp; 1)" />
    <mutant id="mutant_933" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="minK" />
    <mutant id="mutant_934" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="(minK) % ((k ^ (minK)) &amp; 1)" />
    <mutant id="mutant_935" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="(maxK) % ((k ^ (maxK)) &amp; 1)" />
    <mutant id="mutant_930" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="(minK) / ((k ^ (minK)) &amp; 1)" />
    <mutant id="mutant_931" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(minK) + ((k ^ (minK)) &amp; 1)" to="(k ^ (minK)) &amp; 1" />
    <mutant id="mutant_936" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="(k ^ (maxK)) &amp; 1" />
    <mutant id="mutant_937" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="(maxK) * ((k ^ (maxK)) &amp; 1)" />
    <mutant id="mutant_938" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="(maxK) + ((k ^ (maxK)) &amp; 1)" />
    <mutant id="mutant_939" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="(maxK) / ((k ^ (maxK)) &amp; 1)" />
    <mutant id="mutant_943" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d - k)" />
    <mutant id="mutant_944" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="d" />
    <mutant id="mutant_945" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d / k)" />
    <mutant id="mutant_946" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d * k)" />
    <mutant id="mutant_940" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.forceKIntoRange(int)" from="(maxK) - ((k ^ (maxK)) &amp; 1)" to="maxK" />
    <mutant id="mutant_941" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="k" />
    <mutant id="mutant_942" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d % k)" />
    <mutant id="mutant_947" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) % (middleK))" />
    <mutant id="mutant_948" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(d + k)" />
    <mutant id="mutant_949" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) * (middleK))" />
    <mutant id="mutant_954" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="((d + k) - (middleK))" />
    <mutant id="mutant_955" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="(((d + k) - (middleK)) / 2)" />
    <mutant id="mutant_956" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="(((d + k) - (middleK)) * 2)" />
    <mutant id="mutant_957" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="(((d + k) - (middleK)) - 2)" />
    <mutant id="mutant_950" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) + (middleK))" />
    <mutant id="mutant_951" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) / (middleK))" />
    <mutant id="mutant_952" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(middleK)" />
    <mutant id="mutant_953" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="2" />
    <mutant id="mutant_958" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(((d + k) - (middleK)) % 2)" to="(((d + k) - (middleK)) + 2)" />
    <mutant id="mutant_959" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="k" />
    <mutant id="mutant_965" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) % (middleK))" />
    <mutant id="mutant_966" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(d + k)" />
    <mutant id="mutant_967" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) * (middleK))" />
    <mutant id="mutant_968" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) + (middleK))" />
    <mutant id="mutant_961" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d - k)" />
    <mutant id="mutant_962" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="d" />
    <mutant id="mutant_963" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d / k)" />
    <mutant id="mutant_964" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d * k)" />
    <mutant id="mutant_969" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="((d + k) / (middleK))" />
    <mutant id="mutant_960" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="(d + k)" to="(d % k)" />
    <mutant id="mutant_976" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="((d + k) - (middleK)) + 2" />
    <mutant id="mutant_977" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="k" />
    <mutant id="mutant_978" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="k % x" />
    <mutant id="mutant_979" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="k * x" />
    <mutant id="mutant_972" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="(d + k) - (middleK)" />
    <mutant id="mutant_973" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="((d + k) - (middleK)) % 2" />
    <mutant id="mutant_974" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="((d + k) - (middleK)) * 2" />
    <mutant id="mutant_975" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="((d + k) - (middleK)) - 2" />
    <mutant id="mutant_970" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK))" to="(middleK)" />
    <mutant id="mutant_971" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.getIndex(int,int)" from="((d + k) - (middleK)) / 2" to="2" />
    <mutant id="mutant_987" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d * 1)" />
    <mutant id="mutant_988" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="d" />
    <mutant id="mutant_989" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="k" />
    <mutant id="mutant_983" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="1" />
    <mutant id="mutant_984" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d / 1)" />
    <mutant id="mutant_985" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d + 1)" />
    <mutant id="mutant_986" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d % 1)" />
    <mutant id="mutant_980" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="k - x" />
    <mutant id="mutant_981" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="x" />
    <mutant id="mutant_982" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.newSnake(int,int)" from="k + x" to="k / x" />
    <mutant id="mutant_998" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="(((d - 1) + k) * (backward.middleK))" />
    <mutant id="mutant_999" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="(backward.middleK)" />
    <mutant id="mutant_994" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="((d - 1) % k)" />
    <mutant id="mutant_995" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="(((d - 1) + k) % (backward.middleK))" />
    <mutant id="mutant_996" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="((d - 1) + k)" />
    <mutant id="mutant_997" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="(((d - 1) + k) + (backward.middleK))" />
    <mutant id="mutant_990" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="((d - 1) - k)" />
    <mutant id="mutant_991" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="((d - 1) / k)" />
    <mutant id="mutant_992" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="((d - 1) * k)" />
    <mutant id="mutant_993" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((d - 1) + k)" to="(d - 1)" />
    <mutant id="mutant_6604" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="((currBuf.length) / (currEnd))" />
    <mutant id="mutant_7936" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="(&quot;Pattern must have trailing asterisk: &quot; % pattern)" />
    <mutant id="mutant_6605" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="currEnd" />
    <mutant id="mutant_7935" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="&quot;Pattern must have trailing asterisk: &quot;" />
    <mutant id="mutant_6606" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="((blockCache.getBlockSize()) + size)" />
    <mutant id="mutant_7938" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="1" />
    <mutant id="mutant_6607" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="size" />
    <mutant id="mutant_7937" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="s.length()" />
    <mutant id="mutant_6608" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="((blockCache.getBlockSize()) % size)" />
    <mutant id="mutant_6609" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.onPackHeader(long)" from="((blockCache.getBlockSize()) / size)" to="(blockCache.getBlockSize())" />
    <mutant id="mutant_7939" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) / 1" />
    <mutant id="mutant_7930" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="((subPattern.length()) * 1)" />
    <mutant id="mutant_6600" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="((currBuf.length) % (currEnd))" />
    <mutant id="mutant_7932" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="(&quot;Pattern must have trailing asterisk: &quot; - pattern)" />
    <mutant id="mutant_6601" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="((currBuf.length) * (currEnd))" />
    <mutant id="mutant_7931" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="(&quot;Pattern must have trailing asterisk: &quot; * pattern)" />
    <mutant id="mutant_6602" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="currBuf.length" />
    <mutant id="mutant_7934" viable="false" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="(&quot;Pattern must have trailing asterisk: &quot; / pattern)" />
    <mutant id="mutant_6603" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackParser.buffer(byte[],int,int)" from="((currBuf.length) - (currEnd))" to="((currBuf.length) + (currEnd))" />
    <mutant id="mutant_7933" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have trailing asterisk: &quot; + pattern)" to="pattern" />
    <mutant id="mutant_7925" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="subPattern.length()" />
    <mutant id="mutant_7924" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_7927" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="((subPattern.length()) / 1)" />
    <mutant id="mutant_7926" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="1" />
    <mutant id="mutant_7929" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="((subPattern.length()) % 1)" />
    <mutant id="mutant_7928" viable="true" in="org.eclipse.jgit.ignore.internal.TrailingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="((subPattern.length()) - 1)" to="((subPattern.length()) + 1)" />
    <mutant id="mutant_7921" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_7920" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_7923" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_7922" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_7914" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="sb.length()" />
    <mutant id="mutant_7913" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="4" />
    <mutant id="mutant_7916" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="((sb.length()) % 4)" />
    <mutant id="mutant_7915" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="((sb.length()) + 4)" />
    <mutant id="mutant_7918" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="((sb.length()) * 4)" />
    <mutant id="mutant_7917" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.convertGlob(java.lang.String)" from="((sb.length()) - 4)" to="((sb.length()) / 4)" />
    <mutant id="mutant_7919" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.checkWildCards(java.lang.String)" from="((pattern.length()) - 1)" to="(pattern.length())" />
    <mutant id="mutant_7910" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="(right / 1)" />
    <mutant id="mutant_7912" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="(right * 1)" />
    <mutant id="mutant_7911" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="(right % 1)" />
    <mutant id="mutant_7903" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_7902" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_7905" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) % 1)" />
    <mutant id="mutant_7904" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) + 1)" />
    <mutant id="mutant_7907" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="1" />
    <mutant id="mutant_7906" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="((pattern.length()) * 1)" />
    <mutant id="mutant_7909" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="(right - 1)" />
    <mutant id="mutant_7908" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(right + 1)" to="right" />
    <mutant id="mutant_7901" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="((pattern.length()) - 1)" to="(pattern.length())" />
    <mutant id="mutant_7900" viable="true" in="org.eclipse.jgit.ignore.internal.Strings.split(java.lang.String,char)" from="(left - 1)" to="(left + 1)" />
    <mutant id="mutant_6406" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) / bs" />
    <mutant id="mutant_7738" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="endExcl / 1" />
    <mutant id="mutant_6407" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) % bs" />
    <mutant id="mutant_7737" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="endExcl" />
    <mutant id="mutant_6408" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize % bs)" />
    <mutant id="mutant_6409" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="bs" />
    <mutant id="mutant_7739" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl * startIncl)" />
    <mutant id="mutant_7730" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="endExcl" />
    <mutant id="mutant_6400" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="wantSize" />
    <mutant id="mutant_7732" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="startIncl" />
    <mutant id="mutant_6401" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize * bs)" />
    <mutant id="mutant_7731" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl / startIncl)" />
    <mutant id="mutant_6402" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) + bs" />
    <mutant id="mutant_7734" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="endExcl % 1" />
    <mutant id="mutant_6403" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="wantSize / bs" />
    <mutant id="mutant_7733" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="1" />
    <mutant id="mutant_6404" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="bs" />
    <mutant id="mutant_7736" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="endExcl * 1" />
    <mutant id="mutant_6405" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) - bs" />
    <mutant id="mutant_7735" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="endExcl - 1" to="endExcl + 1" />
    <mutant id="mutant_7727" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl * startIncl)" />
    <mutant id="mutant_7726" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) * 1" />
    <mutant id="mutant_7729" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl % startIncl)" />
    <mutant id="mutant_7728" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl + startIncl)" />
    <mutant id="mutant_7721" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="s.length()" />
    <mutant id="mutant_7720" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="(&quot;Pattern must have leading asterisk: &quot; / pattern)" />
    <mutant id="mutant_7723" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) / 1" />
    <mutant id="mutant_7722" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="1" />
    <mutant id="mutant_7725" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) % 1" />
    <mutant id="mutant_7724" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher.matches(java.lang.String,int,int,boolean)" from="(s.length()) - 1" to="(s.length()) + 1" />
    <mutant id="mutant_7716" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="(&quot;Pattern must have leading asterisk: &quot; % pattern)" />
    <mutant id="mutant_7715" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="pattern" />
    <mutant id="mutant_7718" viable="true" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="&quot;Pattern must have leading asterisk: &quot;" />
    <mutant id="mutant_7717" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="(&quot;Pattern must have leading asterisk: &quot; * pattern)" />
    <mutant id="mutant_7719" viable="false" in="org.eclipse.jgit.ignore.internal.LeadingAsteriskMatcher(java.lang.String,java.lang.Character,boolean)" from="(&quot;Pattern must have leading asterisk: &quot; + pattern)" to="(&quot;Pattern must have leading asterisk: &quot; - pattern)" />
    <mutant id="mutant_7710" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="1" />
    <mutant id="mutant_7712" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="(paths.size()) * 1" />
    <mutant id="mutant_7711" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="(paths.size()) % 1" />
    <mutant id="mutant_7714" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="(paths.size()) + 1" />
    <mutant id="mutant_7713" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="paths.size()" />
    <mutant id="mutant_7705" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="((list.size()) % 1)" />
    <mutant id="mutant_7704" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="1" />
    <mutant id="mutant_7707" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="list.size()" />
    <mutant id="mutant_7706" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="((list.size()) * 1)" />
    <mutant id="mutant_7709" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.findPaths(org.eclipse.jgit.revwalk.RevWalk,int)" from="(paths.size()) - 1" to="(paths.size()) / 1" />
    <mutant id="mutant_7708" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="((list.size()) + 1)" />
    <mutant id="mutant_7701" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="((totCommits / (minCommits)) % 1)" />
    <mutant id="mutant_7700" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="((totCommits / (minCommits)) - 1)" />
    <mutant id="mutant_7703" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((list.size()) - 1)" to="((list.size()) / 1)" />
    <mutant id="mutant_7702" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="((totCommits / (minCommits)) * 1)" />
    <mutant id="mutant_7781" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="(right + left)" />
    <mutant id="mutant_6450" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="(p - 20)" />
    <mutant id="mutant_7780" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher * 1)" />
    <mutant id="mutant_5120" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="((Constants.OBJECT_ID_LENGTH) * 4)" />
    <mutant id="mutant_6451" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="p" />
    <mutant id="mutant_7783" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="(right * left)" />
    <mutant id="mutant_5121" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6452" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="(p / 20)" />
    <mutant id="mutant_7782" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="right" />
    <mutant id="mutant_5119" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="4" />
    <mutant id="mutant_5111" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="idxHeader[k]" />
    <mutant id="mutant_6442" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="base" />
    <mutant id="mutant_7774" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) + 1)" />
    <mutant id="mutant_5112" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="(idxHeader[k]) + (idxHeader[(k - 1)])" />
    <mutant id="mutant_6443" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="pos * base" />
    <mutant id="mutant_7773" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="(matchers.size())" />
    <mutant id="mutant_5113" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="(idxHeader[k]) * (idxHeader[(k - 1)])" />
    <mutant id="mutant_6444" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7776" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="1" />
    <mutant id="mutant_5114" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="(idxHeader[k]) % (idxHeader[(k - 1)])" />
    <mutant id="mutant_6445" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7775" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher / 1)" />
    <mutant id="mutant_5115" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="idxHeader[(k - 1)]" />
    <mutant id="mutant_6446" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_7778" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher % 1)" />
    <mutant id="mutant_5116" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="((Constants.OBJECT_ID_LENGTH) - 4)" />
    <mutant id="mutant_6447" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7777" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="matcher" />
    <mutant id="mutant_5117" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="((Constants.OBJECT_ID_LENGTH) % 4)" />
    <mutant id="mutant_6448" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_5118" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Constants.OBJECT_ID_LENGTH) + 4)" to="((Constants.OBJECT_ID_LENGTH) / 4)" />
    <mutant id="mutant_6449" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7779" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher - 1)" />
    <mutant id="mutant_7770" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="1" />
    <mutant id="mutant_6440" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="pos + base" />
    <mutant id="mutant_7772" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) * 1)" />
    <mutant id="mutant_5110" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((int)((idxHeader[k]) - (idxHeader[(k - 1)])))" to="(idxHeader[k]) / (idxHeader[(k - 1)])" />
    <mutant id="mutant_6441" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="pos % base" />
    <mutant id="mutant_7771" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) % 1)" />
    <mutant id="mutant_5108" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_6439" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="pos" />
    <mutant id="mutant_5109" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_5100" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="(k % 4)" />
    <mutant id="mutant_6431" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7763" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher / 1)" />
    <mutant id="mutant_5101" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="4" />
    <mutant id="mutant_6432" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7762" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="((matchers.size()) + 2)" />
    <mutant id="mutant_5102" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="(k + 4)" />
    <mutant id="mutant_6433" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7765" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="matcher" />
    <mutant id="mutant_5103" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="(k / 4)" />
    <mutant id="mutant_6434" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_7764" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="1" />
    <mutant id="mutant_5104" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_6435" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7767" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher - 1)" />
    <mutant id="mutant_5105" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="k" />
    <mutant id="mutant_6436" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_7766" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher % 1)" />
    <mutant id="mutant_5106" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="1" />
    <mutant id="mutant_6437" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7769" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) / 1)" />
    <mutant id="mutant_5107" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_6438" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - base" to="pos / base" />
    <mutant id="mutant_7768" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(matcher + 1)" to="(matcher * 1)" />
    <mutant id="mutant_7761" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="(matchers.size())" />
    <mutant id="mutant_6430" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_7760" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="((matchers.size()) * 2)" />
    <mutant id="mutant_6428" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_6429" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7759" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="((matchers.size()) % 2)" />
    <mutant id="mutant_6420" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="((idx.getObjectCount()) + 8)" />
    <mutant id="mutant_7752" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="start % 1" />
    <mutant id="mutant_6421" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="((idx.getObjectCount()) % 8)" />
    <mutant id="mutant_7751" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="1" />
    <mutant id="mutant_6422" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="((idx.getObjectCount()) - 8)" />
    <mutant id="mutant_7754" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="start" />
    <mutant id="mutant_6423" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="((idx.getObjectCount()) / 8)" />
    <mutant id="mutant_7753" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="start - 1" />
    <mutant id="mutant_6424" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="8" />
    <mutant id="mutant_7756" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="start / 1" />
    <mutant id="mutant_6425" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getReverseIdx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((idx.getObjectCount()) * 8)" to="idx.getObjectCount()" />
    <mutant id="mutant_7755" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.getFirstNotSlash(java.lang.String,int)" from="start + 1" to="start * 1" />
    <mutant id="mutant_6426" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7758" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="2" />
    <mutant id="mutant_6427" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7757" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="((matchers.size()) - 2)" to="((matchers.size()) / 2)" />
    <mutant id="mutant_7750" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="startIncl" />
    <mutant id="mutant_6417" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) - bs" />
    <mutant id="mutant_7749" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i - startIncl)" />
    <mutant id="mutant_6418" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) / bs" />
    <mutant id="mutant_7748" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i * startIncl)" />
    <mutant id="mutant_6419" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) % bs" />
    <mutant id="mutant_7741" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl % startIncl)" />
    <mutant id="mutant_6410" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize - bs)" />
    <mutant id="mutant_7740" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl + startIncl)" />
    <mutant id="mutant_6411" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize + bs)" />
    <mutant id="mutant_7743" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="(endExcl / startIncl)" />
    <mutant id="mutant_6412" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="wantSize" />
    <mutant id="mutant_7742" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="endExcl" />
    <mutant id="mutant_6413" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize * bs)" />
    <mutant id="mutant_7745" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i / startIncl)" />
    <mutant id="mutant_6414" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="(wantSize / bs) + bs" />
    <mutant id="mutant_7744" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(endExcl - startIncl)" to="startIncl" />
    <mutant id="mutant_6415" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="wantSize / bs" />
    <mutant id="mutant_7747" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="i" />
    <mutant id="mutant_6416" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.idx(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs) * bs" to="bs" />
    <mutant id="mutant_7746" viable="true" in="org.eclipse.jgit.ignore.internal.NameMatcher.matches(java.lang.String,int,int,boolean)" from="(i + startIncl)" to="(i % startIncl)" />
    <mutant id="mutant_6490" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position / (b.start)" />
    <mutant id="mutant_5160" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="base" />
    <mutant id="mutant_6491" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position + (b.start)" />
    <mutant id="mutant_5161" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition / base" />
    <mutant id="mutant_6492" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) + ptr)" />
    <mutant id="mutant_5162" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition % base" />
    <mutant id="mutant_6493" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) / ptr)" />
    <mutant id="mutant_5163" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition" />
    <mutant id="mutant_6494" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="b.size()" />
    <mutant id="mutant_5164" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="4" />
    <mutant id="mutant_6495" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) * ptr)" />
    <mutant id="mutant_5165" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_6496" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="ptr" />
    <mutant id="mutant_5155" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6486" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position % (b.start)" />
    <mutant id="mutant_5156" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne + 1)" />
    <mutant id="mutant_6487" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position" />
    <mutant id="mutant_5157" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="levelOne" />
    <mutant id="mutant_6488" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="b.start" />
    <mutant id="mutant_5158" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition * base" />
    <mutant id="mutant_6489" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position * (b.start)" />
    <mutant id="mutant_5159" viable="false" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="((int)(nthPosition - base))" to="nthPosition + base" />
    <mutant id="mutant_6480" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="12 + 20" />
    <mutant id="mutant_5150" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6481" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="length" />
    <mutant id="mutant_5151" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="levelOne" />
    <mutant id="mutant_6482" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) * (12 + 20)" />
    <mutant id="mutant_5152" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="1" />
    <mutant id="mutant_6483" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) + (12 + 20)" />
    <mutant id="mutant_5153" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne / 1)" />
    <mutant id="mutant_6484" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) / (12 + 20)" />
    <mutant id="mutant_5154" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.getLevelTwo(long,int)" from="(levelOne - 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6485" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) % (12 + 20)" />
    <mutant id="mutant_5144" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne + 1)" />
    <mutant id="mutant_6475" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 - 20)" />
    <mutant id="mutant_5145" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="levelOne" />
    <mutant id="mutant_6476" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 * 20)" />
    <mutant id="mutant_5146" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="1" />
    <mutant id="mutant_6477" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 / 20)" />
    <mutant id="mutant_5147" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne / 1)" />
    <mutant id="mutant_6478" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 % 20)" />
    <mutant id="mutant_5148" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne - 1)" />
    <mutant id="mutant_6479" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="20" />
    <mutant id="mutant_5149" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne + 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6470" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="headerCnt" />
    <mutant id="mutant_5140" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="1" />
    <mutant id="mutant_6471" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="src.offset" />
    <mutant id="mutant_5141" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne / 1)" />
    <mutant id="mutant_6472" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="(src.offset) * headerCnt" />
    <mutant id="mutant_5142" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne * 1)" />
    <mutant id="mutant_6473" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="(src.offset) - headerCnt" />
    <mutant id="mutant_5143" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(levelOne - 1)" to="(levelOne % 1)" />
    <mutant id="mutant_6474" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="12" />
    <mutant id="mutant_5133" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="(Integer.MAX_VALUE)" />
    <mutant id="mutant_6464" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="headerCnt" />
    <mutant id="mutant_7796" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="lastWildmatch - 1" />
    <mutant id="mutant_5134" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition / 1)" />
    <mutant id="mutant_6465" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="src.offset" />
    <mutant id="mutant_7795" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="lastWildmatch % 1" />
    <mutant id="mutant_5135" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="1" />
    <mutant id="mutant_6466" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="((src.offset) * headerCnt)" />
    <mutant id="mutant_7798" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="lastWildmatch" />
    <mutant id="mutant_5136" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition - 1)" />
    <mutant id="mutant_6467" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="((src.offset) - headerCnt)" />
    <mutant id="mutant_7797" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="lastWildmatch * 1" />
    <mutant id="mutant_5137" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="nthPosition" />
    <mutant id="mutant_6468" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="(src.offset) / headerCnt" />
    <mutant id="mutant_5138" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition % 1)" />
    <mutant id="mutant_6469" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(src.offset) + headerCnt" to="(src.offset) % headerCnt" />
    <mutant id="mutant_7799" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="path" />
    <mutant id="mutant_5139" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findLevelOne(long)" from="(nthPosition + 1)" to="(nthPosition * 1)" />
    <mutant id="mutant_7790" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="left % 1" />
    <mutant id="mutant_6460" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="(pos * (delta.hdrLen))" />
    <mutant id="mutant_7792" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="left + 1" />
    <mutant id="mutant_5130" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) % 8)" />
    <mutant id="mutant_6461" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="(pos % (delta.hdrLen))" />
    <mutant id="mutant_7791" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="left" />
    <mutant id="mutant_5131" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) * 8)" />
    <mutant id="mutant_6462" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="((src.offset) / headerCnt)" />
    <mutant id="mutant_7794" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="lastWildmatch / 1" />
    <mutant id="mutant_5132" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) + 8)" />
    <mutant id="mutant_6463" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyAsIs(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsObjectToPack,boolean,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((src.offset) + headerCnt)" to="((src.offset) % headerCnt)" />
    <mutant id="mutant_7793" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="lastWildmatch + 1" to="1" />
    <mutant id="mutant_5122" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="n % ((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_6453" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="(p % 20)" />
    <mutant id="mutant_7785" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="left" />
    <mutant id="mutant_5123" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="n" />
    <mutant id="mutant_6454" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="(p * 20)" />
    <mutant id="mutant_7784" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="(right % left)" />
    <mutant id="mutant_5124" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="n - ((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_6455" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(p + 20)" to="20" />
    <mutant id="mutant_7787" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="1" />
    <mutant id="mutant_5125" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="n / ((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_6456" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="(pos / (delta.hdrLen))" />
    <mutant id="mutant_7786" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="(right - left)" to="(right / left)" />
    <mutant id="mutant_5126" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="n + ((Constants.OBJECT_ID_LENGTH) + 4)" />
    <mutant id="mutant_6457" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="(pos - (delta.hdrLen))" />
    <mutant id="mutant_7789" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="left * 1" />
    <mutant id="mutant_5127" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="n * ((Constants.OBJECT_ID_LENGTH) + 4)" to="(Constants.OBJECT_ID_LENGTH) + 4" />
    <mutant id="mutant_6458" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="pos" />
    <mutant id="mutant_7788" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.iterate(java.lang.String,int,int,boolean)" from="left - 1" to="left / 1" />
    <mutant id="mutant_5128" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="((Integer.MAX_VALUE) / 8)" />
    <mutant id="mutant_6459" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.load(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + (delta.hdrLen))" to="delta.hdrLen" />
    <mutant id="mutant_5129" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((Integer.MAX_VALUE) - 8)" to="8" />
    <mutant id="mutant_5199" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_5191" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="data.length" />
    <mutant id="mutant_5192" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="4 + (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_5193" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) % (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5194" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_5195" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="low" />
    <mutant id="mutant_5196" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_5197" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_5198" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(low + high)" to="high" />
    <mutant id="mutant_5190" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) - (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5188" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) * (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5189" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(data.length) / (4 + (Constants.OBJECT_ID_LENGTH))" to="(data.length) + (4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5180" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) % 4" />
    <mutant id="mutant_5181" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) * 4" />
    <mutant id="mutant_5182" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="4" />
    <mutant id="mutant_5183" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_5184" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5185" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5186" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5187" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.findOffset(org.eclipse.jgit.lib.AnyObjectId)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 - (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5177" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="(4 + (Constants.OBJECT_ID_LENGTH)) * mid" />
    <mutant id="mutant_5178" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) / 4" />
    <mutant id="mutant_5179" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) - 4" />
    <mutant id="mutant_5170" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="((4 + (Constants.OBJECT_ID_LENGTH)) % mid)" />
    <mutant id="mutant_5171" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="mid" />
    <mutant id="mutant_5172" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="((4 + (Constants.OBJECT_ID_LENGTH)) - mid)" />
    <mutant id="mutant_5173" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="((4 + (Constants.OBJECT_ID_LENGTH)) + mid)" />
    <mutant id="mutant_5174" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="((4 + (Constants.OBJECT_ID_LENGTH)) / mid)" />
    <mutant id="mutant_5175" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid)" to="(4 + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5176" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="((4 + (Constants.OBJECT_ID_LENGTH)) * mid) + 4" to="4" />
    <mutant id="mutant_5166" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6497" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackThroughCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) % ptr)" />
    <mutant id="mutant_5167" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6498" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="((length) / 20)" />
    <mutant id="mutant_5168" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_6499" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.representation(org.eclipse.jgit.internal.storage.dfs.DfsObjectRepresentation,long,org.eclipse.jgit.internal.storage.dfs.DfsReader,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="((length) - 20)" to="((length) % 20)" />
    <mutant id="mutant_5169" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1.idOffset(int)" from="(4 + (Constants.OBJECT_ID_LENGTH))" to="(4 - (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_800" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="(maxChainLength) / 1" />
    <mutant id="mutant_801" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="(maxChainLength) * 1" />
    <mutant id="mutant_802" viable="true" in="org.eclipse.jgit.diff.HistogramDiffIndex.findLongestCommonSequence()" from="(maxChainLength) + 1" to="(maxChainLength) - 1" />
    <mutant id="mutant_803" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="k" />
    <mutant id="mutant_808" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="(d * k)" />
    <mutant id="mutant_809" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="((d + k) % (forward.middleK))" />
    <mutant id="mutant_804" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="(d % k)" />
    <mutant id="mutant_805" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="(d - k)" />
    <mutant id="mutant_806" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="d" />
    <mutant id="mutant_807" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(d + k)" to="(d / k)" />
    <mutant id="mutant_811" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="((d + k) * (forward.middleK))" />
    <mutant id="mutant_812" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="((d + k) + (forward.middleK))" />
    <mutant id="mutant_813" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="((d + k) / (forward.middleK))" />
    <mutant id="mutant_814" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="(forward.middleK)" />
    <mutant id="mutant_810" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="((d + k) - (forward.middleK))" to="(d + k)" />
    <mutant id="mutant_819" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="(((d + k) - (forward.middleK)) - 2)" />
    <mutant id="mutant_815" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="2" />
    <mutant id="mutant_816" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="((d + k) - (forward.middleK))" />
    <mutant id="mutant_817" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="(((d + k) - (forward.middleK)) / 2)" />
    <mutant id="mutant_818" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="(((d + k) - (forward.middleK)) * 2)" />
    <mutant id="mutant_822" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="x * 1" />
    <mutant id="mutant_823" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="x + 1" />
    <mutant id="mutant_824" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="x % 1" />
    <mutant id="mutant_825" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="x / 1" />
    <mutant id="mutant_820" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.meets(int,int,int,long)" from="(((d + k) - (forward.middleK)) % 2)" to="(((d + k) - (forward.middleK)) + 2)" />
    <mutant id="mutant_821" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="1" />
    <mutant id="mutant_826" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.getLeft(int)" from="x - 1" to="x" />
    <mutant id="mutant_827" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_828" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_829" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_833" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="1" />
    <mutant id="mutant_834" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="(x * 1)" />
    <mutant id="mutant_835" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="(x + 1)" />
    <mutant id="mutant_836" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="(x % 1)" />
    <mutant id="mutant_830" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_831" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_832" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_837" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="(x / 1)" />
    <mutant id="mutant_838" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(x - 1)" to="x" />
    <mutant id="mutant_839" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_844" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_845" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="1" />
    <mutant id="mutant_846" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="(k + x)" />
    <mutant id="mutant_847" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="((k + x) / 1)" />
    <mutant id="mutant_840" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_841" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_842" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_843" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_848" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="((k + x) % 1)" />
    <mutant id="mutant_849" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="((k + x) * 1)" />
    <mutant id="mutant_855" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_856" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_857" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="((middleK) * d)" />
    <mutant id="mutant_858" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="((middleK) + d)" />
    <mutant id="mutant_851" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_852" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_853" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_854" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_859" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="((middleK) % d)" />
    <mutant id="mutant_850" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$BackwardEditPaths.snake(int,int)" from="((k + x) - 1)" to="((k + x) + 1)" />
    <mutant id="mutant_866" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="d" />
    <mutant id="mutant_867" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="((middleK) / d)" />
    <mutant id="mutant_868" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="middleK" />
    <mutant id="mutant_869" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="1" />
    <mutant id="mutant_862" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="middleK" />
    <mutant id="mutant_863" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="((middleK) * d)" />
    <mutant id="mutant_864" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="((middleK) % d)" />
    <mutant id="mutant_865" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) + d)" to="((middleK) - d)" />
    <mutant id="mutant_860" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="d" />
    <mutant id="mutant_861" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="((middleK) - d)" to="((middleK) / d)" />
    <mutant id="mutant_877" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="1" />
    <mutant id="mutant_878" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_879" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_873" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d * 1)" />
    <mutant id="mutant_874" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="d" />
    <mutant id="mutant_875" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_876" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="k" />
    <mutant id="mutant_870" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d / 1)" />
    <mutant id="mutant_871" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d + 1)" />
    <mutant id="mutant_872" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="(d % 1)" />
    <mutant id="mutant_888" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="k" />
    <mutant id="mutant_889" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="1" />
    <mutant id="mutant_884" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_885" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_886" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_887" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_7815" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="matchers.size()" />
    <mutant id="mutant_7814" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) * 1)" />
    <mutant id="mutant_7817" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="(pattern.length())" />
    <mutant id="mutant_7816" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) + 1)" />
    <mutant id="mutant_7819" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="((pattern.length()) / 1)" />
    <mutant id="mutant_7818" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createPathMatcher(java.lang.String,java.lang.Character,boolean)" from="((pattern.length()) - 1)" to="1" />
    <mutant id="mutant_880" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_881" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_882" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="k" />
    <mutant id="mutant_883" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="1" />
    <mutant id="mutant_7811" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) / 1)" />
    <mutant id="mutant_7810" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="FastIgnoreRule.PATH_SEPARATOR" />
    <mutant id="mutant_7813" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="((matchers.size()) % 1)" />
    <mutant id="mutant_7812" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.createMatchers(java.util.List,java.lang.Character,boolean)" from="((matchers.size()) - 1)" to="1" />
    <mutant id="mutant_899" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(d - 1)" to="1" />
    <mutant id="mutant_895" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="1" />
    <mutant id="mutant_896" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_897" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_898" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_7804" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="(slash) - path" />
    <mutant id="mutant_7803" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="(slash) * path" />
    <mutant id="mutant_7806" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="((pattern) / (FastIgnoreRule.PATH_SEPARATOR))" />
    <mutant id="mutant_7805" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="((pattern) - (FastIgnoreRule.PATH_SEPARATOR))" />
    <mutant id="mutant_7808" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="((pattern) * (FastIgnoreRule.PATH_SEPARATOR))" />
    <mutant id="mutant_7807" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="((pattern) % (FastIgnoreRule.PATH_SEPARATOR))" />
    <mutant id="mutant_7809" viable="true" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="((pattern) + (FastIgnoreRule.PATH_SEPARATOR))" to="pattern" />
    <mutant id="mutant_891" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k / 1)" />
    <mutant id="mutant_892" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k * 1)" />
    <mutant id="mutant_893" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k % 1)" />
    <mutant id="mutant_894" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="k" />
    <mutant id="mutant_7800" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="(slash) / path" />
    <mutant id="mutant_7802" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="slash" />
    <mutant id="mutant_890" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$EditPaths.calculate(int)" from="(k - 1)" to="(k + 1)" />
    <mutant id="mutant_7801" viable="false" in="org.eclipse.jgit.ignore.internal.PathMatcher.simpleMatch(java.lang.String,boolean)" from="(slash) + path" to="(slash) % path" />
    <mutant id="mutant_7617" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="bytesPerUnit" />
    <mutant id="mutant_8948" viable="true" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="super.toString()" />
    <mutant id="mutant_7616" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="totalWeight * bytesPerUnit" />
    <mutant id="mutant_8947" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="(sourceLines[idx]) + 1" />
    <mutant id="mutant_7619" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="totalWeight + bytesPerUnit" />
    <mutant id="mutant_7618" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="totalWeight % bytesPerUnit" />
    <mutant id="mutant_8949" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="&quot;Reverse&quot; / (super.toString())" />
    <mutant id="mutant_8940" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) * (r.length)" />
    <mutant id="mutant_7611" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="bytesPerUnit" />
    <mutant id="mutant_8942" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="(sourceLines[idx]) * 1" />
    <mutant id="mutant_7610" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="(totalWeight * bytesPerUnit)" />
    <mutant id="mutant_8941" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) % (r.length)" />
    <mutant id="mutant_7613" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="(totalWeight + bytesPerUnit)" />
    <mutant id="mutant_8944" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="(sourceLines[idx]) % 1" />
    <mutant id="mutant_7612" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="(totalWeight % bytesPerUnit)" />
    <mutant id="mutant_8943" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="1" />
    <mutant id="mutant_7615" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="totalWeight - bytesPerUnit" />
    <mutant id="mutant_8946" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="(sourceLines[idx]) / 1" />
    <mutant id="mutant_7614" viable="false" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="((int)(totalWeight / bytesPerUnit))" to="totalWeight" />
    <mutant id="mutant_8945" viable="true" in="org.eclipse.jgit.blame.BlameResult.getSourceLine(int)" from="(sourceLines[idx]) - 1" to="sourceLines[idx]" />
    <mutant id="mutant_7606" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="System.currentTimeMillis()" />
    <mutant id="mutant_8937" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) / (r.length)" />
    <mutant id="mutant_7605" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="(System.currentTimeMillis()) + start" />
    <mutant id="mutant_8936" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="r.length" />
    <mutant id="mutant_7608" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="totalWeight" />
    <mutant id="mutant_8939" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) - (r.length)" />
    <mutant id="mutant_7607" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="start" />
    <mutant id="mutant_8938" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getSourceEnd()" from="(r.sourceStart) + (r.length)" to="r.sourceStart" />
    <mutant id="mutant_7609" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight / bytesPerUnit)" to="(totalWeight - bytesPerUnit)" />
    <mutant id="mutant_7600" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8931" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="(r.resultStart) / (r.length)" />
    <mutant id="mutant_8930" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="r.length" />
    <mutant id="mutant_7602" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="(System.currentTimeMillis()) / start" />
    <mutant id="mutant_8933" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="(r.resultStart) % (r.length)" />
    <mutant id="mutant_7601" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="searchStart" />
    <mutant id="mutant_8932" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="(r.resultStart) - (r.length)" />
    <mutant id="mutant_7604" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="(System.currentTimeMillis()) * start" />
    <mutant id="mutant_8935" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="(r.resultStart) * (r.length)" />
    <mutant id="mutant_7603" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForReuse(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - start" to="(System.currentTimeMillis()) % start" />
    <mutant id="mutant_8934" viable="true" in="org.eclipse.jgit.blame.BlameGenerator.getResultEnd()" from="(r.resultStart) + (r.length)" to="r.resultStart" />
    <mutant id="mutant_8926" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="((Constants.R_TAGS) - (name))" />
    <mutant id="mutant_8925" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="((Constants.R_TAGS) / (name))" />
    <mutant id="mutant_8928" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="((Constants.R_TAGS) % (name))" />
    <mutant id="mutant_8927" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="Constants.R_TAGS" />
    <mutant id="mutant_8929" viable="false" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="((Constants.R_TAGS) * (name))" />
    <mutant id="mutant_8920" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="(&quot;tagged &quot; % (name))" />
    <mutant id="mutant_8922" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="&quot;tagged &quot;" />
    <mutant id="mutant_8921" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="(&quot;tagged &quot; / (name))" />
    <mutant id="mutant_8924" viable="true" in="org.eclipse.jgit.api.TagCommand.processOptions(org.eclipse.jgit.lib.RepositoryState)" from="((Constants.R_TAGS) + (name))" to="name" />
    <mutant id="mutant_8923" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="(&quot;tagged &quot; * (name))" />
    <mutant id="mutant_8915" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="(Constants.R_TAGS) % tagName" />
    <mutant id="mutant_8914" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="Constants.R_TAGS" />
    <mutant id="mutant_8917" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="(Constants.R_TAGS) - tagName" />
    <mutant id="mutant_8916" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="tagName" />
    <mutant id="mutant_8919" viable="true" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="name" />
    <mutant id="mutant_8918" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(&quot;tagged &quot; + (name))" to="(&quot;tagged &quot; - (name))" />
    <mutant id="mutant_8911" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) / &quot;]&quot;)" />
    <mutant id="mutant_8910" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) - &quot;]&quot;)" />
    <mutant id="mutant_8913" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="(Constants.R_TAGS) / tagName" />
    <mutant id="mutant_8912" viable="false" in="org.eclipse.jgit.api.TagCommand.updateTagRef(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.revwalk.RevWalk,java.lang.String,java.lang.String)" from="(Constants.R_TAGS) + tagName" to="(Constants.R_TAGS) * tagName" />
    <mutant id="mutant_7660" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) / writeStart" />
    <mutant id="mutant_8991" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="(e.getEndB()) % (r.sourceStart)" />
    <mutant id="mutant_8990" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="(e.getEndB()) * (r.sourceStart)" />
    <mutant id="mutant_6330" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="12" />
    <mutant id="mutant_7662" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="((b.cardinality()) + (a.cardinality()))" />
    <mutant id="mutant_8993" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="r.sourceStart" />
    <mutant id="mutant_5000" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="(findEndOffset(pos)) / pos" />
    <mutant id="mutant_6331" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 - 20)" />
    <mutant id="mutant_7661" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8992" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="(e.getEndB()) + (r.sourceStart)" />
    <mutant id="mutant_6329" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="(pos / size) + size" />
    <mutant id="mutant_6321" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="(pos % size)" />
    <mutant id="mutant_7653" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="(out.length()) / beginOffset" />
    <mutant id="mutant_8984" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="r.length" />
    <mutant id="mutant_6322" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="pos" />
    <mutant id="mutant_7652" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="out.length()" />
    <mutant id="mutant_8983" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="((e.getBeginA()) * d)" />
    <mutant id="mutant_6323" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="(pos * size)" />
    <mutant id="mutant_7655" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="(out.length()) + beginOffset" />
    <mutant id="mutant_8986" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="r.sourceStart" />
    <mutant id="mutant_6324" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="size" />
    <mutant id="mutant_7654" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="(out.length()) * beginOffset" />
    <mutant id="mutant_8985" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) / (r.length)" />
    <mutant id="mutant_6325" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="(pos / size) / size" />
    <mutant id="mutant_7657" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) % writeStart" />
    <mutant id="mutant_8988" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) * (r.length)" />
    <mutant id="mutant_6326" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="pos / size" />
    <mutant id="mutant_7656" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) * writeStart" />
    <mutant id="mutant_8987" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) - (r.length)" />
    <mutant id="mutant_6327" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="(pos / size) % size" />
    <mutant id="mutant_7659" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) + writeStart" />
    <mutant id="mutant_6328" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size) * size" to="(pos / size) - size" />
    <mutant id="mutant_7658" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writePack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor,java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="writeStart" />
    <mutant id="mutant_8989" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(r.sourceStart) + (r.length)" to="(r.sourceStart) % (r.length)" />
    <mutant id="mutant_8980" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="((e.getBeginA()) % d)" />
    <mutant id="mutant_7651" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="(out.length()) % beginOffset" />
    <mutant id="mutant_8982" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="d" />
    <mutant id="mutant_6320" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="size" />
    <mutant id="mutant_7650" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjects(org.eclipse.jgit.internal.storage.pack.PackOutputStream,java.util.List)" from="(out.length()) - beginOffset" to="beginOffset" />
    <mutant id="mutant_8981" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="((e.getBeginA()) + d)" />
    <mutant id="mutant_6318" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="(pos - size)" />
    <mutant id="mutant_6319" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.alignToBlock(long)" from="(pos / size)" to="(pos + size)" />
    <mutant id="mutant_7649" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) + (otp.getOffset())" />
    <mutant id="mutant_6310" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="pos * ofs" />
    <mutant id="mutant_7642" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) / writeStart" />
    <mutant id="mutant_8973" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="e.getBeginA()" />
    <mutant id="mutant_6311" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="pos + ofs" />
    <mutant id="mutant_7641" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) + writeStart" />
    <mutant id="mutant_8972" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="(e.getBeginA()) / d" />
    <mutant id="mutant_6312" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7644" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) * (otp.getOffset())" />
    <mutant id="mutant_8975" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="(e.getBeginA()) + d" />
    <mutant id="mutant_6313" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7643" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8974" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="(e.getBeginA()) % d" />
    <mutant id="mutant_6314" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_7646" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) / (otp.getOffset())" />
    <mutant id="mutant_8977" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="(e.getBeginA()) * d" />
    <mutant id="mutant_6315" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7645" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) % (otp.getOffset())" />
    <mutant id="mutant_8976" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginA()) - d" to="d" />
    <mutant id="mutant_6316" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_7648" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="out.length()" />
    <mutant id="mutant_8979" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="e.getBeginA()" />
    <mutant id="mutant_6317" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7647" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeObjectImpl(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="otp.getOffset()" />
    <mutant id="mutant_8978" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((e.getBeginA()) - d)" to="((e.getBeginA()) / d)" />
    <mutant id="mutant_7640" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="writeStart" />
    <mutant id="mutant_8971" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="e.getBeginB()" />
    <mutant id="mutant_8970" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="(e.getBeginB()) * (r.sourceStart)" />
    <mutant id="mutant_6307" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="pos / ofs" />
    <mutant id="mutant_7639" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) % writeStart" />
    <mutant id="mutant_6308" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="ofs" />
    <mutant id="mutant_7638" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) * writeStart" />
    <mutant id="mutant_8969" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="r.sourceStart" />
    <mutant id="mutant_6309" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="pos % ofs" />
    <mutant id="mutant_7631" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8962" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="(aTail.sourceStart)" />
    <mutant id="mutant_6300" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) / size" />
    <mutant id="mutant_7630" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) / writeStart" />
    <mutant id="mutant_8961" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="((aTail.sourceStart) / (aTail.length))" />
    <mutant id="mutant_6301" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) - size" />
    <mutant id="mutant_7633" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) % (otp.getOffset())" />
    <mutant id="mutant_8964" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="((aTail.sourceStart) * (aTail.length))" />
    <mutant id="mutant_6302" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="size" />
    <mutant id="mutant_7632" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) * (otp.getOffset())" />
    <mutant id="mutant_8963" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="((aTail.sourceStart) - (aTail.length))" />
    <mutant id="mutant_6303" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) + size" />
    <mutant id="mutant_7635" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="otp.getOffset()" />
    <mutant id="mutant_8966" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="(e.getBeginB()) + (r.sourceStart)" />
    <mutant id="mutant_6304" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="(cache.getBlockSize()) / size" />
    <mutant id="mutant_7634" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) / (otp.getOffset())" />
    <mutant id="mutant_8965" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="((aTail.sourceStart) % (aTail.length))" />
    <mutant id="mutant_6305" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size) * size" to="((cache.getBlockSize()) / size) % size" />
    <mutant id="mutant_7637" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="(out.length()) + (otp.getOffset())" />
    <mutant id="mutant_8968" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="(e.getBeginB()) / (r.sourceStart)" />
    <mutant id="mutant_6306" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectType(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos - ofs" to="pos" />
    <mutant id="mutant_7636" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeDeltaObjectDeflate(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(out.length()) - (otp.getOffset())" to="out.length()" />
    <mutant id="mutant_8967" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getBeginB()) - (r.sourceStart)" to="(e.getBeginB()) % (r.sourceStart)" />
    <mutant id="mutant_8960" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.sourceStart) + (aTail.length))" to="(aTail.length)" />
    <mutant id="mutant_7628" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="writeStart" />
    <mutant id="mutant_8959" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="((aTail.resultStart) * (aTail.length))" />
    <mutant id="mutant_7627" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) % writeStart" />
    <mutant id="mutant_8958" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="(aTail.resultStart)" />
    <mutant id="mutant_7629" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) + writeStart" />
    <mutant id="mutant_7620" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="totalWeight" />
    <mutant id="mutant_8951" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="&quot;Reverse&quot; - (super.toString())" />
    <mutant id="mutant_8950" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="&quot;Reverse&quot; % (super.toString())" />
    <mutant id="mutant_7622" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="(totalWeight * bytesPerUnit)" />
    <mutant id="mutant_8953" viable="true" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="&quot;Reverse&quot;" />
    <mutant id="mutant_7621" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="(totalWeight - bytesPerUnit)" />
    <mutant id="mutant_8952" viable="false" in="org.eclipse.jgit.blame.Candidate$ReverseCandidate.toString()" from="&quot;Reverse&quot; + (super.toString())" to="&quot;Reverse&quot; * (super.toString())" />
    <mutant id="mutant_7624" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="(totalWeight / bytesPerUnit)" />
    <mutant id="mutant_8955" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="((aTail.resultStart) / (aTail.length))" />
    <mutant id="mutant_7623" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="bytesPerUnit" />
    <mutant id="mutant_8954" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="(aTail.length)" />
    <mutant id="mutant_7626" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.writeBitmapIndex(java.io.OutputStream)" from="(System.currentTimeMillis()) - writeStart" to="(System.currentTimeMillis()) * writeStart" />
    <mutant id="mutant_8957" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="((aTail.resultStart) % (aTail.length))" />
    <mutant id="mutant_7625" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.singleThreadDeltaSearch(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.internal.storage.pack.ObjectToPack[],int)" from="(totalWeight % bytesPerUnit)" to="(totalWeight + bytesPerUnit)" />
    <mutant id="mutant_8956" viable="true" in="org.eclipse.jgit.blame.Candidate.add(org.eclipse.jgit.blame.Region,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Region)" from="((aTail.resultStart) + (aTail.length))" to="((aTail.resultStart) - (aTail.length))" />
    <mutant id="mutant_6370" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="20" />
    <mutant id="mutant_5040" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_6371" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="(pos + p) - 20" />
    <mutant id="mutant_5041" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_6372" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="(pos - size)" />
    <mutant id="mutant_5042" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_6373" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="(pos + size)" />
    <mutant id="mutant_5043" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_6374" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="size" />
    <mutant id="mutant_5044" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="(p - 20)" />
    <mutant id="mutant_6375" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="(pos % size)" />
    <mutant id="mutant_5034" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="pos + base" />
    <mutant id="mutant_6365" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_7697" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="((totCommits / (minCommits)) / 1)" />
    <mutant id="mutant_5035" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="pos % base" />
    <mutant id="mutant_6366" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="(pos + p) / 20" />
    <mutant id="mutant_7696" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="(minCommits)" />
    <mutant id="mutant_5036" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="base" />
    <mutant id="mutant_6367" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="(pos + p) % 20" />
    <mutant id="mutant_7699" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="1" />
    <mutant id="mutant_5037" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="pos * base" />
    <mutant id="mutant_6368" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="pos + p" />
    <mutant id="mutant_7698" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="((totCommits / (minCommits)) + 1)" to="(totCommits / (minCommits))" />
    <mutant id="mutant_5038" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_6369" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p) + 20" to="(pos + p) * 20" />
    <mutant id="mutant_5039" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7691" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="(totCommits * (minCommits))" />
    <mutant id="mutant_6360" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_7690" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="(result.commitsByOldest.length) * (result.commitStartPos)" />
    <mutant id="mutant_5030" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_6361" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_7693" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="(totCommits + (minCommits))" />
    <mutant id="mutant_5031" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_6362" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_7692" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="totCommits" />
    <mutant id="mutant_5032" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="pos / base" />
    <mutant id="mutant_6363" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7695" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="(totCommits - (minCommits))" />
    <mutant id="mutant_5033" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - base" to="pos" />
    <mutant id="mutant_6364" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_7694" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(totCommits / (minCommits))" to="(totCommits % (minCommits))" />
    <mutant id="mutant_5023" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="p" />
    <mutant id="mutant_6354" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="pos / p" />
    <mutant id="mutant_7686" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="(result.commitsByOldest.length) % (result.commitStartPos)" />
    <mutant id="mutant_5024" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_6355" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="pos - p" />
    <mutant id="mutant_7685" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="result.commitStartPos" />
    <mutant id="mutant_5025" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_6356" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="pos" />
    <mutant id="mutant_7688" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="(result.commitsByOldest.length) + (result.commitStartPos)" />
    <mutant id="mutant_5026" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_6357" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="p" />
    <mutant id="mutant_7687" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="(result.commitsByOldest.length) / (result.commitStartPos)" />
    <mutant id="mutant_5027" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_6358" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="pos % p" />
    <mutant id="mutant_5028" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_6359" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getObjectSize(org.eclipse.jgit.internal.storage.dfs.DfsReader,long)" from="pos + p" to="pos * p" />
    <mutant id="mutant_7689" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.doCommitSelection(int)" from="(result.commitsByOldest.length) - (result.commitStartPos)" to="result.commitsByOldest.length" />
    <mutant id="mutant_5029" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_7680" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="(idxFromStart % minRegionEnd)" />
    <mutant id="mutant_6350" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="b.size()" />
    <mutant id="mutant_7682" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="minRegionEnd" />
    <mutant id="mutant_5020" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_6351" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) * ptr)" />
    <mutant id="mutant_7681" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="(idxFromStart * minRegionEnd)" />
    <mutant id="mutant_5021" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_6352" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="ptr" />
    <mutant id="mutant_7684" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="idxFromStart" />
    <mutant id="mutant_5022" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(pos + p)" to="pos" />
    <mutant id="mutant_6353" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) % ptr)" />
    <mutant id="mutant_7683" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="(idxFromStart / minRegionEnd)" />
    <mutant id="mutant_5012" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="pos * ofs" />
    <mutant id="mutant_6343" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position" />
    <mutant id="mutant_7675" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="mustRegionEnd" />
    <mutant id="mutant_5013" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="pos + ofs" />
    <mutant id="mutant_6344" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="b.start" />
    <mutant id="mutant_7674" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="(idxFromStart + mustRegionEnd)" />
    <mutant id="mutant_5014" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len % p)" />
    <mutant id="mutant_6345" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position * (b.start)" />
    <mutant id="mutant_7677" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="(idxFromStart * mustRegionEnd)" />
    <mutant id="mutant_5015" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="len" />
    <mutant id="mutant_6346" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position / (b.start)" />
    <mutant id="mutant_7676" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="(idxFromStart % mustRegionEnd)" />
    <mutant id="mutant_5016" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="p" />
    <mutant id="mutant_6347" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position + (b.start)" />
    <mutant id="mutant_7679" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - minRegionEnd)" to="(idxFromStart + minRegionEnd)" />
    <mutant id="mutant_5017" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len * p)" />
    <mutant id="mutant_6348" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) + ptr)" />
    <mutant id="mutant_7678" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="idxFromStart" />
    <mutant id="mutant_5018" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len + p)" />
    <mutant id="mutant_6349" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((b.size()) - ptr)" to="((b.size()) / ptr)" />
    <mutant id="mutant_5019" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len / p)" />
    <mutant id="mutant_7671" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="idx" />
    <mutant id="mutant_6340" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) / (12 + 20)" />
    <mutant id="mutant_7670" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="cardinality % idx" />
    <mutant id="mutant_5010" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="ofs" />
    <mutant id="mutant_6341" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) % (12 + 20)" />
    <mutant id="mutant_7673" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="(idxFromStart - mustRegionEnd)" to="(idxFromStart / mustRegionEnd)" />
    <mutant id="mutant_5011" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="pos % ofs" />
    <mutant id="mutant_6342" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(position - (b.start)))" to="position % (b.start)" />
    <mutant id="mutant_7672" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="cardinality / idx" />
    <mutant id="mutant_5009" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="pos / ofs" />
    <mutant id="mutant_5001" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="(findEndOffset(pos)) * pos" />
    <mutant id="mutant_6332" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 * 20)" />
    <mutant id="mutant_7664" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="((b.cardinality()) * (a.cardinality()))" />
    <mutant id="mutant_8995" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="(e.getEndB()) / (r.sourceStart)" />
    <mutant id="mutant_5002" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len % p)" />
    <mutant id="mutant_6333" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 / 20)" />
    <mutant id="mutant_7663" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="((b.cardinality()) / (a.cardinality()))" />
    <mutant id="mutant_8994" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="(e.getEndB()) - (r.sourceStart)" to="e.getEndB()" />
    <mutant id="mutant_5003" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="len" />
    <mutant id="mutant_6334" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="(12 % 20)" />
    <mutant id="mutant_7666" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="b.cardinality()" />
    <mutant id="mutant_8997" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="((editList.size()) / 1)" />
    <mutant id="mutant_5004" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="p" />
    <mutant id="mutant_6335" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(12 + 20)" to="20" />
    <mutant id="mutant_7665" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer$1.compare(org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder,org.eclipse.jgit.lib.BitmapIndex$BitmapBuilder)" from="((b.cardinality()) - (a.cardinality()))" to="((b.cardinality()) % (a.cardinality()))" />
    <mutant id="mutant_8996" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="1" />
    <mutant id="mutant_5005" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len * p)" />
    <mutant id="mutant_6336" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="12 + 20" />
    <mutant id="mutant_7668" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="cardinality" />
    <mutant id="mutant_8999" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="((editList.size()) + 1)" />
    <mutant id="mutant_5006" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len + p)" />
    <mutant id="mutant_6337" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="length" />
    <mutant id="mutant_7667" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="cardinality + idx" />
    <mutant id="mutant_8998" viable="true" in="org.eclipse.jgit.blame.Candidate.blame(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.blame.Candidate,org.eclipse.jgit.blame.Candidate)" from="((editList.size()) - 1)" to="((editList.size()) * 1)" />
    <mutant id="mutant_5007" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(len - p)" to="(len / p)" />
    <mutant id="mutant_6338" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) * (12 + 20)" />
    <mutant id="mutant_5008" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="pos - ofs" to="pos" />
    <mutant id="mutant_6339" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.copyPackBypassCache(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(length) - (12 + 20)" to="(length) + (12 + 20)" />
    <mutant id="mutant_7669" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriterBitmapPreparer.nextSelectionDistance(int,int)" from="cardinality - idx" to="cardinality * idx" />
    <mutant id="mutant_5081" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="(Constants.OBJECT_ID_LENGTH) % 4" />
    <mutant id="mutant_5082" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="(Constants.OBJECT_ID_LENGTH) / 4" />
    <mutant id="mutant_5083" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="4" />
    <mutant id="mutant_5084" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="(Constants.OBJECT_ID_LENGTH) * 4" />
    <mutant id="mutant_5085" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_5086" viable="false" in="?" from="256 * 4" to="256 % 4" />
    <mutant id="mutant_5087" viable="false" in="?" from="256 * 4" to="256 + 4" />
    <mutant id="mutant_5088" viable="false" in="?" from="256 * 4" to="256" />
    <mutant id="mutant_5080" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator.next()" from="(Constants.OBJECT_ID_LENGTH) + 4" to="(Constants.OBJECT_ID_LENGTH) - 4" />
    <mutant id="mutant_5078" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_5079" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="((levelTwo) + (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5070" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="((length) % 20)" />
    <mutant id="mutant_5071" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="((length) / 20)" />
    <mutant id="mutant_5072" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="((length) * 20)" />
    <mutant id="mutant_5073" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="20" />
    <mutant id="mutant_5074" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="levelTwo" />
    <mutant id="mutant_5075" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="((levelTwo) % (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5076" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="((levelTwo) * (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5077" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1$IndexV1Iterator$1.ensureId()" from="((levelTwo) - (Constants.OBJECT_ID_LENGTH))" to="((levelTwo) / (Constants.OBJECT_ID_LENGTH))" />
    <mutant id="mutant_5067" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="(src.offset) * headerCnt" />
    <mutant id="mutant_6398" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize - bs)" />
    <mutant id="mutant_5068" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="((length) + 20)" />
    <mutant id="mutant_6399" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize + bs)" />
    <mutant id="mutant_5069" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.onOpenPack()" from="((length) - 20)" to="length" />
    <mutant id="mutant_6390" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="len" />
    <mutant id="mutant_5060" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="((src.offset) - headerCnt)" />
    <mutant id="mutant_6391" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="pos" />
    <mutant id="mutant_5061" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="((src.offset) * headerCnt)" />
    <mutant id="mutant_6392" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="len / pos" />
    <mutant id="mutant_5062" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="src.offset" />
    <mutant id="mutant_6393" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="len * pos" />
    <mutant id="mutant_5063" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="(src.offset) % headerCnt" />
    <mutant id="mutant_6394" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="len % pos" />
    <mutant id="mutant_5064" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="headerCnt" />
    <mutant id="mutant_6395" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="((int)(len - pos))" to="len + pos" />
    <mutant id="mutant_5065" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="(src.offset) / headerCnt" />
    <mutant id="mutant_6396" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="(wantSize % bs)" />
    <mutant id="mutant_5066" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="(src.offset) + headerCnt" to="(src.offset) - headerCnt" />
    <mutant id="mutant_6397" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.getBitmapIndex(org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(wantSize / bs)" to="bs" />
    <mutant id="mutant_5056" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="src.offset" />
    <mutant id="mutant_6387" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="pos" />
    <mutant id="mutant_5057" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="((src.offset) % headerCnt)" />
    <mutant id="mutant_6388" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="(pos * size)" />
    <mutant id="mutant_5058" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="headerCnt" />
    <mutant id="mutant_6389" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="(pos / size)" />
    <mutant id="mutant_5059" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.copyAsIs2(org.eclipse.jgit.internal.storage.pack.PackOutputStream,org.eclipse.jgit.internal.storage.file.LocalObjectToPack,boolean,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((src.offset) + headerCnt)" to="((src.offset) / headerCnt)" />
    <mutant id="mutant_6380" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="pos / size" />
    <mutant id="mutant_5050" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="(pos - (delta.hdrLen))" />
    <mutant id="mutant_6381" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="(pos / size) % size" />
    <mutant id="mutant_5051" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="pos" />
    <mutant id="mutant_6382" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="(pos / size) - size" />
    <mutant id="mutant_5052" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="delta.hdrLen" />
    <mutant id="mutant_6383" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="(pos / size) + size" />
    <mutant id="mutant_5053" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="(pos / (delta.hdrLen))" />
    <mutant id="mutant_6384" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="(pos - size)" />
    <mutant id="mutant_5054" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="(pos * (delta.hdrLen))" />
    <mutant id="mutant_6385" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="size" />
    <mutant id="mutant_5055" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + (delta.hdrLen))" to="(pos % (delta.hdrLen))" />
    <mutant id="mutant_6386" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos + size)" to="(pos % size)" />
    <mutant id="mutant_5045" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="p" />
    <mutant id="mutant_6376" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="pos" />
    <mutant id="mutant_5046" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="(p / 20)" />
    <mutant id="mutant_6377" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size)" to="(pos * size)" />
    <mutant id="mutant_5047" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="(p % 20)" />
    <mutant id="mutant_6378" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="size" />
    <mutant id="mutant_5048" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="(p * 20)" />
    <mutant id="mutant_6379" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.readOneBlock(long,org.eclipse.jgit.internal.storage.dfs.DfsReader)" from="(pos / size) * size" to="(pos / size) / size" />
    <mutant id="mutant_5049" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.load(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(p + 20)" to="20" />
    <mutant id="mutant_5092" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="((PackIndexV1.IDX_HDR_LEN) % (hdr.length))" />
    <mutant id="mutant_5093" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="((PackIndexV1.IDX_HDR_LEN) + (hdr.length))" />
    <mutant id="mutant_5094" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="PackIndexV1.IDX_HDR_LEN" />
    <mutant id="mutant_5095" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="hdr.length" />
    <mutant id="mutant_5096" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="((PackIndexV1.IDX_HDR_LEN) / (hdr.length))" />
    <mutant id="mutant_5097" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="((PackIndexV1.IDX_HDR_LEN) - (hdr.length))" to="((PackIndexV1.IDX_HDR_LEN) * (hdr.length))" />
    <mutant id="mutant_5098" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="k" />
    <mutant id="mutant_5099" viable="true" in="org.eclipse.jgit.internal.storage.file.PackIndexV1(java.io.InputStream,byte[])" from="(k * 4)" to="(k - 4)" />
    <mutant id="mutant_5090" viable="false" in="?" from="256 * 4" to="256 / 4" />
    <mutant id="mutant_5091" viable="false" in="?" from="256 * 4" to="256 - 4" />
    <mutant id="mutant_5089" viable="false" in="?" from="256 * 4" to="4" />
    <mutant id="mutant_8827" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="(srcCommit.getShortMessage())" />
    <mutant id="mutant_8826" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="(&quot;Revert \&quot;&quot; * (srcCommit.getShortMessage()))" />
    <mutant id="mutant_8829" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) - &quot;\&quot;&quot;" />
    <mutant id="mutant_8828" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) % &quot;\&quot;&quot;" />
    <mutant id="mutant_8821" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) / (srcCommit.getShortMessage())" />
    <mutant id="mutant_8820" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="srcCommit.getShortMessage()" />
    <mutant id="mutant_8823" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="(&quot;Revert \&quot;&quot; / (srcCommit.getShortMessage()))" />
    <mutant id="mutant_8822" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="(&quot;Revert \&quot;&quot; - (srcCommit.getShortMessage()))" />
    <mutant id="mutant_8825" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="(&quot;Revert \&quot;&quot; % (srcCommit.getShortMessage()))" />
    <mutant id="mutant_8824" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage()))" to="&quot;Revert \&quot;&quot;" />
    <mutant id="mutant_8816" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) * (srcCommit.getShortMessage())" />
    <mutant id="mutant_8815" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) % &quot; &quot;)" />
    <mutant id="mutant_8818" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) % (srcCommit.getShortMessage())" />
    <mutant id="mutant_8817" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) - (srcCommit.getShortMessage())" />
    <mutant id="mutant_8819" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;) + (srcCommit.getShortMessage())" to="(srcCommit.getId().abbreviate(7).name()) + &quot; &quot;" />
    <mutant id="mutant_8810" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) / &quot; &quot;)" />
    <mutant id="mutant_8812" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="(srcCommit.getId().abbreviate(7).name())" />
    <mutant id="mutant_8811" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_8814" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) - &quot; &quot;)" />
    <mutant id="mutant_8813" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((srcCommit.getId().abbreviate(7).name()) + &quot; &quot;)" to="((srcCommit.getId().abbreviate(7).name()) * &quot; &quot;)" />
    <mutant id="mutant_8805" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="(refName + &quot;: updating &quot;) / (Constants.HEAD)" />
    <mutant id="mutant_8804" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="(refName + &quot;: updating &quot;) - (Constants.HEAD)" />
    <mutant id="mutant_8807" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="(refName + &quot;: updating &quot;) % (Constants.HEAD)" />
    <mutant id="mutant_8806" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="(refName + &quot;: updating &quot;) * (Constants.HEAD)" />
    <mutant id="mutant_8809" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="Constants.HEAD" />
    <mutant id="mutant_8808" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;) + (Constants.HEAD)" to="refName + &quot;: updating &quot;" />
    <mutant id="mutant_8801" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="(refName * &quot;: updating &quot;)" />
    <mutant id="mutant_8800" viable="false" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="(refName - &quot;: updating &quot;)" />
    <mutant id="mutant_8803" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="&quot;: updating &quot;" />
    <mutant id="mutant_8802" viable="true" in="org.eclipse.jgit.api.ResetCommand.call()" from="(refName + &quot;: updating &quot;)" to="refName" />
    <mutant id="mutant_8870" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_7541" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="((objectsLists[Constants.OBJ_TREE].size()) - (objectsLists[Constants.OBJ_BLOB].size()))" />
    <mutant id="mutant_8872" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) % &quot;^{tree}&quot;)" />
    <mutant id="mutant_6210" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="(s / p)" />
    <mutant id="mutant_7540" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="((objectsLists[Constants.OBJ_TREE].size()) * (objectsLists[Constants.OBJ_BLOB].size()))" />
    <mutant id="mutant_8871" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) / &quot;^{tree}&quot;)" />
    <mutant id="mutant_6208" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="s" />
    <mutant id="mutant_6209" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="p" />
    <mutant id="mutant_7539" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="((objectsLists[Constants.OBJ_TREE].size()) % (objectsLists[Constants.OBJ_BLOB].size()))" />
    <mutant id="mutant_6200" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="(pos % (blockSize))" />
    <mutant id="mutant_7532" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="1" />
    <mutant id="mutant_8863" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="shortMessage" />
    <mutant id="mutant_6201" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize))" to="(pos - (blockSize))" />
    <mutant id="mutant_7531" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="((list.size()) / 1)" />
    <mutant id="mutant_8862" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="(&quot;revert: &quot; / shortMessage)" />
    <mutant id="mutant_6202" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) % (blockSize)" />
    <mutant id="mutant_7534" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="((list.size()) * 1)" />
    <mutant id="mutant_8865" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="(Constants.STASH) * &quot;@{0}&quot;" />
    <mutant id="mutant_6203" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="pos / (blockSize)" />
    <mutant id="mutant_7533" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="((list.size()) % 1)" />
    <mutant id="mutant_8864" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="Constants.STASH" />
    <mutant id="mutant_6204" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) / (blockSize)" />
    <mutant id="mutant_7536" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="((list.size()) + 1)" />
    <mutant id="mutant_8867" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="&quot;@{0}&quot;" />
    <mutant id="mutant_6205" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="blockSize" />
    <mutant id="mutant_7535" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.pruneEdgesFromObjectList(java.util.List)" from="((list.size()) - 1)" to="list.size()" />
    <mutant id="mutant_8866" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="(Constants.STASH) / &quot;@{0}&quot;" />
    <mutant id="mutant_6206" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) + (blockSize)" />
    <mutant id="mutant_7538" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="(objectsLists[Constants.OBJ_TREE].size())" />
    <mutant id="mutant_8869" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="(Constants.STASH) - &quot;@{0}&quot;" />
    <mutant id="mutant_6207" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.toBlockStart(long)" from="(pos / (blockSize)) * (blockSize)" to="(pos / (blockSize)) - (blockSize)" />
    <mutant id="mutant_7537" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size()))" to="((objectsLists[Constants.OBJ_TREE].size()) / (objectsLists[Constants.OBJ_BLOB].size()))" />
    <mutant id="mutant_8868" viable="false" in="?" from="(Constants.STASH) + &quot;@{0}&quot;" to="(Constants.STASH) % &quot;@{0}&quot;" />
    <mutant id="mutant_7530" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8861" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="(&quot;revert: &quot; % shortMessage)" />
    <mutant id="mutant_8860" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="(&quot;revert: &quot; - shortMessage)" />
    <mutant id="mutant_7529" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) + countingStart" />
    <mutant id="mutant_7528" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="countingStart" />
    <mutant id="mutant_8859" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="&quot;revert: &quot;" />
    <mutant id="mutant_7521" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="((want.size()) * (have.size()))" />
    <mutant id="mutant_8852" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) - &quot;.\n&quot;" />
    <mutant id="mutant_7520" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="((want.size()) - (have.size()))" />
    <mutant id="mutant_8851" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) - (srcCommit.getId().getName()))" />
    <mutant id="mutant_7523" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="want.size()" />
    <mutant id="mutant_8854" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) * &quot;.\n&quot;" />
    <mutant id="mutant_7522" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="((want.size()) % (have.size()))" />
    <mutant id="mutant_8853" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="&quot;.\n&quot;" />
    <mutant id="mutant_7525" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) / countingStart" />
    <mutant id="mutant_8856" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())" />
    <mutant id="mutant_7524" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="((want.size()) + (have.size()))" to="((want.size()) / (have.size()))" />
    <mutant id="mutant_8855" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) / &quot;.\n&quot;" />
    <mutant id="mutant_7527" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) % countingStart" />
    <mutant id="mutant_8858" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;revert: &quot; + shortMessage)" to="(&quot;revert: &quot; * shortMessage)" />
    <mutant id="mutant_7526" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) * countingStart" />
    <mutant id="mutant_8857" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) + &quot;.\n&quot;" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName())) % &quot;.\n&quot;" />
    <mutant id="mutant_8850" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) * (srcCommit.getId().getName()))" />
    <mutant id="mutant_7518" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) + countingStart" />
    <mutant id="mutant_8849" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) % (srcCommit.getId().getName()))" />
    <mutant id="mutant_7517" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="countingStart" />
    <mutant id="mutant_8848" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) / (srcCommit.getId().getName()))" />
    <mutant id="mutant_7519" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_7510" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="cnt / 1" />
    <mutant id="mutant_8841" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="((shortMessage + &quot;\n\n&quot;) / &quot;This reverts commit &quot;)" />
    <mutant id="mutant_8840" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="((shortMessage + &quot;\n\n&quot;) * &quot;This reverts commit &quot;)" />
    <mutant id="mutant_7512" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="cnt" />
    <mutant id="mutant_8843" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="&quot;This reverts commit &quot;" />
    <mutant id="mutant_7511" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="cnt * 1" />
    <mutant id="mutant_8842" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="(shortMessage + &quot;\n\n&quot;)" />
    <mutant id="mutant_7514" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) / countingStart" />
    <mutant id="mutant_8845" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="((shortMessage + &quot;\n\n&quot;) - &quot;This reverts commit &quot;)" />
    <mutant id="mutant_7513" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="cnt % 1" />
    <mutant id="mutant_8844" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" to="((shortMessage + &quot;\n\n&quot;) % &quot;This reverts commit &quot;)" />
    <mutant id="mutant_7516" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) % countingStart" />
    <mutant id="mutant_8847" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;)" />
    <mutant id="mutant_7515" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.findObjectsToPack(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.revwalk.ObjectWalk,java.util.Set,java.util.Set)" from="(System.currentTimeMillis()) - countingStart" to="(System.currentTimeMillis()) * countingStart" />
    <mutant id="mutant_8846" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(((shortMessage + &quot;\n\n&quot;) + &quot;This reverts commit &quot;) + (srcCommit.getId().getName()))" to="(srcCommit.getId().getName())" />
    <mutant id="mutant_7507" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="(list.size()) * 1" />
    <mutant id="mutant_8838" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="(shortMessage * &quot;\n\n&quot;)" />
    <mutant id="mutant_7506" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="(list.size()) % 1" />
    <mutant id="mutant_8837" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="(shortMessage / &quot;\n\n&quot;)" />
    <mutant id="mutant_7509" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="cnt - 1" />
    <mutant id="mutant_7508" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.excludeObjects(org.eclipse.jgit.internal.storage.pack.PackWriter$ObjectIdSet)" from="cnt + 1" to="1" />
    <mutant id="mutant_8839" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="(shortMessage - &quot;\n\n&quot;)" />
    <mutant id="mutant_8830" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())" />
    <mutant id="mutant_7501" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="(Constants.OBJ_TAG) * 1" />
    <mutant id="mutant_8832" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) / &quot;\&quot;&quot;" />
    <mutant id="mutant_7500" viable="false" in="?" from="(Constants.OBJ_TAG) + 1" to="(Constants.OBJ_TAG) / 1" />
    <mutant id="mutant_8831" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="&quot;\&quot;&quot;" />
    <mutant id="mutant_7503" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="1" />
    <mutant id="mutant_8834" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="&quot;\n\n&quot;" />
    <mutant id="mutant_7502" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="(list.size()) / 1" />
    <mutant id="mutant_8833" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) + &quot;\&quot;&quot;" to="(&quot;Revert \&quot;&quot; + (srcCommit.getShortMessage())) * &quot;\&quot;&quot;" />
    <mutant id="mutant_7505" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="list.size()" />
    <mutant id="mutant_8836" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="shortMessage" />
    <mutant id="mutant_7504" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.cutDeltaChains(org.eclipse.jgit.util.BlockList)" from="(list.size()) - 1" to="(list.size()) + 1" />
    <mutant id="mutant_8835" viable="false" in="org.eclipse.jgit.api.RevertCommand.call()" from="(shortMessage + &quot;\n\n&quot;)" to="(shortMessage % &quot;\n\n&quot;)" />
    <mutant id="mutant_7581" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="(b.getWeight()) + (a.getWeight())" />
    <mutant id="mutant_6250" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="5 * 1024" />
    <mutant id="mutant_7580" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="(b.getWeight()) * (a.getWeight())" />
    <mutant id="mutant_6251" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="(5 * 1024) / 1024" />
    <mutant id="mutant_7583" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="(b.getWeight()) % (a.getWeight())" />
    <mutant id="mutant_6252" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="(5 * 1024) + 1024" />
    <mutant id="mutant_7582" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="(b.getWeight()) / (a.getWeight())" />
    <mutant id="mutant_6253" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="1024" />
    <mutant id="mutant_7585" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt + 1)" />
    <mutant id="mutant_6254" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="(5 * 1024) % 1024" />
    <mutant id="mutant_7584" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="1" />
    <mutant id="mutant_6244" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="5" />
    <mutant id="mutant_7576" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="(a.isEdge() ? 0 : 1) / (b.isEdge() ? 0 : 1)" />
    <mutant id="mutant_6245" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="(5 - 1024)" />
    <mutant id="mutant_7575" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="(a.isEdge() ? 0 : 1) + (b.isEdge() ? 0 : 1)" />
    <mutant id="mutant_6246" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="1024" />
    <mutant id="mutant_7578" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="(a.isEdge() ? 0 : 1) * (b.isEdge() ? 0 : 1)" />
    <mutant id="mutant_6247" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="(5 / 1024)" />
    <mutant id="mutant_7577" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="(a.isEdge() ? 0 : 1) % (b.isEdge() ? 0 : 1)" />
    <mutant id="mutant_6248" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="(5 + 1024)" />
    <mutant id="mutant_6249" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024)" to="(5 % 1024)" />
    <mutant id="mutant_7579" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(b.getWeight()) - (a.getWeight())" to="b.getWeight()" />
    <mutant id="mutant_7570" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="(a.getPathHash()) &amp; 1" />
    <mutant id="mutant_6240" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="1 - (o.packs.length)" />
    <mutant id="mutant_7572" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="((a.getPathHash()) &amp; 1) / ((b.getPathHash()) &amp; 1)" />
    <mutant id="mutant_6241" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="1 * (o.packs.length)" />
    <mutant id="mutant_7571" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="((a.getPathHash()) &amp; 1) + ((b.getPathHash()) &amp; 1)" />
    <mutant id="mutant_6242" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="o.packs.length" />
    <mutant id="mutant_7574" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isEdge() ? 0 : 1) - (b.isEdge() ? 0 : 1)" to="a.isEdge() ? 0 : 1" />
    <mutant id="mutant_6243" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="1 % (o.packs.length)" />
    <mutant id="mutant_7573" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="((a.getPathHash()) &amp; 1) % ((b.getPathHash()) &amp; 1)" />
    <mutant id="mutant_6233" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="(obj.getOffset()) - ptr" />
    <mutant id="mutant_7565" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="((a.getPathHash()) &gt;&gt;&gt; 1) + ((b.getPathHash()) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_8896" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="((&quot;SimpleTag[&quot; + (name)) / &quot; : &quot;)" />
    <mutant id="mutant_6234" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="(obj.getOffset()) / ptr" />
    <mutant id="mutant_7564" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="((a.getPathHash()) &gt;&gt;&gt; 1) / ((b.getPathHash()) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_8895" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="((&quot;SimpleTag[&quot; + (name)) % &quot; : &quot;)" />
    <mutant id="mutant_6235" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="ptr" />
    <mutant id="mutant_7567" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="((a.getPathHash()) &gt;&gt;&gt; 1) * ((b.getPathHash()) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_8898" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="((&quot;SimpleTag[&quot; + (name)) - &quot; : &quot;)" />
    <mutant id="mutant_6236" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="(obj.getOffset()) % ptr" />
    <mutant id="mutant_7566" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="(a.getPathHash()) &gt;&gt;&gt; 1" />
    <mutant id="mutant_8897" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="((&quot;SimpleTag[&quot; + (name)) * &quot; : &quot;)" />
    <mutant id="mutant_6237" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="(obj.getOffset()) * ptr" />
    <mutant id="mutant_7569" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &amp; 1) - ((b.getPathHash()) &amp; 1)" to="((a.getPathHash()) &amp; 1) * ((b.getPathHash()) &amp; 1)" />
    <mutant id="mutant_6238" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="1 / (o.packs.length)" />
    <mutant id="mutant_7568" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getPathHash()) &gt;&gt;&gt; 1) - ((b.getPathHash()) &gt;&gt;&gt; 1)" to="((a.getPathHash()) &gt;&gt;&gt; 1) % ((b.getPathHash()) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_8899" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="(&quot;SimpleTag[&quot; + (name))" />
    <mutant id="mutant_6239" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsObjDatabase.addPack(org.eclipse.jgit.internal.storage.dfs.DfsPackFile)" from="1 + (o.packs.length)" to="1" />
    <mutant id="mutant_8890" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="(&quot;SimpleTag[&quot; / (name))" />
    <mutant id="mutant_7561" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="(a.getType()) + (b.getType())" />
    <mutant id="mutant_8892" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="(&quot;SimpleTag[&quot; - (name))" />
    <mutant id="mutant_6230" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="((stored.size()) % 2)" />
    <mutant id="mutant_7560" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="(a.getType()) * (b.getType())" />
    <mutant id="mutant_8891" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="(&quot;SimpleTag[&quot; % (name))" />
    <mutant id="mutant_6231" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="stored.size()" />
    <mutant id="mutant_7563" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="(a.getType()) % (b.getType())" />
    <mutant id="mutant_8894" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" to="&quot; : &quot;" />
    <mutant id="mutant_6232" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.open(org.eclipse.jgit.lib.AnyObjectId,int)" from="(obj.getOffset()) + ptr" to="obj.getOffset()" />
    <mutant id="mutant_7562" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="(a.getType()) / (b.getType())" />
    <mutant id="mutant_8893" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="(&quot;SimpleTag[&quot; * (name))" />
    <mutant id="mutant_6222" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="((currBuf.length) / (currPtr))" />
    <mutant id="mutant_7554" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="(a.isDoNotDelta() ? 1 : 0) % (b.isDoNotDelta() ? 1 : 0)" />
    <mutant id="mutant_8885" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="&quot;^{commit}&quot;" />
    <mutant id="mutant_6223" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="((currBuf.length) % (currPtr))" />
    <mutant id="mutant_7553" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="(System.currentTimeMillis()) % sizingStart" />
    <mutant id="mutant_8884" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="Constants.HEAD" />
    <mutant id="mutant_6224" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="currBuf.length" />
    <mutant id="mutant_7556" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="(a.isDoNotDelta() ? 1 : 0) * (b.isDoNotDelta() ? 1 : 0)" />
    <mutant id="mutant_8887" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) % &quot;^{commit}&quot;)" />
    <mutant id="mutant_6225" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="((currBuf.length) * (currPtr))" />
    <mutant id="mutant_7555" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="(a.isDoNotDelta() ? 1 : 0) / (b.isDoNotDelta() ? 1 : 0)" />
    <mutant id="mutant_8886" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) / &quot;^{commit}&quot;)" />
    <mutant id="mutant_6226" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="2" />
    <mutant id="mutant_7558" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="(a.isDoNotDelta() ? 1 : 0) + (b.isDoNotDelta() ? 1 : 0)" />
    <mutant id="mutant_8889" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="(name)" />
    <mutant id="mutant_6227" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="((stored.size()) * 2)" />
    <mutant id="mutant_7557" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.isDoNotDelta() ? 1 : 0) - (b.isDoNotDelta() ? 1 : 0)" to="a.isDoNotDelta() ? 1 : 0" />
    <mutant id="mutant_8888" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(&quot;SimpleTag[&quot; + (name))" to="&quot;SimpleTag[&quot;" />
    <mutant id="mutant_6228" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="((stored.size()) / 2)" />
    <mutant id="mutant_6229" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$Reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((stored.size()) + 2)" to="((stored.size()) - 2)" />
    <mutant id="mutant_7559" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter$3.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="(a.getType()) - (b.getType())" to="a.getType()" />
    <mutant id="mutant_7550" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="(System.currentTimeMillis()) / sizingStart" />
    <mutant id="mutant_8881" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="(entries.size()) + 1" />
    <mutant id="mutant_8880" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="entries.size()" />
    <mutant id="mutant_6220" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="currPtr" />
    <mutant id="mutant_7552" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="System.currentTimeMillis()" />
    <mutant id="mutant_8883" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) * &quot;^{commit}&quot;)" />
    <mutant id="mutant_6221" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.writeNoHash(byte[],int,int)" from="((currBuf.length) - (currPtr))" to="((currBuf.length) + (currPtr))" />
    <mutant id="mutant_7551" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="(System.currentTimeMillis()) * sizingStart" />
    <mutant id="mutant_8882" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((Constants.HEAD) + &quot;^{commit}&quot;)" to="((Constants.HEAD) - &quot;^{commit}&quot;)" />
    <mutant id="mutant_6219" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="((blockSize) * p)" />
    <mutant id="mutant_6211" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="(s * p)" />
    <mutant id="mutant_7543" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="(objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())" />
    <mutant id="mutant_8874" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) - &quot;^{tree}&quot;)" />
    <mutant id="mutant_6212" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="(s - p)" />
    <mutant id="mutant_7542" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) - (edgeObjects.size())" />
    <mutant id="mutant_8873" viable="true" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="&quot;^{tree}&quot;" />
    <mutant id="mutant_6213" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="(s + p)" to="(s % p)" />
    <mutant id="mutant_7545" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) * (edgeObjects.size())" />
    <mutant id="mutant_8876" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="(entries.size()) / 1" />
    <mutant id="mutant_6214" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="((blockSize) % p)" />
    <mutant id="mutant_7544" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) / (edgeObjects.size())" />
    <mutant id="mutant_8875" viable="false" in="org.eclipse.jgit.api.StashApplyCommand.call()" from="((Constants.HEAD) + &quot;^{tree}&quot;)" to="((Constants.HEAD) * &quot;^{tree}&quot;)" />
    <mutant id="mutant_6215" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="p" />
    <mutant id="mutant_7547" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) % (edgeObjects.size())" />
    <mutant id="mutant_8878" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="(entries.size()) % 1" />
    <mutant id="mutant_6216" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="blockSize" />
    <mutant id="mutant_7546" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="((objectsLists[Constants.OBJ_TREE].size()) + (objectsLists[Constants.OBJ_BLOB].size())) + (edgeObjects.size())" to="edgeObjects.size()" />
    <mutant id="mutant_8877" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="1" />
    <mutant id="mutant_6217" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="((blockSize) + p)" />
    <mutant id="mutant_7549" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="(System.currentTimeMillis()) + sizingStart" />
    <mutant id="mutant_6218" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsInserter$PackStream.getOrLoadBlock(long)" from="((blockSize) - p)" to="((blockSize) / p)" />
    <mutant id="mutant_7548" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - sizingStart" to="sizingStart" />
    <mutant id="mutant_8879" viable="true" in="org.eclipse.jgit.api.StashDropCommand.call()" from="(entries.size()) - 1" to="(entries.size()) * 1" />
    <mutant id="mutant_6291" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="((packName) + '.') % (ext.getExtension())" />
    <mutant id="mutant_6292" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="((packName) + '.') * (ext.getExtension())" />
    <mutant id="mutant_6293" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="(packName) + '.'" />
    <mutant id="mutant_6294" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) + size)" />
    <mutant id="mutant_6295" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="size" />
    <mutant id="mutant_6296" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) % size)" />
    <mutant id="mutant_6297" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="(cache.getBlockSize())" />
    <mutant id="mutant_6298" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) * size)" />
    <mutant id="mutant_6290" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="((packName) + '.') - (ext.getExtension())" />
    <mutant id="mutant_6288" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="ext.getExtension()" />
    <mutant id="mutant_6289" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.') + (ext.getExtension())" to="((packName) + '.') / (ext.getExtension())" />
    <mutant id="mutant_6280" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="((getObjectCount()) * (b.getObjectCount()))" />
    <mutant id="mutant_6281" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="((getObjectCount()) % (b.getObjectCount()))" />
    <mutant id="mutant_6282" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="((packName) - '.')" />
    <mutant id="mutant_6283" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="'.'" />
    <mutant id="mutant_6284" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="((packName) / '.')" />
    <mutant id="mutant_6285" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="(packName)" />
    <mutant id="mutant_6286" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="((packName) * '.')" />
    <mutant id="mutant_6287" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.getFileName(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((packName) + '.')" to="((packName) % '.')" />
    <mutant id="mutant_6277" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="((getObjectCount()) + (b.getObjectCount()))" />
    <mutant id="mutant_6278" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="((getObjectCount()) / (b.getObjectCount()))" />
    <mutant id="mutant_6279" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((getObjectCount()) - (b.getObjectCount()))" to="getObjectCount()" />
    <mutant id="mutant_6270" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="(as.category) + (bs.category)" />
    <mutant id="mutant_6271" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="as.category" />
    <mutant id="mutant_6272" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="((b.getLastModified()) % (getLastModified()))" />
    <mutant id="mutant_6273" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="b.getLastModified()" />
    <mutant id="mutant_6274" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="((b.getLastModified()) / (getLastModified()))" />
    <mutant id="mutant_6275" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="((b.getLastModified()) * (getLastModified()))" />
    <mutant id="mutant_6276" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="((b.getLastModified()) - (getLastModified()))" to="((b.getLastModified()) + (getLastModified()))" />
    <mutant id="mutant_6266" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="PackExt.values().length" />
    <mutant id="mutant_7598" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="(System.currentTimeMillis()) + searchStart" />
    <mutant id="mutant_6267" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="(as.category) * (bs.category)" />
    <mutant id="mutant_7597" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="(System.currentTimeMillis()) * searchStart" />
    <mutant id="mutant_6268" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="(as.category) / (bs.category)" />
    <mutant id="mutant_6269" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription.compareTo(org.eclipse.jgit.internal.storage.dfs.DfsPackDescription)" from="(as.category) - (bs.category)" to="(as.category) % (bs.category)" />
    <mutant id="mutant_7599" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="(System.currentTimeMillis()) / searchStart" />
    <mutant id="mutant_7590" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="1" />
    <mutant id="mutant_6260" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="((a.offset) * (b.offset))" />
    <mutant id="mutant_7592" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt / 1)" />
    <mutant id="mutant_6261" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="2" />
    <mutant id="mutant_7591" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt + 1)" />
    <mutant id="mutant_6262" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="((PackExt.values().length) % 2)" />
    <mutant id="mutant_7594" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="cnt" />
    <mutant id="mutant_6263" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="((PackExt.values().length) / 2)" />
    <mutant id="mutant_7593" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt * 1)" />
    <mutant id="mutant_6264" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="((PackExt.values().length) + 2)" />
    <mutant id="mutant_7596" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(System.currentTimeMillis()) - searchStart" to="(System.currentTimeMillis()) % searchStart" />
    <mutant id="mutant_6265" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackDescription(org.eclipse.jgit.internal.storage.dfs.DfsRepositoryDescription,java.lang.String)" from="((PackExt.values().length) * 2)" to="((PackExt.values().length) - 2)" />
    <mutant id="mutant_7595" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt % 1)" />
    <mutant id="mutant_6255" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor(org.eclipse.jgit.internal.storage.dfs.DfsRepository)" from="(5 * 1024) * 1024" to="(5 * 1024) - 1024" />
    <mutant id="mutant_7587" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt * 1)" />
    <mutant id="mutant_6256" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="((a.offset) + (b.offset))" />
    <mutant id="mutant_7586" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt / 1)" />
    <mutant id="mutant_6257" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="((a.offset) / (b.offset))" />
    <mutant id="mutant_7589" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="(cnt % 1)" />
    <mutant id="mutant_6258" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="((a.offset) % (b.offset))" />
    <mutant id="mutant_7588" viable="true" in="org.eclipse.jgit.internal.storage.pack.PackWriter.searchForDeltas(org.eclipse.jgit.lib.ProgressMonitor)" from="(cnt - 1)" to="cnt" />
    <mutant id="mutant_6259" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$3.compare(org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset,org.eclipse.jgit.internal.storage.dfs.DfsPackCompactor$ObjectIdWithOffset)" from="((a.offset) - (b.offset))" to="a.offset" />
    <mutant id="mutant_6299" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsPackFile.blockSize(org.eclipse.jgit.internal.storage.dfs.ReadableChannel)" from="((cache.getBlockSize()) / size)" to="((cache.getBlockSize()) - size)" />
    <mutant id="mutant_8904" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="(id)" />
    <mutant id="mutant_8903" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;)" />
    <mutant id="mutant_8906" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) % &quot;]&quot;)" />
    <mutant id="mutant_8905" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) % (id))" />
    <mutant id="mutant_8908" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" />
    <mutant id="mutant_8907" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) * &quot;]&quot;)" />
    <mutant id="mutant_8909" viable="true" in="org.eclipse.jgit.api.TagCommand.call()" from="((((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id)) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_8900" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) * (id))" />
    <mutant id="mutant_8902" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) - (id))" />
    <mutant id="mutant_8901" viable="false" in="org.eclipse.jgit.api.TagCommand.call()" from="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) + (id))" to="(((&quot;SimpleTag[&quot; + (name)) + &quot; : &quot;) / (id))" />
    <mutant id="mutant_1298" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_1299" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) - ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_1296" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(raw[ptr]) &amp; 255" />
    <mutant id="mutant_1297" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) / ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_1294" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_1295" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) * ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_1292" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_1293" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_1290" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_1291" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_1289" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_1287" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be / bs)" />
    <mutant id="mutant_1288" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be % bs)" />
    <mutant id="mutant_1285" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be * bs)" />
    <mutant id="mutant_1286" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be + bs)" />
    <mutant id="mutant_1283" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="bs" />
    <mutant id="mutant_1284" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="be" />
    <mutant id="mutant_11914" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) % &quot;[\\\\/])&quot;)" />
    <mutant id="mutant_11915" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" />
    <mutant id="mutant_11916" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) * &quot;)?&quot;)" />
    <mutant id="mutant_11917" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) % &quot;)?&quot;)" />
    <mutant id="mutant_11918" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="&quot;)?&quot;" />
    <mutant id="mutant_11919" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) / &quot;)?&quot;)" />
    <mutant id="mutant_11910" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) - &quot;[\\\\/])&quot;)" />
    <mutant id="mutant_11911" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="&quot;[\\\\/])&quot;" />
    <mutant id="mutant_11912" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) / &quot;[\\\\/])&quot;)" />
    <mutant id="mutant_11913" viable="false" in="?" from="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) * &quot;[\\\\/])&quot;)" />
    <mutant id="mutant_11925" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) - &quot;(.+)?&quot;)" />
    <mutant id="mutant_11926" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="&quot;(.+)?&quot;" />
    <mutant id="mutant_11927" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) % &quot;(.+)?&quot;)" />
    <mutant id="mutant_11928" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) - &quot;$&quot;)" />
    <mutant id="mutant_11929" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="&quot;$&quot;" />
    <mutant id="mutant_11920" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;)" />
    <mutant id="mutant_11921" viable="false" in="?" from="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) - &quot;)?&quot;)" />
    <mutant id="mutant_11922" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="(((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;)" />
    <mutant id="mutant_11923" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) * &quot;(.+)?&quot;)" />
    <mutant id="mutant_11924" viable="false" in="?" from="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) / &quot;(.+)?&quot;)" />
    <mutant id="mutant_11903" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="((URIish.USER_HOME_P) / &quot;?&quot;)" />
    <mutant id="mutant_11904" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) % ((URIish.USER_HOME_P) + &quot;?&quot;))" />
    <mutant id="mutant_11905" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) / ((URIish.USER_HOME_P) + &quot;?&quot;))" />
    <mutant id="mutant_11906" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" />
    <mutant id="mutant_11907" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="((URIish.USER_HOME_P) + &quot;?&quot;)" />
    <mutant id="mutant_11908" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) - ((URIish.USER_HOME_P) + &quot;?&quot;))" />
    <mutant id="mutant_11909" viable="false" in="?" from="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;))" to="(((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) * ((URIish.USER_HOME_P) + &quot;?&quot;))" />
    <mutant id="mutant_11900" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="((URIish.USER_HOME_P) - &quot;?&quot;)" />
    <mutant id="mutant_11901" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="(URIish.USER_HOME_P)" />
    <mutant id="mutant_11902" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="((URIish.USER_HOME_P) * &quot;?&quot;)" />
    <mutant id="mutant_10627" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) % &quot; &quot;)" />
    <mutant id="mutant_11958" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="&quot;(file):([\\\\/](?![\\\\/])&quot;" />
    <mutant id="mutant_10628" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="(((type.getSchemeName()) + &quot; &quot;) - enc)" />
    <mutant id="mutant_11959" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="(&quot;^&quot; % &quot;(file):([\\\\/](?![\\\\/])&quot;)" />
    <mutant id="mutant_10629" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="(((type.getSchemeName()) + &quot; &quot;) % enc)" />
    <mutant id="mutant_11950" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) * &quot;)&quot;)" />
    <mutant id="mutant_10620" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="(user) + &quot;:&quot;" />
    <mutant id="mutant_11951" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) - &quot;)&quot;)" />
    <mutant id="mutant_10621" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="pass" />
    <mutant id="mutant_11952" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) - &quot;$&quot;)" />
    <mutant id="mutant_10622" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) / &quot; &quot;)" />
    <mutant id="mutant_11953" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="&quot;$&quot;" />
    <mutant id="mutant_10623" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) - &quot; &quot;)" />
    <mutant id="mutant_11954" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) / &quot;$&quot;)" />
    <mutant id="mutant_10624" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_11955" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) % &quot;$&quot;)" />
    <mutant id="mutant_10625" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) * &quot; &quot;)" />
    <mutant id="mutant_11956" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" />
    <mutant id="mutant_10626" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(type.getSchemeName())" />
    <mutant id="mutant_11957" viable="false" in="?" from="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) + &quot;$&quot;)" to="((((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;) * &quot;$&quot;)" />
    <mutant id="mutant_10638" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="((bin.length) - 2)" />
    <mutant id="mutant_11969" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) / (URIish.PATH_P))" />
    <mutant id="mutant_10639" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="bin.length" />
    <mutant id="mutant_10630" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="(((type.getSchemeName()) + &quot; &quot;) / enc)" />
    <mutant id="mutant_11961" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="(&quot;^&quot; - &quot;(file):([\\\\/](?![\\\\/])&quot;)" />
    <mutant id="mutant_10631" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="(((type.getSchemeName()) + &quot; &quot;) * enc)" />
    <mutant id="mutant_11962" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="(&quot;^&quot; / &quot;(file):([\\\\/](?![\\\\/])&quot;)" />
    <mutant id="mutant_10632" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="((type.getSchemeName()) + &quot; &quot;)" />
    <mutant id="mutant_11963" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="(&quot;^&quot; * &quot;(file):([\\\\/](?![\\\\/])&quot;)" />
    <mutant id="mutant_10633" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + enc)" to="enc" />
    <mutant id="mutant_11964" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) * (URIish.PATH_P))" />
    <mutant id="mutant_10634" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="2" />
    <mutant id="mutant_11965" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) % (URIish.PATH_P))" />
    <mutant id="mutant_10635" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="((bin.length) % 2)" />
    <mutant id="mutant_11966" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" />
    <mutant id="mutant_10636" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="((bin.length) / 2)" />
    <mutant id="mutant_11967" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) - (URIish.PATH_P))" />
    <mutant id="mutant_10637" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.LHEX(byte[])" from="((bin.length) * 2)" to="((bin.length) + 2)" />
    <mutant id="mutant_11968" viable="false" in="?" from="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" to="(URIish.PATH_P)" />
    <mutant id="mutant_11960" viable="false" in="?" from="(&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;)" to="&quot;^&quot;" />
    <mutant id="mutant_10605" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="(advertisedStamp + signedStamp)" />
    <mutant id="mutant_11936" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="(&quot;^&quot; % &quot;([\\\\/]?&quot;)" />
    <mutant id="mutant_10606" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="advertisedStamp" />
    <mutant id="mutant_11937" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="(&quot;^&quot; / &quot;([\\\\/]?&quot;)" />
    <mutant id="mutant_10607" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="(advertisedStamp / signedStamp)" />
    <mutant id="mutant_11938" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="(&quot;^&quot; * &quot;([\\\\/]?&quot;)" />
    <mutant id="mutant_10608" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="(advertisedStamp * signedStamp)" />
    <mutant id="mutant_11939" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="&quot;([\\\\/]?&quot;" />
    <mutant id="mutant_10609" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="signedStamp" />
    <mutant id="mutant_11930" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) / &quot;$&quot;)" />
    <mutant id="mutant_10600" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="(2 / (bytes.length))" />
    <mutant id="mutant_11931" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) * &quot;$&quot;)" />
    <mutant id="mutant_10601" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="(2 + (bytes.length))" />
    <mutant id="mutant_11932" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;)" />
    <mutant id="mutant_10602" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="(2 % (bytes.length))" />
    <mutant id="mutant_11933" viable="false" in="?" from="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) + &quot;$&quot;)" to="(((((((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;) + ((URIish.USER_HOME_P) + &quot;?&quot;)) + &quot;[\\\\/])&quot;) + &quot;)?&quot;) + &quot;(.+)?&quot;) % &quot;$&quot;)" />
    <mutant id="mutant_10603" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="bytes.length" />
    <mutant id="mutant_11934" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="&quot;^&quot;" />
    <mutant id="mutant_10604" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.verify(java.lang.String,java.lang.String,org.eclipse.jgit.lib.Repository,boolean,int)" from="(advertisedStamp - signedStamp)" to="(advertisedStamp % signedStamp)" />
    <mutant id="mutant_11935" viable="false" in="?" from="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" to="(&quot;^&quot; - &quot;([\\\\/]?&quot;)" />
    <mutant id="mutant_10616" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="((user) + &quot;:&quot;) * (pass)" />
    <mutant id="mutant_11947" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) % &quot;)&quot;)" />
    <mutant id="mutant_10617" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="((user) + &quot;:&quot;) % (pass)" />
    <mutant id="mutant_11948" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" />
    <mutant id="mutant_10618" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="((user) + &quot;:&quot;) / (pass)" />
    <mutant id="mutant_11949" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_10619" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;) + (pass)" to="((user) + &quot;:&quot;) - (pass)" />
    <mutant id="mutant_11940" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) - (URIish.PATH_P))" />
    <mutant id="mutant_10610" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) - &quot;:&quot;)" />
    <mutant id="mutant_11941" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) / (URIish.PATH_P))" />
    <mutant id="mutant_10611" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) / &quot;:&quot;)" />
    <mutant id="mutant_11942" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) * (URIish.PATH_P))" />
    <mutant id="mutant_10612" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) * &quot;:&quot;)" />
    <mutant id="mutant_11943" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="(&quot;^&quot; + &quot;([\\\\/]?&quot;)" />
    <mutant id="mutant_10613" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) % &quot;:&quot;)" />
    <mutant id="mutant_11944" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="(URIish.PATH_P)" />
    <mutant id="mutant_10614" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_11945" viable="false" in="?" from="((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P))" to="((&quot;^&quot; + &quot;([\\\\/]?&quot;) % (URIish.PATH_P))" />
    <mutant id="mutant_10615" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Basic.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(user)" />
    <mutant id="mutant_11946" viable="false" in="?" from="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) + &quot;)&quot;)" to="(((&quot;^&quot; + &quot;([\\\\/]?&quot;) + (URIish.PATH_P)) / &quot;)&quot;)" />
    <mutant id="mutant_2608" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="2" />
    <mutant id="mutant_2609" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="position" />
    <mutant id="mutant_3939" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i / 2)" />
    <mutant id="mutant_10542" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="&quot;git-&quot; - cmdName" />
    <mutant id="mutant_11873" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="((&quot;^&quot; + (URIish.SCHEME_P)) * &quot;(?:&quot;)" />
    <mutant id="mutant_10543" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="&quot;git-&quot; % cmdName" />
    <mutant id="mutant_11874" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) * (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10544" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="(command.length())" />
    <mutant id="mutant_11875" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) / (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10545" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="1" />
    <mutant id="mutant_11876" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) - (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10546" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="((command.length()) / 1)" />
    <mutant id="mutant_11877" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="(URIish.OPT_USER_PWD_P)" />
    <mutant id="mutant_10547" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="((command.length()) % 1)" />
    <mutant id="mutant_11878" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) % (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10548" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="((command.length()) * 1)" />
    <mutant id="mutant_11879" viable="false" in="?" from="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" to="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" />
    <mutant id="mutant_10549" viable="true" in="org.eclipse.jgit.transport.DaemonService.handles(java.lang.String)" from="((command.length()) + 1)" to="((command.length()) - 1)" />
    <mutant id="mutant_3930" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="j * 1" />
    <mutant id="mutant_11870" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="(&quot;^&quot; + (URIish.SCHEME_P))" />
    <mutant id="mutant_10540" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="&quot;git-&quot; / cmdName" />
    <mutant id="mutant_11871" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="&quot;(?:&quot;" />
    <mutant id="mutant_10541" viable="false" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="&quot;git-&quot; * cmdName" />
    <mutant id="mutant_11872" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="((&quot;^&quot; + (URIish.SCHEME_P)) / &quot;(?:&quot;)" />
    <mutant id="mutant_2606" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position - 1)" />
    <mutant id="mutant_3938" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i - 2" />
    <mutant id="mutant_2607" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position / 2)" />
    <mutant id="mutant_3937" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i * 2" />
    <mutant id="mutant_2604" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position % 1)" />
    <mutant id="mutant_3936" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i % 2" />
    <mutant id="mutant_2605" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position * 1)" />
    <mutant id="mutant_3935" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i" />
    <mutant id="mutant_2602" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="1" />
    <mutant id="mutant_3934" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="2" />
    <mutant id="mutant_2603" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="position" />
    <mutant id="mutant_3933" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 2" to="i / 2" />
    <mutant id="mutant_2600" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="position / 7" />
    <mutant id="mutant_3932" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="j / 1" />
    <mutant id="mutant_2601" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position / 1)" />
    <mutant id="mutant_3931" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="j + 1" />
    <mutant id="mutant_3929" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="j" />
    <mutant id="mutant_3928" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="j % 1" />
    <mutant id="mutant_10553" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="((command.length()) % 1)" />
    <mutant id="mutant_11884" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(URIish.HOST_P)" />
    <mutant id="mutant_10554" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="((command.length()) * 1)" />
    <mutant id="mutant_11885" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) % (URIish.HOST_P))" />
    <mutant id="mutant_10555" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="((command.length()) - 1)" />
    <mutant id="mutant_11886" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) / (URIish.OPT_PORT_P))" />
    <mutant id="mutant_10556" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="(&quot;ERR &quot; % (e.getMessage()))" />
    <mutant id="mutant_11887" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) * (URIish.OPT_PORT_P))" />
    <mutant id="mutant_10557" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="&quot;ERR &quot;" />
    <mutant id="mutant_11888" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) % (URIish.OPT_PORT_P))" />
    <mutant id="mutant_10558" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="(e.getMessage())" />
    <mutant id="mutant_11889" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" />
    <mutant id="mutant_10559" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="(&quot;ERR &quot; * (e.getMessage()))" />
    <mutant id="mutant_11880" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10550" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="command.length()" />
    <mutant id="mutant_11881" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) / (URIish.HOST_P))" />
    <mutant id="mutant_10551" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="1" />
    <mutant id="mutant_11882" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) - (URIish.HOST_P))" />
    <mutant id="mutant_10552" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((command.length()) + 1)" to="((command.length()) / 1)" />
    <mutant id="mutant_11883" viable="false" in="?" from="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) * (URIish.HOST_P))" />
    <mutant id="mutant_3927" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="j - 1" to="1" />
    <mutant id="mutant_3926" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="(pnum / 1)" />
    <mutant id="mutant_3925" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="(pnum + 1)" />
    <mutant id="mutant_3924" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="(pnum * 1)" />
    <mutant id="mutant_3923" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="pnum" />
    <mutant id="mutant_3922" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="(pnum % 1)" />
    <mutant id="mutant_3921" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(pnum - 1)" to="1" />
    <mutant id="mutant_3920" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="((j - i) % 1)" />
    <mutant id="mutant_10528" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="(&quot;Git-Daemon-Client &quot; * (peer.toString()))" />
    <mutant id="mutant_11859" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) * &quot;)&quot;" />
    <mutant id="mutant_10529" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="(&quot;Git-Daemon-Client &quot; / (peer.toString()))" />
    <mutant id="mutant_3919" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="((j - i) + 1)" />
    <mutant id="mutant_3918" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="((j - i) / 1)" />
    <mutant id="mutant_3917" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="(j - i)" />
    <mutant id="mutant_10520" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="&quot;git-&quot; % name" />
    <mutant id="mutant_11851" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) / (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_10521" viable="true" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="&quot;git-&quot;" />
    <mutant id="mutant_11852" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) * (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_10522" viable="true" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="name" />
    <mutant id="mutant_11853" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" />
    <mutant id="mutant_10523" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="&quot;git-&quot; - name" />
    <mutant id="mutant_11854" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) % (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_10524" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="&quot;git-&quot; * name" />
    <mutant id="mutant_11855" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="(URIish.RELATIVE_PATH_P)" />
    <mutant id="mutant_10525" viable="false" in="org.eclipse.jgit.transport.Daemon.getService(java.lang.String)" from="&quot;git-&quot; + name" to="&quot;git-&quot; / name" />
    <mutant id="mutant_11856" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) / &quot;)&quot;" />
    <mutant id="mutant_10526" viable="true" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="peer.toString()" />
    <mutant id="mutant_11857" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)" />
    <mutant id="mutant_10527" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="(&quot;Git-Daemon-Client &quot; % (peer.toString()))" />
    <mutant id="mutant_11858" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) - &quot;)&quot;" />
    <mutant id="mutant_11850" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P))" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) - (URIish.RELATIVE_PATH_P))" />
    <mutant id="mutant_3916" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="1" />
    <mutant id="mutant_3915" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((j - i) - 1)" to="((j - i) * 1)" />
    <mutant id="mutant_3914" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="(j % i)" />
    <mutant id="mutant_3913" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="(j / i)" />
    <mutant id="mutant_3912" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="(j + i)" />
    <mutant id="mutant_3911" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="i" />
    <mutant id="mutant_3910" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="j" />
    <mutant id="mutant_10539" viable="true" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="cmdName" />
    <mutant id="mutant_3909" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(j - i)" to="(j * i)" />
    <mutant id="mutant_3908" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_3907" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_3906" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_10531" viable="true" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="&quot;Git-Daemon-Client &quot;" />
    <mutant id="mutant_11862" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="(&quot;^&quot; - (URIish.SCHEME_P))" />
    <mutant id="mutant_10532" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="((daemon.getTimeout()) / 1000)" />
    <mutant id="mutant_11863" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="&quot;^&quot;" />
    <mutant id="mutant_10533" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="((daemon.getTimeout()) - 1000)" />
    <mutant id="mutant_11864" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="(URIish.SCHEME_P)" />
    <mutant id="mutant_10534" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="1000" />
    <mutant id="mutant_11865" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="(&quot;^&quot; * (URIish.SCHEME_P))" />
    <mutant id="mutant_10535" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="((daemon.getTimeout()) % 1000)" />
    <mutant id="mutant_11866" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="(&quot;^&quot; % (URIish.SCHEME_P))" />
    <mutant id="mutant_10536" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="((daemon.getTimeout()) + 1000)" />
    <mutant id="mutant_11867" viable="false" in="?" from="(&quot;^&quot; + (URIish.SCHEME_P))" to="(&quot;^&quot; / (URIish.SCHEME_P))" />
    <mutant id="mutant_10537" viable="true" in="org.eclipse.jgit.transport.DaemonClient.execute(java.net.Socket)" from="((daemon.getTimeout()) * 1000)" to="daemon.getTimeout()" />
    <mutant id="mutant_11868" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="((&quot;^&quot; + (URIish.SCHEME_P)) % &quot;(?:&quot;)" />
    <mutant id="mutant_10538" viable="true" in="org.eclipse.jgit.transport.DaemonService(java.lang.String,java.lang.String)" from="&quot;git-&quot; + cmdName" to="&quot;git-&quot;" />
    <mutant id="mutant_11869" viable="false" in="?" from="((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;)" to="((&quot;^&quot; + (URIish.SCHEME_P)) - &quot;(?:&quot;)" />
    <mutant id="mutant_11860" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_10530" viable="false" in="org.eclipse.jgit.transport.Daemon.startClient(java.net.Socket)" from="(&quot;Git-Daemon-Client &quot; + (peer.toString()))" to="(&quot;Git-Daemon-Client &quot; - (peer.toString()))" />
    <mutant id="mutant_11861" viable="false" in="?" from="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) + &quot;)&quot;" to="(((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;) + (URIish.RELATIVE_PATH_P)) % &quot;)&quot;" />
    <mutant id="mutant_3905" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_3904" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_3903" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_3902" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_3901" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_3900" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_10586" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="((Long.toString(timestamp)) % &quot;-&quot;)" />
    <mutant id="mutant_10587" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="((Long.toString(timestamp)) / &quot;-&quot;)" />
    <mutant id="mutant_10588" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="((Long.toString(timestamp)) - &quot;-&quot;)" />
    <mutant id="mutant_10589" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="&quot;-&quot;" />
    <mutant id="mutant_1311" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi % 1)" />
    <mutant id="mutant_2642" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position - 4)" />
    <mutant id="mutant_3974" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_1312" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi - 1)" />
    <mutant id="mutant_2643" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position % 5" />
    <mutant id="mutant_3973" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_2640" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position * 4)" />
    <mutant id="mutant_3972" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_10580" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="(path + &quot;:&quot;) % (String.valueOf(timestamp))" />
    <mutant id="mutant_1310" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="bi" />
    <mutant id="mutant_2641" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position / 4)" />
    <mutant id="mutant_3971" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_10581" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="path + &quot;:&quot;" />
    <mutant id="mutant_3970" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_10582" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="(path + &quot;:&quot;) - (String.valueOf(timestamp))" />
    <mutant id="mutant_10583" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="(path + &quot;:&quot;) / (String.valueOf(timestamp))" />
    <mutant id="mutant_10584" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="(path + &quot;:&quot;) * (String.valueOf(timestamp))" />
    <mutant id="mutant_10585" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;) + (String.valueOf(timestamp))" to="String.valueOf(timestamp)" />
    <mutant id="mutant_1319" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="bs" />
    <mutant id="mutant_1317" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="ae" />
    <mutant id="mutant_2648" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position - 5" />
    <mutant id="mutant_1318" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae % as)" />
    <mutant id="mutant_2649" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="'0' * (mode &amp; 7)" />
    <mutant id="mutant_3979" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l * i)" />
    <mutant id="mutant_1315" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="as" />
    <mutant id="mutant_2646" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position / 5" />
    <mutant id="mutant_3978" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="i" />
    <mutant id="mutant_1316" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae / as)" />
    <mutant id="mutant_2647" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="5" />
    <mutant id="mutant_3977" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l + i)" />
    <mutant id="mutant_1313" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae * as)" />
    <mutant id="mutant_2644" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position" />
    <mutant id="mutant_3976" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l / i)" />
    <mutant id="mutant_1314" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae + as)" />
    <mutant id="mutant_2645" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position * 5" />
    <mutant id="mutant_3975" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="l" />
    <mutant id="mutant_10597" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="(Long.toString(timestamp)) + &quot;-&quot;" />
    <mutant id="mutant_10598" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="2" />
    <mutant id="mutant_10599" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(byte[])" from="(2 * (bytes.length))" to="(2 - (bytes.length))" />
    <mutant id="mutant_1300" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) % ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2631" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="position" />
    <mutant id="mutant_3963" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_1301" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai % 1)" />
    <mutant id="mutant_2632" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="3" />
    <mutant id="mutant_3962" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_10590" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="((Long.toString(timestamp)) * &quot;-&quot;)" />
    <mutant id="mutant_3961" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_10591" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;)" to="(Long.toString(timestamp))" />
    <mutant id="mutant_2630" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position - 2)" />
    <mutant id="mutant_3960" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_10592" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="((Long.toString(timestamp)) + &quot;-&quot;) / (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" />
    <mutant id="mutant_10593" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="((Long.toString(timestamp)) + &quot;-&quot;) - (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" />
    <mutant id="mutant_10594" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="((Long.toString(timestamp)) + &quot;-&quot;) % (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" />
    <mutant id="mutant_10595" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac)" />
    <mutant id="mutant_10596" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="((Long.toString(timestamp)) + &quot;-&quot;) + (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" to="((Long.toString(timestamp)) + &quot;-&quot;) * (org.eclipse.jgit.transport.HMACSHA1NonceGenerator.toHex(rawHmac))" />
    <mutant id="mutant_1308" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="1" />
    <mutant id="mutant_2639" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="4" />
    <mutant id="mutant_1309" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi * 1)" />
    <mutant id="mutant_1306" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai - 1)" />
    <mutant id="mutant_2637" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position % 4)" />
    <mutant id="mutant_3969" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_1307" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi / 1)" />
    <mutant id="mutant_2638" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="position" />
    <mutant id="mutant_3968" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_1304" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai / 1)" />
    <mutant id="mutant_2635" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position / 3)" />
    <mutant id="mutant_3967" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_1305" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai * 1)" />
    <mutant id="mutant_2636" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position - 3)" />
    <mutant id="mutant_3966" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_1302" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="1" />
    <mutant id="mutant_2633" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position % 3)" />
    <mutant id="mutant_3965" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_1303" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="ai" />
    <mutant id="mutant_2634" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position * 3)" />
    <mutant id="mutant_3964" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_10564" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (e.getMessage())) - &quot;\n&quot;)" />
    <mutant id="mutant_11895" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" />
    <mutant id="mutant_10565" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (e.getMessage())) % &quot;\n&quot;)" />
    <mutant id="mutant_11896" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_10566" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_11897" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) % &quot;(&quot;)" />
    <mutant id="mutant_10567" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (e.getMessage())) / &quot;\n&quot;)" />
    <mutant id="mutant_11898" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="((URIish.USER_HOME_P) % &quot;?&quot;)" />
    <mutant id="mutant_10568" viable="true" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="&quot;jgit fetch &quot;" />
    <mutant id="mutant_11899" viable="false" in="?" from="((URIish.USER_HOME_P) + &quot;?&quot;)" to="&quot;?&quot;" />
    <mutant id="mutant_10569" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="(&quot;jgit fetch &quot; - (transport.uri))" />
    <mutant id="mutant_2620" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="position" />
    <mutant id="mutant_3952" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="((k - i) / 2)" />
    <mutant id="mutant_2621" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="4" />
    <mutant id="mutant_3951" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="2" />
    <mutant id="mutant_3950" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="(k / i)" />
    <mutant id="mutant_11890" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) - (URIish.OPT_PORT_P))" />
    <mutant id="mutant_10560" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="(&quot;ERR &quot; - (e.getMessage()))" />
    <mutant id="mutant_11891" viable="false" in="?" from="(((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P))" to="(URIish.OPT_PORT_P)" />
    <mutant id="mutant_10561" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="(&quot;ERR &quot; + (e.getMessage()))" to="(&quot;ERR &quot; / (e.getMessage()))" />
    <mutant id="mutant_11892" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) * &quot;(&quot;)" />
    <mutant id="mutant_10562" viable="true" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="(&quot;ERR &quot; + (e.getMessage()))" />
    <mutant id="mutant_11893" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) / &quot;(&quot;)" />
    <mutant id="mutant_10563" viable="false" in="org.eclipse.jgit.transport.DaemonService.execute(org.eclipse.jgit.transport.DaemonClient,java.lang.String)" from="((&quot;ERR &quot; + (e.getMessage())) + &quot;\n&quot;)" to="((&quot;ERR &quot; + (e.getMessage())) * &quot;\n&quot;)" />
    <mutant id="mutant_11894" viable="false" in="?" from="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) + &quot;(&quot;)" to="((((((&quot;^&quot; + (URIish.SCHEME_P)) + &quot;(?:&quot;) + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + (URIish.OPT_PORT_P)) - &quot;(&quot;)" />
    <mutant id="mutant_2628" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position % 2)" />
    <mutant id="mutant_2629" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position * 2)" />
    <mutant id="mutant_3959" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_2626" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="2" />
    <mutant id="mutant_3958" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_2627" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="position" />
    <mutant id="mutant_3957" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_2624" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="position - 4" />
    <mutant id="mutant_3956" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="((k - i) % 2)" />
    <mutant id="mutant_2625" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position / 2)" />
    <mutant id="mutant_3955" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="(k - i)" />
    <mutant id="mutant_2622" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="position * 4" />
    <mutant id="mutant_3954" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="((k - i) + 2)" />
    <mutant id="mutant_2623" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="position / 4" />
    <mutant id="mutant_3953" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((k - i) - 2)" to="((k - i) * 2)" />
    <mutant id="mutant_2619" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 4" to="position % 4" />
    <mutant id="mutant_10575" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="(path - &quot;:&quot;)" />
    <mutant id="mutant_10576" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="path" />
    <mutant id="mutant_10577" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="(path % &quot;:&quot;)" />
    <mutant id="mutant_10578" viable="true" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10579" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="(path / &quot;:&quot;)" />
    <mutant id="mutant_3941" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="i" />
    <mutant id="mutant_2610" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position % 2)" />
    <mutant id="mutant_3940" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="2" />
    <mutant id="mutant_10570" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="(&quot;jgit fetch &quot; / (transport.uri))" />
    <mutant id="mutant_10571" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="(&quot;jgit fetch &quot; * (transport.uri))" />
    <mutant id="mutant_10572" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="(&quot;jgit fetch &quot; % (transport.uri))" />
    <mutant id="mutant_10573" viable="false" in="org.eclipse.jgit.transport.FetchProcess.fetchObjects(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;jgit fetch &quot; + (transport.uri))" to="transport.uri" />
    <mutant id="mutant_10574" viable="false" in="org.eclipse.jgit.transport.HMACSHA1NonceGenerator.createNonce(org.eclipse.jgit.lib.Repository,long)" from="(path + &quot;:&quot;)" to="(path * &quot;:&quot;)" />
    <mutant id="mutant_2617" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position / 3)" />
    <mutant id="mutant_3949" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="(k * i)" />
    <mutant id="mutant_2618" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position - 3)" />
    <mutant id="mutant_3948" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="(k % i)" />
    <mutant id="mutant_2615" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position % 3)" />
    <mutant id="mutant_3947" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="i" />
    <mutant id="mutant_2616" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position * 3)" />
    <mutant id="mutant_3946" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="(k + i)" />
    <mutant id="mutant_2613" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="position" />
    <mutant id="mutant_3945" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(k - i)" to="k" />
    <mutant id="mutant_2614" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="3" />
    <mutant id="mutant_3944" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i - 2)" />
    <mutant id="mutant_2611" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position * 2)" />
    <mutant id="mutant_3943" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i * 2)" />
    <mutant id="mutant_2612" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position - 2)" />
    <mutant id="mutant_3942" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 2)" to="(i % 2)" />
    <mutant id="mutant_2690" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="10" />
    <mutant id="mutant_1355" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) / (c &amp; 255)" />
    <mutant id="mutant_2686" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="(estIndexSize % 10)" />
    <mutant id="mutant_1356" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) - (c &amp; 255)" />
    <mutant id="mutant_2687" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="(estIndexSize + 10)" />
    <mutant id="mutant_1353" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_2684" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="(&quot;Do not clone this kind of filter: &quot; % (getClass().getName()))" />
    <mutant id="mutant_1354" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_2685" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="(estIndexSize / 10)" />
    <mutant id="mutant_1351" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_2682" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="(&quot;Do not clone this kind of filter: &quot; - (getClass().getName()))" />
    <mutant id="mutant_1352" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_2683" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="getClass().getName()" />
    <mutant id="mutant_2680" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="(&quot;Do not clone this kind of filter: &quot; / (getClass().getName()))" />
    <mutant id="mutant_1350" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_2681" viable="false" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="(&quot;Do not clone this kind of filter: &quot; * (getClass().getName()))" />
    <mutant id="mutant_1359" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_1357" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) * (c &amp; 255)" />
    <mutant id="mutant_2688" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="(estIndexSize - 10)" />
    <mutant id="mutant_1358" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) % (c &amp; 255)" />
    <mutant id="mutant_2689" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estIndexSize * 10)" to="estIndexSize" />
    <mutant id="mutant_1344" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="1" />
    <mutant id="mutant_2675" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="((count) + (stepSize))" />
    <mutant id="mutant_1345" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi * 1)" />
    <mutant id="mutant_2676" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="((count) - (stepSize))" />
    <mutant id="mutant_1342" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai - 1)" />
    <mutant id="mutant_2673" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="((count) / (stepSize))" />
    <mutant id="mutant_1343" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi / 1)" />
    <mutant id="mutant_2674" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="(stepSize)" />
    <mutant id="mutant_1340" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai / 1)" />
    <mutant id="mutant_2671" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="total % 100" />
    <mutant id="mutant_1341" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai * 1)" />
    <mutant id="mutant_2672" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="total + 100" />
    <mutant id="mutant_2670" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="total" />
    <mutant id="mutant_1348" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi - 1)" />
    <mutant id="mutant_2679" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.clone()" from="(&quot;Do not clone this kind of filter: &quot; + (getClass().getName()))" to="&quot;Do not clone this kind of filter: &quot;" />
    <mutant id="mutant_1349" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_1346" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="bi" />
    <mutant id="mutant_2677" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="(count)" />
    <mutant id="mutant_1347" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi % 1)" />
    <mutant id="mutant_2678" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter.include(org.eclipse.jgit.treewalk.TreeWalk)" from="((count) % (stepSize))" to="((count) * (stepSize))" />
    <mutant id="mutant_1333" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) / ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2664" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="(p - k)" />
    <mutant id="mutant_3996" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="((l - i) + 1)" />
    <mutant id="mutant_1334" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_2665" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="(p / k)" />
    <mutant id="mutant_3995" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="((l - i) * 1)" />
    <mutant id="mutant_1331" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) * ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2662" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="p" />
    <mutant id="mutant_3994" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="((l - i) / 1)" />
    <mutant id="mutant_1332" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(raw[ptr]) &amp; 255" />
    <mutant id="mutant_2663" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="(p % k)" />
    <mutant id="mutant_3993" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="1" />
    <mutant id="mutant_2660" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="(tmp.length) / p" />
    <mutant id="mutant_3992" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l % i)" />
    <mutant id="mutant_1330" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_2661" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="k" />
    <mutant id="mutant_3991" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l * i)" />
    <mutant id="mutant_3990" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="i" />
    <mutant id="mutant_1339" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="ai" />
    <mutant id="mutant_1337" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai % 1)" />
    <mutant id="mutant_2668" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="total * 100" />
    <mutant id="mutant_1338" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="1" />
    <mutant id="mutant_2669" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="total - 100" />
    <mutant id="mutant_3999" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="l - 1" to="l" />
    <mutant id="mutant_1335" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) - ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2666" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(p + k)" to="(p * k)" />
    <mutant id="mutant_3998" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="(l - i)" />
    <mutant id="mutant_1336" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) % ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2667" viable="true" in="org.eclipse.jgit.lib.IndexDiff$ProgressReportingFilter(org.eclipse.jgit.lib.ProgressMonitor,int)" from="total / 100" to="100" />
    <mutant id="mutant_3997" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="((l - i) - 1)" to="((l - i) % 1)" />
    <mutant id="mutant_1322" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be + bs)" />
    <mutant id="mutant_2653" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="'0'" />
    <mutant id="mutant_3985" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1323" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be / bs)" />
    <mutant id="mutant_2654" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="'0' % (mode &amp; 7)" />
    <mutant id="mutant_3984" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1320" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="be" />
    <mutant id="mutant_2651" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="'0' - (mode &amp; 7)" />
    <mutant id="mutant_3983" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_1321" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be * bs)" />
    <mutant id="mutant_2652" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="mode &amp; 7" />
    <mutant id="mutant_3982" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_3981" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2650" viable="false" in="org.eclipse.jgit.lib.FileMode(int,int)" from="((byte)('0' + (mode &amp; 7)))" to="'0' / (mode &amp; 7)" />
    <mutant id="mutant_3980" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l % i)" />
    <mutant id="mutant_1328" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_2659" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="tmp.length" />
    <mutant id="mutant_1329" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_1326" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_2657" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="p" />
    <mutant id="mutant_3989" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l + i)" />
    <mutant id="mutant_1327" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_2658" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="(tmp.length) + p" />
    <mutant id="mutant_3988" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="(l / i)" />
    <mutant id="mutant_1324" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be % bs)" />
    <mutant id="mutant_2655" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="(tmp.length) * p" />
    <mutant id="mutant_3987" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(l - i)" to="l" />
    <mutant id="mutant_1325" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$4.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_2656" viable="true" in="org.eclipse.jgit.lib.FileMode(int,int)" from="(tmp.length) - p" to="(tmp.length) % p" />
    <mutant id="mutant_3986" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1399" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="1" />
    <mutant id="mutant_1397" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="e.endA" />
    <mutant id="mutant_1398" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.endA) + 1)" to="((e.endA) * 1)" />
    <mutant id="mutant_1395" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="((e.beginB) / 1)" />
    <mutant id="mutant_1396" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="((e.beginB) - 1)" />
    <mutant id="mutant_1393" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="((e.beginB) % 1)" />
    <mutant id="mutant_1394" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="e.beginB" />
    <mutant id="mutant_1391" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="((e.beginB) * 1)" />
    <mutant id="mutant_1392" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginB) + 1)" to="1" />
    <mutant id="mutant_1390" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="e.beginA" />
    <mutant id="mutant_1388" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="((e.beginA) - 1)" />
    <mutant id="mutant_1389" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="((e.beginA) % 1)" />
    <mutant id="mutant_1386" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="((e.beginA) / 1)" />
    <mutant id="mutant_1387" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="((e.beginA) * 1)" />
    <mutant id="mutant_1384" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="(lno / 2)" />
    <mutant id="mutant_1385" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.reduceCommonStartEnd(org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.Edit)" from="((e.beginA) + 1)" to="1" />
    <mutant id="mutant_1382" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="(lno - 2)" />
    <mutant id="mutant_1383" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="lno" />
    <mutant id="mutant_1380" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="2" />
    <mutant id="mutant_1381" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="(lno % 2)" />
    <mutant id="mutant_1377" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="(lno / 1)" />
    <mutant id="mutant_1378" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="lno" />
    <mutant id="mutant_1375" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="(lno * 1)" />
    <mutant id="mutant_1376" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="(lno - 1)" />
    <mutant id="mutant_1373" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="(lno % 1)" />
    <mutant id="mutant_1374" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 1)" to="1" />
    <mutant id="mutant_1371" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="(idx * 2)" />
    <mutant id="mutant_1372" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="(idx - 2)" />
    <mutant id="mutant_1379" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.hash(org.eclipse.jgit.diff.RawText,int)" from="(lno + 2)" to="(lno * 2)" />
    <mutant id="mutant_1370" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="(idx / 2)" />
    <mutant id="mutant_1366" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="(lines.size()) % 2" />
    <mutant id="mutant_2697" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="estWorkTreeSize" />
    <mutant id="mutant_1367" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="2" />
    <mutant id="mutant_2698" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="(estWorkTreeSize % 10)" />
    <mutant id="mutant_1364" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="lines.size()" />
    <mutant id="mutant_2695" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="((estIndexSize * 10) + 9)" />
    <mutant id="mutant_1365" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="(lines.size()) + 2" />
    <mutant id="mutant_2696" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="(estIndexSize * 10)" />
    <mutant id="mutant_1362" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="2" />
    <mutant id="mutant_2693" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="((estIndexSize * 10) * 9)" />
    <mutant id="mutant_1363" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="(lines.size()) / 2" />
    <mutant id="mutant_2694" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="9" />
    <mutant id="mutant_1360" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$5.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="c &amp; 255" />
    <mutant id="mutant_2691" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="((estIndexSize * 10) % 9)" />
    <mutant id="mutant_1361" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(lines.size()) - 2" to="(lines.size()) * 2" />
    <mutant id="mutant_2692" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="((estIndexSize * 10) / 9)" to="((estIndexSize * 10) - 9)" />
    <mutant id="mutant_1368" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="(idx % 2)" />
    <mutant id="mutant_2699" viable="true" in="org.eclipse.jgit.lib.IndexDiff.diff(org.eclipse.jgit.lib.ProgressMonitor,int,int,java.lang.String)" from="(estWorkTreeSize * 10)" to="(estWorkTreeSize / 10)" />
    <mutant id="mutant_1369" viable="true" in="org.eclipse.jgit.diff.RawTextComparator.findForwardLine(org.eclipse.jgit.util.IntList,int,int)" from="(idx + 2)" to="idx" />
    <mutant id="mutant_1199" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi / 1)" />
    <mutant id="mutant_1197" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai * 1)" />
    <mutant id="mutant_1198" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai - 1)" />
    <mutant id="mutant_1195" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="ai" />
    <mutant id="mutant_1196" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai / 1)" />
    <mutant id="mutant_1193" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai % 1)" />
    <mutant id="mutant_1194" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="1" />
    <mutant id="mutant_1191" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="end" />
    <mutant id="mutant_1192" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_1190" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="start" />
    <mutant id="mutant_1188" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_1189" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_1186" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_1187" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_1184" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_1185" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_1182" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_1183" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_1180" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="e" />
    <mutant id="mutant_1181" viable="true" in="org.eclipse.jgit.diff.RawText.writeLine(java.io.OutputStream,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_1179" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="(e + 1)" />
    <mutant id="mutant_1177" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="(e * 1)" />
    <mutant id="mutant_1178" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="(e % 1)" />
    <mutant id="mutant_1175" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="1" />
    <mutant id="mutant_1176" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(e - 1)" to="(e / 1)" />
    <mutant id="mutant_1173" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_1174" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="end" />
    <mutant id="mutant_1171" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_1172" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_1170" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_1168" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_2499" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="1" />
    <mutant id="mutant_1169" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int,int,boolean)" from="(end - 1)" to="1" />
    <mutant id="mutant_1166" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_2497" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="idx" />
    <mutant id="mutant_1167" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_2498" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="end" />
    <mutant id="mutant_1164" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="1" />
    <mutant id="mutant_2495" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="end + idx" />
    <mutant id="mutant_1165" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="i" />
    <mutant id="mutant_2496" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="end / idx" />
    <mutant id="mutant_1162" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="e" />
    <mutant id="mutant_2493" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="end % idx" />
    <mutant id="mutant_1163" viable="true" in="org.eclipse.jgit.diff.RawText.getString(int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2494" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.get(java.lang.String,java.lang.String,java.lang.String)" from="end - idx" to="end * idx" />
    <mutant id="mutant_10704" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="((user) + &quot;:&quot;)" />
    <mutant id="mutant_10705" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="(((user) + &quot;:&quot;) * realm)" />
    <mutant id="mutant_10706" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="((((user) + &quot;:&quot;) + realm) / &quot;:&quot;)" />
    <mutant id="mutant_10707" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="((((user) + &quot;:&quot;) + realm) - &quot;:&quot;)" />
    <mutant id="mutant_10708" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10709" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="((((user) + &quot;:&quot;) + realm) % &quot;:&quot;)" />
    <mutant id="mutant_10700" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="realm" />
    <mutant id="mutant_10701" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="(((user) + &quot;:&quot;) / realm)" />
    <mutant id="mutant_10702" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="(((user) + &quot;:&quot;) % realm)" />
    <mutant id="mutant_10703" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((user) + &quot;:&quot;) + realm)" to="(((user) + &quot;:&quot;) - realm)" />
    <mutant id="mutant_10715" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) % (pass)" />
    <mutant id="mutant_10716" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="(((user) + &quot;:&quot;) + realm) + &quot;:&quot;" />
    <mutant id="mutant_10717" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="pass" />
    <mutant id="mutant_10718" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="method" />
    <mutant id="mutant_10719" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="(method / &quot;:&quot;)" />
    <mutant id="mutant_10710" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="((((user) + &quot;:&quot;) + realm) * &quot;:&quot;)" />
    <mutant id="mutant_10711" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;)" to="(((user) + &quot;:&quot;) + realm)" />
    <mutant id="mutant_10712" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) / (pass)" />
    <mutant id="mutant_10713" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) * (pass)" />
    <mutant id="mutant_10714" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) + (pass)" to="((((user) + &quot;:&quot;) + realm) + &quot;:&quot;) - (pass)" />
    <mutant id="mutant_10748" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) * cnonce)" />
    <mutant id="mutant_10749" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) % cnonce)" />
    <mutant id="mutant_10740" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="nc" />
    <mutant id="mutant_10741" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="((nonce + &quot;:&quot;) - nc)" />
    <mutant id="mutant_10742" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="(((nonce + &quot;:&quot;) + nc) % &quot;:&quot;)" />
    <mutant id="mutant_10743" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="(((nonce + &quot;:&quot;) + nc) - &quot;:&quot;)" />
    <mutant id="mutant_10744" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10745" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="(((nonce + &quot;:&quot;) + nc) * &quot;:&quot;)" />
    <mutant id="mutant_10746" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="((nonce + &quot;:&quot;) + nc)" />
    <mutant id="mutant_10747" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" to="(((nonce + &quot;:&quot;) + nc) / &quot;:&quot;)" />
    <mutant id="mutant_10759" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) % &quot;:&quot;)" />
    <mutant id="mutant_10751" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="(((nonce + &quot;:&quot;) + nc) + &quot;:&quot;)" />
    <mutant id="mutant_10752" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) / cnonce)" />
    <mutant id="mutant_10753" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="cnonce" />
    <mutant id="mutant_10754" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" />
    <mutant id="mutant_10755" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) * &quot;:&quot;)" />
    <mutant id="mutant_10756" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) - &quot;:&quot;)" />
    <mutant id="mutant_10757" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) / &quot;:&quot;)" />
    <mutant id="mutant_10758" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10750" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce)" to="((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) - cnonce)" />
    <mutant id="mutant_10726" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="(method + &quot;:&quot;) / uri" />
    <mutant id="mutant_10727" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="(method + &quot;:&quot;) % uri" />
    <mutant id="mutant_10728" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="(method + &quot;:&quot;) * uri" />
    <mutant id="mutant_10729" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="(method + &quot;:&quot;) - uri" />
    <mutant id="mutant_10720" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="(method - &quot;:&quot;)" />
    <mutant id="mutant_10721" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="(method * &quot;:&quot;)" />
    <mutant id="mutant_10722" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="(method % &quot;:&quot;)" />
    <mutant id="mutant_10723" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10724" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="uri" />
    <mutant id="mutant_10725" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(method + &quot;:&quot;) + uri" to="method + &quot;:&quot;" />
    <mutant id="mutant_10737" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="((nonce + &quot;:&quot;) % nc)" />
    <mutant id="mutant_10738" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="((nonce + &quot;:&quot;) / nc)" />
    <mutant id="mutant_10739" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="((nonce + &quot;:&quot;) * nc)" />
    <mutant id="mutant_10730" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce % &quot;:&quot;)" />
    <mutant id="mutant_10731" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="nonce" />
    <mutant id="mutant_10732" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce / &quot;:&quot;)" />
    <mutant id="mutant_10733" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10734" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce * &quot;:&quot;)" />
    <mutant id="mutant_10735" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce - &quot;:&quot;)" />
    <mutant id="mutant_10736" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + nc)" to="(nonce + &quot;:&quot;)" />
    <mutant id="mutant_3819" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="name % '/'" />
    <mutant id="mutant_3818" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash + 1)" />
    <mutant id="mutant_10663" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="eq" />
    <mutant id="mutant_11994" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="(&quot;(?:&quot; * (URIish.USER_HOME_P))" />
    <mutant id="mutant_10664" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="1" />
    <mutant id="mutant_11995" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="(&quot;(?:&quot; % (URIish.USER_HOME_P))" />
    <mutant id="mutant_10665" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="dq * 1" />
    <mutant id="mutant_11996" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="&quot;(?:&quot;" />
    <mutant id="mutant_10666" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="dq - 1" />
    <mutant id="mutant_11997" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="(URIish.USER_HOME_P)" />
    <mutant id="mutant_10667" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="dq % 1" />
    <mutant id="mutant_11998" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="(&quot;(?:&quot; / (URIish.USER_HOME_P))" />
    <mutant id="mutant_10668" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="dq / 1" />
    <mutant id="mutant_11999" viable="false" in="?" from="(&quot;(?:&quot; + (URIish.USER_HOME_P))" to="(&quot;(?:&quot; - (URIish.USER_HOME_P))" />
    <mutant id="mutant_10669" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="dq + 1" to="dq" />
    <mutant id="mutant_11990" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) * &quot;:(&quot;)" />
    <mutant id="mutant_10660" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq - 2)" />
    <mutant id="mutant_11991" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) % &quot;:(&quot;)" />
    <mutant id="mutant_10661" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq / 2)" />
    <mutant id="mutant_11992" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" />
    <mutant id="mutant_10662" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq * 2)" />
    <mutant id="mutant_11993" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) / &quot;:(&quot;)" />
    <mutant id="mutant_3817" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash * 1)" />
    <mutant id="mutant_3816" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash / 1)" />
    <mutant id="mutant_3815" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="(lastSlash % 1)" />
    <mutant id="mutant_3814" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="lastSlash" />
    <mutant id="mutant_3813" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="(lastSlash - 1)" to="1" />
    <mutant id="mutant_3812" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) * ((shortMessage) == null ? &quot;null&quot; : shortMessage)" />
    <mutant id="mutant_3811" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) % ((shortMessage) == null ? &quot;null&quot; : shortMessage)" />
    <mutant id="mutant_3810" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) / ((shortMessage) == null ? &quot;null&quot; : shortMessage)" />
    <mutant id="mutant_3809" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;" />
    <mutant id="mutant_3808" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="(shortMessage) == null ? &quot;null&quot; : shortMessage" />
    <mutant id="mutant_3807" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;) - ((shortMessage) == null ? &quot;null&quot; : shortMessage)" />
    <mutant id="mutant_10674" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq * 1)" />
    <mutant id="mutant_10675" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="eq" />
    <mutant id="mutant_10676" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq % 1)" />
    <mutant id="mutant_10677" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="1" />
    <mutant id="mutant_10678" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq - 1)" />
    <mutant id="mutant_10679" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq / 1)" />
    <mutant id="mutant_10670" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq % 1)" />
    <mutant id="mutant_10671" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="1" />
    <mutant id="mutant_10672" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq - 1)" />
    <mutant id="mutant_10673" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq / 1)" />
    <mutant id="mutant_3806" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) - &quot; &quot;)" />
    <mutant id="mutant_3805" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) % &quot; &quot;)" />
    <mutant id="mutant_3804" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) * &quot; &quot;)" />
    <mutant id="mutant_3803" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" />
    <mutant id="mutant_3802" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_3801" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) + &quot; &quot;)" to="((((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name())) / &quot; &quot;)" />
    <mutant id="mutant_3800" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="((commit) == null ? &quot;null&quot; : commit.name())" />
    <mutant id="mutant_10649" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq / 1)" />
    <mutant id="mutant_10641" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="1" />
    <mutant id="mutant_11972" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) * &quot;)$&quot;)" />
    <mutant id="mutant_10642" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq - 1)" />
    <mutant id="mutant_11973" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) / &quot;)$&quot;)" />
    <mutant id="mutant_10643" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq / 1)" />
    <mutant id="mutant_11974" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) - &quot;)$&quot;)" />
    <mutant id="mutant_10644" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq * 1)" />
    <mutant id="mutant_11975" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P))" />
    <mutant id="mutant_10645" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="eq" />
    <mutant id="mutant_11976" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; * (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10646" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq % 1)" />
    <mutant id="mutant_11977" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; - (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10647" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="1" />
    <mutant id="mutant_11978" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="&quot;^&quot;" />
    <mutant id="mutant_10648" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq - 1)" />
    <mutant id="mutant_11979" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(URIish.OPT_USER_PWD_P)" />
    <mutant id="mutant_11970" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) % &quot;)$&quot;)" />
    <mutant id="mutant_10640" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq % 1)" />
    <mutant id="mutant_11971" viable="false" in="?" from="(((&quot;^&quot; + &quot;(file):([\\\\/](?![\\\\/])&quot;) + (URIish.PATH_P)) + &quot;)$&quot;)" to="&quot;)$&quot;" />
    <mutant id="mutant_10652" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq % 2)" />
    <mutant id="mutant_11983" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) % (URIish.HOST_P))" />
    <mutant id="mutant_10653" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="2" />
    <mutant id="mutant_11984" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) / (URIish.HOST_P))" />
    <mutant id="mutant_10654" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq - 2)" />
    <mutant id="mutant_11985" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(URIish.HOST_P)" />
    <mutant id="mutant_10655" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq / 2)" />
    <mutant id="mutant_11986" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10656" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq * 2)" />
    <mutant id="mutant_11987" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) * (URIish.HOST_P))" />
    <mutant id="mutant_10657" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="eq" />
    <mutant id="mutant_11988" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="&quot;:(&quot;" />
    <mutant id="mutant_10658" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="(eq % 2)" />
    <mutant id="mutant_11989" viable="false" in="?" from="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) + &quot;:(&quot;)" to="(((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P)) - &quot;:(&quot;)" />
    <mutant id="mutant_10659" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 2)" to="2" />
    <mutant id="mutant_11980" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; / (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10650" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq * 1)" />
    <mutant id="mutant_11981" viable="false" in="?" from="(&quot;^&quot; + (URIish.OPT_USER_PWD_P))" to="(&quot;^&quot; % (URIish.OPT_USER_PWD_P))" />
    <mutant id="mutant_10651" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="eq" />
    <mutant id="mutant_11982" viable="false" in="?" from="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) + (URIish.HOST_P))" to="((&quot;^&quot; + (URIish.OPT_USER_PWD_P)) - (URIish.HOST_P))" />
    <mutant id="mutant_2521" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="(Constants.R_REFS) * (Constants.STASH)" />
    <mutant id="mutant_3853" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="((cmd + &quot;renamed &quot;) * (Repository.shortenRefName(source.getName())))" />
    <mutant id="mutant_2522" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="(Constants.R_REFS) / (Constants.STASH)" />
    <mutant id="mutant_3852" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="(Repository.shortenRefName(source.getName()))" />
    <mutant id="mutant_3851" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="((cmd + &quot;renamed &quot;) - (Repository.shortenRefName(source.getName())))" />
    <mutant id="mutant_2520" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="Constants.STASH" />
    <mutant id="mutant_3850" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="((cmd + &quot;renamed &quot;) % (Repository.shortenRefName(source.getName())))" />
    <mutant id="mutant_2529" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position / 1)" />
    <mutant id="mutant_2527" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="(r.length) + 1" />
    <mutant id="mutant_3859" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) % &quot; to &quot;)" />
    <mutant id="mutant_2528" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="r.length" />
    <mutant id="mutant_3858" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) * &quot; to &quot;)" />
    <mutant id="mutant_2525" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="(r.length) % 1" />
    <mutant id="mutant_3857" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) / &quot; to &quot;)" />
    <mutant id="mutant_2526" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="(r.length) * 1" />
    <mutant id="mutant_3856" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" />
    <mutant id="mutant_2523" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="(r.length) / 1" />
    <mutant id="mutant_3855" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="&quot; to &quot;" />
    <mutant id="mutant_2524" viable="true" in="org.eclipse.jgit.lib.Constants.encodeASCII(java.lang.String)" from="(r.length) - 1" to="1" />
    <mutant id="mutant_3854" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="((cmd + &quot;renamed &quot;) / (Repository.shortenRefName(source.getName())))" />
    <mutant id="mutant_2510" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="(Constants.OBJECT_ID_LENGTH) + 2" />
    <mutant id="mutant_3842" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="prefix - name" />
    <mutant id="mutant_2511" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="(Constants.R_NOTES) * &quot;commits&quot;" />
    <mutant id="mutant_3841" viable="true" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="prefix" />
    <mutant id="mutant_3840" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="prefix % name" />
    <mutant id="mutant_2518" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="(Constants.R_REFS) - (Constants.STASH)" />
    <mutant id="mutant_2519" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="(Constants.R_REFS) % (Constants.STASH)" />
    <mutant id="mutant_3849" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName())))" to="(cmd + &quot;renamed &quot;)" />
    <mutant id="mutant_2516" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="(Constants.R_NOTES) / &quot;commits&quot;" />
    <mutant id="mutant_3848" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="(cmd * &quot;renamed &quot;)" />
    <mutant id="mutant_2517" viable="false" in="?" from="(Constants.R_REFS) + (Constants.STASH)" to="Constants.R_REFS" />
    <mutant id="mutant_3847" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="cmd" />
    <mutant id="mutant_2514" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="&quot;commits&quot;" />
    <mutant id="mutant_3846" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="(cmd % &quot;renamed &quot;)" />
    <mutant id="mutant_2515" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="Constants.R_NOTES" />
    <mutant id="mutant_3845" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="(cmd / &quot;renamed &quot;)" />
    <mutant id="mutant_2512" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="(Constants.R_NOTES) - &quot;commits&quot;" />
    <mutant id="mutant_3844" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="&quot;renamed &quot;" />
    <mutant id="mutant_2513" viable="false" in="?" from="(Constants.R_NOTES) + &quot;commits&quot;" to="(Constants.R_NOTES) % &quot;commits&quot;" />
    <mutant id="mutant_3843" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(cmd + &quot;renamed &quot;)" to="(cmd - &quot;renamed &quot;)" />
    <mutant id="mutant_2509" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_10685" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq / 1)" />
    <mutant id="mutant_10686" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq * 1)" />
    <mutant id="mutant_10687" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="eq" />
    <mutant id="mutant_10688" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="1" />
    <mutant id="mutant_10689" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="e - 1" />
    <mutant id="mutant_3831" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="1" />
    <mutant id="mutant_2500" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="idx" />
    <mutant id="mutant_3830" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_10680" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq * 1)" />
    <mutant id="mutant_10681" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="eq" />
    <mutant id="mutant_10682" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq % 1)" />
    <mutant id="mutant_10683" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="1" />
    <mutant id="mutant_10684" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="(eq + 1)" to="(eq - 1)" />
    <mutant id="mutant_2507" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="(Constants.OBJECT_ID_LENGTH) % 2" />
    <mutant id="mutant_3839" viable="true" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="name" />
    <mutant id="mutant_2508" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="(Constants.OBJECT_ID_LENGTH) / 2" />
    <mutant id="mutant_3838" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="prefix / name" />
    <mutant id="mutant_2505" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="(Constants.OBJECT_ID_LENGTH) - 2" />
    <mutant id="mutant_3837" viable="false" in="org.eclipse.jgit.lib.RefDatabase.findRef(java.util.Map,java.lang.String)" from="prefix + name" to="prefix * name" />
    <mutant id="mutant_2506" viable="false" in="?" from="(Constants.OBJECT_ID_LENGTH) * 2" to="2" />
    <mutant id="mutant_3836" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash - 1)" />
    <mutant id="mutant_2503" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="(idx % 1)" />
    <mutant id="mutant_3835" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_2504" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="(idx * 1)" />
    <mutant id="mutant_3834" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_2501" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="(idx / 1)" />
    <mutant id="mutant_3833" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_2502" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.getNamesInternal(java.lang.String,java.lang.String,boolean)" from="(idx + 1)" to="(idx - 1)" />
    <mutant id="mutant_3832" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_3829" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash * 1)" />
    <mutant id="mutant_10696" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) * &quot;:&quot;)" />
    <mutant id="mutant_10697" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10698" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) / &quot;:&quot;)" />
    <mutant id="mutant_10699" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) - &quot;:&quot;)" />
    <mutant id="mutant_3820" viable="true" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="name" />
    <mutant id="mutant_10690" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="e / 1" />
    <mutant id="mutant_10691" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="e * 1" />
    <mutant id="mutant_10692" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="e % 1" />
    <mutant id="mutant_10693" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.parse(java.lang.String)" from="e + 1" to="e" />
    <mutant id="mutant_10694" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="(user)" />
    <mutant id="mutant_10695" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((user) + &quot;:&quot;)" to="((user) % &quot;:&quot;)" />
    <mutant id="mutant_3828" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash % 1)" />
    <mutant id="mutant_3827" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="(slash / 1)" />
    <mutant id="mutant_3826" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="slash" />
    <mutant id="mutant_3825" viable="true" in="org.eclipse.jgit.lib.RefDatabase.exactRef(java.lang.String)" from="(slash + 1)" to="1" />
    <mutant id="mutant_3824" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="'/'" />
    <mutant id="mutant_3823" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="name / '/'" />
    <mutant id="mutant_3822" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="name - '/'" />
    <mutant id="mutant_3821" viable="false" in="org.eclipse.jgit.lib.RefDatabase.getConflictingNames(java.lang.String)" from="name + '/'" to="name * '/'" />
    <mutant id="mutant_1234" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai - 1)" />
    <mutant id="mutant_2565" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position / 2)" />
    <mutant id="mutant_3897" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_1235" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi / 1)" />
    <mutant id="mutant_2566" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="2" />
    <mutant id="mutant_3896" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1232" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai / 1)" />
    <mutant id="mutant_2563" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position * 1)" />
    <mutant id="mutant_3895" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1233" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai * 1)" />
    <mutant id="mutant_2564" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position - 1)" />
    <mutant id="mutant_3894" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1230" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="1" />
    <mutant id="mutant_2561" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="position" />
    <mutant id="mutant_3893" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_1231" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="ai" />
    <mutant id="mutant_2562" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position % 1)" />
    <mutant id="mutant_3892" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_3891" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2560" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="1" />
    <mutant id="mutant_3890" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1238" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="bi" />
    <mutant id="mutant_2569" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position * 2)" />
    <mutant id="mutant_1239" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi % 1)" />
    <mutant id="mutant_1236" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="1" />
    <mutant id="mutant_2567" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="position" />
    <mutant id="mutant_3899" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_1237" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi * 1)" />
    <mutant id="mutant_2568" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position % 2)" />
    <mutant id="mutant_3898" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_1223" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) * ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2554" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position" />
    <mutant id="mutant_3886" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="1" />
    <mutant id="mutant_1224" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(raw[ptr]) &amp; 255" />
    <mutant id="mutant_2555" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position * 5" />
    <mutant id="mutant_3885" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1221" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_2552" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position - 4)" />
    <mutant id="mutant_3884" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i % 1" />
    <mutant id="mutant_1222" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_2553" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position % 5" />
    <mutant id="mutant_3883" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i - 1" />
    <mutant id="mutant_2550" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position * 4)" />
    <mutant id="mutant_3882" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i * 1" />
    <mutant id="mutant_1220" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_2551" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position / 4)" />
    <mutant id="mutant_3881" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i" />
    <mutant id="mutant_3880" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="1" />
    <mutant id="mutant_1229" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai % 1)" />
    <mutant id="mutant_1227" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) - ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2558" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position - 5" />
    <mutant id="mutant_1228" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) % ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2559" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position / 1)" />
    <mutant id="mutant_3889" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1225" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="((hash &lt;&lt; 5) + hash) / ((raw[ptr]) &amp; 255)" />
    <mutant id="mutant_2556" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="position / 5" />
    <mutant id="mutant_3888" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_1226" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + ((raw[ptr]) &amp; 255)" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_2557" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 5" to="5" />
    <mutant id="mutant_3887" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="(i + 1)" to="i" />
    <mutant id="mutant_1212" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="be" />
    <mutant id="mutant_2543" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position % 3)" />
    <mutant id="mutant_3875" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="len" />
    <mutant id="mutant_1213" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be * bs)" />
    <mutant id="mutant_2544" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position * 3)" />
    <mutant id="mutant_3874" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="1" />
    <mutant id="mutant_1210" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae % as)" />
    <mutant id="mutant_2541" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="position" />
    <mutant id="mutant_3873" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len * 1)" />
    <mutant id="mutant_1211" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="bs" />
    <mutant id="mutant_2542" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="3" />
    <mutant id="mutant_3872" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len + 1)" />
    <mutant id="mutant_3871" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_2540" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position - 2)" />
    <mutant id="mutant_3870" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_1218" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_2549" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="4" />
    <mutant id="mutant_1219" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_1216" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be % bs)" />
    <mutant id="mutant_2547" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position % 4)" />
    <mutant id="mutant_3879" viable="true" in="org.eclipse.jgit.lib.Repository.resolve(org.eclipse.jgit.revwalk.RevWalk,java.lang.String)" from="i + 1" to="i / 1" />
    <mutant id="mutant_1217" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_2548" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="position" />
    <mutant id="mutant_3878" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len + 1)" />
    <mutant id="mutant_1214" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be + bs)" />
    <mutant id="mutant_2545" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position / 3)" />
    <mutant id="mutant_3877" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_1215" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - bs)" to="(be / bs)" />
    <mutant id="mutant_2546" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position - 3)" />
    <mutant id="mutant_3876" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_1201" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi * 1)" />
    <mutant id="mutant_2532" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position % 1)" />
    <mutant id="mutant_3864" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) - (Repository.shortenRefName(destination.getName())))" />
    <mutant id="mutant_1202" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="bi" />
    <mutant id="mutant_2533" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position * 1)" />
    <mutant id="mutant_3863" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="Repository.shortenRefName(destination.getName())" />
    <mutant id="mutant_2530" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="1" />
    <mutant id="mutant_3862" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) % (Repository.shortenRefName(destination.getName())))" />
    <mutant id="mutant_1200" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="1" />
    <mutant id="mutant_2531" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="position" />
    <mutant id="mutant_3861" viable="true" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" />
    <mutant id="mutant_3860" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;)" to="(((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) - &quot; to &quot;)" />
    <mutant id="mutant_1209" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="ae" />
    <mutant id="mutant_1207" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="as" />
    <mutant id="mutant_2538" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position % 2)" />
    <mutant id="mutant_1208" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae / as)" />
    <mutant id="mutant_2539" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position * 2)" />
    <mutant id="mutant_3869" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="len" />
    <mutant id="mutant_1205" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae * as)" />
    <mutant id="mutant_2536" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="2" />
    <mutant id="mutant_3868" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="1" />
    <mutant id="mutant_1206" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae + as)" />
    <mutant id="mutant_2537" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="position" />
    <mutant id="mutant_3867" viable="true" in="org.eclipse.jgit.lib.Repository.isValidRefName(java.lang.String)" from="(len - 1)" to="(len * 1)" />
    <mutant id="mutant_1203" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi % 1)" />
    <mutant id="mutant_2534" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 1)" to="(position - 1)" />
    <mutant id="mutant_3866" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) * (Repository.shortenRefName(destination.getName())))" />
    <mutant id="mutant_1204" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$1.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi - 1)" />
    <mutant id="mutant_2535" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position / 2)" />
    <mutant id="mutant_3865" viable="false" in="org.eclipse.jgit.lib.RefRename(org.eclipse.jgit.lib.RefUpdate,org.eclipse.jgit.lib.RefUpdate)" from="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) + (Repository.shortenRefName(destination.getName())))" to="((((cmd + &quot;renamed &quot;) + (Repository.shortenRefName(source.getName()))) + &quot; to &quot;) / (Repository.shortenRefName(destination.getName())))" />
    <mutant id="mutant_1281" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="ae" />
    <mutant id="mutant_1282" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae % as)" />
    <mutant id="mutant_1280" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae / as)" />
    <mutant id="mutant_1278" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae + as)" />
    <mutant id="mutant_1279" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="as" />
    <mutant id="mutant_1276" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi - 1)" />
    <mutant id="mutant_1277" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - as)" to="(ae * as)" />
    <mutant id="mutant_1274" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="bi" />
    <mutant id="mutant_1275" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi % 1)" />
    <mutant id="mutant_1272" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="1" />
    <mutant id="mutant_1273" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi * 1)" />
    <mutant id="mutant_1270" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai - 1)" />
    <mutant id="mutant_1271" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi / 1)" />
    <mutant id="mutant_1267" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="ai" />
    <mutant id="mutant_2598" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="position" />
    <mutant id="mutant_1268" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai / 1)" />
    <mutant id="mutant_2599" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="7" />
    <mutant id="mutant_1265" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai % 1)" />
    <mutant id="mutant_2596" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="position * 7" />
    <mutant id="mutant_1266" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="1" />
    <mutant id="mutant_2597" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="position - 7" />
    <mutant id="mutant_1263" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="(hash &lt;&lt; 5) + hash" />
    <mutant id="mutant_2594" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="6" />
    <mutant id="mutant_1264" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="c &amp; 255" />
    <mutant id="mutant_2595" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="position + 7" to="position % 7" />
    <mutant id="mutant_1261" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) * (c &amp; 255)" />
    <mutant id="mutant_2592" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="position" />
    <mutant id="mutant_1262" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) % (c &amp; 255)" />
    <mutant id="mutant_2593" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="(position / 6)" />
    <mutant id="mutant_1269" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$3.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ai + 1)" to="(ai * 1)" />
    <mutant id="mutant_2590" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="(position - 6)" />
    <mutant id="mutant_1260" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) - (c &amp; 255)" />
    <mutant id="mutant_2591" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="(position * 6)" />
    <mutant id="mutant_1256" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) * hash)" />
    <mutant id="mutant_2587" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="5" />
    <mutant id="mutant_1257" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="(hash &lt;&lt; 5)" />
    <mutant id="mutant_2588" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="(position - 5)" />
    <mutant id="mutant_1254" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="hash" />
    <mutant id="mutant_2585" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="(position * 5)" />
    <mutant id="mutant_1255" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) / hash)" />
    <mutant id="mutant_2586" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="(position / 5)" />
    <mutant id="mutant_1252" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="(be + 1)" />
    <mutant id="mutant_2583" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="(position % 5)" />
    <mutant id="mutant_1253" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) % hash)" />
    <mutant id="mutant_2584" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 5)" to="position" />
    <mutant id="mutant_1250" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="(be / 1)" />
    <mutant id="mutant_2581" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position / 4)" />
    <mutant id="mutant_1251" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="(be % 1)" />
    <mutant id="mutant_2582" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position - 4)" />
    <mutant id="mutant_1258" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash)" to="((hash &lt;&lt; 5) - hash)" />
    <mutant id="mutant_2589" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 6)" to="(position % 6)" />
    <mutant id="mutant_1259" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.hashRegion(byte[],int,int)" from="((hash &lt;&lt; 5) + hash) + (c &amp; 255)" to="((hash &lt;&lt; 5) + hash) / (c &amp; 255)" />
    <mutant id="mutant_2580" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position * 4)" />
    <mutant id="mutant_1245" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="(ae + 1)" />
    <mutant id="mutant_2576" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position - 3)" />
    <mutant id="mutant_1246" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="(ae / 1)" />
    <mutant id="mutant_2577" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="(position % 4)" />
    <mutant id="mutant_1243" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="(ae % 1)" />
    <mutant id="mutant_2574" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position * 3)" />
    <mutant id="mutant_1244" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="ae" />
    <mutant id="mutant_2575" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position / 3)" />
    <mutant id="mutant_1241" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="1" />
    <mutant id="mutant_2572" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="3" />
    <mutant id="mutant_1242" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(ae - 1)" to="(ae * 1)" />
    <mutant id="mutant_2573" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="(position % 3)" />
    <mutant id="mutant_2570" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 2)" to="(position - 2)" />
    <mutant id="mutant_1240" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(bi + 1)" to="(bi - 1)" />
    <mutant id="mutant_2571" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 3)" to="position" />
    <mutant id="mutant_1249" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="be" />
    <mutant id="mutant_1247" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="1" />
    <mutant id="mutant_2578" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="position" />
    <mutant id="mutant_1248" viable="true" in="org.eclipse.jgit.diff.RawTextComparator$2.equals(org.eclipse.jgit.diff.RawText,int,org.eclipse.jgit.diff.RawText,int)" from="(be - 1)" to="(be * 1)" />
    <mutant id="mutant_2579" viable="true" in="org.eclipse.jgit.lib.Constants.decodeTypeString(org.eclipse.jgit.lib.AnyObjectId,byte[],byte,org.eclipse.jgit.util.MutableInteger)" from="(position + 4)" to="4" />
    <mutant id="mutant_1083" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endB % endA" />
    <mutant id="mutant_1084" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endB + endA" />
    <mutant id="mutant_1081" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endB * endA" />
    <mutant id="mutant_1082" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endA" />
    <mutant id="mutant_1080" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endB / endA" />
    <mutant id="mutant_1078" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="k / (this.beginA)" />
    <mutant id="mutant_1079" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="endB - endA" to="endB" />
    <mutant id="mutant_1076" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="k * (this.beginA)" />
    <mutant id="mutant_1077" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="this.beginA" />
    <mutant id="mutant_1074" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="k - (this.beginA)" />
    <mutant id="mutant_1075" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="k" />
    <mutant id="mutant_1072" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginB * beginA" />
    <mutant id="mutant_1073" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.beginA)" to="k % (this.beginA)" />
    <mutant id="mutant_1070" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginB % beginA" />
    <mutant id="mutant_1071" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginB / beginA" />
    <mutant id="mutant_1069" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginB" />
    <mutant id="mutant_1067" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginB + beginA" />
    <mutant id="mutant_2398" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="mul" />
    <mutant id="mutant_1068" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="beginB - beginA" to="beginA" />
    <mutant id="mutant_2399" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="mul + (Long.parseLong(n))" />
    <mutant id="mutant_1065" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="(endB % endA)" />
    <mutant id="mutant_2396" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) * 1)" />
    <mutant id="mutant_1066" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="(endB + endA)" />
    <mutant id="mutant_2397" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="mul / (Long.parseLong(n))" />
    <mutant id="mutant_1063" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="(endB * endA)" />
    <mutant id="mutant_2394" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) + 1)" />
    <mutant id="mutant_1064" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="endA" />
    <mutant id="mutant_2395" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) % 1)" />
    <mutant id="mutant_1061" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="endB" />
    <mutant id="mutant_2392" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="1" />
    <mutant id="mutant_1062" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(endB - endA)" to="(endB / endA)" />
    <mutant id="mutant_2393" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) / 1)" />
    <mutant id="mutant_2390" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) * 1)" />
    <mutant id="mutant_1060" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="(beginB * beginA)" />
    <mutant id="mutant_2391" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="n.length()" />
    <mutant id="mutant_1058" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="(beginB % beginA)" />
    <mutant id="mutant_2389" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) % 1)" />
    <mutant id="mutant_1059" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="(beginB / beginA)" />
    <mutant id="mutant_1056" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="beginA" />
    <mutant id="mutant_2387" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) / 1)" />
    <mutant id="mutant_1057" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="beginB" />
    <mutant id="mutant_2388" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="((n.length()) + 1)" />
    <mutant id="mutant_1054" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="endB + beginA" />
    <mutant id="mutant_2385" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="n.length()" />
    <mutant id="mutant_1055" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="(beginB - beginA)" to="(beginB + beginA)" />
    <mutant id="mutant_2386" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="((n.length()) - 1)" to="1" />
    <mutant id="mutant_1052" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="endB % beginA" />
    <mutant id="mutant_2383" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="((src.entryList.size()) + (values.size())) / 1" />
    <mutant id="mutant_1053" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="endB * beginA" />
    <mutant id="mutant_2384" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="(src.entryList.size()) + (values.size())" />
    <mutant id="mutant_1050" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="beginA" />
    <mutant id="mutant_2381" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="((src.entryList.size()) + (values.size())) - 1" />
    <mutant id="mutant_1051" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="endB / beginA" />
    <mutant id="mutant_2382" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="((src.entryList.size()) + (values.size())) % 1" />
    <mutant id="mutant_2380" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="1" />
    <mutant id="mutant_1047" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="beginB % endA" />
    <mutant id="mutant_2378" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="((src.entryList.size()) / (values.size()))" />
    <mutant id="mutant_1048" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="beginB * endA" />
    <mutant id="mutant_2379" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size())) + 1" to="((src.entryList.size()) + (values.size())) * 1" />
    <mutant id="mutant_1045" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="endA" />
    <mutant id="mutant_2376" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="((src.entryList.size()) * (values.size()))" />
    <mutant id="mutant_1046" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="beginB" />
    <mutant id="mutant_2377" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="(src.entryList.size())" />
    <mutant id="mutant_1043" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="beginB / endA" />
    <mutant id="mutant_2374" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="((src.entryList.size()) - (values.size()))" />
    <mutant id="mutant_1044" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="beginB - endA" to="beginB + endA" />
    <mutant id="mutant_2375" viable="true" in="org.eclipse.jgit.lib.Config.copy(org.eclipse.jgit.lib.ConfigSnapshot,java.util.List)" from="((src.entryList.size()) + (values.size()))" to="((src.entryList.size()) % (values.size()))" />
    <mutant id="mutant_1041" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_2372" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="base.length" />
    <mutant id="mutant_1042" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_2373" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="(base.length) % (self.length)" />
    <mutant id="mutant_1049" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.calculate(int,int,int,int)" from="endB - beginA" to="endB" />
    <mutant id="mutant_1098" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_1099" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_1096" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="(edit.beginB) % (edit.beginA)" />
    <mutant id="mutant_1097" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_1094" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="edit.beginA" />
    <mutant id="mutant_1095" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="edit.beginB" />
    <mutant id="mutant_1092" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="(edit.beginB) * (edit.beginA)" />
    <mutant id="mutant_1093" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="(edit.beginB) + (edit.beginA)" />
    <mutant id="mutant_1090" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="k - (this.endA)" />
    <mutant id="mutant_1091" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.beginB) - (edit.beginA)" to="(edit.beginB) / (edit.beginA)" />
    <mutant id="mutant_1089" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="k / (this.endA)" />
    <mutant id="mutant_1087" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="k * (this.endA)" />
    <mutant id="mutant_1088" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="k % (this.endA)" />
    <mutant id="mutant_1085" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="k" />
    <mutant id="mutant_1086" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit.initialize(int,int,int,int)" from="k + (this.endA)" to="this.endA" />
    <mutant id="mutant_10825" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="(timeout) / 1000" />
    <mutant id="mutant_10826" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_10827" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_10828" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_10829" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_10820" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="(timeout) - 1000" />
    <mutant id="mutant_10821" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="(timeout) + 1000" />
    <mutant id="mutant_10822" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="(timeout) % 1000" />
    <mutant id="mutant_10823" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="timeout" />
    <mutant id="mutant_10824" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess(java.lang.String,int)" from="(timeout) * 1000" to="1000" />
    <mutant id="mutant_10836" viable="false" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) + (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10837" viable="false" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) % (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10838" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="((table.length) / 1)" />
    <mutant id="mutant_10839" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="1" />
    <mutant id="mutant_10830" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_10831" viable="true" in="org.eclipse.jgit.transport.JschSession$JschProcess$1.close()" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_10832" viable="false" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) - (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10833" viable="false" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="LongMap.LOAD_FACTOR" />
    <mutant id="mutant_10834" viable="false" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) / (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10835" viable="true" in="org.eclipse.jgit.transport.LongMap()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="table.length" />
    <mutant id="mutant_10803" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="host.toLowerCase()" />
    <mutant id="mutant_10804" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="&quot;HTTP@&quot; * (host.toLowerCase())" />
    <mutant id="mutant_10805" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="&quot;HTTP@&quot;" />
    <mutant id="mutant_10806" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="&quot;HTTP@&quot; - (host.toLowerCase())" />
    <mutant id="mutant_10807" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="&quot;HTTP@&quot; % (host.toLowerCase())" />
    <mutant id="mutant_10808" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="((getType().getSchemeName()) / &quot; &quot;)" />
    <mutant id="mutant_10809" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="((getType().getSchemeName()) - &quot; &quot;)" />
    <mutant id="mutant_10800" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="(((type.getSchemeName()) + &quot; &quot;) / v)" />
    <mutant id="mutant_10801" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="((type.getSchemeName()) + &quot; &quot;)" />
    <mutant id="mutant_10802" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="&quot;HTTP@&quot; + (host.toLowerCase())" to="&quot;HTTP@&quot; / (host.toLowerCase())" />
    <mutant id="mutant_10814" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="(((getType().getSchemeName()) + &quot; &quot;) - (Base64.encodeBytes(token)))" />
    <mutant id="mutant_10815" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="(((getType().getSchemeName()) + &quot; &quot;) / (Base64.encodeBytes(token)))" />
    <mutant id="mutant_10816" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="(((getType().getSchemeName()) + &quot; &quot;) % (Base64.encodeBytes(token)))" />
    <mutant id="mutant_10817" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="Base64.encodeBytes(token)" />
    <mutant id="mutant_10818" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="(((getType().getSchemeName()) + &quot; &quot;) * (Base64.encodeBytes(token)))" />
    <mutant id="mutant_10819" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((getType().getSchemeName()) + &quot; &quot;) + (Base64.encodeBytes(token)))" to="((getType().getSchemeName()) + &quot; &quot;)" />
    <mutant id="mutant_10810" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_10811" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="((getType().getSchemeName()) * &quot; &quot;)" />
    <mutant id="mutant_10812" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="(getType().getSchemeName())" />
    <mutant id="mutant_10813" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Negotiate.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((getType().getSchemeName()) + &quot; &quot;)" to="((getType().getSchemeName()) % &quot; &quot;)" />
    <mutant id="mutant_10869" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="1" />
    <mutant id="mutant_10861" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10862" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="((i.getClass().getName()) + &quot;:&quot;)" />
    <mutant id="mutant_10863" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) / (i.getPromptText()))" />
    <mutant id="mutant_10864" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="i.getPromptText()" />
    <mutant id="mutant_10865" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) % (i.getPromptText()))" />
    <mutant id="mutant_10866" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) * (i.getPromptText()))" />
    <mutant id="mutant_10867" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="(((i.getClass().getName()) + &quot;:&quot;) + (i.getPromptText()))" to="(((i.getClass().getName()) + &quot;:&quot;) - (i.getPromptText()))" />
    <mutant id="mutant_10868" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="value.length()" />
    <mutant id="mutant_10860" viable="true" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="(i.getClass().getName())" />
    <mutant id="mutant_10872" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="((value.length()) % 1)" />
    <mutant id="mutant_10873" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="((value.length()) * 1)" />
    <mutant id="mutant_10874" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="(pos % n)" />
    <mutant id="mutant_10875" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="pos" />
    <mutant id="mutant_10876" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="(pos * n)" />
    <mutant id="mutant_10877" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="n" />
    <mutant id="mutant_10878" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="(pos / n)" />
    <mutant id="mutant_10879" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(pos + n)" to="(pos - n)" />
    <mutant id="mutant_10870" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="((value.length()) / 1)" />
    <mutant id="mutant_10871" viable="true" in="org.eclipse.jgit.transport.OpenSshConfig.dequote(java.lang.String)" from="((value.length()) - 1)" to="((value.length()) + 1)" />
    <mutant id="mutant_10847" viable="true" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="table.length" />
    <mutant id="mutant_10848" viable="false" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) + (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10849" viable="false" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) % (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10840" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="((table.length) % 1)" />
    <mutant id="mutant_10841" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="((table.length) * 1)" />
    <mutant id="mutant_10842" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="((table.length) + 1)" />
    <mutant id="mutant_10843" viable="true" in="org.eclipse.jgit.transport.LongMap.index(long)" from="((table.length) - 1)" to="(table.length)" />
    <mutant id="mutant_10844" viable="false" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) - (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10845" viable="false" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="LongMap.LOAD_FACTOR" />
    <mutant id="mutant_10846" viable="false" in="org.eclipse.jgit.transport.LongMap.grow()" from="((int)((table.length) * (LongMap.LOAD_FACTOR)))" to="(table.length) / (LongMap.LOAD_FACTOR)" />
    <mutant id="mutant_10858" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) * &quot;:&quot;)" />
    <mutant id="mutant_10859" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) % &quot;:&quot;)" />
    <mutant id="mutant_10850" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="line / &quot;\n&quot;" />
    <mutant id="mutant_10851" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="line * &quot;\n&quot;" />
    <mutant id="mutant_10852" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="line % &quot;\n&quot;" />
    <mutant id="mutant_10853" viable="false" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="line - &quot;\n&quot;" />
    <mutant id="mutant_10854" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="line" />
    <mutant id="mutant_10855" viable="true" in="org.eclipse.jgit.transport.NetRC.parse()" from="line + &quot;\n&quot;" to="&quot;\n&quot;" />
    <mutant id="mutant_10856" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) - &quot;:&quot;)" />
    <mutant id="mutant_10857" viable="false" in="org.eclipse.jgit.transport.NetRCCredentialsProvider.get(org.eclipse.jgit.transport.URIish,org.eclipse.jgit.transport.CredentialItem[])" from="((i.getClass().getName()) + &quot;:&quot;)" to="((i.getClass().getName()) / &quot;:&quot;)" />
    <mutant id="mutant_10784" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((nonce + &quot;:&quot;) - (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10785" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(nonce + &quot;:&quot;)" />
    <mutant id="mutant_10786" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((nonce + &quot;:&quot;) % (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10787" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)" />
    <mutant id="mutant_10788" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((nonce + &quot;:&quot;) / (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10789" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((nonce + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((nonce + &quot;:&quot;) * (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10780" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce / &quot;:&quot;)" />
    <mutant id="mutant_10781" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10782" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce * &quot;:&quot;)" />
    <mutant id="mutant_10783" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce - &quot;:&quot;)" />
    <mutant id="mutant_10795" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) % &quot; &quot;)" />
    <mutant id="mutant_10796" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="(((type.getSchemeName()) + &quot; &quot;) % v)" />
    <mutant id="mutant_10797" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="(((type.getSchemeName()) + &quot; &quot;) * v)" />
    <mutant id="mutant_10798" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="(((type.getSchemeName()) + &quot; &quot;) - v)" />
    <mutant id="mutant_10799" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((type.getSchemeName()) + &quot; &quot;) + v)" to="v" />
    <mutant id="mutant_10790" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) / &quot; &quot;)" />
    <mutant id="mutant_10791" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) - &quot; &quot;)" />
    <mutant id="mutant_10792" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_10793" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="((type.getSchemeName()) * &quot; &quot;)" />
    <mutant id="mutant_10794" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((type.getSchemeName()) + &quot; &quot;)" to="(type.getSchemeName())" />
    <mutant id="mutant_10762" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="qop" />
    <mutant id="mutant_10763" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) * qop)" />
    <mutant id="mutant_10764" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="(((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;)" />
    <mutant id="mutant_10765" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) / qop)" />
    <mutant id="mutant_10766" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" />
    <mutant id="mutant_10767" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) - &quot;:&quot;)" />
    <mutant id="mutant_10768" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) % &quot;:&quot;)" />
    <mutant id="mutant_10769" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) * &quot;:&quot;)" />
    <mutant id="mutant_10760" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) % qop)" />
    <mutant id="mutant_10761" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop)" to="((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) - qop)" />
    <mutant id="mutant_10773" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) - (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10774" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)" />
    <mutant id="mutant_10775" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) * (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10776" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) % (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10777" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) / (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" />
    <mutant id="mutant_10778" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="(nonce % &quot;:&quot;)" />
    <mutant id="mutant_10779" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(nonce + &quot;:&quot;)" to="nonce" />
    <mutant id="mutant_10770" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_10771" viable="false" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) / &quot;:&quot;)" />
    <mutant id="mutant_10772" viable="true" in="org.eclipse.jgit.transport.HttpAuthMethod$Digest.configureRequest(org.eclipse.jgit.transport.http.HttpConnection)" from="((((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;) + (org.eclipse.jgit.transport.HttpAuthMethod.Digest.H(A2)))" to="(((((((nonce + &quot;:&quot;) + nc) + &quot;:&quot;) + cnonce) + &quot;:&quot;) + qop) + &quot;:&quot;)" />
    <mutant id="mutant_2400" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="mul % (Long.parseLong(n))" />
    <mutant id="mutant_3732" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="&quot;Action[&quot; + (token)" />
    <mutant id="mutant_2401" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="Long.parseLong(n)" />
    <mutant id="mutant_3731" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="(&quot;Action[&quot; + (token)) - &quot;]&quot;" />
    <mutant id="mutant_3730" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="(&quot;Action[&quot; + (token)) * &quot;]&quot;" />
    <mutant id="mutant_2408" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="entryIndex * 1" />
    <mutant id="mutant_2409" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="e.name.length()" />
    <mutant id="mutant_3739" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="&quot;Step[&quot;" />
    <mutant id="mutant_2406" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="entryIndex / 1" />
    <mutant id="mutant_3738" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="(&quot;Step[&quot; / (action))" />
    <mutant id="mutant_2407" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="entryIndex" />
    <mutant id="mutant_3737" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="(&quot;Step[&quot; * (action))" />
    <mutant id="mutant_2404" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="entryIndex % 1" />
    <mutant id="mutant_3736" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="(&quot;Step[&quot; % (action))" />
    <mutant id="mutant_2405" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="1" />
    <mutant id="mutant_3735" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="(&quot;Step[&quot; - (action))" />
    <mutant id="mutant_2402" viable="true" in="org.eclipse.jgit.lib.Config.getLong(java.lang.String,java.lang.String,java.lang.String,long)" from="mul * (Long.parseLong(n))" to="mul - (Long.parseLong(n))" />
    <mutant id="mutant_3734" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="(&quot;Action[&quot; + (token)) % &quot;]&quot;" />
    <mutant id="mutant_2403" viable="true" in="org.eclipse.jgit.lib.Config.replaceStringList(org.eclipse.jgit.lib.ConfigSnapshot,java.lang.String,java.lang.String,java.lang.String,java.util.List)" from="entryIndex + 1" to="entryIndex - 1" />
    <mutant id="mutant_3733" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_3721" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="tokenBegin / 1" />
    <mutant id="mutant_3720" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="tokenBegin" />
    <mutant id="mutant_3729" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token)) + &quot;]&quot;" to="(&quot;Action[&quot; + (token)) / &quot;]&quot;" />
    <mutant id="mutant_3728" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="(&quot;Action[&quot; - (token))" />
    <mutant id="mutant_3727" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="(&quot;Action[&quot; % (token))" />
    <mutant id="mutant_3726" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="(&quot;Action[&quot; / (token))" />
    <mutant id="mutant_3725" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="&quot;Action[&quot;" />
    <mutant id="mutant_3724" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="(token)" />
    <mutant id="mutant_3723" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine$Action.toString()" from="(&quot;Action[&quot; + (token))" to="(&quot;Action[&quot; * (token))" />
    <mutant id="mutant_3722" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="tokenBegin % 1" />
    <mutant id="mutant_3719" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="tokenBegin * 1" />
    <mutant id="mutant_3710" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="lineEnd" />
    <mutant id="mutant_3718" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="1" />
    <mutant id="mutant_3717" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="tokenBegin + 1" to="tokenBegin - 1" />
    <mutant id="mutant_3716" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="(lineEnd / 1)" />
    <mutant id="mutant_3715" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="lineEnd" />
    <mutant id="mutant_3714" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="(lineEnd - 1)" />
    <mutant id="mutant_3713" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="(lineEnd % 1)" />
    <mutant id="mutant_3712" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="(lineEnd * 1)" />
    <mutant id="mutant_3711" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseComments(byte[],int,java.util.List,int)" from="(lineEnd + 1)" to="1" />
    <mutant id="mutant_3709" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="(1 % lineEnd)" />
    <mutant id="mutant_3708" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="(1 - lineEnd)" />
    <mutant id="mutant_3707" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="(1 / lineEnd)" />
    <mutant id="mutant_3706" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="(1 * lineEnd)" />
    <mutant id="mutant_3705" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(1 + lineEnd)" to="1" />
    <mutant id="mutant_3704" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) * 1)" />
    <mutant id="mutant_3703" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) % 1)" />
    <mutant id="mutant_3702" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) + 1)" />
    <mutant id="mutant_3701" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(nextSpace - tokenBegin)" />
    <mutant id="mutant_3700" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="1" />
    <mutant id="mutant_1113" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_2444" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="value" />
    <mutant id="mutant_3776" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) * ((comment) == null ? &quot;&quot; : comment))" />
    <mutant id="mutant_1114" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_2445" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) / &quot; m&quot;" />
    <mutant id="mutant_3775" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) % ((comment) == null ? &quot;&quot; : comment))" />
    <mutant id="mutant_1111" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_2442" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="Config.MiB" />
    <mutant id="mutant_3774" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" />
    <mutant id="mutant_1112" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_2443" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="(value % (Config.MiB))" />
    <mutant id="mutant_3773" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) - ((comment) == null ? &quot;&quot; : comment))" />
    <mutant id="mutant_2440" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="(value * (Config.MiB))" />
    <mutant id="mutant_3772" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) / ((comment) == null ? &quot;&quot; : comment))" />
    <mutant id="mutant_1110" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_2441" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="(value - (Config.MiB))" />
    <mutant id="mutant_3771" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment))" to="((comment) == null ? &quot;&quot; : comment)" />
    <mutant id="mutant_3770" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) - &quot;, &quot;)" />
    <mutant id="mutant_1119" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="((buffer.length) / cnt)" />
    <mutant id="mutant_1117" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="((buffer.length) % cnt)" />
    <mutant id="mutant_2448" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) - &quot; m&quot;" />
    <mutant id="mutant_1118" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="buffer.length" />
    <mutant id="mutant_2449" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) % &quot; m&quot;" />
    <mutant id="mutant_3779" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) - &quot;]&quot;" />
    <mutant id="mutant_1115" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="((buffer.length) + cnt)" />
    <mutant id="mutant_2446" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))" />
    <mutant id="mutant_3778" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)" />
    <mutant id="mutant_1116" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="((buffer.length) * cnt)" />
    <mutant id="mutant_2447" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) * &quot; m&quot;" />
    <mutant id="mutant_3777" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) % &quot;]&quot;" />
    <mutant id="mutant_1102" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_2433" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="(value + (Config.MiB))" />
    <mutant id="mutant_3765" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" />
    <mutant id="mutant_1103" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="edit.endA" />
    <mutant id="mutant_2434" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="(value * (Config.MiB))" />
    <mutant id="mutant_3764" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) * ((shortMessage) == null ? &quot;null&quot; : shortMessage))" />
    <mutant id="mutant_1100" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_2431" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))" />
    <mutant id="mutant_3763" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) / ((shortMessage) == null ? &quot;null&quot; : shortMessage))" />
    <mutant id="mutant_1101" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_2432" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) / &quot; g&quot;" />
    <mutant id="mutant_3762" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" />
    <mutant id="mutant_3761" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) % ((shortMessage) == null ? &quot;null&quot; : shortMessage))" />
    <mutant id="mutant_2430" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) % &quot; g&quot;" />
    <mutant id="mutant_3760" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) - ((shortMessage) == null ? &quot;null&quot; : shortMessage))" />
    <mutant id="mutant_1108" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="(edit.endB) / (edit.endA)" />
    <mutant id="mutant_2439" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.MiB))" to="(value + (Config.MiB))" />
    <mutant id="mutant_1109" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_1106" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="(edit.endB) + (edit.endA)" />
    <mutant id="mutant_2437" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="(value / (Config.MiB))" />
    <mutant id="mutant_3769" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) / &quot;, &quot;)" />
    <mutant id="mutant_1107" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="(edit.endB) * (edit.endA)" />
    <mutant id="mutant_2438" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="value" />
    <mutant id="mutant_3768" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_1104" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="edit.endB" />
    <mutant id="mutant_2435" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="(value - (Config.MiB))" />
    <mutant id="mutant_3767" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) % &quot;, &quot;)" />
    <mutant id="mutant_1105" viable="true" in="org.eclipse.jgit.diff.MyersDiff.calculateEdits(int,int,int,int)" from="(edit.endB) - (edit.endA)" to="(edit.endB) % (edit.endA)" />
    <mutant id="mutant_2436" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.MiB))" to="(Config.MiB)" />
    <mutant id="mutant_3766" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;)" to="((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) * &quot;, &quot;)" />
    <mutant id="mutant_2422" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="(value + (Config.GiB))" />
    <mutant id="mutant_3754" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) * &quot;, &quot;)" />
    <mutant id="mutant_2423" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="(value * (Config.GiB))" />
    <mutant id="mutant_3753" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) % &quot;, &quot;)" />
    <mutant id="mutant_2420" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="value" />
    <mutant id="mutant_3752" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) % ((commit) == null ? &quot;null&quot; : commit))" />
    <mutant id="mutant_2421" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="Config.GiB" />
    <mutant id="mutant_3751" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) * ((commit) == null ? &quot;null&quot; : commit))" />
    <mutant id="mutant_3750" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) / ((commit) == null ? &quot;null&quot; : commit))" />
    <mutant id="mutant_2428" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="&quot; g&quot;" />
    <mutant id="mutant_2429" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) * &quot; g&quot;" />
    <mutant id="mutant_3759" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage))" to="((shortMessage) == null ? &quot;null&quot; : shortMessage)" />
    <mutant id="mutant_2426" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="value" />
    <mutant id="mutant_3758" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_2427" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) + &quot; g&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.GiB)))) - &quot; g&quot;" />
    <mutant id="mutant_3757" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) / &quot;, &quot;)" />
    <mutant id="mutant_2424" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="(value % (Config.GiB))" />
    <mutant id="mutant_3756" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" />
    <mutant id="mutant_2425" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.GiB))" to="(value - (Config.GiB))" />
    <mutant id="mutant_3755" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;)" to="((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) - &quot;, &quot;)" />
    <mutant id="mutant_2411" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="((e.name.length()) / 1)" />
    <mutant id="mutant_3743" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="((&quot;Step[&quot; + (action)) / &quot;, &quot;)" />
    <mutant id="mutant_2412" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="((e.name.length()) + 1)" />
    <mutant id="mutant_3742" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="((&quot;Step[&quot; + (action)) - &quot;, &quot;)" />
    <mutant id="mutant_3741" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="((&quot;Step[&quot; + (action)) % &quot;, &quot;)" />
    <mutant id="mutant_2410" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="1" />
    <mutant id="mutant_3740" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(&quot;Step[&quot; + (action))" to="(action)" />
    <mutant id="mutant_2419" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="(value - (Config.GiB))" />
    <mutant id="mutant_2417" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="(value + (Config.GiB))" />
    <mutant id="mutant_3749" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="((commit) == null ? &quot;null&quot; : commit)" />
    <mutant id="mutant_2418" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="(value * (Config.GiB))" />
    <mutant id="mutant_3748" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" />
    <mutant id="mutant_2415" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="(value / (Config.GiB))" />
    <mutant id="mutant_3747" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit))" to="(((&quot;Step[&quot; + (action)) + &quot;, &quot;) - ((commit) == null ? &quot;null&quot; : commit))" />
    <mutant id="mutant_2416" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.GiB))" to="(Config.GiB)" />
    <mutant id="mutant_3746" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="(&quot;Step[&quot; + (action))" />
    <mutant id="mutant_2413" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="((e.name.length()) % 1)" />
    <mutant id="mutant_3745" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_2414" viable="true" in="org.eclipse.jgit.lib.Config.fromText(java.lang.String)" from="((e.name.length()) - 1)" to="((e.name.length()) * 1)" />
    <mutant id="mutant_3744" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="((&quot;Step[&quot; + (action)) + &quot;, &quot;)" to="((&quot;Step[&quot; + (action)) * &quot;, &quot;)" />
    <mutant id="mutant_1160" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="(e * 2)" />
    <mutant id="mutant_2491" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_1161" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="(e + 2)" />
    <mutant id="mutant_2492" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_2490" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="i" />
    <mutant id="mutant_1157" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="(e % 2)" />
    <mutant id="mutant_2488" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_1158" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="2" />
    <mutant id="mutant_2489" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="1" />
    <mutant id="mutant_1155" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="(e + 1)" />
    <mutant id="mutant_2486" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="(low * 1)" />
    <mutant id="mutant_1156" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="e" />
    <mutant id="mutant_2487" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.first(java.util.List,int,java.lang.String,java.lang.String,java.lang.String)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_1153" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="(e * 1)" />
    <mutant id="mutant_2484" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="(low / 1)" />
    <mutant id="mutant_1154" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="(e % 1)" />
    <mutant id="mutant_2485" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="(low % 1)" />
    <mutant id="mutant_1151" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="1" />
    <mutant id="mutant_2482" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="(low - 1)" />
    <mutant id="mutant_1152" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 1)" to="(e / 1)" />
    <mutant id="mutant_2483" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="low" />
    <mutant id="mutant_1159" viable="true" in="org.eclipse.jgit.diff.RawText.getLineDelimiter()" from="(e - 2)" to="(e / 2)" />
    <mutant id="mutant_2480" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_1150" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="(lines.size()) % 2" />
    <mutant id="mutant_2481" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + 1)" to="1" />
    <mutant id="mutant_1146" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="2" />
    <mutant id="mutant_2477" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_1147" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="(lines.size()) / 2" />
    <mutant id="mutant_2478" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_1144" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_2475" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="mid" />
    <mutant id="mutant_1145" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="(lines.size()) * 2" />
    <mutant id="mutant_2476" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="1" />
    <mutant id="mutant_1142" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_2473" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="high" />
    <mutant id="mutant_1143" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_2474" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_1140" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="1" />
    <mutant id="mutant_2471" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_1141" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="i" />
    <mutant id="mutant_2472" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_1148" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="lines.size()" />
    <mutant id="mutant_2479" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_1149" viable="true" in="org.eclipse.jgit.diff.RawText.size()" from="(lines.size()) - 2" to="(lines.size()) + 2" />
    <mutant id="mutant_2470" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="low" />
    <mutant id="mutant_1135" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="i" />
    <mutant id="mutant_2466" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="&quot; k&quot;" />
    <mutant id="mutant_3798" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) % ((commit) == null ? &quot;null&quot; : commit.name()))" />
    <mutant id="mutant_1136" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="(i % 2)" />
    <mutant id="mutant_2467" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) / &quot; k&quot;" />
    <mutant id="mutant_3797" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="((&quot;# &quot; + (action.token)) + &quot; &quot;)" />
    <mutant id="mutant_1133" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="(i / 2)" />
    <mutant id="mutant_2464" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))" />
    <mutant id="mutant_3796" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) - ((commit) == null ? &quot;null&quot; : commit.name()))" />
    <mutant id="mutant_1134" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="2" />
    <mutant id="mutant_2465" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) * &quot; k&quot;" />
    <mutant id="mutant_3795" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) / ((commit) == null ? &quot;null&quot; : commit.name()))" />
    <mutant id="mutant_1131" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_2462" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="value" />
    <mutant id="mutant_3794" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="((&quot;# &quot; + (action.token)) - &quot; &quot;)" />
    <mutant id="mutant_1132" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="end" />
    <mutant id="mutant_2463" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) % &quot; k&quot;" />
    <mutant id="mutant_3793" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="((&quot;# &quot; + (action.token)) * &quot; &quot;)" />
    <mutant id="mutant_2460" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="Config.KiB" />
    <mutant id="mutant_3792" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="((&quot;# &quot; + (action.token)) / &quot; &quot;)" />
    <mutant id="mutant_1130" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_2461" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="(value % (Config.KiB))" />
    <mutant id="mutant_3791" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="(&quot;# &quot; + (action.token))" />
    <mutant id="mutant_1139" viable="true" in="org.eclipse.jgit.diff.RawText.getStart(int)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1137" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="(i * 2)" />
    <mutant id="mutant_2468" viable="false" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) + &quot; k&quot;" to="(String.valueOf((value / (org.eclipse.jgit.lib.Config.KiB)))) - &quot; k&quot;" />
    <mutant id="mutant_1138" viable="true" in="org.eclipse.jgit.diff.RawText.getEnd(int)" from="(i + 2)" to="(i - 2)" />
    <mutant id="mutant_2469" viable="true" in="org.eclipse.jgit.lib.ConfigSnapshot.find(java.util.List,java.lang.String,java.lang.String,java.lang.String)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_3799" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(((&quot;# &quot; + (action.token)) + &quot; &quot;) + ((commit) == null ? &quot;null&quot; : commit.name()))" to="(((&quot;# &quot; + (action.token)) + &quot; &quot;) * ((commit) == null ? &quot;null&quot; : commit.name()))" />
    <mutant id="mutant_3790" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_1124" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="lines.size()" />
    <mutant id="mutant_2455" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="(value / (Config.KiB))" />
    <mutant id="mutant_3787" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="(&quot;# &quot; / (action.token))" />
    <mutant id="mutant_1125" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="((lines.size()) + 1)" />
    <mutant id="mutant_2456" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="value" />
    <mutant id="mutant_3786" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="&quot;# &quot;" />
    <mutant id="mutant_1122" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="1" />
    <mutant id="mutant_2453" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="(value - (Config.KiB))" />
    <mutant id="mutant_3785" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="(&quot;# &quot; % (action.token))" />
    <mutant id="mutant_1123" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="((lines.size()) / 1)" />
    <mutant id="mutant_2454" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="(Config.KiB)" />
    <mutant id="mutant_3784" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="(&quot;# &quot; - (action.token))" />
    <mutant id="mutant_1120" viable="true" in="org.eclipse.jgit.diff.RawText.isBinary(java.io.InputStream)" from="((buffer.length) - cnt)" to="cnt" />
    <mutant id="mutant_2451" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="(value + (Config.KiB))" />
    <mutant id="mutant_3783" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="(action.token)" />
    <mutant id="mutant_1121" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="((lines.size()) * 1)" />
    <mutant id="mutant_2452" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value % (Config.KiB))" to="(value * (Config.KiB))" />
    <mutant id="mutant_3782" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) / &quot;]&quot;" />
    <mutant id="mutant_3781" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) * &quot;]&quot;" />
    <mutant id="mutant_2450" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(String.valueOf((value / (org.eclipse.jgit.lib.Config.MiB)))) + &quot; m&quot;" to="&quot; m&quot;" />
    <mutant id="mutant_3780" viable="true" in="org.eclipse.jgit.lib.RebaseTodoLine.toString()" from="(((((((&quot;Step[&quot; + (action)) + &quot;, &quot;) + ((commit) == null ? &quot;null&quot; : commit)) + &quot;, &quot;) + ((shortMessage) == null ? &quot;null&quot; : shortMessage)) + &quot;, &quot;) + ((comment) == null ? &quot;&quot; : comment)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_1128" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_2459" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="(value - (Config.KiB))" />
    <mutant id="mutant_1129" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_1126" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="((lines.size()) - 1)" to="((lines.size()) % 1)" />
    <mutant id="mutant_2457" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="(value + (Config.KiB))" />
    <mutant id="mutant_3789" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="((&quot;# &quot; + (action.token)) + &quot; &quot;)" to="((&quot;# &quot; + (action.token)) % &quot; &quot;)" />
    <mutant id="mutant_1127" viable="true" in="org.eclipse.jgit.diff.RawText.isMissingNewlineAtEnd()" from="(end - 1)" to="1" />
    <mutant id="mutant_2458" viable="true" in="org.eclipse.jgit.lib.Config.setLong(java.lang.String,java.lang.String,java.lang.String,long)" from="(value / (Config.KiB))" to="(value * (Config.KiB))" />
    <mutant id="mutant_3788" viable="false" in="org.eclipse.jgit.lib.RebaseTodoLine.setAction(org.eclipse.jgit.lib.RebaseTodoLine$Action)" from="(&quot;# &quot; + (action.token))" to="(&quot;# &quot; * (action.token))" />
    <mutant id="mutant_2293" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="p - 7" />
    <mutant id="mutant_2294" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="p % 7" />
    <mutant id="mutant_2291" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="p" />
    <mutant id="mutant_2292" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="7" />
    <mutant id="mutant_2290" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="32" />
    <mutant id="mutant_2288" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="o" />
    <mutant id="mutant_2289" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="(o - 32)" />
    <mutant id="mutant_2286" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="(o % 32)" />
    <mutant id="mutant_2287" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="(o / 32)" />
    <mutant id="mutant_2284" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="(o * 24)" />
    <mutant id="mutant_2285" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 32)" to="(o * 32)" />
    <mutant id="mutant_2282" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="o" />
    <mutant id="mutant_2283" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="(o - 24)" />
    <mutant id="mutant_2280" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="(o / 24)" />
    <mutant id="mutant_2281" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="(o % 24)" />
    <mutant id="mutant_2279" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 24)" to="24" />
    <mutant id="mutant_2277" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="(o % 16)" />
    <mutant id="mutant_2278" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="(o * 16)" />
    <mutant id="mutant_2275" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="(o / 16)" />
    <mutant id="mutant_2276" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="(o - 16)" />
    <mutant id="mutant_2273" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="o" />
    <mutant id="mutant_2274" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 16)" to="16" />
    <mutant id="mutant_2271" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="8" />
    <mutant id="mutant_2272" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="(o / 8)" />
    <mutant id="mutant_2270" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="o" />
    <mutant id="mutant_2268" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="(o * 8)" />
    <mutant id="mutant_2269" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="(o % 8)" />
    <mutant id="mutant_3599" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="i" />
    <mutant id="mutant_2266" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="(o % 0)" />
    <mutant id="mutant_3598" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="1" />
    <mutant id="mutant_2267" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 8)" to="(o - 8)" />
    <mutant id="mutant_3597" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_2264" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="(o - 0)" />
    <mutant id="mutant_3596" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_2265" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="(o * 0)" />
    <mutant id="mutant_3595" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_2262" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="(o / 0)" />
    <mutant id="mutant_3594" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_2263" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="o" />
    <mutant id="mutant_3593" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="i" />
    <mutant id="mutant_2260" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="(o * 4)" />
    <mutant id="mutant_3592" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="1" />
    <mutant id="mutant_2261" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyTo(byte[],int)" from="(o + 0)" to="0" />
    <mutant id="mutant_3591" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.addIfAbsent(Q)" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_3590" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="oldDirLen" />
    <mutant id="mutant_2257" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="4" />
    <mutant id="mutant_3589" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="dirIdx" />
    <mutant id="mutant_2258" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="o" />
    <mutant id="mutant_3588" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="(oldDirLen * dirIdx)" />
    <mutant id="mutant_2255" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="(o % 4)" />
    <mutant id="mutant_3587" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="(oldDirLen / dirIdx)" />
    <mutant id="mutant_2256" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="(o - 4)" />
    <mutant id="mutant_3586" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="(oldDirLen % dirIdx)" />
    <mutant id="mutant_2253" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="(o * 3)" />
    <mutant id="mutant_3585" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(oldDirLen + dirIdx)" to="(oldDirLen - dirIdx)" />
    <mutant id="mutant_2254" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="(o % 3)" />
    <mutant id="mutant_3584" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="1 &lt;&lt; (bits)" />
    <mutant id="mutant_2251" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="(o - 3)" />
    <mutant id="mutant_3583" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="(1 &lt;&lt; (bits)) + 1" />
    <mutant id="mutant_2252" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="(o / 3)" />
    <mutant id="mutant_3582" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="(1 &lt;&lt; (bits)) * 1" />
    <mutant id="mutant_2259" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 4)" to="(o / 4)" />
    <mutant id="mutant_10902" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="(bOffset) * (bAvail)" />
    <mutant id="mutant_10903" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="bOffset" />
    <mutant id="mutant_10904" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) + next" />
    <mutant id="mutant_10905" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) % next" />
    <mutant id="mutant_10906" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="next" />
    <mutant id="mutant_10907" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) / next" />
    <mutant id="mutant_10908" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) * next" />
    <mutant id="mutant_10909" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="buf.length" />
    <mutant id="mutant_10900" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="bAvail" />
    <mutant id="mutant_10901" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="(bOffset) % (bAvail)" />
    <mutant id="mutant_10913" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="(bAvail)" />
    <mutant id="mutant_10914" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="(free / (bAvail))" />
    <mutant id="mutant_10915" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="(free % (bAvail))" />
    <mutant id="mutant_10916" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) + next" />
    <mutant id="mutant_10917" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) % next" />
    <mutant id="mutant_10918" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="next" />
    <mutant id="mutant_10919" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) / next" />
    <mutant id="mutant_10910" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="(free - (bAvail))" />
    <mutant id="mutant_10911" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="free" />
    <mutant id="mutant_10912" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(free + (bAvail))" to="(free * (bAvail))" />
    <mutant id="mutant_2299" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="p - 7" />
    <mutant id="mutant_2297" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="p" />
    <mutant id="mutant_2298" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="7" />
    <mutant id="mutant_2295" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="p * 7" />
    <mutant id="mutant_2296" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexByte(byte[],int,int)" from="p + 7" to="p / 7" />
    <mutant id="mutant_10946" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="streamPosition * ofs" />
    <mutant id="mutant_10947" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="streamPosition / ofs" />
    <mutant id="mutant_10948" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="streamPosition + ofs" />
    <mutant id="mutant_10949" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="streamPosition" />
    <mutant id="mutant_10940" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="extraObjects" />
    <mutant id="mutant_10941" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="((int)(objectCount)) * extraObjects" />
    <mutant id="mutant_10942" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="((int)(objectCount)) / extraObjects" />
    <mutant id="mutant_10943" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="((int)(objectCount))" />
    <mutant id="mutant_10944" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="((int)(objectCount)) - extraObjects" />
    <mutant id="mutant_10945" viable="true" in="org.eclipse.jgit.transport.PackParser.growEntries(int)" from="((int)(objectCount)) + extraObjects" to="((int)(objectCount)) % extraObjects" />
    <mutant id="mutant_10957" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="(&quot;\\x&quot; / (Integer.toHexString(((buf[bOffset]) &amp; 255))))" />
    <mutant id="mutant_10958" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; - (Integer.toHexString(eof)))" />
    <mutant id="mutant_10959" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; % (Integer.toHexString(eof)))" />
    <mutant id="mutant_10950" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="ofs" />
    <mutant id="mutant_10951" viable="true" in="org.eclipse.jgit.transport.PackParser.indexOneObject()" from="streamPosition - ofs" to="streamPosition % ofs" />
    <mutant id="mutant_10952" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="(&quot;\\x&quot; - (Integer.toHexString(((buf[bOffset]) &amp; 255))))" />
    <mutant id="mutant_10953" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="&quot;\\x&quot;" />
    <mutant id="mutant_10954" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="Integer.toHexString(((buf[bOffset]) &amp; 255))" />
    <mutant id="mutant_10955" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="(&quot;\\x&quot; * (Integer.toHexString(((buf[bOffset]) &amp; 255))))" />
    <mutant id="mutant_10956" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(((buf[bOffset]) &amp; 255))))" to="(&quot;\\x&quot; % (Integer.toHexString(((buf[bOffset]) &amp; 255))))" />
    <mutant id="mutant_10924" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="bOffset" />
    <mutant id="mutant_10925" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="(bBase) / (bOffset)" />
    <mutant id="mutant_10926" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="(bBase) * (bOffset)" />
    <mutant id="mutant_10927" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="bBase" />
    <mutant id="mutant_10928" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="entryCount" />
    <mutant id="mutant_10929" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) / (entryCount))" />
    <mutant id="mutant_10920" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="(buf.length) * next" />
    <mutant id="mutant_10921" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(buf.length) - next" to="buf.length" />
    <mutant id="mutant_10922" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="(bBase) - (bOffset)" />
    <mutant id="mutant_10923" viable="true" in="org.eclipse.jgit.transport.PackParser.streamPosition()" from="(bBase) + (bOffset)" to="(bBase) % (bOffset)" />
    <mutant id="mutant_10935" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) / (entryCount))" />
    <mutant id="mutant_10936" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) + (entryCount))" />
    <mutant id="mutant_10937" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="objectCount" />
    <mutant id="mutant_10938" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) * (entryCount))" />
    <mutant id="mutant_10939" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) % (entryCount))" />
    <mutant id="mutant_10930" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) + (entryCount))" />
    <mutant id="mutant_10931" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="objectCount" />
    <mutant id="mutant_10932" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) * (entryCount))" />
    <mutant id="mutant_10933" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="((objectCount) % (entryCount))" />
    <mutant id="mutant_10934" viable="true" in="org.eclipse.jgit.transport.PackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((objectCount) - (entryCount))" to="entryCount" />
    <mutant id="mutant_10982" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_10983" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="p" />
    <mutant id="mutant_10984" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="4" />
    <mutant id="mutant_10985" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_10986" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_10987" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_10988" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="p" />
    <mutant id="mutant_10989" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="8" />
    <mutant id="mutant_10980" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="(p / k)" />
    <mutant id="mutant_10981" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="(p * k)" />
    <mutant id="mutant_10993" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_10994" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="&quot;&quot;" />
    <mutant id="mutant_10995" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="(&quot;&quot; / ((char)(lineBuffer[0])))" />
    <mutant id="mutant_10996" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="(&quot;&quot; % ((char)(lineBuffer[0])))" />
    <mutant id="mutant_10997" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="(&quot;&quot; - ((char)(lineBuffer[0])))" />
    <mutant id="mutant_10998" viable="false" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="(&quot;&quot; * ((char)(lineBuffer[0])))" />
    <mutant id="mutant_10999" viable="true" in="org.eclipse.jgit.transport.PacketLineIn.readLength()" from="(&quot;&quot; + ((char)(lineBuffer[0])))" to="((char)(lineBuffer[0]))" />
    <mutant id="mutant_10990" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_10991" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_10992" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_10968" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="(Constants.PACK_SIGNATURE.length)" />
    <mutant id="mutant_10969" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="((Constants.PACK_SIGNATURE.length) - 4)" />
    <mutant id="mutant_10960" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="&quot;\\x&quot;" />
    <mutant id="mutant_10961" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; * (Integer.toHexString(eof)))" />
    <mutant id="mutant_10962" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="Integer.toHexString(eof)" />
    <mutant id="mutant_10963" viable="false" in="org.eclipse.jgit.transport.PackParser.readPackFooter()" from="(&quot;\\x&quot; + (Integer.toHexString(eof)))" to="(&quot;\\x&quot; / (Integer.toHexString(eof)))" />
    <mutant id="mutant_10964" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="((Constants.PACK_SIGNATURE.length) % 4)" />
    <mutant id="mutant_10965" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="((Constants.PACK_SIGNATURE.length) * 4)" />
    <mutant id="mutant_10966" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="4" />
    <mutant id="mutant_10967" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4)" to="((Constants.PACK_SIGNATURE.length) / 4)" />
    <mutant id="mutant_10979" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="(p - k)" />
    <mutant id="mutant_10971" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="4" />
    <mutant id="mutant_10972" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="(Constants.PACK_SIGNATURE.length) + 4" />
    <mutant id="mutant_10973" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="((Constants.PACK_SIGNATURE.length) + 4) / 4" />
    <mutant id="mutant_10974" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="((Constants.PACK_SIGNATURE.length) + 4) - 4" />
    <mutant id="mutant_10975" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="((Constants.PACK_SIGNATURE.length) + 4) * 4" />
    <mutant id="mutant_10976" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="k" />
    <mutant id="mutant_10977" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="p" />
    <mutant id="mutant_10978" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="(p + k)" to="(p % k)" />
    <mutant id="mutant_10970" viable="true" in="org.eclipse.jgit.transport.PackParser.readPackHeader()" from="((Constants.PACK_SIGNATURE.length) + 4) + 4" to="((Constants.PACK_SIGNATURE.length) + 4) % 4" />
    <mutant id="mutant_4909" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) - 31" />
    <mutant id="mutant_4908" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) % 31" />
    <mutant id="mutant_4907" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) + 31" />
    <mutant id="mutant_4906" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="(b.packLastModified) + (a.packLastModified)" />
    <mutant id="mutant_4905" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="b.packLastModified" />
    <mutant id="mutant_4904" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="(b.packLastModified) * (a.packLastModified)" />
    <mutant id="mutant_4903" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="(b.packLastModified) / (a.packLastModified)" />
    <mutant id="mutant_4902" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile$1.compare(org.eclipse.jgit.internal.storage.file.PackFile,org.eclipse.jgit.internal.storage.file.PackFile)" from="(b.packLastModified) - (a.packLastModified)" to="(b.packLastModified) % (a.packLastModified)" />
    <mutant id="mutant_4901" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="(i + (recentBitmaps.length))" />
    <mutant id="mutant_4900" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="(i / (recentBitmaps.length))" />
    <mutant id="mutant_10883" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="(cnt + n)" />
    <mutant id="mutant_10884" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="cnt" />
    <mutant id="mutant_10885" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="(cnt % n)" />
    <mutant id="mutant_10886" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="(toSkip + n)" />
    <mutant id="mutant_10887" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="(toSkip % n)" />
    <mutant id="mutant_10888" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="n" />
    <mutant id="mutant_10889" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="(toSkip * n)" />
    <mutant id="mutant_10880" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="n" />
    <mutant id="mutant_10881" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="(cnt / n)" />
    <mutant id="mutant_10882" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.read(byte[],int,int)" from="(cnt - n)" to="(cnt * n)" />
    <mutant id="mutant_10894" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="bAvail" />
    <mutant id="mutant_10895" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="(bAvail) % (inf.getRemaining())" />
    <mutant id="mutant_10896" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="(bAvail) + (inf.getRemaining())" />
    <mutant id="mutant_10897" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="(bAvail) * (inf.getRemaining())" />
    <mutant id="mutant_10898" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="(bOffset) - (bAvail)" />
    <mutant id="mutant_10899" viable="true" in="org.eclipse.jgit.transport.PackParser.fill(org.eclipse.jgit.transport.PackParser$Source,int)" from="(bOffset) + (bAvail)" to="(bOffset) / (bAvail)" />
    <mutant id="mutant_10890" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="(toSkip / n)" />
    <mutant id="mutant_10891" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.skip(long)" from="(toSkip - n)" to="toSkip" />
    <mutant id="mutant_10892" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="(bAvail) / (inf.getRemaining())" />
    <mutant id="mutant_10893" viable="true" in="org.eclipse.jgit.transport.PackParser$InflaterStream.close()" from="(bAvail) - (inf.getRemaining())" to="inf.getRemaining()" />
    <mutant id="mutant_3611" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="j" />
    <mutant id="mutant_4942" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="(b + '.')" />
    <mutant id="mutant_3610" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="(j % 1)" />
    <mutant id="mutant_4941" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="((b + '.') * (ext.getExtension()))" />
    <mutant id="mutant_4940" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="((b + '.') / (ext.getExtension()))" />
    <mutant id="mutant_3619" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="(data.length) / (ptr)" />
    <mutant id="mutant_3618" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="(data.length) + (ptr)" />
    <mutant id="mutant_4949" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="length" />
    <mutant id="mutant_3617" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="(data.length) * (ptr)" />
    <mutant id="mutant_4948" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="(length) + 20" />
    <mutant id="mutant_3616" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="(data.length) % (ptr)" />
    <mutant id="mutant_4947" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="((name.length()) % (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_3615" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="ptr" />
    <mutant id="mutant_4946" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="((name.length()) + (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_3614" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="(j / 1)" />
    <mutant id="mutant_4945" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="((name.length()) / (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_3613" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="(j - 1)" />
    <mutant id="mutant_4944" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="((name.length()) * (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_3612" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="(j * 1)" />
    <mutant id="mutant_4943" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getPackName()" from="((name.length()) - (&quot;.pack&quot;.length()))" to="name.length()" />
    <mutant id="mutant_3609" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.insert(V)" from="(j + 1)" to="1" />
    <mutant id="mutant_3600" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_4931" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="(b / '.')" />
    <mutant id="mutant_4930" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_3608" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="sz * 1" />
    <mutant id="mutant_4939" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="((b + '.') % (ext.getExtension()))" />
    <mutant id="mutant_3607" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="sz" />
    <mutant id="mutant_4938" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="((b + '.') - (ext.getExtension()))" />
    <mutant id="mutant_3606" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="sz % 1" />
    <mutant id="mutant_4937" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="((b + '.') + (ext.getExtension()))" to="ext.getExtension()" />
    <mutant id="mutant_3605" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="sz + 1" />
    <mutant id="mutant_4936" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="b" />
    <mutant id="mutant_3604" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="sz / 1" />
    <mutant id="mutant_4935" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="(b % '.')" />
    <mutant id="mutant_3603" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.initTable(int)" from="sz - 1" to="1" />
    <mutant id="mutant_4934" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="(b - '.')" />
    <mutant id="mutant_3602" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_4933" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="(b * '.')" />
    <mutant id="mutant_3601" viable="true" in="org.eclipse.jgit.lib.ObjectIdSubclassMap.get(org.eclipse.jgit.lib.AnyObjectId)" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_4932" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.extFile(org.eclipse.jgit.internal.storage.pack.PackExt)" from="(b + '.')" to="'.'" />
    <mutant id="mutant_4929" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_4920" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="pos / ofs" />
    <mutant id="mutant_4928" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_4927" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_4926" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_4925" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_4924" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="pos + ofs" />
    <mutant id="mutant_4923" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="pos * ofs" />
    <mutant id="mutant_4922" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="pos % ofs" />
    <mutant id="mutant_4921" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="ofs" />
    <mutant id="mutant_4919" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectType(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos - ofs" to="pos" />
    <mutant id="mutant_4918" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="((packFile.getPath()) % &quot;.keep&quot;)" />
    <mutant id="mutant_4917" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="((packFile.getPath()) - &quot;.keep&quot;)" />
    <mutant id="mutant_4916" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="((packFile.getPath()) * &quot;.keep&quot;)" />
    <mutant id="mutant_4915" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="((packFile.getPath()) / &quot;.keep&quot;)" />
    <mutant id="mutant_4914" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="&quot;.keep&quot;" />
    <mutant id="mutant_4913" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.shouldBeKept()" from="((packFile.getPath()) + &quot;.keep&quot;)" to="packFile.getPath()" />
    <mutant id="mutant_4912" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="System.identityHashCode(this)" />
    <mutant id="mutant_4911" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="31" />
    <mutant id="mutant_4910" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile(java.io.File,int)" from="(System.identityHashCode(this)) * 31" to="(System.identityHashCode(this)) / 31" />
    <mutant id="mutant_2323" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) - (totalWork)" />
    <mutant id="mutant_3655" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="((when) * 1000)" />
    <mutant id="mutant_4986" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="(pos % size)" />
    <mutant id="mutant_2324" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) + (totalWork)" />
    <mutant id="mutant_3654" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="1000" />
    <mutant id="mutant_4985" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="size" />
    <mutant id="mutant_2321" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="(lastWork) * 100" />
    <mutant id="mutant_3653" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="((when) % 1000)" />
    <mutant id="mutant_4984" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="(pos - size)" />
    <mutant id="mutant_2322" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) % (totalWork)" />
    <mutant id="mutant_3652" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="((when) - 1000)" />
    <mutant id="mutant_4983" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="(length) + pos" />
    <mutant id="mutant_3651" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="when" />
    <mutant id="mutant_4982" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="(length) % pos" />
    <mutant id="mutant_2320" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="((lastWork) / 100)" />
    <mutant id="mutant_3650" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="(when) % 1000L" />
    <mutant id="mutant_4981" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="pos" />
    <mutant id="mutant_4980" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="(length) * pos" />
    <mutant id="mutant_2329" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="((lastWork) % 100)" />
    <mutant id="mutant_2327" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="100" />
    <mutant id="mutant_3659" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="offset * 60" />
    <mutant id="mutant_2328" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="((lastWork) - 100)" />
    <mutant id="mutant_3658" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="offset % 60" />
    <mutant id="mutant_4989" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="(pos / size)" />
    <mutant id="mutant_2325" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="totalWork" />
    <mutant id="mutant_3657" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="offset - 60" />
    <mutant id="mutant_4988" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="(pos * size)" />
    <mutant id="mutant_2326" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) * (totalWork)" />
    <mutant id="mutant_3656" viable="true" in="org.eclipse.jgit.lib.PersonIdent.toExternalString()" from="((when) / 1000)" to="((when) + 1000)" />
    <mutant id="mutant_4987" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="(pos + size)" to="pos" />
    <mutant id="mutant_2312" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="(p1 - 1)" />
    <mutant id="mutant_3644" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="((p.when) % 1000L)" />
    <mutant id="mutant_4975" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="pos" />
    <mutant id="mutant_2313" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="(p1 / 1)" />
    <mutant id="mutant_3643" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="((p.when) - 1000L)" />
    <mutant id="mutant_4974" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="(pos % size)" />
    <mutant id="mutant_2310" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="p1" />
    <mutant id="mutant_3642" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="1000L" />
    <mutant id="mutant_4973" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="size" />
    <mutant id="mutant_2311" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="(p1 * 1)" />
    <mutant id="mutant_3641" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="((p.when) + 1000L)" />
    <mutant id="mutant_4972" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="(pos - size)" />
    <mutant id="mutant_3640" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="(p.when)" />
    <mutant id="mutant_4971" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="(pos + p) - 20" />
    <mutant id="mutant_4970" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="20" />
    <mutant id="mutant_2318" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="(lastWork)" />
    <mutant id="mutant_2319" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="((lastWork) + 100)" />
    <mutant id="mutant_3649" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="(when) - 1000L" />
    <mutant id="mutant_2316" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="((lastWork) - 100)" />
    <mutant id="mutant_3648" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="1000L" />
    <mutant id="mutant_4979" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="length" />
    <mutant id="mutant_2317" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="((lastWork) % 100)" />
    <mutant id="mutant_3647" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="(when) + 1000L" />
    <mutant id="mutant_4978" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="((int)((length) - pos))" to="(length) / pos" />
    <mutant id="mutant_2314" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="(p1 % 1)" />
    <mutant id="mutant_3646" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="when" />
    <mutant id="mutant_4977" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="(pos / size)" />
    <mutant id="mutant_2315" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.end(org.eclipse.jgit.lib.BatchingProgressMonitor)" from="((lastWork) * 100)" to="100" />
    <mutant id="mutant_3645" viable="true" in="org.eclipse.jgit.lib.PersonIdent.hashCode()" from="((int)((when) / 1000L))" to="(when) * 1000L" />
    <mutant id="mutant_4976" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.read(long,int)" from="(pos + size)" to="(pos * size)" />
    <mutant id="mutant_2301" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="p * 7" />
    <mutant id="mutant_3633" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="((when) * 1000L)" />
    <mutant id="mutant_4964" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos % p)" />
    <mutant id="mutant_2302" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="p / 7" />
    <mutant id="mutant_3632" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="((aTZ.getOffset(aWhen.getTime())) + (60 * 1000))" />
    <mutant id="mutant_4963" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="p" />
    <mutant id="mutant_3631" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="((aTZ.getOffset(aWhen.getTime())) % (60 * 1000))" />
    <mutant id="mutant_4962" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="pos" />
    <mutant id="mutant_2300" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.formatHexChar(char[],int,int)" from="p + 7" to="p % 7" />
    <mutant id="mutant_3630" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="((aTZ.getOffset(aWhen.getTime())) - (60 * 1000))" />
    <mutant id="mutant_4961" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos - p)" />
    <mutant id="mutant_4960" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos / p)" />
    <mutant id="mutant_2309" viable="false" in="org.eclipse.jgit.lib.BatchRefUpdate.getPrefixes(java.lang.String)" from="(p1 + 1)" to="1" />
    <mutant id="mutant_2307" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="lineEnd" />
    <mutant id="mutant_3639" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((p.when) / 1000L)" to="((p.when) * 1000L)" />
    <mutant id="mutant_2308" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="(lineEnd / 1)" />
    <mutant id="mutant_3638" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="((when) % 1000L)" />
    <mutant id="mutant_4969" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="(pos + p) * 20" />
    <mutant id="mutant_2305" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="(lineEnd % 1)" />
    <mutant id="mutant_3637" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="((when) - 1000L)" />
    <mutant id="mutant_4968" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="pos + p" />
    <mutant id="mutant_2306" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="(lineEnd + 1)" />
    <mutant id="mutant_3636" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="1000L" />
    <mutant id="mutant_4967" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="(pos + p) % 20" />
    <mutant id="mutant_2303" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="1" />
    <mutant id="mutant_3635" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="((when) + 1000L)" />
    <mutant id="mutant_4966" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p) + 20" to="(pos + p) / 20" />
    <mutant id="mutant_2304" viable="true" in="org.eclipse.jgit.lib.BaseRepositoryBuilder.getSymRef(java.io.File,java.io.File,org.eclipse.jgit.util.FS)" from="(lineEnd - 1)" to="(lineEnd * 1)" />
    <mutant id="mutant_3634" viable="true" in="org.eclipse.jgit.lib.PersonIdent.equals(java.lang.Object)" from="((when) / 1000L)" to="(when)" />
    <mutant id="mutant_4965" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="(pos + p)" to="(pos * p)" />
    <mutant id="mutant_3622" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="1000" />
    <mutant id="mutant_4953" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="20" />
    <mutant id="mutant_3621" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="(60 / 1000)" />
    <mutant id="mutant_4952" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="(length) * 20" />
    <mutant id="mutant_3620" viable="true" in="org.eclipse.jgit.lib.ObjectStream$SmallStream.available()" from="(data.length) - (ptr)" to="data.length" />
    <mutant id="mutant_4951" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="(length) / 20" />
    <mutant id="mutant_4950" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.findEndOffset(long)" from="(length) - 20" to="(length) % 20" />
    <mutant id="mutant_3629" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="((aTZ.getOffset(aWhen.getTime())) * (60 * 1000))" />
    <mutant id="mutant_3628" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="aTZ.getOffset(aWhen.getTime())" />
    <mutant id="mutant_4959" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="pos * p" />
    <mutant id="mutant_3627" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="((aTZ.getOffset(aWhen.getTime())) / (60 * 1000))" to="(60 * 1000)" />
    <mutant id="mutant_4958" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="pos % p" />
    <mutant id="mutant_3626" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="(60 + 1000)" />
    <mutant id="mutant_4957" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="p" />
    <mutant id="mutant_3625" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="(60 - 1000)" />
    <mutant id="mutant_4956" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="pos" />
    <mutant id="mutant_3624" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="(60 % 1000)" />
    <mutant id="mutant_4955" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="pos - p" />
    <mutant id="mutant_3623" viable="true" in="org.eclipse.jgit.lib.PersonIdent(java.lang.String,java.lang.String,java.util.Date,java.util.TimeZone)" from="(60 * 1000)" to="60" />
    <mutant id="mutant_4954" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.getObjectSize(org.eclipse.jgit.internal.storage.file.WindowCursor,long)" from="pos + p" to="pos / p" />
    <mutant id="mutant_2370" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="(base.length) / (self.length)" />
    <mutant id="mutant_1040" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_2371" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="(base.length) - (self.length)" />
    <mutant id="mutant_1036" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_2367" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="((r.length()) / 1)" />
    <mutant id="mutant_3699" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) / 1)" />
    <mutant id="mutant_1037" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_2368" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="((r.length()) % 1)" />
    <mutant id="mutant_3698" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace + tokenBegin)" />
    <mutant id="mutant_1034" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_2365" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="((r.length()) + 1)" />
    <mutant id="mutant_3697" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace % tokenBegin)" />
    <mutant id="mutant_1035" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_2366" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="r.length()" />
    <mutant id="mutant_3696" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="tokenBegin" />
    <mutant id="mutant_1032" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_2363" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="1" />
    <mutant id="mutant_3695" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="nextSpace" />
    <mutant id="mutant_1033" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_2364" viable="true" in="org.eclipse.jgit.lib.Config.escapeValue(java.lang.String)" from="((r.length()) - 1)" to="((r.length()) * 1)" />
    <mutant id="mutant_3694" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace * tokenBegin)" />
    <mutant id="mutant_1030" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k / x)" />
    <mutant id="mutant_2361" viable="false" in="?" from="1024 * (Config.MiB)" to="1024" />
    <mutant id="mutant_3693" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace / tokenBegin)" />
    <mutant id="mutant_1031" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_2362" viable="false" in="?" from="1024 * (Config.MiB)" to="1024 - (Config.MiB)" />
    <mutant id="mutant_3692" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) * 1)" />
    <mutant id="mutant_1038" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_2369" viable="true" in="org.eclipse.jgit.lib.Config.getStringList(java.lang.String,java.lang.String,java.lang.String)" from="(base.length) + (self.length)" to="(base.length) * (self.length)" />
    <mutant id="mutant_1039" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.adjustMinMaxK(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_3691" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) % 1)" />
    <mutant id="mutant_2360" viable="false" in="?" from="1024 * (Config.MiB)" to="1024 / (Config.MiB)" />
    <mutant id="mutant_3690" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) + 1)" />
    <mutant id="mutant_1025" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="k" />
    <mutant id="mutant_2356" viable="false" in="?" from="1024 * (Config.KiB)" to="1024 - (Config.KiB)" />
    <mutant id="mutant_3688" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="1" />
    <mutant id="mutant_1026" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k % x)" />
    <mutant id="mutant_2357" viable="false" in="?" from="1024 * (Config.MiB)" to="1024 + (Config.MiB)" />
    <mutant id="mutant_3687" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="((nextSpace - tokenBegin) / 1)" />
    <mutant id="mutant_1023" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="x / 1" />
    <mutant id="mutant_2354" viable="false" in="?" from="1024 * (Config.KiB)" to="Config.KiB" />
    <mutant id="mutant_3686" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace + tokenBegin)" />
    <mutant id="mutant_1024" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="x" />
    <mutant id="mutant_2355" viable="false" in="?" from="1024 * (Config.KiB)" to="1024 % (Config.KiB)" />
    <mutant id="mutant_3685" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace % tokenBegin)" />
    <mutant id="mutant_1021" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="x - 1" />
    <mutant id="mutant_2352" viable="false" in="?" from="1024 * (Config.KiB)" to="1024 / (Config.KiB)" />
    <mutant id="mutant_3684" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="tokenBegin" />
    <mutant id="mutant_1022" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="x % 1" />
    <mutant id="mutant_2353" viable="false" in="?" from="1024 * (Config.KiB)" to="1024" />
    <mutant id="mutant_3683" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="nextSpace" />
    <mutant id="mutant_2350" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="parentIds.length" />
    <mutant id="mutant_3682" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace * tokenBegin)" />
    <mutant id="mutant_1020" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="x * 1" />
    <mutant id="mutant_2351" viable="false" in="?" from="1024 * (Config.KiB)" to="1024 + (Config.KiB)" />
    <mutant id="mutant_3681" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="(nextSpace - tokenBegin)" to="(nextSpace / tokenBegin)" />
    <mutant id="mutant_1029" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="x" />
    <mutant id="mutant_1027" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k * x)" />
    <mutant id="mutant_2358" viable="false" in="?" from="1024 * (Config.MiB)" to="1024 % (Config.MiB)" />
    <mutant id="mutant_1028" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.snake(int,int)" from="(k + x)" to="(k - x)" />
    <mutant id="mutant_2359" viable="false" in="?" from="1024 * (Config.MiB)" to="Config.MiB" />
    <mutant id="mutant_3689" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.parseLine(byte[],int,int)" from="((nextSpace - tokenBegin) - 1)" to="(nextSpace - tokenBegin)" />
    <mutant id="mutant_3680" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="lineEnd" />
    <mutant id="mutant_1014" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d / 1)" />
    <mutant id="mutant_2345" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="(parentIds.length) / 1" />
    <mutant id="mutant_3677" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="(1 / lineEnd)" />
    <mutant id="mutant_1015" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d + 1)" />
    <mutant id="mutant_2346" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="1" />
    <mutant id="mutant_3676" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="(1 * lineEnd)" />
    <mutant id="mutant_1012" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="d" />
    <mutant id="mutant_2343" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="(Constants.R_HEADS) / shortBranchName" />
    <mutant id="mutant_3675" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="1" />
    <mutant id="mutant_1013" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="1" />
    <mutant id="mutant_2344" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="(Constants.R_HEADS) % shortBranchName" />
    <mutant id="mutant_3674" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="ptr" />
    <mutant id="mutant_1010" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d % 1)" />
    <mutant id="mutant_2341" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="(Constants.R_HEADS) - shortBranchName" />
    <mutant id="mutant_3673" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="ptr + 2" />
    <mutant id="mutant_1011" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d * 1)" />
    <mutant id="mutant_2342" viable="false" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="(Constants.R_HEADS) * shortBranchName" />
    <mutant id="mutant_3672" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="ptr / 2" />
    <mutant id="mutant_3671" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="ptr % 2" />
    <mutant id="mutant_2340" viable="true" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="Constants.R_HEADS" />
    <mutant id="mutant_3670" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="2" />
    <mutant id="mutant_1018" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="d" />
    <mutant id="mutant_2349" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="(parentIds.length) - 1" />
    <mutant id="mutant_1019" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.getRight(int)" from="x + 1" to="1" />
    <mutant id="mutant_1016" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d % 1)" />
    <mutant id="mutant_2347" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="(parentIds.length) % 1" />
    <mutant id="mutant_3679" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="(1 % lineEnd)" />
    <mutant id="mutant_1017" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d * 1)" />
    <mutant id="mutant_2348" viable="true" in="org.eclipse.jgit.lib.CommitBuilder.addParentId(org.eclipse.jgit.lib.AnyObjectId)" from="(parentIds.length) + 1" to="(parentIds.length) * 1" />
    <mutant id="mutant_3678" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="(1 + lineEnd)" to="(1 - lineEnd)" />
    <mutant id="mutant_1003" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="(((d - 1) + k) - (backward.middleK))" />
    <mutant id="mutant_2334" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) % (totalWork)" />
    <mutant id="mutant_3666" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="offset" />
    <mutant id="mutant_4997" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="(findEndOffset(pos)) % pos" />
    <mutant id="mutant_1004" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="((((d - 1) + k) - (backward.middleK)) + 2)" />
    <mutant id="mutant_2335" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) - (totalWork)" />
    <mutant id="mutant_3665" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="offset * 60" />
    <mutant id="mutant_4996" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="pos" />
    <mutant id="mutant_1001" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="((((d - 1) + k) - (backward.middleK)) * 2)" />
    <mutant id="mutant_2332" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="((lastWork) / 100)" />
    <mutant id="mutant_3664" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="offset / 60" />
    <mutant id="mutant_4995" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="(length) + pos" />
    <mutant id="mutant_1002" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="2" />
    <mutant id="mutant_2333" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="(lastWork) * 100" />
    <mutant id="mutant_3663" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="offset - 60" />
    <mutant id="mutant_4994" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="(length) % pos" />
    <mutant id="mutant_2330" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="(lastWork)" />
    <mutant id="mutant_3662" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="offset + 60" />
    <mutant id="mutant_4993" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="pos" />
    <mutant id="mutant_1000" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(((d - 1) + k) - (backward.middleK))" to="(((d - 1) + k) / (backward.middleK))" />
    <mutant id="mutant_2331" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100)" to="((lastWork) + 100)" />
    <mutant id="mutant_3661" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="60" />
    <mutant id="mutant_4992" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="(length) * pos" />
    <mutant id="mutant_3660" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset / 60" to="offset" />
    <mutant id="mutant_4991" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="length" />
    <mutant id="mutant_4990" viable="false" in="org.eclipse.jgit.internal.storage.file.PackFile.mmap(long,int)" from="((int)((length) - pos))" to="(length) / pos" />
    <mutant id="mutant_1009" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d + 1)" />
    <mutant id="mutant_1007" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="1" />
    <mutant id="mutant_2338" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) * (totalWork)" />
    <mutant id="mutant_1008" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="(d - 1)" to="(d / 1)" />
    <mutant id="mutant_2339" viable="true" in="org.eclipse.jgit.lib.BranchTrackingStatus.of(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(Constants.R_HEADS) + shortBranchName" to="shortBranchName" />
    <mutant id="mutant_3669" viable="true" in="org.eclipse.jgit.lib.RebaseTodoFile.readRebaseTodo(java.lang.String,boolean)" from="ptr - 2" to="ptr * 2" />
    <mutant id="mutant_1005" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="((((d - 1) + k) - (backward.middleK)) / 2)" />
    <mutant id="mutant_2336" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="((lastWork) * 100) + (totalWork)" />
    <mutant id="mutant_3668" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="offset + 60" />
    <mutant id="mutant_4999" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="(findEndOffset(pos)) + pos" />
    <mutant id="mutant_1006" viable="true" in="org.eclipse.jgit.diff.MyersDiff$MiddleEdit$ForwardEditPaths.meets(int,int,int,long)" from="((((d - 1) + k) - (backward.middleK)) % 2)" to="((((d - 1) + k) - (backward.middleK)) - 2)" />
    <mutant id="mutant_2337" viable="true" in="org.eclipse.jgit.lib.BatchingProgressMonitor$Task.update(org.eclipse.jgit.lib.BatchingProgressMonitor,int)" from="((lastWork) * 100) / (totalWork)" to="totalWork" />
    <mutant id="mutant_3667" viable="true" in="org.eclipse.jgit.lib.PersonIdent.appendTimezone(java.lang.StringBuilder,int)" from="offset % 60" to="60" />
    <mutant id="mutant_4998" viable="true" in="org.eclipse.jgit.internal.storage.file.PackFile.representation(org.eclipse.jgit.internal.storage.file.WindowCursor,org.eclipse.jgit.lib.AnyObjectId)" from="(findEndOffset(pos)) - pos" to="findEndOffset(pos)" />
    <mutant id="mutant_2172" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_2173" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_2170" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_2171" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_2169" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_2167" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_3499" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_2168" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_3498" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_2165" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_3497" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_2166" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_3496" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_2163" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_3495" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_2164" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_3494" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="(si - 19)" />
    <mutant id="mutant_2161" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_3493" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="(si % 19)" />
    <mutant id="mutant_2162" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_3492" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="(si / 19)" />
    <mutant id="mutant_3491" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="19" />
    <mutant id="mutant_2160" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_3490" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="si" />
    <mutant id="mutant_2158" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="(p - 12)" />
    <mutant id="mutant_2159" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_3489" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 19)" to="(si * 19)" />
    <mutant id="mutant_2156" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="(p / 12)" />
    <mutant id="mutant_3488" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="(fi * 19)" />
    <mutant id="mutant_2157" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="(p * 12)" />
    <mutant id="mutant_3487" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="19" />
    <mutant id="mutant_2154" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="(p % 12)" />
    <mutant id="mutant_3486" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="(fi % 19)" />
    <mutant id="mutant_2155" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="p" />
    <mutant id="mutant_3485" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="(fi / 19)" />
    <mutant id="mutant_2152" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_3484" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="fi" />
    <mutant id="mutant_2153" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 12)" to="12" />
    <mutant id="mutant_3483" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 19)" to="(fi - 19)" />
    <mutant id="mutant_107" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_108" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="1" />
    <mutant id="mutant_109" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_103" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_104" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_105" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="p" />
    <mutant id="mutant_106" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_2150" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_3482" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="(si - 18)" />
    <mutant id="mutant_2151" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_3481" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="(si / 18)" />
    <mutant id="mutant_3480" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="(si % 18)" />
    <mutant id="mutant_2147" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_3479" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="18" />
    <mutant id="mutant_2148" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_3478" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="si" />
    <mutant id="mutant_2145" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_3477" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 18)" to="(si * 18)" />
    <mutant id="mutant_2146" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_3476" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="(fi % 18)" />
    <mutant id="mutant_2143" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_3475" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="(fi / 18)" />
    <mutant id="mutant_2144" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_3474" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="18" />
    <mutant id="mutant_2141" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_3473" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="(fi * 18)" />
    <mutant id="mutant_2142" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_3472" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="(fi - 18)" />
    <mutant id="mutant_100" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(((cnt) - p) - 1)" to="(((cnt) - p) + 1)" />
    <mutant id="mutant_101" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_102" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="1" />
    <mutant id="mutant_2149" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_118" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) * p)" />
    <mutant id="mutant_119" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="2" />
    <mutant id="mutant_114" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) / p)" />
    <mutant id="mutant_115" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="cnt" />
    <mutant id="mutant_116" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) % p)" />
    <mutant id="mutant_117" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="p" />
    <mutant id="mutant_3471" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 18)" to="fi" />
    <mutant id="mutant_2140" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="end" />
    <mutant id="mutant_3470" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="(si % 17)" />
    <mutant id="mutant_2136" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end * offset)" />
    <mutant id="mutant_3468" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="si" />
    <mutant id="mutant_4799" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 2)" />
    <mutant id="mutant_2137" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end / offset)" />
    <mutant id="mutant_3467" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="17" />
    <mutant id="mutant_4798" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) + 2)" />
    <mutant id="mutant_2134" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="end" />
    <mutant id="mutant_3466" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="(si * 17)" />
    <mutant id="mutant_4797" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_2135" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end % offset)" />
    <mutant id="mutant_3465" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="(si - 17)" />
    <mutant id="mutant_4796" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="2" />
    <mutant id="mutant_2132" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="offset" />
    <mutant id="mutant_3464" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="(fi / 17)" />
    <mutant id="mutant_4795" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="newList.length" />
    <mutant id="mutant_2133" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end + offset)" />
    <mutant id="mutant_3463" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="(fi % 17)" />
    <mutant id="mutant_4794" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="((newList.length) % j)" />
    <mutant id="mutant_2130" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end * offset)" />
    <mutant id="mutant_3462" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="(fi * 17)" />
    <mutant id="mutant_4793" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="((newList.length) + j)" />
    <mutant id="mutant_2131" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end / offset)" />
    <mutant id="mutant_3461" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="17" />
    <mutant id="mutant_4792" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="((newList.length) * j)" />
    <mutant id="mutant_110" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_111" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="p" />
    <mutant id="mutant_112" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_113" viable="true" in="org.eclipse.jgit.notes.LeafBucket.set(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.ObjectReader)" from="((cnt) - p)" to="((cnt) + p)" />
    <mutant id="mutant_2138" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="offset" />
    <mutant id="mutant_2139" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end + offset)" />
    <mutant id="mutant_3469" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 17)" to="(si / 17)" />
    <mutant id="mutant_129" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="(aBuf[aPos++]) &amp; 255" />
    <mutant id="mutant_125" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="(bBuf[bPos++]) &amp; 255" />
    <mutant id="mutant_126" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="((aBuf[aPos++]) &amp; 255) % ((bBuf[bPos++]) &amp; 255)" />
    <mutant id="mutant_127" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="((aBuf[aPos++]) &amp; 255) / ((bBuf[bPos++]) &amp; 255)" />
    <mutant id="mutant_128" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="((aBuf[aPos++]) &amp; 255) * ((bBuf[bPos++]) &amp; 255)" />
    <mutant id="mutant_121" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="(notes.length) / 2" />
    <mutant id="mutant_122" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="(notes.length) + 2" />
    <mutant id="mutant_123" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="(notes.length) - 2" />
    <mutant id="mutant_124" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="notes.length" />
    <mutant id="mutant_120" viable="true" in="org.eclipse.jgit.notes.LeafBucket.growIfFull()" from="(notes.length) * 2" to="(notes.length) % 2" />
    <mutant id="mutant_136" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="((aBuf[aPos]) &amp; 255) % (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" />
    <mutant id="mutant_137" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="(bBuf[bPos]) &amp; 255" />
    <mutant id="mutant_138" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) / ((bBuf[bPos]) &amp; 255)" />
    <mutant id="mutant_139" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) + ((bBuf[bPos]) &amp; 255)" />
    <mutant id="mutant_2198" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="8" />
    <mutant id="mutant_2199" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="(3 - (index &amp; 3))" />
    <mutant id="mutant_2196" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="(8 / (3 - (index &amp; 3)))" />
    <mutant id="mutant_2197" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="(8 % (3 - (index &amp; 3)))" />
    <mutant id="mutant_132" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="((aBuf[aPos]) &amp; 255) * (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" />
    <mutant id="mutant_133" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="((aBuf[aPos]) &amp; 255) / (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" />
    <mutant id="mutant_134" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="((aBuf[aPos]) &amp; 255) + (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" />
    <mutant id="mutant_135" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="(aBuf[aPos]) &amp; 255" />
    <mutant id="mutant_130" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos++]) &amp; 255) - ((bBuf[bPos++]) &amp; 255)" to="((aBuf[aPos++]) &amp; 255) + ((bBuf[bPos++]) &amp; 255)" />
    <mutant id="mutant_131" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="((aBuf[aPos]) &amp; 255) - (org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode))" to="org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(bMode)" />
    <mutant id="mutant_147" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="(&quot;Note[&quot; / (name()))" />
    <mutant id="mutant_148" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="&quot;Note[&quot;" />
    <mutant id="mutant_149" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="((&quot;Note[&quot; + (name())) - &quot; -&gt; &quot;)" />
    <mutant id="mutant_2194" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="(index &amp; 3)" />
    <mutant id="mutant_2195" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="(8 + (3 - (index &amp; 3)))" />
    <mutant id="mutant_2192" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="(3 / (index &amp; 3))" />
    <mutant id="mutant_2193" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="(3 + (index &amp; 3))" />
    <mutant id="mutant_2190" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="3" />
    <mutant id="mutant_2191" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="(3 * (index &amp; 3))" />
    <mutant id="mutant_2189" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(3 - (index &amp; 3))" to="(3 % (index &amp; 3))" />
    <mutant id="mutant_2187" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_2188" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_2185" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_2186" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_143" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="(&quot;Note[&quot; % (name()))" />
    <mutant id="mutant_144" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="(name())" />
    <mutant id="mutant_145" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="(&quot;Note[&quot; * (name()))" />
    <mutant id="mutant_146" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(&quot;Note[&quot; + (name()))" to="(&quot;Note[&quot; - (name()))" />
    <mutant id="mutant_140" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)" />
    <mutant id="mutant_141" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) % ((bBuf[bPos]) &amp; 255)" />
    <mutant id="mutant_142" viable="true" in="org.eclipse.jgit.notes.NonNoteEntry.pathCompare(byte[],int,int,org.eclipse.jgit.lib.FileMode,byte[],int,int,org.eclipse.jgit.lib.FileMode)" from="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) - ((bBuf[bPos]) &amp; 255)" to="(org.eclipse.jgit.notes.NonNoteEntry.lastPathChar(aMode)) * ((bBuf[bPos]) &amp; 255)" />
    <mutant id="mutant_158" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) - (data.name()))" />
    <mutant id="mutant_159" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) / (data.name()))" />
    <mutant id="mutant_2183" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_2184" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_2181" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_2182" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_2180" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_2178" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_2179" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_2176" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_2177" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_2174" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_2175" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.compareTo(int[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_154" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="&quot; -&gt; &quot;" />
    <mutant id="mutant_155" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) % (data.name()))" />
    <mutant id="mutant_156" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" />
    <mutant id="mutant_157" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="(data.name())" />
    <mutant id="mutant_150" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="((&quot;Note[&quot; + (name())) / &quot; -&gt; &quot;)" />
    <mutant id="mutant_151" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="((&quot;Note[&quot; + (name())) % &quot; -&gt; &quot;)" />
    <mutant id="mutant_152" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="((&quot;Note[&quot; + (name())) * &quot; -&gt; &quot;)" />
    <mutant id="mutant_153" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;)" to="(&quot;Note[&quot; + (name()))" />
    <mutant id="mutant_169" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="treeDepth" />
    <mutant id="mutant_160" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name()))" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) * (data.name()))" />
    <mutant id="mutant_165" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_166" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) % &quot;]&quot;" />
    <mutant id="mutant_167" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="(treeDepth - 2)" />
    <mutant id="mutant_168" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="(treeDepth / 2)" />
    <mutant id="mutant_161" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) / &quot;]&quot;" />
    <mutant id="mutant_162" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) - &quot;]&quot;" />
    <mutant id="mutant_163" viable="false" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) * &quot;]&quot;" />
    <mutant id="mutant_164" viable="true" in="org.eclipse.jgit.notes.Note.toString()" from="(((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())) + &quot;]&quot;" to="((&quot;Note[&quot; + (name())) + &quot; -&gt; &quot;) + (data.name())" />
    <mutant id="mutant_170" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="2" />
    <mutant id="mutant_171" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="(treeDepth + 2)" />
    <mutant id="mutant_176" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="(treeDepth - 1)" />
    <mutant id="mutant_177" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="(treeDepth % 1)" />
    <mutant id="mutant_178" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="(treeDepth * 1)" />
    <mutant id="mutant_179" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="(treeDepth - 2)" />
    <mutant id="mutant_172" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth * 2)" to="(treeDepth % 2)" />
    <mutant id="mutant_173" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="1" />
    <mutant id="mutant_174" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="treeDepth" />
    <mutant id="mutant_175" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeFanoutBucket(int,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket,org.eclipse.jgit.notes.FanoutBucket)" from="(treeDepth + 1)" to="(treeDepth / 1)" />
    <mutant id="mutant_180" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="(treeDepth / 2)" />
    <mutant id="mutant_181" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="treeDepth" />
    <mutant id="mutant_182" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="2" />
    <mutant id="mutant_187" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) % (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_188" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) / (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_189" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) - (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_183" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="(treeDepth + 2)" />
    <mutant id="mutant_184" viable="true" in="org.eclipse.jgit.notes.NoteMapMerger.mergeLeafBucket(int,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket,org.eclipse.jgit.notes.LeafBucket)" from="(treeDepth * 2)" to="(treeDepth % 2)" />
    <mutant id="mutant_185" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) * (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_186" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_190" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseObjectId(org.eclipse.jgit.lib.MutableObjectId)" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(pathPadding)" />
    <mutant id="mutant_191" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="((pathOffset) % 0)" />
    <mutant id="mutant_192" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="0" />
    <mutant id="mutant_193" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="pathOffset" />
    <mutant id="mutant_198" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="1" />
    <mutant id="mutant_199" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="((pathOffset) - 1)" />
    <mutant id="mutant_194" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="((pathOffset) / 0)" />
    <mutant id="mutant_195" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="((pathOffset) - 0)" />
    <mutant id="mutant_196" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 0)" to="((pathOffset) * 0)" />
    <mutant id="mutant_197" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="((pathOffset) % 1)" />
    <mutant id="mutant_12806" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" />
    <mutant id="mutant_12805" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="(new Date(((until) * 1000L)))" />
    <mutant id="mutant_12808" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) % (new Date(((until) * 1000L))))" />
    <mutant id="mutant_12807" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) / (new Date(((until) * 1000L))))" />
    <mutant id="mutant_12809" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) % &quot;)&quot;" />
    <mutant id="mutant_12800" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="((until) / 1000L)" />
    <mutant id="mutant_12802" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="((until) + 1000L)" />
    <mutant id="mutant_12801" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="until" />
    <mutant id="mutant_12804" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) - (new Date(((until) * 1000L))))" />
    <mutant id="mutant_12803" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L))))" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) * (new Date(((until) * 1000L))))" />
    <mutant id="mutant_12817" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="ts - 1000" />
    <mutant id="mutant_12816" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="ts + 1000" />
    <mutant id="mutant_12819" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="ts % 1000" />
    <mutant id="mutant_12818" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="1000" />
    <mutant id="mutant_12811" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) * &quot;)&quot;" />
    <mutant id="mutant_12810" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) - &quot;)&quot;" />
    <mutant id="mutant_12813" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))" />
    <mutant id="mutant_12812" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) / &quot;)&quot;" />
    <mutant id="mutant_12815" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="ts * 1000" />
    <mutant id="mutant_12814" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;) + (new Date(((until) * 1000L)))) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_12729" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="((when) - 1000L)" />
    <mutant id="mutant_12728" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="((when) % 1000L)" />
    <mutant id="mutant_12721" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_12720" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_12723" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) / &quot;(&quot;)" />
    <mutant id="mutant_12722" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_12725" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="((when) + 1000L)" />
    <mutant id="mutant_12724" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_12727" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="1000L" />
    <mutant id="mutant_12726" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="when" />
    <mutant id="mutant_11408" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="(&quot;\&quot;&quot; / (message))" />
    <mutant id="mutant_11409" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="(&quot;\&quot;&quot; - (message))" />
    <mutant id="mutant_12739" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - &quot;)&quot;" />
    <mutant id="mutant_11400" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" to="((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef))" />
    <mutant id="mutant_12732" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) % (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11401" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="(((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;))" />
    <mutant id="mutant_12731" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) - (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11402" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) * &quot;, message=&quot;)" />
    <mutant id="mutant_12734" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) / (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11403" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) % &quot;, message=&quot;)" />
    <mutant id="mutant_12733" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(new Date(((when) * 1000L)))" />
    <mutant id="mutant_11404" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) / &quot;, message=&quot;)" />
    <mutant id="mutant_12736" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_11405" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="&quot;, message=&quot;" />
    <mutant id="mutant_12735" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) * (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11406" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) - &quot;, message=&quot;)" />
    <mutant id="mutant_12738" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))" />
    <mutant id="mutant_11407" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="(&quot;\&quot;&quot; * (message))" />
    <mutant id="mutant_12737" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) / &quot;)&quot;" />
    <mutant id="mutant_12730" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((when) * 1000L)" to="((when) / 1000L)" />
    <mutant id="mutant_12707" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(b.toString())" />
    <mutant id="mutant_12706" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) * &quot; AND &quot;)" />
    <mutant id="mutant_12709" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) / (b.toString()))" />
    <mutant id="mutant_12708" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" />
    <mutant id="mutant_12701" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) / &quot; AND &quot;)" />
    <mutant id="mutant_12700" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; / (a.toString()))" />
    <mutant id="mutant_12703" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="(&quot;(&quot; + (a.toString()))" />
    <mutant id="mutant_12702" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) % &quot; AND &quot;)" />
    <mutant id="mutant_12705" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="((&quot;(&quot; + (a.toString())) - &quot; AND &quot;)" />
    <mutant id="mutant_12704" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;)" to="&quot; AND &quot;" />
    <mutant id="mutant_12718" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) / &quot;)&quot;" />
    <mutant id="mutant_12717" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) * &quot;)&quot;" />
    <mutant id="mutant_12719" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_12710" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) - (b.toString()))" />
    <mutant id="mutant_12712" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) % (b.toString()))" />
    <mutant id="mutant_12711" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) * (b.toString()))" />
    <mutant id="mutant_12714" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) % &quot;)&quot;" />
    <mutant id="mutant_12713" viable="false" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) - &quot;)&quot;" />
    <mutant id="mutant_12716" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_12715" viable="true" in="org.eclipse.jgit.revwalk.filter.AndRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())) + &quot;)&quot;" to="((&quot;(&quot; + (a.toString())) + &quot; AND &quot;) + (b.toString())" />
    <mutant id="mutant_10102" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="((super.toString()) - &quot;:&quot;)" />
    <mutant id="mutant_11433" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="((SideBandInputStream.PFX_REMOTE) % (currentTask))" />
    <mutant id="mutant_12765" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_10103" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="((super.toString()) / &quot;:&quot;)" />
    <mutant id="mutant_11434" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="((SideBandInputStream.PFX_REMOTE) * (currentTask))" />
    <mutant id="mutant_12764" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) % &quot;)&quot;" />
    <mutant id="mutant_10104" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="(super.toString())" />
    <mutant id="mutant_11435" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="SideBandInputStream.PFX_REMOTE" />
    <mutant id="mutant_12767" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="until + 1000" />
    <mutant id="mutant_10105" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_11436" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="currentTask" />
    <mutant id="mutant_12766" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * &quot;)&quot;" />
    <mutant id="mutant_10106" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="((super.toString()) * &quot;:&quot;)" />
    <mutant id="mutant_11437" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt / (lastCnt))" />
    <mutant id="mutant_12769" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="until - 1000" />
    <mutant id="mutant_10107" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="(super.toString()) + &quot;:&quot;" />
    <mutant id="mutant_11438" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="lastCnt" />
    <mutant id="mutant_12768" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="until" />
    <mutant id="mutant_10108" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="((super.toString()) + &quot;:&quot;) - (revstr)" />
    <mutant id="mutant_11439" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt * (lastCnt))" />
    <mutant id="mutant_10109" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="((super.toString()) + &quot;:&quot;) * (revstr)" />
    <mutant id="mutant_4821" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) % &quot;.idx&quot;" />
    <mutant id="mutant_4820" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) - &quot;.idx&quot;" />
    <mutant id="mutant_12761" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) / &quot;)&quot;" />
    <mutant id="mutant_11430" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)" />
    <mutant id="mutant_12760" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_10100" viable="false" in="org.eclipse.jgit.errors.PackProtocolException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri + &quot;: &quot;) + s)" to="((uri + &quot;: &quot;) / s)" />
    <mutant id="mutant_11431" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="((SideBandInputStream.PFX_REMOTE) / (currentTask))" />
    <mutant id="mutant_12763" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - &quot;)&quot;" />
    <mutant id="mutant_10101" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;)" to="((super.toString()) % &quot;:&quot;)" />
    <mutant id="mutant_11432" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.beginTask(int)" from="((SideBandInputStream.PFX_REMOTE) + (currentTask))" to="((SideBandInputStream.PFX_REMOTE) - (currentTask))" />
    <mutant id="mutant_12762" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))" />
    <mutant id="mutant_4829" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) % &quot;.idx&quot;)" />
    <mutant id="mutant_4828" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) / &quot;.idx&quot;)" />
    <mutant id="mutant_4827" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) - &quot;.idx&quot;)" />
    <mutant id="mutant_4826" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) * &quot;.idx&quot;)" />
    <mutant id="mutant_4825" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)" />
    <mutant id="mutant_4824" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="&quot;.idx&quot;" />
    <mutant id="mutant_4823" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) * &quot;.idx&quot;" />
    <mutant id="mutant_4822" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))" />
    <mutant id="mutant_4819" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) + &quot;.idx&quot;" to="(p.substring(0, ((p.length()) - (&quot;.pack&quot;.length())))) / &quot;.idx&quot;" />
    <mutant id="mutant_10113" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) * &quot;: &quot;)" />
    <mutant id="mutant_11444" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="lastCnt" />
    <mutant id="mutant_12776" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_10114" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) % &quot;: &quot;)" />
    <mutant id="mutant_11445" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt * (lastCnt))" />
    <mutant id="mutant_12775" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_10115" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(uri.setPass(null))" />
    <mutant id="mutant_11446" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt + (lastCnt))" />
    <mutant id="mutant_12778" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_10116" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_11447" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="cnt" />
    <mutant id="mutant_12777" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) / &quot;(&quot;)" />
    <mutant id="mutant_10117" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) / &quot;: &quot;)" />
    <mutant id="mutant_11448" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt % (lastCnt))" />
    <mutant id="mutant_10118" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) - &quot;: &quot;)" />
    <mutant id="mutant_11449" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="((SideBandInputStream.PFX_REMOTE) / (readString(available)))" />
    <mutant id="mutant_12779" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="((when) + 1000L)" />
    <mutant id="mutant_10119" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_4810" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="len" />
    <mutant id="mutant_12770" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="until * 1000" />
    <mutant id="mutant_11440" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt + (lastCnt))" />
    <mutant id="mutant_12772" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="until % 1000" />
    <mutant id="mutant_10110" viable="true" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="revstr" />
    <mutant id="mutant_11441" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="cnt" />
    <mutant id="mutant_12771" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between(long,long)" from="((int)(until / 1000))" to="1000" />
    <mutant id="mutant_10111" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="((super.toString()) + &quot;:&quot;) % (revstr)" />
    <mutant id="mutant_11442" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt % (lastCnt))" />
    <mutant id="mutant_12774" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_10112" viable="false" in="org.eclipse.jgit.errors.RevisionSyntaxException.toString()" from="((super.toString()) + &quot;:&quot;) + (revstr)" to="((super.toString()) + &quot;:&quot;) / (revstr)" />
    <mutant id="mutant_11443" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.doProgressLine(java.lang.String)" from="(cnt - (lastCnt))" to="(cnt / (lastCnt))" />
    <mutant id="mutant_12773" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_4818" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="((p.length()) % (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_4817" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="((p.length()) + (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_4816" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="((p.length()) / (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_4815" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="((p.length()) * (&quot;.pack&quot;.length()))" />
    <mutant id="mutant_4814" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.getPackSize()" from="((p.length()) - (&quot;.pack&quot;.length()))" to="p.length()" />
    <mutant id="mutant_4813" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len + 1)" />
    <mutant id="mutant_4812" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len / 1)" />
    <mutant id="mutant_4811" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len % 1)" />
    <mutant id="mutant_11419" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) % ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" />
    <mutant id="mutant_4809" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="1" />
    <mutant id="mutant_4808" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onAppendBase(int,byte[],org.eclipse.jgit.transport.PackedObjectInfo)" from="(len - 1)" to="(len * 1)" />
    <mutant id="mutant_11411" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="&quot;\&quot;&quot;" />
    <mutant id="mutant_12743" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="(super.toString())" />
    <mutant id="mutant_11412" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="(message)" />
    <mutant id="mutant_12742" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * &quot;)&quot;" />
    <mutant id="mutant_11413" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + (message)) / &quot;\&quot;&quot;" />
    <mutant id="mutant_12745" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="&quot;(&quot;" />
    <mutant id="mutant_11414" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="&quot;\&quot;&quot; + (message)" />
    <mutant id="mutant_12744" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) % &quot;(&quot;)" />
    <mutant id="mutant_11415" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="&quot;\&quot;&quot;" />
    <mutant id="mutant_12747" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) / &quot;(&quot;)" />
    <mutant id="mutant_11416" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + (message)) * &quot;\&quot;&quot;" />
    <mutant id="mutant_12746" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) * &quot;(&quot;)" />
    <mutant id="mutant_11417" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + (message)) % &quot;\&quot;&quot;" />
    <mutant id="mutant_12749" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="((when) + 1000L)" />
    <mutant id="mutant_11418" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot;" to="(&quot;\&quot;&quot; + (message)) - &quot;\&quot;&quot;" />
    <mutant id="mutant_12748" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((super.toString()) + &quot;(&quot;)" to="((super.toString()) - &quot;(&quot;)" />
    <mutant id="mutant_12741" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_11410" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(&quot;\&quot;&quot; + (message))" to="(&quot;\&quot;&quot; % (message))" />
    <mutant id="mutant_12740" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$After.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot;)&quot;" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) % &quot;)&quot;" />
    <mutant id="mutant_4807" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="(fanOut / e)" />
    <mutant id="mutant_4806" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="(fanOut - e)" />
    <mutant id="mutant_4805" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="(fanOut % e)" />
    <mutant id="mutant_4804" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="fanOut" />
    <mutant id="mutant_4803" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="(fanOut * e)" />
    <mutant id="mutant_4802" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="(fanOut + e)" to="e" />
    <mutant id="mutant_4801" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 2)" />
    <mutant id="mutant_4800" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.resolve(java.util.Set,org.eclipse.jgit.lib.AbbreviatedObjectId)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 2)" />
    <mutant id="mutant_11422" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) / ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" />
    <mutant id="mutant_12754" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="((when) / 1000L)" />
    <mutant id="mutant_11423" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) * ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" />
    <mutant id="mutant_12753" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="((when) - 1000L)" />
    <mutant id="mutant_11424" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)" />
    <mutant id="mutant_12756" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) % (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11425" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) * &quot;]&quot;" />
    <mutant id="mutant_12755" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) - (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11426" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) / &quot;]&quot;" />
    <mutant id="mutant_12758" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) / (new Date(((when) * 1000L))))" />
    <mutant id="mutant_11427" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) - &quot;]&quot;" />
    <mutant id="mutant_12757" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(new Date(((when) * 1000L)))" />
    <mutant id="mutant_11428" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_11429" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) + &quot;]&quot;" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;)) % &quot;]&quot;" />
    <mutant id="mutant_12759" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) * (new Date(((when) * 1000L))))" />
    <mutant id="mutant_12750" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="when" />
    <mutant id="mutant_11420" viable="false" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) - ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" />
    <mutant id="mutant_12752" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="((when) % 1000L)" />
    <mutant id="mutant_11421" viable="true" in="org.eclipse.jgit.transport.RemoteRefUpdate.toString()" from="(((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;) + ((message) != null ? (&quot;\&quot;&quot; + (message)) + &quot;\&quot;&quot; : &quot;null&quot;))" to="((((((((((((&quot;RemoteRefUpdate[remoteName=&quot; + (remoteName)) + &quot;, &quot;) + (status)) + &quot;, &quot;) + ((expectedOldObjectId) != null ? expectedOldObjectId.name() : &quot;(null)&quot;)) + &quot;...&quot;) + ((newObjectId) != null ? newObjectId.name() : &quot;(null)&quot;)) + (fastForward ? &quot;, fastForward&quot; : &quot;&quot;)) + &quot;, srcRef=&quot;) + (srcRef)) + (forceUpdate ? &quot;, forceUpdate&quot; : &quot;&quot;)) + &quot;, message=&quot;)" />
    <mutant id="mutant_12751" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Before.toString()" from="((when) * 1000L)" to="1000L" />
    <mutant id="mutant_10146" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_11477" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="buffer.length" />
    <mutant id="mutant_10147" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) / &quot;]&quot;)" />
    <mutant id="mutant_11478" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="(buffer.length) * (cnt)" />
    <mutant id="mutant_10148" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) - &quot;]&quot;)" />
    <mutant id="mutant_11479" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="(getTimeout()) % 1000" />
    <mutant id="mutant_10149" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="(&quot;Translation missing for [&quot; / (bundleClass.getName()))" />
    <mutant id="mutant_2202" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="(&quot;AnyObjectId[&quot; - (name()))" />
    <mutant id="mutant_3534" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p / 12)" />
    <mutant id="mutant_4865" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="((byOffset.length) - 64)" />
    <mutant id="mutant_2203" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="&quot;AnyObjectId[&quot;" />
    <mutant id="mutant_3533" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="p" />
    <mutant id="mutant_4864" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="byOffset.length" />
    <mutant id="mutant_11470" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s % 1)" />
    <mutant id="mutant_2200" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.getByte(int)" from="(8 * (3 - (index &amp; 3)))" to="(8 - (3 - (index &amp; 3)))" />
    <mutant id="mutant_3532" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p % 12)" />
    <mutant id="mutant_4863" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="((byOffset.length) % 64)" />
    <mutant id="mutant_10140" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" />
    <mutant id="mutant_11471" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="s" />
    <mutant id="mutant_2201" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="(&quot;AnyObjectId[&quot; % (name()))" />
    <mutant id="mutant_3531" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="12" />
    <mutant id="mutant_4862" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="((byOffset.length) * 64)" />
    <mutant id="mutant_10141" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) % (locale.toString()))" />
    <mutant id="mutant_11472" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s - 1)" />
    <mutant id="mutant_3530" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_4861" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="((byOffset.length) + 64)" />
    <mutant id="mutant_10142" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) / (locale.toString()))" />
    <mutant id="mutant_11473" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="(buffer.length) + (cnt)" />
    <mutant id="mutant_4860" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="(n % origCnt)" />
    <mutant id="mutant_10143" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) % &quot;]&quot;)" />
    <mutant id="mutant_11474" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="cnt" />
    <mutant id="mutant_10144" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) * &quot;]&quot;)" />
    <mutant id="mutant_11475" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="(buffer.length) / (cnt)" />
    <mutant id="mutant_10145" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;]&quot;)" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" />
    <mutant id="mutant_11476" viable="true" in="org.eclipse.jgit.transport.SideBandOutputStream.write(byte[],int,int)" from="(buffer.length) - (cnt)" to="(buffer.length) % (cnt)" />
    <mutant id="mutant_2208" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AnyObjectId[&quot; + (name())) - &quot;]&quot;" />
    <mutant id="mutant_2209" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_3539" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_2206" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="(&quot;AnyObjectId[&quot; * (name()))" />
    <mutant id="mutant_3538" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_4869" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="(byAddOrder.size()) + 1" />
    <mutant id="mutant_2207" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AnyObjectId[&quot; + (name())) / &quot;]&quot;" />
    <mutant id="mutant_3537" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_4868" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="1" />
    <mutant id="mutant_2204" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="(name())" />
    <mutant id="mutant_3536" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p - 12)" />
    <mutant id="mutant_4867" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="(byAddOrder.size()) / 1" />
    <mutant id="mutant_2205" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name()))" to="(&quot;AnyObjectId[&quot; / (name()))" />
    <mutant id="mutant_3535" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 12)" to="(p * 12)" />
    <mutant id="mutant_4866" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder(java.util.List)" from="((byOffset.length) / 64)" to="64" />
    <mutant id="mutant_10157" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) / &quot;, &quot;)" />
    <mutant id="mutant_11488" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="((TestProtocol.SCHEME) - &quot;://test/conn&quot;)" />
    <mutant id="mutant_10158" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) * &quot;, &quot;)" />
    <mutant id="mutant_11489" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="((TestProtocol.SCHEME) * &quot;://test/conn&quot;)" />
    <mutant id="mutant_10159" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) % &quot;, &quot;)" />
    <mutant id="mutant_3523" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_4854" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="&quot;.idx&quot;" />
    <mutant id="mutant_11480" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="1000" />
    <mutant id="mutant_3522" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_4853" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="(&quot;pack-&quot; + name)" />
    <mutant id="mutant_10150" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="(&quot;Translation missing for [&quot; * (bundleClass.getName()))" />
    <mutant id="mutant_11481" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="(getTimeout()) / 1000" />
    <mutant id="mutant_3521" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_4852" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="((&quot;pack-&quot; + name) - &quot;.idx&quot;)" />
    <mutant id="mutant_10151" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="(&quot;Translation missing for [&quot; - (bundleClass.getName()))" />
    <mutant id="mutant_11482" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="(getTimeout()) - 1000" />
    <mutant id="mutant_3520" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_4851" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="((&quot;pack-&quot; + name) % &quot;.idx&quot;)" />
    <mutant id="mutant_10152" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="&quot;Translation missing for [&quot;" />
    <mutant id="mutant_11483" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="getTimeout()" />
    <mutant id="mutant_4850" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="((&quot;pack-&quot; + name) / &quot;.idx&quot;)" />
    <mutant id="mutant_10153" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="(bundleClass.getName())" />
    <mutant id="mutant_11484" viable="true" in="org.eclipse.jgit.transport.SshTransport.getSession()" from="(getTimeout()) * 1000" to="(getTimeout()) + 1000" />
    <mutant id="mutant_10154" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" to="(&quot;Translation missing for [&quot; % (bundleClass.getName()))" />
    <mutant id="mutant_11485" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="((TestProtocol.SCHEME) / &quot;://test/conn&quot;)" />
    <mutant id="mutant_10155" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) - &quot;, &quot;)" />
    <mutant id="mutant_11486" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="((TestProtocol.SCHEME) % &quot;://test/conn&quot;)" />
    <mutant id="mutant_10156" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(&quot;Translation missing for [&quot; + (bundleClass.getName()))" />
    <mutant id="mutant_11487" viable="true" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="(TestProtocol.SCHEME)" />
    <mutant id="mutant_3529" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_3528" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_4859" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="(n / origCnt)" />
    <mutant id="mutant_3527" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_4858" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="(n * origCnt)" />
    <mutant id="mutant_3526" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_4857" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="n" />
    <mutant id="mutant_3525" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_4856" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="(n + origCnt)" />
    <mutant id="mutant_3524" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_4855" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.onEndThinPack()" from="(n - origCnt)" to="origCnt" />
    <mutant id="mutant_10124" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) % s)" />
    <mutant id="mutant_11455" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="(progressBuffer) - pkt" />
    <mutant id="mutant_12787" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(new Date(((when) * 1000L)))" />
    <mutant id="mutant_10125" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="(&quot;Loading of translation bundle failed for [&quot; - (bundleClass.getName()))" />
    <mutant id="mutant_11456" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="(progressBuffer) / pkt" />
    <mutant id="mutant_12786" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) % (new Date(((when) * 1000L))))" />
    <mutant id="mutant_10126" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="&quot;Loading of translation bundle failed for [&quot;" />
    <mutant id="mutant_11457" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="(progressBuffer) % pkt" />
    <mutant id="mutant_12789" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) * (new Date(((when) * 1000L))))" />
    <mutant id="mutant_10127" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="(&quot;Loading of translation bundle failed for [&quot; * (bundleClass.getName()))" />
    <mutant id="mutant_11458" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="(progressBuffer) * pkt" />
    <mutant id="mutant_12788" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) / (new Date(((when) * 1000L))))" />
    <mutant id="mutant_10128" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="(bundleClass.getName())" />
    <mutant id="mutant_11459" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="pkt" />
    <mutant id="mutant_10129" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="(&quot;Loading of translation bundle failed for [&quot; / (bundleClass.getName()))" />
    <mutant id="mutant_3512" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p * 24)" />
    <mutant id="mutant_4843" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; % name)" />
    <mutant id="mutant_3511" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p - 24)" />
    <mutant id="mutant_4842" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + name) / &quot;.pack&quot;)" />
    <mutant id="mutant_3510" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="p" />
    <mutant id="mutant_4841" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="(&quot;pack-&quot; + name)" />
    <mutant id="mutant_12781" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="1000L" />
    <mutant id="mutant_4840" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="&quot;.pack&quot;" />
    <mutant id="mutant_11450" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="((SideBandInputStream.PFX_REMOTE) % (readString(available)))" />
    <mutant id="mutant_12780" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="when" />
    <mutant id="mutant_10120" viable="true" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((uri.setPass(null)) + &quot;: &quot;)" />
    <mutant id="mutant_11451" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="((SideBandInputStream.PFX_REMOTE) * (readString(available)))" />
    <mutant id="mutant_12783" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="((when) - 1000L)" />
    <mutant id="mutant_10121" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) - s)" />
    <mutant id="mutant_11452" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="readString(available)" />
    <mutant id="mutant_12782" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="((when) % 1000L)" />
    <mutant id="mutant_10122" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) / s)" />
    <mutant id="mutant_11453" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="SideBandInputStream.PFX_REMOTE" />
    <mutant id="mutant_12785" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="(((super.toString()) + &quot;(&quot;) - (new Date(((when) * 1000L))))" />
    <mutant id="mutant_10123" viable="false" in="org.eclipse.jgit.errors.TooLargePackException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) * s)" />
    <mutant id="mutant_11454" viable="false" in="org.eclipse.jgit.transport.SideBandInputStream.needDataPacket()" from="((SideBandInputStream.PFX_REMOTE) + (readString(available)))" to="((SideBandInputStream.PFX_REMOTE) - (readString(available)))" />
    <mutant id="mutant_12784" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((when) * 1000L)" to="((when) / 1000L)" />
    <mutant id="mutant_3519" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_3518" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="32" />
    <mutant id="mutant_4849" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.idx&quot;)" to="((&quot;pack-&quot; + name) * &quot;.idx&quot;)" />
    <mutant id="mutant_3517" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p - 32)" />
    <mutant id="mutant_4848" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; - name)" />
    <mutant id="mutant_3516" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p * 32)" />
    <mutant id="mutant_4847" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; / name)" />
    <mutant id="mutant_3515" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p / 32)" />
    <mutant id="mutant_4846" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="&quot;pack-&quot;" />
    <mutant id="mutant_3514" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="(p % 32)" />
    <mutant id="mutant_4845" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="name" />
    <mutant id="mutant_3513" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 32)" to="p" />
    <mutant id="mutant_4844" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; * name)" />
    <mutant id="mutant_10135" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" />
    <mutant id="mutant_11466" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s - 1)" />
    <mutant id="mutant_12798" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="((until) - 1000L)" />
    <mutant id="mutant_10136" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_11467" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="1" />
    <mutant id="mutant_12797" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="((until) % 1000L)" />
    <mutant id="mutant_10137" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) - (locale.toString()))" />
    <mutant id="mutant_11468" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s * 1)" />
    <mutant id="mutant_10138" viable="true" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(locale.toString())" />
    <mutant id="mutant_11469" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s / 1)" />
    <mutant id="mutant_12799" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((until) * 1000L)" to="1000L" />
    <mutant id="mutant_10139" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;) * (locale.toString()))" />
    <mutant id="mutant_3501" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_4832" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; * name)" />
    <mutant id="mutant_12790" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" to="((super.toString()) + &quot;(&quot;)" />
    <mutant id="mutant_3500" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_4831" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; % name)" />
    <mutant id="mutant_4830" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.parse(org.eclipse.jgit.lib.ProgressMonitor,org.eclipse.jgit.lib.ProgressMonitor)" from="((org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.baseName(tmpPack)) + &quot;.idx&quot;)" to="&quot;.idx&quot;" />
    <mutant id="mutant_11460" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(progressBuffer) + pkt" to="progressBuffer" />
    <mutant id="mutant_12792" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) % &quot; - &quot;)" />
    <mutant id="mutant_10130" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="(&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName()))" to="(&quot;Loading of translation bundle failed for [&quot; % (bundleClass.getName()))" />
    <mutant id="mutant_11461" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="1" />
    <mutant id="mutant_12791" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="(((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L))))" />
    <mutant id="mutant_10131" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) * &quot;, &quot;)" />
    <mutant id="mutant_11462" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s * 1)" />
    <mutant id="mutant_12794" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) / &quot; - &quot;)" />
    <mutant id="mutant_10132" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) / &quot;, &quot;)" />
    <mutant id="mutant_11463" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s / 1)" />
    <mutant id="mutant_12793" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) - &quot; - &quot;)" />
    <mutant id="mutant_10133" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) % &quot;, &quot;)" />
    <mutant id="mutant_11464" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="(s % 1)" />
    <mutant id="mutant_12796" viable="true" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="&quot; - &quot;" />
    <mutant id="mutant_10134" viable="false" in="org.eclipse.jgit.errors.TranslationBundleLoadingException(java.lang.Class,java.util.Locale,java.lang.Exception)" from="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="((&quot;Loading of translation bundle failed for [&quot; + (bundleClass.getName())) - &quot;, &quot;)" />
    <mutant id="mutant_11465" viable="true" in="org.eclipse.jgit.transport.SideBandInputStream.progress(java.lang.String)" from="(s + 1)" to="s" />
    <mutant id="mutant_12795" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter$Between.toString()" from="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) + &quot; - &quot;)" to="((((super.toString()) + &quot;(&quot;) + (new Date(((when) * 1000L)))) * &quot; - &quot;)" />
    <mutant id="mutant_3509" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="24" />
    <mutant id="mutant_3508" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p % 24)" />
    <mutant id="mutant_4839" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + name) - &quot;.pack&quot;)" />
    <mutant id="mutant_3507" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 24)" to="(p / 24)" />
    <mutant id="mutant_4838" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + name) % &quot;.pack&quot;)" />
    <mutant id="mutant_3506" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_4837" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="((&quot;pack-&quot; + name) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + name) * &quot;.pack&quot;)" />
    <mutant id="mutant_3505" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_4836" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; - name)" />
    <mutant id="mutant_3504" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_4835" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; / name)" />
    <mutant id="mutant_3503" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_4834" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="&quot;pack-&quot;" />
    <mutant id="mutant_3502" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromHexString(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_4833" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectoryPackParser.renameAndOpenPack(java.lang.String)" from="(&quot;pack-&quot; + name)" to="name" />
    <mutant id="mutant_3581" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="(1 &lt;&lt; (bits)) % 1" />
    <mutant id="mutant_2250" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="o" />
    <mutant id="mutant_3580" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="1" />
    <mutant id="mutant_2246" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="(o - 2)" />
    <mutant id="mutant_3578" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="(bits - (ObjectIdOwnerMap.SEGMENT_BITS))" />
    <mutant id="mutant_10182" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) - &quot;]&quot;)" />
    <mutant id="mutant_2247" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="(o * 2)" />
    <mutant id="mutant_3577" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="bits" />
    <mutant id="mutant_10183" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" />
    <mutant id="mutant_2244" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="(o / 2)" />
    <mutant id="mutant_3576" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="(bits % (ObjectIdOwnerMap.SEGMENT_BITS))" />
    <mutant id="mutant_10184" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) / &quot;]&quot;)" />
    <mutant id="mutant_2245" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="o" />
    <mutant id="mutant_3575" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="(ObjectIdOwnerMap.SEGMENT_BITS)" />
    <mutant id="mutant_10185" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) * &quot;: &quot;)" />
    <mutant id="mutant_2242" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="(o % 1)" />
    <mutant id="mutant_3574" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="(bits / (ObjectIdOwnerMap.SEGMENT_BITS))" />
    <mutant id="mutant_10186" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) % &quot;: &quot;)" />
    <mutant id="mutant_2243" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="2" />
    <mutant id="mutant_3573" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.computeGrowAt(int)" from="(bits + (ObjectIdOwnerMap.SEGMENT_BITS))" to="(bits * (ObjectIdOwnerMap.SEGMENT_BITS))" />
    <mutant id="mutant_10187" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(uri.setPass(null))" />
    <mutant id="mutant_2240" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="(o - 1)" />
    <mutant id="mutant_3572" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="32" />
    <mutant id="mutant_10188" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_2241" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="(o * 1)" />
    <mutant id="mutant_3571" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="32 + (ObjectIdOwnerMap.SEGMENT_BITS)" />
    <mutant id="mutant_10189" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) / &quot;: &quot;)" />
    <mutant id="mutant_2248" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 2)" to="(o % 2)" />
    <mutant id="mutant_10180" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) % &quot;]&quot;)" />
    <mutant id="mutant_2249" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 3)" to="3" />
    <mutant id="mutant_3579" viable="true" in="org.eclipse.jgit.lib.ObjectIdOwnerMap.grow()" from="(1 &lt;&lt; (bits)) - 1" to="(1 &lt;&lt; (bits)) / 1" />
    <mutant id="mutant_10181" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_3570" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="32 / (ObjectIdOwnerMap.SEGMENT_BITS)" />
    <mutant id="mutant_2235" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="(o % 16)" />
    <mutant id="mutant_3567" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="32 % (ObjectIdOwnerMap.SEGMENT_BITS)" />
    <mutant id="mutant_4898" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="(i - (recentBitmaps.length))" />
    <mutant id="mutant_10193" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) - s)" />
    <mutant id="mutant_2236" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="(o * 16)" />
    <mutant id="mutant_3566" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_4897" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="i" />
    <mutant id="mutant_10194" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) / s)" />
    <mutant id="mutant_2233" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="(o / 16)" />
    <mutant id="mutant_3565" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_4896" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="(i * (recentBitmaps.length))" />
    <mutant id="mutant_10195" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) * s)" />
    <mutant id="mutant_2234" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="(o - 16)" />
    <mutant id="mutant_3564" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_4895" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="recentBitmaps.length" />
    <mutant id="mutant_10196" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) % s)" />
    <mutant id="mutant_2231" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="o" />
    <mutant id="mutant_3563" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_4894" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="index" />
    <mutant id="mutant_10197" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) * &quot;: &quot;)" />
    <mutant id="mutant_2232" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 16)" to="16" />
    <mutant id="mutant_3562" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_4893" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="(index + (recentBitmaps.length))" />
    <mutant id="mutant_10198" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) % &quot;: &quot;)" />
    <mutant id="mutant_3561" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_4892" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="(index / (recentBitmaps.length))" />
    <mutant id="mutant_10199" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(uri.setPass(null))" />
    <mutant id="mutant_2230" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="(o - 12)" />
    <mutant id="mutant_3560" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_4891" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="(index - (recentBitmaps.length))" />
    <mutant id="mutant_2239" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="o" />
    <mutant id="mutant_10190" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) - &quot;: &quot;)" />
    <mutant id="mutant_2237" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="1" />
    <mutant id="mutant_3569" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="32 * (ObjectIdOwnerMap.SEGMENT_BITS)" />
    <mutant id="mutant_10191" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_2238" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(int[],int)" from="(o + 1)" to="(o / 1)" />
    <mutant id="mutant_3568" viable="false" in="?" from="32 - (ObjectIdOwnerMap.SEGMENT_BITS)" to="ObjectIdOwnerMap.SEGMENT_BITS" />
    <mutant id="mutant_4899" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(i % (recentBitmaps.length))" to="recentBitmaps.length" />
    <mutant id="mutant_10192" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((uri.setPass(null)) + &quot;: &quot;)" />
    <mutant id="mutant_4890" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="(index % (recentBitmaps.length))" to="(index * (recentBitmaps.length))" />
    <mutant id="mutant_10168" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) / &quot;, &quot;)" />
    <mutant id="mutant_11499" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="((p.length()) / 1)" />
    <mutant id="mutant_10169" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) - &quot;, &quot;)" />
    <mutant id="mutant_2224" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="(o / 8)" />
    <mutant id="mutant_3556" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_4887" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="i / xorOffset" />
    <mutant id="mutant_10160" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_11491" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="n" />
    <mutant id="mutant_2225" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="12" />
    <mutant id="mutant_3555" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_4886" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="i" />
    <mutant id="mutant_10161" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) / (locale.toString()))" />
    <mutant id="mutant_11492" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) * n)" />
    <mutant id="mutant_2222" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="o" />
    <mutant id="mutant_3554" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_4885" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="i * xorOffset" />
    <mutant id="mutant_10162" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(locale.toString())" />
    <mutant id="mutant_11493" viable="true" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" />
    <mutant id="mutant_2223" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="8" />
    <mutant id="mutant_3553" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_4884" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="i + xorOffset" />
    <mutant id="mutant_10163" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) - (locale.toString()))" />
    <mutant id="mutant_11494" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) / n)" />
    <mutant id="mutant_2220" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="(o * 8)" />
    <mutant id="mutant_3552" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_4883" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) / (b.getOffset()))" />
    <mutant id="mutant_10164" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) * (locale.toString()))" />
    <mutant id="mutant_11495" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) % n)" />
    <mutant id="mutant_2221" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="(o % 8)" />
    <mutant id="mutant_3551" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_4882" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) * (b.getOffset()))" />
    <mutant id="mutant_10165" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) % (locale.toString()))" />
    <mutant id="mutant_11496" viable="false" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) + n)" to="(((TestProtocol.SCHEME) + &quot;://test/conn&quot;) - n)" />
    <mutant id="mutant_3550" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_4881" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) % (b.getOffset()))" />
    <mutant id="mutant_10166" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" to="((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;)" />
    <mutant id="mutant_11497" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="p.length()" />
    <mutant id="mutant_4880" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="a.getOffset()" />
    <mutant id="mutant_10167" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) % &quot;, &quot;)" />
    <mutant id="mutant_11498" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="1" />
    <mutant id="mutant_2228" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="o" />
    <mutant id="mutant_2229" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="(o % 12)" />
    <mutant id="mutant_3559" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_2226" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="(o * 12)" />
    <mutant id="mutant_3558" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_4889" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="i % xorOffset" />
    <mutant id="mutant_2227" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 12)" to="(o / 12)" />
    <mutant id="mutant_3557" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_4888" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexV1(java.io.InputStream,org.eclipse.jgit.internal.storage.file.PackIndex,org.eclipse.jgit.internal.storage.file.PackReverseIndex)" from="i - xorOffset" to="xorOffset" />
    <mutant id="mutant_11490" viable="true" in="org.eclipse.jgit.transport.TestProtocol.register(C,org.eclipse.jgit.lib.Repository)" from="((TestProtocol.SCHEME) + &quot;://test/conn&quot;)" to="&quot;://test/conn&quot;" />
    <mutant id="mutant_10179" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) + &quot;]&quot;)" to="((((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key) * &quot;]&quot;)" />
    <mutant id="mutant_2213" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="(o % 4)" />
    <mutant id="mutant_3545" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_4876" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="i" />
    <mutant id="mutant_10171" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) * &quot;, &quot;)" />
    <mutant id="mutant_2214" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="(o - 4)" />
    <mutant id="mutant_3544" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_4875" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="i * (index)" />
    <mutant id="mutant_10172" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="(((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString()))" />
    <mutant id="mutant_2211" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="&quot;AnyObjectId[&quot; + (name())" />
    <mutant id="mutant_3543" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_4874" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="i % (index)" />
    <mutant id="mutant_10173" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) / key)" />
    <mutant id="mutant_2212" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AnyObjectId[&quot; + (name())) % &quot;]&quot;" />
    <mutant id="mutant_3542" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_4873" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="i - (index)" />
    <mutant id="mutant_10174" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" />
    <mutant id="mutant_3541" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_4872" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="(byAddOrder.size()) * 1" />
    <mutant id="mutant_10175" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) * key)" />
    <mutant id="mutant_2210" viable="false" in="org.eclipse.jgit.lib.AnyObjectId.toString()" from="(&quot;AnyObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AnyObjectId[&quot; + (name())) * &quot;]&quot;" />
    <mutant id="mutant_3540" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_4871" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="(byAddOrder.size()) % 1" />
    <mutant id="mutant_10176" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="key" />
    <mutant id="mutant_4870" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2.iterator()" from="(byAddOrder.size()) - 1" to="byAddOrder.size()" />
    <mutant id="mutant_10177" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) - key)" />
    <mutant id="mutant_10178" viable="false" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) + key)" to="(((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;) % key)" />
    <mutant id="mutant_2219" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 8)" to="(o - 8)" />
    <mutant id="mutant_2217" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="(o / 4)" />
    <mutant id="mutant_3549" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_2218" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="(o * 4)" />
    <mutant id="mutant_3548" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_4879" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$1.compare(org.eclipse.jgit.internal.storage.pack.ObjectToPack,org.eclipse.jgit.internal.storage.pack.ObjectToPack)" from="((a.getOffset()) - (b.getOffset()))" to="((a.getOffset()) + (b.getOffset()))" />
    <mutant id="mutant_2215" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="4" />
    <mutant id="mutant_3547" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_4878" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="index" />
    <mutant id="mutant_2216" viable="true" in="org.eclipse.jgit.lib.AnyObjectId.copyRawTo(byte[],int)" from="(o + 4)" to="o" />
    <mutant id="mutant_3546" viable="true" in="org.eclipse.jgit.lib.ObjectId.fromRaw(int[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_4877" viable="true" in="org.eclipse.jgit.internal.storage.file.PackBitmapIndexBuilder$2$1.next()" from="i + (index)" to="i / (index)" />
    <mutant id="mutant_10170" viable="true" in="org.eclipse.jgit.errors.TranslationStringMissingException(java.lang.Class,java.util.Locale,java.lang.String,java.lang.Exception)" from="((((&quot;Translation missing for [&quot; + (bundleClass.getName())) + &quot;, &quot;) + (locale.toString())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_2051" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="(p * 16)" />
    <mutant id="mutant_3383" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="(si - 10)" />
    <mutant id="mutant_2052" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="(p / 16)" />
    <mutant id="mutant_3382" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="(si / 10)" />
    <mutant id="mutant_3381" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="(si % 10)" />
    <mutant id="mutant_2050" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="(p - 12)" />
    <mutant id="mutant_3380" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="10" />
    <mutant id="mutant_2048" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="(p / 12)" />
    <mutant id="mutant_2049" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="(p * 12)" />
    <mutant id="mutant_3379" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="(fi * 10)" />
    <mutant id="mutant_2046" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="(p % 12)" />
    <mutant id="mutant_3378" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="(fi - 10)" />
    <mutant id="mutant_2047" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="p" />
    <mutant id="mutant_3377" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="fi" />
    <mutant id="mutant_2044" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="(p / 8)" />
    <mutant id="mutant_3376" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="(fi % 10)" />
    <mutant id="mutant_2045" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 12)" to="12" />
    <mutant id="mutant_3375" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 10)" to="(fi / 10)" />
    <mutant id="mutant_2042" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="(p - 8)" />
    <mutant id="mutant_3374" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="(si * 9)" />
    <mutant id="mutant_2043" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="(p * 8)" />
    <mutant id="mutant_3373" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="(si - 9)" />
    <mutant id="mutant_2040" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="8" />
    <mutant id="mutant_3372" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="9" />
    <mutant id="mutant_2041" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="(p % 8)" />
    <mutant id="mutant_3371" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="si" />
    <mutant id="mutant_3370" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="(si / 9)" />
    <mutant id="mutant_2037" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_3369" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 9)" to="(si % 9)" />
    <mutant id="mutant_2038" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_3368" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="(fi % 9)" />
    <mutant id="mutant_4699" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="((file.getName()) * (LockFile.SUFFIX))" />
    <mutant id="mutant_2035" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_3367" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="9" />
    <mutant id="mutant_4698" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="((file.getName()) - (LockFile.SUFFIX))" />
    <mutant id="mutant_2036" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_3366" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="(fi * 9)" />
    <mutant id="mutant_4697" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="LockFile.SUFFIX" />
    <mutant id="mutant_2033" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_3365" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="(fi - 9)" />
    <mutant id="mutant_4696" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="((file.getName()) / (LockFile.SUFFIX))" />
    <mutant id="mutant_2034" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_3364" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="fi" />
    <mutant id="mutant_4695" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="((file.getName()) % (LockFile.SUFFIX))" />
    <mutant id="mutant_2031" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="32 + ((nibbles - b) * 4)" />
    <mutant id="mutant_3363" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 9)" to="(fi / 9)" />
    <mutant id="mutant_4694" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.getLockFile(java.io.File)" from="((file.getName()) + (LockFile.SUFFIX))" to="file.getName()" />
    <mutant id="mutant_2032" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="32" />
    <mutant id="mutant_3362" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="(si * 8)" />
    <mutant id="mutant_4693" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="(&quot;pack-&quot; + packName)" />
    <mutant id="mutant_2039" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 8)" to="p" />
    <mutant id="mutant_3361" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="8" />
    <mutant id="mutant_4692" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + packName) / &quot;.pack&quot;)" />
    <mutant id="mutant_2030" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="32 / ((nibbles - b) * 4)" />
    <mutant id="mutant_3360" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="si" />
    <mutant id="mutant_4691" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="&quot;.pack&quot;" />
    <mutant id="mutant_4690" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + packName) % &quot;.pack&quot;)" />
    <mutant id="mutant_2026" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="((nibbles - b) % 4)" />
    <mutant id="mutant_3358" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="(si / 8)" />
    <mutant id="mutant_4689" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + packName) - &quot;.pack&quot;)" />
    <mutant id="mutant_2027" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="32 * ((nibbles - b) * 4)" />
    <mutant id="mutant_3357" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="(si % 8)" />
    <mutant id="mutant_4688" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="((&quot;pack-&quot; + packName) + &quot;.pack&quot;)" to="((&quot;pack-&quot; + packName) * &quot;.pack&quot;)" />
    <mutant id="mutant_2024" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="((nibbles - b) / 4)" />
    <mutant id="mutant_3356" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="(fi % 8)" />
    <mutant id="mutant_4687" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="(&quot;pack-&quot; * packName)" />
    <mutant id="mutant_2025" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="4" />
    <mutant id="mutant_3355" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="(fi * 8)" />
    <mutant id="mutant_4686" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="(&quot;pack-&quot; - packName)" />
    <mutant id="mutant_2022" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="((nibbles - b) + 4)" />
    <mutant id="mutant_3354" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="8" />
    <mutant id="mutant_4685" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="(&quot;pack-&quot; % packName)" />
    <mutant id="mutant_2023" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="(nibbles - b)" />
    <mutant id="mutant_3353" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="(fi - 8)" />
    <mutant id="mutant_4684" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="&quot;pack-&quot;" />
    <mutant id="mutant_2020" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="nibbles" />
    <mutant id="mutant_3352" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="(fi / 8)" />
    <mutant id="mutant_4683" viable="false" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="(&quot;pack-&quot; / packName)" />
    <mutant id="mutant_2021" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="((nibbles - b) * 4)" to="((nibbles - b) - 4)" />
    <mutant id="mutant_3351" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 8)" to="fi" />
    <mutant id="mutant_4682" viable="true" in="org.eclipse.jgit.internal.storage.file.LocalCachedPack.getPackFilePath(java.lang.String)" from="(&quot;pack-&quot; + packName)" to="packName" />
    <mutant id="mutant_2028" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="32 % ((nibbles - b) * 4)" />
    <mutant id="mutant_2029" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="32 - ((nibbles - b) * 4)" to="(nibbles - b) * 4" />
    <mutant id="mutant_3359" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 8)" to="(si - 8)" />
    <mutant id="mutant_3350" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="(si * 7)" />
    <mutant id="mutant_4681" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="headerLength" />
    <mutant id="mutant_4680" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) / (headerLength))" />
    <mutant id="mutant_2015" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="(nibbles % b)" />
    <mutant id="mutant_3347" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="(si / 7)" />
    <mutant id="mutant_4678" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) * (headerLength))" />
    <mutant id="mutant_2016" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="(nibbles * b)" />
    <mutant id="mutant_3346" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="(si - 7)" />
    <mutant id="mutant_4677" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="objectOffset" />
    <mutant id="mutant_2013" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="(b % 8)" />
    <mutant id="mutant_3345" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="(si % 7)" />
    <mutant id="mutant_4676" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) - (headerLength))" />
    <mutant id="mutant_2014" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="(b * 8)" />
    <mutant id="mutant_3344" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="(fi % 7)" />
    <mutant id="mutant_4675" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)" />
    <mutant id="mutant_2011" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="(b - 8)" />
    <mutant id="mutant_3343" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="7" />
    <mutant id="mutant_4674" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) % 1" />
    <mutant id="mutant_2012" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="(b / 8)" />
    <mutant id="mutant_3342" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="(fi * 7)" />
    <mutant id="mutant_4673" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) / 1" />
    <mutant id="mutant_3341" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="(fi / 7)" />
    <mutant id="mutant_4672" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) - 1" />
    <mutant id="mutant_2010" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="b" />
    <mutant id="mutant_3340" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="fi" />
    <mutant id="mutant_4671" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) * 1" />
    <mutant id="mutant_2019" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="b" />
    <mutant id="mutant_2017" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="(nibbles + b)" />
    <mutant id="mutant_3349" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="7" />
    <mutant id="mutant_2018" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(nibbles - b)" to="(nibbles / b)" />
    <mutant id="mutant_3348" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 7)" to="si" />
    <mutant id="mutant_4679" viable="true" in="org.eclipse.jgit.internal.storage.file.LargePackedWholeObject.openStream()" from="((objectOffset) + (headerLength))" to="((objectOffset) % (headerLength))" />
    <mutant id="mutant_2095" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="(ptr % 8)" />
    <mutant id="mutant_2096" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="(ptr - 8)" />
    <mutant id="mutant_2093" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="(ptr / 8)" />
    <mutant id="mutant_2094" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="8" />
    <mutant id="mutant_2091" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AbbreviatedObjectId[&quot; + (name())) % &quot;]&quot;" />
    <mutant id="mutant_2092" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AbbreviatedObjectId[&quot; + (name())) * &quot;]&quot;" />
    <mutant id="mutant_2090" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_2088" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AbbreviatedObjectId[&quot; + (name())) / &quot;]&quot;" />
    <mutant id="mutant_2089" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="(&quot;AbbreviatedObjectId[&quot; + (name())) - &quot;]&quot;" />
    <mutant id="mutant_2086" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="&quot;AbbreviatedObjectId[&quot;" />
    <mutant id="mutant_2087" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name())) + &quot;]&quot;" to="&quot;AbbreviatedObjectId[&quot; + (name())" />
    <mutant id="mutant_2084" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="(&quot;AbbreviatedObjectId[&quot; % (name()))" />
    <mutant id="mutant_2085" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="(name())" />
    <mutant id="mutant_2082" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="(&quot;AbbreviatedObjectId[&quot; / (name()))" />
    <mutant id="mutant_2083" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="(&quot;AbbreviatedObjectId[&quot; * (name()))" />
    <mutant id="mutant_2080" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="(p - 4)" />
    <mutant id="mutant_2081" viable="false" in="org.eclipse.jgit.lib.AbbreviatedObjectId.toString()" from="(&quot;AbbreviatedObjectId[&quot; + (name()))" to="(&quot;AbbreviatedObjectId[&quot; - (name()))" />
    <mutant id="mutant_2079" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="(p % 4)" />
    <mutant id="mutant_2077" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="4" />
    <mutant id="mutant_2078" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="(p / 4)" />
    <mutant id="mutant_2075" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="(p * 4)" />
    <mutant id="mutant_2076" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 4)" to="p" />
    <mutant id="mutant_2073" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="(p - 3)" />
    <mutant id="mutant_2074" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="(p % 3)" />
    <mutant id="mutant_2071" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="p" />
    <mutant id="mutant_2072" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="(p / 3)" />
    <mutant id="mutant_2070" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="3" />
    <mutant id="mutant_2068" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="(p - 2)" />
    <mutant id="mutant_2069" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 3)" to="(p * 3)" />
    <mutant id="mutant_3399" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="(fi * 12)" />
    <mutant id="mutant_2066" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="p" />
    <mutant id="mutant_3398" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="(si * 11)" />
    <mutant id="mutant_2067" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="(p / 2)" />
    <mutant id="mutant_3397" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="si" />
    <mutant id="mutant_2064" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="(p * 2)" />
    <mutant id="mutant_3396" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="(si - 11)" />
    <mutant id="mutant_2065" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="2" />
    <mutant id="mutant_3395" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="(si % 11)" />
    <mutant id="mutant_2062" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="(p - 1)" />
    <mutant id="mutant_3394" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="(si / 11)" />
    <mutant id="mutant_2063" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 2)" to="(p % 2)" />
    <mutant id="mutant_3393" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 11)" to="11" />
    <mutant id="mutant_2060" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="(p / 1)" />
    <mutant id="mutant_3392" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="(fi - 11)" />
    <mutant id="mutant_2061" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="p" />
    <mutant id="mutant_3391" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="fi" />
    <mutant id="mutant_3390" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="(fi * 11)" />
    <mutant id="mutant_2059" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="(p * 1)" />
    <mutant id="mutant_2057" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="(p % 1)" />
    <mutant id="mutant_3389" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="11" />
    <mutant id="mutant_2058" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(int[],int)" from="(p + 1)" to="1" />
    <mutant id="mutant_3388" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="(fi % 11)" />
    <mutant id="mutant_2055" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="(p - 16)" />
    <mutant id="mutant_3387" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 11)" to="(fi / 11)" />
    <mutant id="mutant_2056" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="(p % 16)" />
    <mutant id="mutant_3386" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="10" />
    <mutant id="mutant_2053" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="p" />
    <mutant id="mutant_3385" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="(si * 10)" />
    <mutant id="mutant_2054" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.prefixCompare(byte[],int)" from="(p + 16)" to="16" />
    <mutant id="mutant_3384" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 10)" to="si" />
    <mutant id="mutant_2099" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="(ptr - 16)" />
    <mutant id="mutant_2097" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="(ptr * 8)" />
    <mutant id="mutant_2098" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 8)" to="ptr" />
    <mutant id="mutant_12927" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid % 1" />
    <mutant id="mutant_12926" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid * 1" />
    <mutant id="mutant_12929" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="mid" />
    <mutant id="mutant_12928" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid / 1" />
    <mutant id="mutant_12921" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="high" />
    <mutant id="mutant_12920" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="(low * high)" />
    <mutant id="mutant_12923" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid" />
    <mutant id="mutant_12922" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="(low % high)" />
    <mutant id="mutant_12925" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid + 1" />
    <mutant id="mutant_12924" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="1" />
    <mutant id="mutant_11606" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="(((getURI().getUser()) + &quot;@&quot;) * (getURI().getHost()))" />
    <mutant id="mutant_12938" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid * 1" />
    <mutant id="mutant_11607" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="((getURI().getUser()) + &quot;@&quot;)" />
    <mutant id="mutant_12937" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid + 1" />
    <mutant id="mutant_11608" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="(((getURI().getUser()) + &quot;@&quot;) / (getURI().getHost()))" />
    <mutant id="mutant_11609" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="(((getURI().getUser()) + &quot;@&quot;) - (getURI().getHost()))" />
    <mutant id="mutant_12939" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid % 1" />
    <mutant id="mutant_12930" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="1" />
    <mutant id="mutant_11600" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="&quot;@&quot;" />
    <mutant id="mutant_12932" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="mid * 1" />
    <mutant id="mutant_11601" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="((getURI().getUser()) % &quot;@&quot;)" />
    <mutant id="mutant_12931" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="mid - 1" />
    <mutant id="mutant_11602" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="((getURI().getUser()) - &quot;@&quot;)" />
    <mutant id="mutant_12934" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="mid / 1" />
    <mutant id="mutant_11603" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="(getURI().getUser())" />
    <mutant id="mutant_12933" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid + 1" to="mid % 1" />
    <mutant id="mutant_11604" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="((getURI().getUser()) * &quot;@&quot;)" />
    <mutant id="mutant_12936" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="1" />
    <mutant id="mutant_11605" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="(((getURI().getUser()) + &quot;@&quot;) % (getURI().getHost()))" />
    <mutant id="mutant_12935" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid" />
    <mutant id="mutant_12905" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) - &quot;\&quot;)&quot;" />
    <mutant id="mutant_12904" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="(((super.toString()) + &quot;(\&quot;&quot;) % (pattern.pattern()))" />
    <mutant id="mutant_12907" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) / &quot;\&quot;)&quot;" />
    <mutant id="mutant_12906" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) % &quot;\&quot;)&quot;" />
    <mutant id="mutant_12909" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="&quot;\&quot;)&quot;" />
    <mutant id="mutant_12908" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) * &quot;\&quot;)&quot;" />
    <mutant id="mutant_12901" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="(pattern.pattern())" />
    <mutant id="mutant_12900" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="(((super.toString()) + &quot;(\&quot;&quot;) / (pattern.pattern()))" />
    <mutant id="mutant_12903" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="((super.toString()) + &quot;(\&quot;&quot;)" />
    <mutant id="mutant_12902" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="(((super.toString()) + &quot;(\&quot;&quot;) * (pattern.pattern()))" />
    <mutant id="mutant_12916" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="(BlockRevQueue.Block.BLOCK_SIZE) + 2" />
    <mutant id="mutant_12915" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="(BlockRevQueue.Block.BLOCK_SIZE) - 2" />
    <mutant id="mutant_12918" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="low" />
    <mutant id="mutant_12917" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="(low - high)" />
    <mutant id="mutant_12919" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="(low + high)" to="(low / high)" />
    <mutant id="mutant_12910" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())) + &quot;\&quot;)&quot;" to="((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern())" />
    <mutant id="mutant_12912" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="BlockRevQueue.Block.BLOCK_SIZE" />
    <mutant id="mutant_12911" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="2" />
    <mutant id="mutant_12914" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="(BlockRevQueue.Block.BLOCK_SIZE) % 2" />
    <mutant id="mutant_12913" viable="true" in="org.eclipse.jgit.revwalk.BlockRevQueue$Block.resetToMiddle()" from="(BlockRevQueue.Block.BLOCK_SIZE) / 2" to="(BlockRevQueue.Block.BLOCK_SIZE) * 2" />
    <mutant id="mutant_11518" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="prefix * (Transport.class.getName())" />
    <mutant id="mutant_11519" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="prefix % (Transport.class.getName())" />
    <mutant id="mutant_12849" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) / &quot;)&quot;" />
    <mutant id="mutant_11510" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="(n.substring(0, (kindEnd + 1))) % destSpec" />
    <mutant id="mutant_12842" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) / (b.toString()))" />
    <mutant id="mutant_11511" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="(n.substring(0, (kindEnd + 1))) * destSpec" />
    <mutant id="mutant_12841" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(b.toString())" />
    <mutant id="mutant_11512" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="(n.substring(0, (kindEnd + 1))) - destSpec" />
    <mutant id="mutant_12844" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" />
    <mutant id="mutant_11513" viable="false" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="(n.substring(0, (kindEnd + 1))) / destSpec" />
    <mutant id="mutant_12843" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) % (b.toString()))" />
    <mutant id="mutant_11514" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="n.substring(0, (kindEnd + 1))" />
    <mutant id="mutant_12846" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) - &quot;)&quot;" />
    <mutant id="mutant_11515" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="prefix / (Transport.class.getName())" />
    <mutant id="mutant_12845" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())" />
    <mutant id="mutant_11516" viable="true" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="prefix" />
    <mutant id="mutant_12848" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_11517" viable="true" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="Transport.class.getName()" />
    <mutant id="mutant_12847" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) % &quot;)&quot;" />
    <mutant id="mutant_12840" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) - (b.toString()))" />
    <mutant id="mutant_11529" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_11521" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="subpath.length()" />
    <mutant id="mutant_12853" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="&quot;.*&quot; / pattern" />
    <mutant id="mutant_11522" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="1" />
    <mutant id="mutant_12852" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="&quot;.*&quot; * pattern" />
    <mutant id="mutant_11523" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="((subpath.length()) / 1)" />
    <mutant id="mutant_12855" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="&quot;.*&quot;" />
    <mutant id="mutant_11524" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="((subpath.length()) + 1)" />
    <mutant id="mutant_12854" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="pattern" />
    <mutant id="mutant_11525" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="((subpath.length()) % 1)" />
    <mutant id="mutant_12857" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="pattern / &quot;.*&quot;" />
    <mutant id="mutant_11526" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="((subpath.length()) - 1)" to="((subpath.length()) * 1)" />
    <mutant id="mutant_12856" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="&quot;.*&quot; % pattern" />
    <mutant id="mutant_11527" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="(k - &quot;/&quot;)" />
    <mutant id="mutant_12859" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="pattern" />
    <mutant id="mutant_11528" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="(k % &quot;/&quot;)" />
    <mutant id="mutant_12858" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="pattern - &quot;.*&quot;" />
    <mutant id="mutant_12851" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="&quot;.*&quot; + pattern" to="&quot;.*&quot; - pattern" />
    <mutant id="mutant_11520" viable="false" in="org.eclipse.jgit.transport.Transport.catalogs(java.lang.ClassLoader)" from="prefix + (Transport.class.getName())" to="prefix - (Transport.class.getName())" />
    <mutant id="mutant_12850" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) + &quot;)&quot;" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString())) * &quot;)&quot;" />
    <mutant id="mutant_12828" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(a.toString())" />
    <mutant id="mutant_12827" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; * (a.toString()))" />
    <mutant id="mutant_12829" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; % (a.toString()))" />
    <mutant id="mutant_12820" viable="false" in="org.eclipse.jgit.revwalk.filter.CommitTimeRevFilter(long)" from="((int)(ts / 1000))" to="ts" />
    <mutant id="mutant_12822" viable="true" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="a.toString()" />
    <mutant id="mutant_12821" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; / (a.toString())" />
    <mutant id="mutant_12824" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; % (a.toString())" />
    <mutant id="mutant_12823" viable="true" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot;" />
    <mutant id="mutant_12826" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; - (a.toString())" />
    <mutant id="mutant_12825" viable="false" in="org.eclipse.jgit.revwalk.filter.NotRevFilter.toString()" from="&quot;NOT &quot; + (a.toString())" to="&quot;NOT &quot; * (a.toString())" />
    <mutant id="mutant_11507" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="kindEnd" />
    <mutant id="mutant_12839" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) + (b.toString()))" to="(((&quot;(&quot; + (a.toString())) + &quot; OR &quot;) * (b.toString()))" />
    <mutant id="mutant_11508" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="(kindEnd % 1)" />
    <mutant id="mutant_12838" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="&quot; OR &quot;" />
    <mutant id="mutant_11509" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(n.substring(0, (kindEnd + 1))) + destSpec" to="destSpec" />
    <mutant id="mutant_12831" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="&quot;(&quot;" />
    <mutant id="mutant_11500" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="((p.length()) + 1)" />
    <mutant id="mutant_12830" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; - (a.toString()))" />
    <mutant id="mutant_11501" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="((p.length()) % 1)" />
    <mutant id="mutant_12833" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) % &quot; OR &quot;)" />
    <mutant id="mutant_11502" viable="true" in="org.eclipse.jgit.transport.TransferConfig$2.prefixMatch(java.lang.String,java.lang.String)" from="((p.length()) - 1)" to="((p.length()) * 1)" />
    <mutant id="mutant_12832" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="(&quot;(&quot; + (a.toString()))" to="(&quot;(&quot; / (a.toString()))" />
    <mutant id="mutant_11503" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="(kindEnd / 1)" />
    <mutant id="mutant_12835" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) * &quot; OR &quot;)" />
    <mutant id="mutant_11504" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="1" />
    <mutant id="mutant_12834" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) / &quot; OR &quot;)" />
    <mutant id="mutant_11505" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="(kindEnd - 1)" />
    <mutant id="mutant_12837" viable="true" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="(&quot;(&quot; + (a.toString()))" />
    <mutant id="mutant_11506" viable="true" in="org.eclipse.jgit.transport.Transport.findRemoteRefUpdatesFor(org.eclipse.jgit.lib.Repository,java.util.Collection,java.util.Collection)" from="(kindEnd + 1)" to="(kindEnd * 1)" />
    <mutant id="mutant_12836" viable="false" in="org.eclipse.jgit.revwalk.filter.OrRevFilter$Binary.toString()" from="((&quot;(&quot; + (a.toString())) + &quot; OR &quot;)" to="((&quot;(&quot; + (a.toString())) - &quot; OR &quot;)" />
    <mutant id="mutant_4709" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="(&quot;LockFile[&quot; + (lck))" />
    <mutant id="mutant_10223" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="name * (Constants.DOT_GIT_EXT)" />
    <mutant id="mutant_11554" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_12886" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="(lastDot % 1)" />
    <mutant id="mutant_10224" viable="true" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="name" />
    <mutant id="mutant_11555" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="(WalkRemoteObjectDatabase.ROOT_DIR) * rn" />
    <mutant id="mutant_12885" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="(lastDot / 1)" />
    <mutant id="mutant_10225" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="name % (Constants.DOT_GIT_EXT)" />
    <mutant id="mutant_11556" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="(WalkRemoteObjectDatabase.ROOT_DIR) % rn" />
    <mutant id="mutant_12888" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="super.toString()" />
    <mutant id="mutant_10226" viable="true" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="Constants.DOT_GIT_EXT" />
    <mutant id="mutant_11557" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="(&quot;/&quot; / (objectsKey))" />
    <mutant id="mutant_12887" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="(super.toString()) % (flags)" />
    <mutant id="mutant_10227" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="((entries.size()) / 1)" />
    <mutant id="mutant_11558" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="(&quot;/&quot; % (objectsKey))" />
    <mutant id="mutant_10228" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="1" />
    <mutant id="mutant_11559" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="&quot;/&quot;" />
    <mutant id="mutant_12889" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="(super.toString()) * (flags)" />
    <mutant id="mutant_10229" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="((entries.size()) % 1)" />
    <mutant id="mutant_4700" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="(&quot;LockFile[&quot; % (lck))" />
    <mutant id="mutant_12880" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) - &quot;\&quot;)&quot;" />
    <mutant id="mutant_11550" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="&quot;.idx&quot;" />
    <mutant id="mutant_12882" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="(lastDot * 1)" />
    <mutant id="mutant_10220" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) % s)" />
    <mutant id="mutant_11551" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="(WalkRemoteObjectDatabase.ROOT_DIR) - rn" />
    <mutant id="mutant_12881" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="1" />
    <mutant id="mutant_10221" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="name - (Constants.DOT_GIT_EXT)" />
    <mutant id="mutant_11552" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="(WalkRemoteObjectDatabase.ROOT_DIR) / rn" />
    <mutant id="mutant_12884" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="(lastDot - 1)" />
    <mutant id="mutant_10222" viable="false" in="org.eclipse.jgit.transport.resolver.FileResolver.nameWithDotGit(java.lang.String)" from="name + (Constants.DOT_GIT_EXT)" to="name / (Constants.DOT_GIT_EXT)" />
    <mutant id="mutant_11553" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readRef(java.util.TreeMap,java.lang.String)" from="(WalkRemoteObjectDatabase.ROOT_DIR) + rn" to="rn" />
    <mutant id="mutant_12883" viable="true" in="org.eclipse.jgit.revwalk.filter.RevFilter.toString()" from="(lastDot + 1)" to="lastDot" />
    <mutant id="mutant_4708" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="((&quot;LockFile[&quot; + (lck)) % &quot;, haveLck=&quot;)" />
    <mutant id="mutant_4707" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="&quot;, haveLck=&quot;" />
    <mutant id="mutant_4706" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="((&quot;LockFile[&quot; + (lck)) * &quot;, haveLck=&quot;)" />
    <mutant id="mutant_4705" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="(lck)" />
    <mutant id="mutant_4704" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="(&quot;LockFile[&quot; - (lck))" />
    <mutant id="mutant_4703" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="(&quot;LockFile[&quot; * (lck))" />
    <mutant id="mutant_4702" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="&quot;LockFile[&quot;" />
    <mutant id="mutant_4701" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(&quot;LockFile[&quot; + (lck))" to="(&quot;LockFile[&quot; / (lck))" />
    <mutant id="mutant_10234" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="prefix" />
    <mutant id="mutant_11565" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % &quot;refs&quot;)" />
    <mutant id="mutant_12897" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) % &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10235" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="((prefix) % (entries.get(((entries.size()) - 1))))" />
    <mutant id="mutant_11566" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * &quot;refs&quot;)" />
    <mutant id="mutant_12896" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) * &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10236" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="entries.get(((entries.size()) - 1))" />
    <mutant id="mutant_11567" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_12899" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (pattern.pattern()))" to="(((super.toString()) + &quot;(\&quot;&quot;) - (pattern.pattern()))" />
    <mutant id="mutant_10237" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="((prefix) - (entries.get(((entries.size()) - 1))))" />
    <mutant id="mutant_11568" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - &quot;refs&quot;)" />
    <mutant id="mutant_12898" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) - &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10238" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="((prefix) / (entries.get(((entries.size()) - 1))))" />
    <mutant id="mutant_11569" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="(&quot;refs/&quot; * n)" />
    <mutant id="mutant_10239" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="pacl" />
    <mutant id="mutant_12891" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="(super.toString()) / (flags)" />
    <mutant id="mutant_11560" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="(&quot;/&quot; * (objectsKey))" />
    <mutant id="mutant_12890" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="flags" />
    <mutant id="mutant_10230" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="((entries.size()) * 1)" />
    <mutant id="mutant_11561" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="(&quot;/&quot; - (objectsKey))" />
    <mutant id="mutant_12893" viable="false" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) / &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10231" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="entries.size()" />
    <mutant id="mutant_11562" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getURI()" from="(&quot;/&quot; + (objectsKey))" to="objectsKey" />
    <mutant id="mutant_12892" viable="false" in="org.eclipse.jgit.revwalk.filter.RevFlagFilter.toString()" from="(super.toString()) + (flags)" to="(super.toString()) - (flags)" />
    <mutant id="mutant_10232" viable="true" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((entries.size()) - 1)" to="((entries.size()) + 1)" />
    <mutant id="mutant_11563" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="&quot;refs&quot;" />
    <mutant id="mutant_12895" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="&quot;(\&quot;&quot;" />
    <mutant id="mutant_10233" viable="false" in="org.eclipse.jgit.transport.AmazonS3$ListParser.list()" from="((prefix) + (entries.get(((entries.size()) - 1))))" to="((prefix) * (entries.get(((entries.size()) - 1))))" />
    <mutant id="mutant_11564" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / &quot;refs&quot;)" />
    <mutant id="mutant_12894" viable="true" in="org.eclipse.jgit.revwalk.filter.SubStringRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(super.toString())" />
    <mutant id="mutant_10209" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) * &quot;: &quot;)" />
    <mutant id="mutant_10201" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) / &quot;: &quot;)" />
    <mutant id="mutant_11532" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="(k * &quot;/&quot;)" />
    <mutant id="mutant_12864" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="(super.toString())" />
    <mutant id="mutant_10202" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) - &quot;: &quot;)" />
    <mutant id="mutant_11533" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="(k + &quot;/&quot;) - subpath" />
    <mutant id="mutant_12863" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) / &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10203" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_11534" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="subpath" />
    <mutant id="mutant_12866" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) * &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10204" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((uri.setPass(null)) + &quot;: &quot;)" />
    <mutant id="mutant_11535" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="k + &quot;/&quot;" />
    <mutant id="mutant_12865" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="&quot;(\&quot;&quot;" />
    <mutant id="mutant_10205" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) - s)" />
    <mutant id="mutant_11536" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="(k + &quot;/&quot;) * subpath" />
    <mutant id="mutant_12868" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) - &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10206" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) / s)" />
    <mutant id="mutant_11537" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="(k + &quot;/&quot;) % subpath" />
    <mutant id="mutant_12867" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="((super.toString()) + &quot;(\&quot;&quot;)" to="((super.toString()) % &quot;(\&quot;&quot;)" />
    <mutant id="mutant_10207" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) * s)" />
    <mutant id="mutant_11538" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;) + subpath" to="(k + &quot;/&quot;) / subpath" />
    <mutant id="mutant_10208" viable="false" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) % s)" />
    <mutant id="mutant_11539" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="((n.length()) / 5)" />
    <mutant id="mutant_12869" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="(((super.toString()) + &quot;(\&quot;&quot;) % (patternText))" />
    <mutant id="mutant_12860" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="&quot;.*&quot;" />
    <mutant id="mutant_11530" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="(k / &quot;/&quot;)" />
    <mutant id="mutant_12862" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="pattern % &quot;.*&quot;" />
    <mutant id="mutant_10200" viable="true" in="org.eclipse.jgit.errors.TransportException(org.eclipse.jgit.transport.URIish,java.lang.String,java.lang.Throwable)" from="((uri.setPass(null)) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_11531" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.resolveKey(java.lang.String)" from="(k + &quot;/&quot;)" to="k" />
    <mutant id="mutant_12861" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter(java.lang.String,boolean,boolean,int)" from="pattern + &quot;.*&quot;" to="pattern * &quot;.*&quot;" />
    <mutant id="mutant_10212" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_11543" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="((n.length()) % 5)" />
    <mutant id="mutant_12875" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="((super.toString()) + &quot;(\&quot;&quot;) + (patternText)" />
    <mutant id="mutant_10213" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) / &quot;: &quot;)" />
    <mutant id="mutant_11544" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="((n.length()) * 5)" />
    <mutant id="mutant_12874" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="(patternText)" />
    <mutant id="mutant_10214" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) - &quot;: &quot;)" />
    <mutant id="mutant_11545" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) * &quot;.idx&quot;" />
    <mutant id="mutant_12877" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) % &quot;\&quot;)&quot;" />
    <mutant id="mutant_10215" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="s" />
    <mutant id="mutant_11546" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="n.substring(0, ((n.length()) - 5))" />
    <mutant id="mutant_12876" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="&quot;\&quot;)&quot;" />
    <mutant id="mutant_10216" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="((uri.setPass(null)) + &quot;: &quot;)" />
    <mutant id="mutant_11547" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) - &quot;.idx&quot;" />
    <mutant id="mutant_12879" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) * &quot;\&quot;)&quot;" />
    <mutant id="mutant_10217" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) - s)" />
    <mutant id="mutant_11548" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) / &quot;.idx&quot;" />
    <mutant id="mutant_12878" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) + &quot;\&quot;)&quot;" to="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText)) / &quot;\&quot;)&quot;" />
    <mutant id="mutant_10218" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) / s)" />
    <mutant id="mutant_11549" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) % &quot;.idx&quot;" />
    <mutant id="mutant_10219" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="(((uri.setPass(null)) + &quot;: &quot;) + s)" to="(((uri.setPass(null)) + &quot;: &quot;) * s)" />
    <mutant id="mutant_12871" viable="true" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="((super.toString()) + &quot;(\&quot;&quot;)" />
    <mutant id="mutant_11540" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="n.length()" />
    <mutant id="mutant_12870" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="(((super.toString()) + &quot;(\&quot;&quot;) / (patternText))" />
    <mutant id="mutant_10210" viable="false" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="((uri.setPass(null)) % &quot;: &quot;)" />
    <mutant id="mutant_11541" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="5" />
    <mutant id="mutant_12873" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="(((super.toString()) + &quot;(\&quot;&quot;) * (patternText))" />
    <mutant id="mutant_10211" viable="true" in="org.eclipse.jgit.errors.UnsupportedCredentialItem(org.eclipse.jgit.transport.URIish,java.lang.String)" from="((uri.setPass(null)) + &quot;: &quot;)" to="(uri.setPass(null))" />
    <mutant id="mutant_11542" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.getPackNames()" from="((n.length()) - 5)" to="((n.length()) + 5)" />
    <mutant id="mutant_12872" viable="false" in="org.eclipse.jgit.revwalk.filter.PatternMatchRevFilter.toString()" from="(((super.toString()) + &quot;(\&quot;&quot;) + (patternText))" to="(((super.toString()) + &quot;(\&quot;&quot;) - (patternText))" />
    <mutant id="mutant_10267" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="((host.length()) % (domain.length()))" />
    <mutant id="mutant_11598" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="(getTimeout()) + 1000" />
    <mutant id="mutant_10268" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="(((host.length()) - (domain.length())) % 1)" />
    <mutant id="mutant_11599" viable="false" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="((getURI().getUser()) + &quot;@&quot;)" to="((getURI().getUser()) / &quot;@&quot;)" />
    <mutant id="mutant_10269" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="1" />
    <mutant id="mutant_3413" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="(fi * 13)" />
    <mutant id="mutant_4744" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="3" />
    <mutant id="mutant_11590" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="&quot;/objects&quot;" />
    <mutant id="mutant_3412" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="13" />
    <mutant id="mutant_4743" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="((indexName.length()) / 3)" />
    <mutant id="mutant_10260" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="((fmt.format(new java.util.Date())) + &quot; &quot;) / tz" />
    <mutant id="mutant_11591" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) / &quot;/objects&quot;)" />
    <mutant id="mutant_3411" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="(fi / 13)" />
    <mutant id="mutant_4742" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="indexName.length()" />
    <mutant id="mutant_10261" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="tz" />
    <mutant id="mutant_11592" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) % &quot;/objects&quot;)" />
    <mutant id="mutant_3410" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="(si * 12)" />
    <mutant id="mutant_4741" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="(&quot;ObjectDirectory[&quot; + (getDirectory())) % &quot;]&quot;" />
    <mutant id="mutant_10262" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="((fmt.format(new java.util.Date())) + &quot; &quot;) - tz" />
    <mutant id="mutant_11593" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="(getTimeout()) % 1000" />
    <mutant id="mutant_4740" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="(&quot;ObjectDirectory[&quot; + (getDirectory())) * &quot;]&quot;" />
    <mutant id="mutant_10263" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="(host.length())" />
    <mutant id="mutant_11594" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="1000" />
    <mutant id="mutant_10264" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="((host.length()) * (domain.length()))" />
    <mutant id="mutant_11595" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="(getTimeout()) / 1000" />
    <mutant id="mutant_10265" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="((host.length()) / (domain.length()))" />
    <mutant id="mutant_11596" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="(getTimeout()) - 1000" />
    <mutant id="mutant_10266" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((host.length()) - (domain.length()))" to="((host.length()) + (domain.length()))" />
    <mutant id="mutant_11597" viable="true" in="org.eclipse.jgit.transport.TransportGitAnon.openConnection()" from="(getTimeout()) * 1000" to="getTimeout()" />
    <mutant id="mutant_3419" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="13" />
    <mutant id="mutant_3418" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="(si % 13)" />
    <mutant id="mutant_4749" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="(base % (ext.getExtension()))" />
    <mutant id="mutant_3417" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="(si / 13)" />
    <mutant id="mutant_4748" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="ext.getExtension()" />
    <mutant id="mutant_3416" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="(fi % 13)" />
    <mutant id="mutant_4747" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="((indexName.length()) % 3)" />
    <mutant id="mutant_3415" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="(fi - 13)" />
    <mutant id="mutant_4746" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="((indexName.length()) * 3)" />
    <mutant id="mutant_3414" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 13)" to="fi" />
    <mutant id="mutant_4745" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="((indexName.length()) - 3)" to="((indexName.length()) + 3)" />
    <mutant id="mutant_10278" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="(&quot;AWS &quot; / (publicKey))" />
    <mutant id="mutant_10279" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="(&quot;AWS &quot; * (publicKey))" />
    <mutant id="mutant_3402" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="(fi / 12)" />
    <mutant id="mutant_4733" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="(getDirectory())" />
    <mutant id="mutant_10270" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="(((host.length()) - (domain.length())) / 1)" />
    <mutant id="mutant_3401" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="12" />
    <mutant id="mutant_4732" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="(&quot;ObjectDirectory[&quot; % (getDirectory()))" />
    <mutant id="mutant_10271" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="(((host.length()) - (domain.length())) * 1)" />
    <mutant id="mutant_3400" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="(fi % 12)" />
    <mutant id="mutant_4731" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="&quot;ObjectDirectory[&quot;" />
    <mutant id="mutant_10272" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="((host.length()) - (domain.length()))" />
    <mutant id="mutant_4730" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="(&quot;ObjectDirectory[&quot; / (getDirectory()))" />
    <mutant id="mutant_10273" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((host.length()) - (domain.length())) - 1)" to="(((host.length()) - (domain.length())) + 1)" />
    <mutant id="mutant_10274" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="(publicKey)" />
    <mutant id="mutant_10275" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="(&quot;AWS &quot; - (publicKey))" />
    <mutant id="mutant_10276" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="(&quot;AWS &quot; % (publicKey))" />
    <mutant id="mutant_10277" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(&quot;AWS &quot; + (publicKey))" to="&quot;AWS &quot;" />
    <mutant id="mutant_3409" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="si" />
    <mutant id="mutant_3408" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="(si - 12)" />
    <mutant id="mutant_4739" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_3407" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="(si / 12)" />
    <mutant id="mutant_4738" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="(&quot;ObjectDirectory[&quot; + (getDirectory())) / &quot;]&quot;" />
    <mutant id="mutant_3406" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="(si % 12)" />
    <mutant id="mutant_4737" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="&quot;ObjectDirectory[&quot; + (getDirectory())" />
    <mutant id="mutant_3405" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 12)" to="12" />
    <mutant id="mutant_4736" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory())) + &quot;]&quot;" to="(&quot;ObjectDirectory[&quot; + (getDirectory())) - &quot;]&quot;" />
    <mutant id="mutant_3404" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="(fi - 12)" />
    <mutant id="mutant_4735" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="(&quot;ObjectDirectory[&quot; * (getDirectory()))" />
    <mutant id="mutant_3403" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 12)" to="fi" />
    <mutant id="mutant_4734" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.toString()" from="(&quot;ObjectDirectory[&quot; + (getDirectory()))" to="(&quot;ObjectDirectory[&quot; - (getDirectory()))" />
    <mutant id="mutant_10245" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="(&quot;\n&quot; * (new String(buf)))" />
    <mutant id="mutant_11576" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="1" />
    <mutant id="mutant_10246" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="(&quot;\n&quot; % (new String(buf)))" />
    <mutant id="mutant_11577" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="((p.length()) / 1)" />
    <mutant id="mutant_10247" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="(&quot;\n&quot; / (new String(buf)))" />
    <mutant id="mutant_11578" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="((p.length()) + 1)" />
    <mutant id="mutant_10248" viable="false" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="(&quot;\n&quot; - (new String(buf)))" />
    <mutant id="mutant_11579" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="((p.length()) % 1)" />
    <mutant id="mutant_10249" viable="true" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="&quot;\n&quot;" />
    <mutant id="mutant_4722" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) - &quot;]&quot;" />
    <mutant id="mutant_4721" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_4720" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) / &quot;]&quot;" />
    <mutant id="mutant_11570" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="(&quot;refs/&quot; / n)" />
    <mutant id="mutant_10240" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="(&quot;Invalid acl: &quot; - pacl)" />
    <mutant id="mutant_11571" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="(&quot;refs/&quot; - n)" />
    <mutant id="mutant_10241" viable="true" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="&quot;Invalid acl: &quot;" />
    <mutant id="mutant_11572" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="(&quot;refs/&quot; % n)" />
    <mutant id="mutant_10242" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="(&quot;Invalid acl: &quot; / pacl)" />
    <mutant id="mutant_11573" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="n" />
    <mutant id="mutant_10243" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="(&quot;Invalid acl: &quot; % pacl)" />
    <mutant id="mutant_11574" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3$DatabaseS3.readLooseRefs(java.util.TreeMap)" from="(&quot;refs/&quot; + n)" to="&quot;refs/&quot;" />
    <mutant id="mutant_10244" viable="false" in="org.eclipse.jgit.transport.AmazonS3(java.util.Properties)" from="(&quot;Invalid acl: &quot; + pacl)" to="(&quot;Invalid acl: &quot; * pacl)" />
    <mutant id="mutant_11575" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="p.length()" />
    <mutant id="mutant_4729" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="(Constants.OBJECT_ID_STRING_LENGTH) % 1" />
    <mutant id="mutant_4728" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="(Constants.OBJECT_ID_STRING_LENGTH) * 1" />
    <mutant id="mutant_4727" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_4726" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="(Constants.OBJECT_ID_STRING_LENGTH) / 1" />
    <mutant id="mutant_4725" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="1" />
    <mutant id="mutant_4724" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.write(org.eclipse.jgit.lib.ObjectId)" from="(Constants.OBJECT_ID_STRING_LENGTH) + 1" to="(Constants.OBJECT_ID_STRING_LENGTH) - 1" />
    <mutant id="mutant_4723" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) % &quot;]&quot;" />
    <mutant id="mutant_10256" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="((fmt.format(new java.util.Date())) / &quot; &quot;)" />
    <mutant id="mutant_11587" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) - &quot;/objects&quot;)" />
    <mutant id="mutant_10257" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="((fmt.format(new java.util.Date())) + &quot; &quot;) % tz" />
    <mutant id="mutant_11588" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="keyPrefix" />
    <mutant id="mutant_10258" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="((fmt.format(new java.util.Date())) + &quot; &quot;) * tz" />
    <mutant id="mutant_11589" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openPush()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) * &quot;/objects&quot;)" />
    <mutant id="mutant_10259" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;) + tz" to="(fmt.format(new java.util.Date())) + &quot; &quot;" />
    <mutant id="mutant_4711" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="((&quot;LockFile[&quot; + (lck)) - &quot;, haveLck=&quot;)" />
    <mutant id="mutant_4710" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" to="((&quot;LockFile[&quot; + (lck)) / &quot;, haveLck=&quot;)" />
    <mutant id="mutant_11580" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.transport.URIish)" from="((p.length()) - 1)" to="((p.length()) * 1)" />
    <mutant id="mutant_10250" viable="true" in="org.eclipse.jgit.transport.AmazonS3.error(java.lang.String,java.lang.String,java.net.HttpURLConnection)" from="(&quot;\n&quot; + (new String(buf)))" to="new String(buf)" />
    <mutant id="mutant_11581" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) - &quot;/objects&quot;)" />
    <mutant id="mutant_10251" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="((fmt.format(new java.util.Date())) % &quot; &quot;)" />
    <mutant id="mutant_11582" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="keyPrefix" />
    <mutant id="mutant_10252" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="((fmt.format(new java.util.Date())) - &quot; &quot;)" />
    <mutant id="mutant_11583" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) * &quot;/objects&quot;)" />
    <mutant id="mutant_10253" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_11584" viable="true" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="&quot;/objects&quot;" />
    <mutant id="mutant_10254" viable="true" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="(fmt.format(new java.util.Date()))" />
    <mutant id="mutant_11585" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) / &quot;/objects&quot;)" />
    <mutant id="mutant_10255" viable="false" in="org.eclipse.jgit.transport.AmazonS3.httpNow()" from="((fmt.format(new java.util.Date())) + &quot; &quot;)" to="((fmt.format(new java.util.Date())) * &quot; &quot;)" />
    <mutant id="mutant_11586" viable="false" in="org.eclipse.jgit.transport.TransportAmazonS3.openFetch()" from="((keyPrefix) + &quot;/objects&quot;)" to="((keyPrefix) % &quot;/objects&quot;)" />
    <mutant id="mutant_4719" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)" />
    <mutant id="mutant_4718" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) + &quot;]&quot;" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck)) * &quot;]&quot;" />
    <mutant id="mutant_4717" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="(haveLck)" />
    <mutant id="mutant_4716" viable="true" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;)" />
    <mutant id="mutant_4715" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) * (haveLck))" />
    <mutant id="mutant_4714" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) / (haveLck))" />
    <mutant id="mutant_4713" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) - (haveLck))" />
    <mutant id="mutant_4712" viable="false" in="org.eclipse.jgit.internal.storage.file.LockFile.toString()" from="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) + (haveLck))" to="(((&quot;LockFile[&quot; + (lck)) + &quot;, haveLck=&quot;) % (haveLck))" />
    <mutant id="mutant_3460" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="fi" />
    <mutant id="mutant_4791" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="j" />
    <mutant id="mutant_4790" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="((newList.length) - j)" to="((newList.length) / j)" />
    <mutant id="mutant_2125" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3457" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="si" />
    <mutant id="mutant_4788" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="(j - 1)" />
    <mutant id="mutant_2126" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_3456" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="16" />
    <mutant id="mutant_4787" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="(j * 1)" />
    <mutant id="mutant_2123" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3455" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="(si - 16)" />
    <mutant id="mutant_4786" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="j" />
    <mutant id="mutant_2124" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_3454" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="(si / 16)" />
    <mutant id="mutant_4785" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="(j % 1)" />
    <mutant id="mutant_2121" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3453" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="(si * 16)" />
    <mutant id="mutant_4784" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="1" />
    <mutant id="mutant_2122" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_3452" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="(fi / 16)" />
    <mutant id="mutant_4783" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="oldList.length" />
    <mutant id="mutant_3451" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="(fi % 16)" />
    <mutant id="mutant_4782" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="(oldList.length) + 1" />
    <mutant id="mutant_2120" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_3450" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="(fi - 16)" />
    <mutant id="mutant_4781" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="(oldList.length) * 1" />
    <mutant id="mutant_2129" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(byte[],int,int)" from="(end - offset)" to="(end % offset)" />
    <mutant id="mutant_2127" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3459" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 17)" to="(fi - 17)" />
    <mutant id="mutant_2128" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_3458" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 16)" to="(si % 16)" />
    <mutant id="mutant_4789" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(j + 1)" to="(j / 1)" />
    <mutant id="mutant_4780" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="(oldList.length) % 1" />
    <mutant id="mutant_2114" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="ptr" />
    <mutant id="mutant_3446" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="si" />
    <mutant id="mutant_4777" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="1 % (oldList.length)" />
    <mutant id="mutant_2115" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="(ptr * 32)" />
    <mutant id="mutant_3445" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="15" />
    <mutant id="mutant_4776" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="oldList.length" />
    <mutant id="mutant_2112" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="(ptr / 32)" />
    <mutant id="mutant_3444" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="(si * 15)" />
    <mutant id="mutant_4775" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="1 * (oldList.length)" />
    <mutant id="mutant_2113" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="(ptr - 32)" />
    <mutant id="mutant_3443" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="(si - 15)" />
    <mutant id="mutant_4774" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="1 - (oldList.length)" />
    <mutant id="mutant_2110" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="(ptr - 24)" />
    <mutant id="mutant_3442" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="(si % 15)" />
    <mutant id="mutant_4773" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="1" />
    <mutant id="mutant_2111" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="(ptr % 32)" />
    <mutant id="mutant_3441" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 15)" to="(si / 15)" />
    <mutant id="mutant_4772" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.insertPack(org.eclipse.jgit.internal.storage.file.PackFile)" from="1 + (oldList.length)" to="1 / (oldList.length)" />
    <mutant id="mutant_3440" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="(fi % 15)" />
    <mutant id="mutant_4771" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="base / (ext.getExtension())" />
    <mutant id="mutant_4770" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="base * (ext.getExtension())" />
    <mutant id="mutant_2118" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_2119" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3449" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="16" />
    <mutant id="mutant_2116" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 32)" to="32" />
    <mutant id="mutant_3448" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="fi" />
    <mutant id="mutant_4779" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="1" />
    <mutant id="mutant_2117" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3447" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 16)" to="(fi * 16)" />
    <mutant id="mutant_4778" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.removePack(org.eclipse.jgit.internal.storage.file.PackFile)" from="(oldList.length) - 1" to="(oldList.length) / 1" />
    <mutant id="mutant_10289" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) - sec)" />
    <mutant id="mutant_2103" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="(ptr % 16)" />
    <mutant id="mutant_3435" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="fi" />
    <mutant id="mutant_4766" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="ext.getExtension()" />
    <mutant id="mutant_10281" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="((&quot;AWS &quot; + (publicKey)) - &quot;:&quot;)" />
    <mutant id="mutant_2104" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="(ptr / 16)" />
    <mutant id="mutant_3434" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="si" />
    <mutant id="mutant_4765" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="((p.length()) % 4)" />
    <mutant id="mutant_10282" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="(&quot;AWS &quot; + (publicKey))" />
    <mutant id="mutant_2101" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="(ptr * 16)" />
    <mutant id="mutant_3433" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="14" />
    <mutant id="mutant_4764" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="((p.length()) * 4)" />
    <mutant id="mutant_10283" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="((&quot;AWS &quot; + (publicKey)) * &quot;:&quot;)" />
    <mutant id="mutant_2102" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="ptr" />
    <mutant id="mutant_3432" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="(si - 14)" />
    <mutant id="mutant_4763" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="((p.length()) + 4)" />
    <mutant id="mutant_10284" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_3431" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="(si / 14)" />
    <mutant id="mutant_4762" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="4" />
    <mutant id="mutant_10285" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="((&quot;AWS &quot; + (publicKey)) % &quot;:&quot;)" />
    <mutant id="mutant_2100" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 16)" to="16" />
    <mutant id="mutant_3430" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="(si * 14)" />
    <mutant id="mutant_4761" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="((p.length()) / 4)" />
    <mutant id="mutant_10286" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) * sec)" />
    <mutant id="mutant_4760" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="((p.length()) - 4)" to="p.length()" />
    <mutant id="mutant_10287" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="sec" />
    <mutant id="mutant_10288" viable="true" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" />
    <mutant id="mutant_2109" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="ptr" />
    <mutant id="mutant_2107" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="24" />
    <mutant id="mutant_3439" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="(fi / 15)" />
    <mutant id="mutant_2108" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="(ptr * 24)" />
    <mutant id="mutant_3438" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="(fi - 15)" />
    <mutant id="mutant_4769" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="base - (ext.getExtension())" />
    <mutant id="mutant_2105" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="(ptr / 24)" />
    <mutant id="mutant_3437" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="(fi * 15)" />
    <mutant id="mutant_4768" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="base" />
    <mutant id="mutant_2106" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.fromHexString(byte[],int,int)" from="(ptr + 24)" to="(ptr % 24)" />
    <mutant id="mutant_3436" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 15)" to="15" />
    <mutant id="mutant_4767" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.openPack(java.io.File)" from="base + (ext.getExtension())" to="base % (ext.getExtension())" />
    <mutant id="mutant_10280" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;)" to="((&quot;AWS &quot; + (publicKey)) / &quot;:&quot;)" />
    <mutant id="mutant_3424" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="14" />
    <mutant id="mutant_4755" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="base % (PackExt.PACK.getExtension())" />
    <mutant id="mutant_10292" viable="false" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(len * 1024)" />
    <mutant id="mutant_3423" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="(fi * 14)" />
    <mutant id="mutant_4754" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="PackExt.PACK.getExtension()" />
    <mutant id="mutant_10293" viable="false" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(len + 1024)" />
    <mutant id="mutant_3422" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="(si * 13)" />
    <mutant id="mutant_4753" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="(base / (ext.getExtension()))" />
    <mutant id="mutant_10294" viable="false" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="len" />
    <mutant id="mutant_3421" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="si" />
    <mutant id="mutant_4752" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="(base * (ext.getExtension()))" />
    <mutant id="mutant_10295" viable="true" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="1024" />
    <mutant id="mutant_3420" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 13)" to="(si - 13)" />
    <mutant id="mutant_4751" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="(base - (ext.getExtension()))" />
    <mutant id="mutant_10296" viable="false" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(len % 1024)" />
    <mutant id="mutant_4750" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="(base + (ext.getExtension()))" to="base" />
    <mutant id="mutant_10297" viable="false" in="org.eclipse.jgit.transport.AmazonS3.putImpl(java.lang.String,java.lang.String,byte[],org.eclipse.jgit.util.TemporaryBuffer,org.eclipse.jgit.lib.ProgressMonitor,java.lang.String)" from="((int)(len / 1024))" to="(len - 1024)" />
    <mutant id="mutant_10298" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) % &quot;-Timer&quot;)" />
    <mutant id="mutant_10299" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) / &quot;-Timer&quot;)" />
    <mutant id="mutant_3429" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 14)" to="(si % 14)" />
    <mutant id="mutant_3428" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="(fi % 14)" />
    <mutant id="mutant_4759" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="base / (PackExt.PACK.getExtension())" />
    <mutant id="mutant_3427" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="(fi / 14)" />
    <mutant id="mutant_4758" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="base * (PackExt.PACK.getExtension())" />
    <mutant id="mutant_3426" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="(fi - 14)" />
    <mutant id="mutant_4757" viable="false" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="base - (PackExt.PACK.getExtension())" />
    <mutant id="mutant_10290" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) / sec)" />
    <mutant id="mutant_3425" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 14)" to="fi" />
    <mutant id="mutant_4756" viable="true" in="org.eclipse.jgit.internal.storage.file.ObjectDirectory.scanPacksImpl(org.eclipse.jgit.internal.storage.file.ObjectDirectory$PackList)" from="base + (PackExt.PACK.getExtension())" to="base" />
    <mutant id="mutant_10291" viable="false" in="org.eclipse.jgit.transport.AmazonS3.authorize(java.net.HttpURLConnection)" from="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) + sec)" to="(((&quot;AWS &quot; + (publicKey)) + &quot;:&quot;) % sec)" />
    <mutant id="mutant_327" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="(2 % (context))" />
    <mutant id="mutant_328" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="(2 - (context))" />
    <mutant id="mutant_329" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="1" />
    <mutant id="mutant_323" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="(context)" />
    <mutant id="mutant_324" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="2" />
    <mutant id="mutant_325" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="(2 + (context))" />
    <mutant id="mutant_326" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(2 * (context))" to="(2 / (context))" />
    <mutant id="mutant_3262" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_4593" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="(System.currentTimeMillis()) / (expireAgeMillis)" />
    <mutant id="mutant_3261" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_4592" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="((&quot;pack-&quot; + name) * ext)" />
    <mutant id="mutant_3260" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="1 / (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_4591" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="(&quot;pack-&quot; + name)" />
    <mutant id="mutant_4590" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="((&quot;pack-&quot; + name) / ext)" />
    <mutant id="mutant_3259" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="1 % (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_3258" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="Constants.OBJECT_ID_LENGTH" />
    <mutant id="mutant_4589" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="((&quot;pack-&quot; + name) % ext)" />
    <mutant id="mutant_3257" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="1 - (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_4588" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="((&quot;pack-&quot; + name) - ext)" />
    <mutant id="mutant_3256" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="1" />
    <mutant id="mutant_4587" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="((&quot;pack-&quot; + name) + ext)" to="ext" />
    <mutant id="mutant_3255" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="1 + (Constants.OBJECT_ID_LENGTH)" to="1 * (Constants.OBJECT_ID_LENGTH)" />
    <mutant id="mutant_4586" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; - name)" />
    <mutant id="mutant_3254" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="'0'" />
    <mutant id="mutant_4585" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; / name)" />
    <mutant id="mutant_3253" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="c / '0'" />
    <mutant id="mutant_4584" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="&quot;pack-&quot;" />
    <mutant id="mutant_3252" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="c % '0'" />
    <mutant id="mutant_4583" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="name" />
    <mutant id="mutant_320" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="(e.get(i).getBeginB())" />
    <mutant id="mutant_321" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="(e.get((i - 1)).getEndB())" />
    <mutant id="mutant_322" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="((e.get(i).getBeginB()) % (e.get((i - 1)).getEndB()))" />
    <mutant id="mutant_338" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="i * 1" />
    <mutant id="mutant_339" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="i - 1" />
    <mutant id="mutant_334" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="(line * 1)" />
    <mutant id="mutant_335" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="i / 1" />
    <mutant id="mutant_336" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="1" />
    <mutant id="mutant_337" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="i" />
    <mutant id="mutant_3251" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="c + '0'" />
    <mutant id="mutant_4582" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; * name)" />
    <mutant id="mutant_3250" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="c" />
    <mutant id="mutant_4581" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.nameFor(java.lang.String,java.lang.String)" from="(&quot;pack-&quot; + name)" to="(&quot;pack-&quot; % name)" />
    <mutant id="mutant_4580" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) - &quot;]&quot;" />
    <mutant id="mutant_3248" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4579" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) * &quot;]&quot;" />
    <mutant id="mutant_3247" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4578" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_3246" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4577" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) % &quot;]&quot;" />
    <mutant id="mutant_3245" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4576" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))" />
    <mutant id="mutant_3244" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4575" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) + &quot;]&quot;" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead)))) / &quot;]&quot;" />
    <mutant id="mutant_3243" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4574" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" />
    <mutant id="mutant_3242" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_4573" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) % (f.format(new java.util.Date(lastRead))))" />
    <mutant id="mutant_3241" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_4572" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) * (f.format(new java.util.Date(lastRead))))" />
    <mutant id="mutant_330" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="line" />
    <mutant id="mutant_331" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="(line % 1)" />
    <mutant id="mutant_332" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="(line - 1)" />
    <mutant id="mutant_333" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.isEndOfLineMissing(org.eclipse.jgit.diff.RawText,int)" from="(line + 1)" to="(line / 1)" />
    <mutant id="mutant_3249" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTree(byte[])" from="c - '0'" to="c * '0'" />
    <mutant id="mutant_349" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="(((long)(curEdit.getBeginA())) / (context))" />
    <mutant id="mutant_345" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="end % 1" />
    <mutant id="mutant_346" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="end" />
    <mutant id="mutant_347" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="context" />
    <mutant id="mutant_348" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="((long)(curEdit.getBeginA()))" />
    <mutant id="mutant_3240" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_4571" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) / (f.format(new java.util.Date(lastRead))))" />
    <mutant id="mutant_4570" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="(f.format(new java.util.Date(lastRead)))" />
    <mutant id="mutant_3237" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_4568" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="&quot;, read: &quot;" />
    <mutant id="mutant_3236" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_4567" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) % &quot;, read: &quot;)" />
    <mutant id="mutant_3235" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_4566" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) / &quot;, read: &quot;)" />
    <mutant id="mutant_3234" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_4565" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) * &quot;, read: &quot;)" />
    <mutant id="mutant_3233" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_4564" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) - &quot;, read: &quot;)" />
    <mutant id="mutant_3232" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_4563" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;)" to="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" />
    <mutant id="mutant_3231" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_4562" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="&quot;FileSnapshot[modified: &quot;" />
    <mutant id="mutant_3230" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="end" />
    <mutant id="mutant_4561" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="(f.format(new java.util.Date(lastModified)))" />
    <mutant id="mutant_341" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="1" />
    <mutant id="mutant_5892" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="(evictBatch) + 1" />
    <mutant id="mutant_342" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="end * 1" />
    <mutant id="mutant_5893" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="(evictBatch) % 1" />
    <mutant id="mutant_343" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="end / 1" />
    <mutant id="mutant_5894" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="(evictBatch) / 1" />
    <mutant id="mutant_344" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="end - 1" to="end + 1" />
    <mutant id="mutant_5895" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="(evictBatch) * 1" />
    <mutant id="mutant_5896" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="(c * 1)" />
    <mutant id="mutant_5897" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="1" />
    <mutant id="mutant_3239" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_5898" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="(c % 1)" />
    <mutant id="mutant_340" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.findCombinedEnd(java.util.List,int)" from="i + 1" to="i % 1" />
    <mutant id="mutant_3238" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_4569" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) + (f.format(new java.util.Date(lastRead))))" to="(((&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified)))) + &quot;, read: &quot;) - (f.format(new java.util.Date(lastRead))))" />
    <mutant id="mutant_5899" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="c" />
    <mutant id="mutant_356" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="(((long)(curEdit.getBeginB())) + (context))" />
    <mutant id="mutant_357" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="(((long)(curEdit.getBeginB())) / (context))" />
    <mutant id="mutant_358" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="((long)(curEdit.getBeginB()))" />
    <mutant id="mutant_5890" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="evictBatch" />
    <mutant id="mutant_359" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="context" />
    <mutant id="mutant_5891" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.evict()" from="(evictBatch) - 1" to="1" />
    <mutant id="mutant_4560" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="(&quot;FileSnapshot[modified: &quot; / (f.format(new java.util.Date(lastModified))))" />
    <mutant id="mutant_3226" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end * 1)" />
    <mutant id="mutant_4557" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="(&quot;FileSnapshot[modified: &quot; % (f.format(new java.util.Date(lastModified))))" />
    <mutant id="mutant_5889" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) / (locks.length))" />
    <mutant id="mutant_3225" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="1" />
    <mutant id="mutant_4556" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="(read / (lastModified))" />
    <mutant id="mutant_3224" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4555" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="(read % (lastModified))" />
    <mutant id="mutant_3223" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_4554" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="(read + (lastModified))" />
    <mutant id="mutant_3222" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4553" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="(lastModified)" />
    <mutant id="mutant_3221" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_4552" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="read" />
    <mutant id="mutant_3220" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4551" viable="true" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.notRacyClean(long)" from="(read - (lastModified))" to="(read * (lastModified))" />
    <mutant id="mutant_4550" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="getDirectory().getAbsolutePath()" />
    <mutant id="mutant_352" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="(((long)(curEdit.getBeginA())) * (context))" />
    <mutant id="mutant_5881" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) % 2)" />
    <mutant id="mutant_353" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="context" />
    <mutant id="mutant_5882" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) * 2)" />
    <mutant id="mutant_354" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="(((long)(curEdit.getBeginB())) * (context))" />
    <mutant id="mutant_5883" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) - 2)" />
    <mutant id="mutant_355" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginB())) - (context))" to="(((long)(curEdit.getBeginB())) % (context))" />
    <mutant id="mutant_5884" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) - (locks.length))" />
    <mutant id="mutant_5885" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1)" />
    <mutant id="mutant_3229" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end % 1)" />
    <mutant id="mutant_5886" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="locks.length" />
    <mutant id="mutant_350" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="(((long)(curEdit.getBeginA())) + (context))" />
    <mutant id="mutant_3228" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end + 1)" />
    <mutant id="mutant_4559" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="(&quot;FileSnapshot[modified: &quot; * (f.format(new java.util.Date(lastModified))))" />
    <mutant id="mutant_5887" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) + (locks.length))" />
    <mutant id="mutant_351" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(curEdit.getBeginA())) - (context))" to="(((long)(curEdit.getBeginA())) % (context))" />
    <mutant id="mutant_3227" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - 1)" to="(end / 1)" />
    <mutant id="mutant_4558" viable="false" in="org.eclipse.jgit.internal.storage.file.FileSnapshot.toString()" from="(&quot;FileSnapshot[modified: &quot; + (f.format(new java.util.Date(lastModified))))" to="(&quot;FileSnapshot[modified: &quot; - (f.format(new java.util.Date(lastModified))))" />
    <mutant id="mutant_5888" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.lock(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (locks.length))" to="(((hash(pack.hash, position)) &gt;&gt;&gt; 1) * (locks.length))" />
    <mutant id="mutant_367" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="(((long)(endEdit.getEndB())) / (context))" />
    <mutant id="mutant_368" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="(((long)(endEdit.getEndB())) * (context))" />
    <mutant id="mutant_369" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="(((long)(endEdit.getEndB())) - (context))" />
    <mutant id="mutant_3299" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="3" />
    <mutant id="mutant_3298" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="(si / 3)" />
    <mutant id="mutant_3297" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="(si - 3)" />
    <mutant id="mutant_3296" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="(fi - 3)" />
    <mutant id="mutant_363" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="(((long)(endEdit.getEndA())) * (context))" />
    <mutant id="mutant_364" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="(((long)(endEdit.getEndA())) / (context))" />
    <mutant id="mutant_365" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="context" />
    <mutant id="mutant_366" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="(((long)(endEdit.getEndB())) % (context))" />
    <mutant id="mutant_360" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="(((long)(endEdit.getEndA())) - (context))" />
    <mutant id="mutant_361" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="(((long)(endEdit.getEndA())) % (context))" />
    <mutant id="mutant_362" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndA())) + (context))" to="((long)(endEdit.getEndA()))" />
    <mutant id="mutant_378" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="(end % start)" />
    <mutant id="mutant_379" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="(end / start)" />
    <mutant id="mutant_3295" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="(fi / 3)" />
    <mutant id="mutant_3294" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="(fi % 3)" />
    <mutant id="mutant_3293" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="fi" />
    <mutant id="mutant_3292" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="3" />
    <mutant id="mutant_3291" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 3)" to="(fi * 3)" />
    <mutant id="mutant_3290" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="(si % 2)" />
    <mutant id="mutant_3289" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="si" />
    <mutant id="mutant_3288" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="(si * 2)" />
    <mutant id="mutant_3287" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="(si - 2)" />
    <mutant id="mutant_3286" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="(si / 2)" />
    <mutant id="mutant_3285" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 2)" to="2" />
    <mutant id="mutant_374" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="(endIdx * 1)" />
    <mutant id="mutant_375" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="(endIdx - 1)" />
    <mutant id="mutant_376" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="endIdx" />
    <mutant id="mutant_377" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="(end + start)" />
    <mutant id="mutant_370" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(((long)(endEdit.getEndB())) + (context))" to="((long)(endEdit.getEndB()))" />
    <mutant id="mutant_371" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="1" />
    <mutant id="mutant_372" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="(endIdx / 1)" />
    <mutant id="mutant_373" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.diff.EditList,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(endIdx + 1)" to="(endIdx % 1)" />
    <mutant id="mutant_389" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="((newPrefix) - (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" />
    <mutant id="mutant_3284" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="(fi - 2)" />
    <mutant id="mutant_3283" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="(fi / 2)" />
    <mutant id="mutant_3282" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="fi" />
    <mutant id="mutant_3281" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="(fi % 2)" />
    <mutant id="mutant_3280" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="(fi * 2)" />
    <mutant id="mutant_3279" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 2)" to="2" />
    <mutant id="mutant_380" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="start" />
    <mutant id="mutant_3278" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="(si / 1)" />
    <mutant id="mutant_3277" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="(si % 1)" />
    <mutant id="mutant_3276" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="si" />
    <mutant id="mutant_3275" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="(si * 1)" />
    <mutant id="mutant_3274" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="(si - 1)" />
    <mutant id="mutant_385" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="((oldPrefix) * (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" />
    <mutant id="mutant_386" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="((oldPrefix) / (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" />
    <mutant id="mutant_387" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="((oldPrefix) - (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" />
    <mutant id="mutant_388" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="((oldPrefix) % (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" />
    <mutant id="mutant_381" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="end" />
    <mutant id="mutant_382" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.format(org.eclipse.jgit.patch.FileHeader,org.eclipse.jgit.diff.RawText,org.eclipse.jgit.diff.RawText)" from="(end - start)" to="(end * start)" />
    <mutant id="mutant_383" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="(type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath)" />
    <mutant id="mutant_384" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((oldPrefix) + (type == (DiffEntry.ChangeType.ADD) ? newPath : oldPath))" to="oldPrefix" />
    <mutant id="mutant_3273" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 1)" to="1" />
    <mutant id="mutant_3272" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="(fi - 1)" />
    <mutant id="mutant_3271" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="(fi / 1)" />
    <mutant id="mutant_3270" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="fi" />
    <mutant id="mutant_3269" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="(fi % 1)" />
    <mutant id="mutant_390" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="newPrefix" />
    <mutant id="mutant_3268" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="1" />
    <mutant id="mutant_4599" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="2" />
    <mutant id="mutant_391" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="((newPrefix) / (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" />
    <mutant id="mutant_3267" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 1)" to="(fi * 1)" />
    <mutant id="mutant_4598" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="expireAgeMillis" />
    <mutant id="mutant_3266" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4597" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="System.currentTimeMillis()" />
    <mutant id="mutant_3265" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4596" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="(System.currentTimeMillis()) % (expireAgeMillis)" />
    <mutant id="mutant_3264" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4595" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="(System.currentTimeMillis()) + (expireAgeMillis)" />
    <mutant id="mutant_3263" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkTruncatedIgnorableUTF8(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_4594" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getExpireDate()" from="(System.currentTimeMillis()) - (expireAgeMillis)" to="(System.currentTimeMillis()) * (expireAgeMillis)" />
    <mutant id="mutant_396" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; * (ent.getScore()))" />
    <mutant id="mutant_397" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; % (ent.getScore()))" />
    <mutant id="mutant_398" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(&quot;similarity index &quot; / (ent.getScore()))" />
    <mutant id="mutant_399" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="(ent.getScore())" />
    <mutant id="mutant_392" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="((newPrefix) % (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" />
    <mutant id="mutant_393" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="(type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath)" />
    <mutant id="mutant_394" viable="false" in="org.eclipse.jgit.diff.DiffFormatter.formatGitDiffFirstHeaderLine(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry$ChangeType,java.lang.String,java.lang.String)" from="((newPrefix) + (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" to="((newPrefix) * (type == (DiffEntry.ChangeType.DELETE) ? oldPath : newPath))" />
    <mutant id="mutant_395" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.formatHeader(java.io.ByteArrayOutputStream,org.eclipse.jgit.diff.DiffEntry)" from="(&quot;similarity index &quot; + (ent.getScore()))" to="&quot;similarity index &quot;" />
    <mutant id="mutant_11716" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="b.length()" />
    <mutant id="mutant_11717" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) / 1)" />
    <mutant id="mutant_11718" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) % 1)" />
    <mutant id="mutant_11719" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; % service)" />
    <mutant id="mutant_11710" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) * &quot;-advertisement&quot;" />
    <mutant id="mutant_11711" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) - &quot;-advertisement&quot;" />
    <mutant id="mutant_11712" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) / &quot;-advertisement&quot;" />
    <mutant id="mutant_11713" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="1" />
    <mutant id="mutant_11714" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) * 1)" />
    <mutant id="mutant_11715" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="((b.length()) - 1)" to="((b.length()) + 1)" />
    <mutant id="mutant_11727" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="&quot;application/x-&quot; + service" />
    <mutant id="mutant_11728" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) * &quot;-advertisement&quot;" />
    <mutant id="mutant_11729" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) - &quot;-advertisement&quot;" />
    <mutant id="mutant_11720" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; / service)" />
    <mutant id="mutant_11721" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; - service)" />
    <mutant id="mutant_11722" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="&quot;application/x-&quot;" />
    <mutant id="mutant_11723" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="service" />
    <mutant id="mutant_11724" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; * service)" />
    <mutant id="mutant_11725" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="&quot;-advertisement&quot;" />
    <mutant id="mutant_11726" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) % &quot;-advertisement&quot;" />
    <mutant id="mutant_11705" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="service" />
    <mutant id="mutant_11706" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; * service)" />
    <mutant id="mutant_11707" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="&quot;-advertisement&quot;" />
    <mutant id="mutant_11708" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) % &quot;-advertisement&quot;" />
    <mutant id="mutant_11709" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="&quot;application/x-&quot; + service" />
    <mutant id="mutant_11700" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="((status + &quot; &quot;) / (conn.getResponseMessage()))" />
    <mutant id="mutant_11701" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; % service)" />
    <mutant id="mutant_11702" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; / service)" />
    <mutant id="mutant_11703" viable="false" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="(&quot;application/x-&quot; - service)" />
    <mutant id="mutant_11704" viable="true" in="org.eclipse.jgit.transport.TransportHttp.isSmartHttp(org.eclipse.jgit.transport.http.HttpConnection,java.lang.String)" from="(&quot;application/x-&quot; + service)" to="&quot;application/x-&quot;" />
    <mutant id="mutant_10308" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout + 1000)" />
    <mutant id="mutant_11639" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="(name / &quot;^{}&quot;)" />
    <mutant id="mutant_10309" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout % 1000)" />
    <mutant id="mutant_10300" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) * &quot;-Timer&quot;)" />
    <mutant id="mutant_11631" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="3" />
    <mutant id="mutant_12963" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="ii + 1" />
    <mutant id="mutant_10301" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="&quot;-Timer&quot;" />
    <mutant id="mutant_11632" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="((name.length()) + 3)" />
    <mutant id="mutant_12962" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="ii / 1" />
    <mutant id="mutant_10302" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) - &quot;-Timer&quot;)" />
    <mutant id="mutant_11633" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="((name.length()) * 3)" />
    <mutant id="mutant_12965" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="c.depth" />
    <mutant id="mutant_10303" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="caller.getName()" />
    <mutant id="mutant_11634" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="((name.length()) % 3)" />
    <mutant id="mutant_12964" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="ii % 1" />
    <mutant id="mutant_10304" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout - 1000)" />
    <mutant id="mutant_11635" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="(name % &quot;^{}&quot;)" />
    <mutant id="mutant_12967" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="1" />
    <mutant id="mutant_10305" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="timeout" />
    <mutant id="mutant_11636" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="(name * &quot;^{}&quot;)" />
    <mutant id="mutant_12966" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="(c.depth) - 1" />
    <mutant id="mutant_10306" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout / 1000)" />
    <mutant id="mutant_11637" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="(name - &quot;^{}&quot;)" />
    <mutant id="mutant_12969" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="(c.depth) * 1" />
    <mutant id="mutant_10307" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="1000" />
    <mutant id="mutant_11638" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="name" />
    <mutant id="mutant_12968" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="(c.depth) / 1" />
    <mutant id="mutant_12961" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="1" />
    <mutant id="mutant_11630" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="((name.length()) / 3)" />
    <mutant id="mutant_12960" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="ii" />
    <mutant id="mutant_10319" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="(nul % 1)" />
    <mutant id="mutant_10311" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="timeout" />
    <mutant id="mutant_11642" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="((u.toString()) * &quot;: &quot;)" />
    <mutant id="mutant_12974" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="(path.toString())" />
    <mutant id="mutant_10312" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout / 1000)" />
    <mutant id="mutant_11643" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="(u.toString())" />
    <mutant id="mutant_12973" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="(&quot;(FOLLOW(&quot; * (path.toString()))" />
    <mutant id="mutant_10313" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="1000" />
    <mutant id="mutant_11644" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="((u.toString()) - &quot;: &quot;)" />
    <mutant id="mutant_12976" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="(&quot;(FOLLOW(&quot; / (path.toString()))" />
    <mutant id="mutant_10314" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout + 1000)" />
    <mutant id="mutant_11645" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_12975" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="(&quot;(FOLLOW(&quot; % (path.toString()))" />
    <mutant id="mutant_10315" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout % 1000)" />
    <mutant id="mutant_11646" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="((u.toString()) % &quot;: &quot;)" />
    <mutant id="mutant_12978" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="((&quot;(FOLLOW(&quot; + (path.toString())) % &quot;)&quot;)" />
    <mutant id="mutant_10316" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="1" />
    <mutant id="mutant_11647" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="(((u.toString()) + &quot;: &quot;) - (HttpSupport.response(c)))" />
    <mutant id="mutant_12977" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="(&quot;(FOLLOW(&quot; + (path.toString()))" />
    <mutant id="mutant_10317" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="nul" />
    <mutant id="mutant_11648" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="((u.toString()) + &quot;: &quot;)" />
    <mutant id="mutant_10318" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="(nul - 1)" />
    <mutant id="mutant_11649" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="(HttpSupport.response(c))" />
    <mutant id="mutant_12979" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="((&quot;(FOLLOW(&quot; + (path.toString())) * &quot;)&quot;)" />
    <mutant id="mutant_12970" viable="true" in="org.eclipse.jgit.revwalk.DepthGenerator.next()" from="(c.depth) + 1" to="(c.depth) % 1" />
    <mutant id="mutant_11640" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(name + &quot;^{}&quot;)" to="&quot;^{}&quot;" />
    <mutant id="mutant_12972" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="(&quot;(FOLLOW(&quot; - (path.toString()))" />
    <mutant id="mutant_10310" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.init(java.io.InputStream,java.io.OutputStream)" from="(timeout * 1000)" to="(timeout - 1000)" />
    <mutant id="mutant_11641" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((u.toString()) + &quot;: &quot;)" to="((u.toString()) / &quot;: &quot;)" />
    <mutant id="mutant_12971" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(&quot;(FOLLOW(&quot; + (path.toString()))" to="&quot;(FOLLOW(&quot;" />
    <mutant id="mutant_11617" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="((1 * 1024) % 1024)" />
    <mutant id="mutant_12949" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="((inQueue) / 100) * 1" />
    <mutant id="mutant_11618" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="1024" />
    <mutant id="mutant_12948" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="((inQueue) / 100) / 1" />
    <mutant id="mutant_11619" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="((1 * 1024) - 1024)" />
    <mutant id="mutant_12941" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="100" />
    <mutant id="mutant_11610" viable="true" in="org.eclipse.jgit.transport.TransportGitSsh$ExtSession.exec(java.lang.String,int)" from="(((getURI().getUser()) + &quot;@&quot;) + (getURI().getHost()))" to="getURI().getHost()" />
    <mutant id="mutant_12940" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.add(org.eclipse.jgit.revwalk.RevCommit)" from="mid - 1" to="mid / 1" />
    <mutant id="mutant_11611" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="1" />
    <mutant id="mutant_12943" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="((inQueue) - 100)" />
    <mutant id="mutant_11612" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="(1 / 1024)" />
    <mutant id="mutant_12942" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="((inQueue) * 100)" />
    <mutant id="mutant_11613" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="(1 - 1024)" />
    <mutant id="mutant_12945" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="((inQueue) % 100)" />
    <mutant id="mutant_11614" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="1024" />
    <mutant id="mutant_12944" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="((inQueue) + 100)" />
    <mutant id="mutant_11615" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="(1 + 1024)" />
    <mutant id="mutant_12947" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="1" />
    <mutant id="mutant_11616" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="(1 * 1024)" to="(1 % 1024)" />
    <mutant id="mutant_12946" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100)" to="(inQueue)" />
    <mutant id="mutant_11628" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="(tab * 1)" />
    <mutant id="mutant_11629" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="((name.length()) - 3)" to="name.length()" />
    <mutant id="mutant_12959" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="ii - 1" to="ii * 1" />
    <mutant id="mutant_11620" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="((1 * 1024) / 1024)" />
    <mutant id="mutant_12952" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="((inQueue) / 100) - 1" />
    <mutant id="mutant_11621" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="((1 * 1024) + 1024)" />
    <mutant id="mutant_12951" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="((inQueue) / 100) % 1" />
    <mutant id="mutant_11622" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpConfig(org.eclipse.jgit.lib.Config)" from="((1 * 1024) * 1024)" to="(1 * 1024)" />
    <mutant id="mutant_12954" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="((++qi) - 100)" />
    <mutant id="mutant_11623" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="1" />
    <mutant id="mutant_12953" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="100" />
    <mutant id="mutant_11624" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="(tab - 1)" />
    <mutant id="mutant_12956" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="(++qi)" />
    <mutant id="mutant_11625" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="tab" />
    <mutant id="mutant_12955" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="((++qi) * 100)" />
    <mutant id="mutant_11626" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="(tab / 1)" />
    <mutant id="mutant_12958" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="((++qi) / 100)" />
    <mutant id="mutant_11627" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.readAdvertisedImpl(java.io.BufferedReader)" from="(tab + 1)" to="(tab % 1)" />
    <mutant id="mutant_12957" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((++qi) % 100)" to="((++qi) + 100)" />
    <mutant id="mutant_12950" viable="true" in="org.eclipse.jgit.revwalk.DateRevQueue.buildIndex()" from="((inQueue) / 100) + 1" to="(inQueue) / 100" />
    <mutant id="mutant_5919" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="(cnt * 1)" />
    <mutant id="mutant_10344" viable="false" in="?" from="((2 * 32) * 46)" to="((2 * 32) / 46)" />
    <mutant id="mutant_11675" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="(&quot;application/x-&quot; + serviceName) * &quot;-request&quot;" />
    <mutant id="mutant_10345" viable="false" in="?" from="((2 * 32) * 46)" to="(2 * 32)" />
    <mutant id="mutant_11676" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="(&quot;application/x-&quot; + serviceName) % &quot;-request&quot;" />
    <mutant id="mutant_10346" viable="false" in="?" from="((2 * 32) * 46) + 8" to="((2 * 32) * 46) / 8" />
    <mutant id="mutant_11677" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; % serviceName)" />
    <mutant id="mutant_10347" viable="false" in="?" from="((2 * 32) * 46) + 8" to="((2 * 32) * 46) - 8" />
    <mutant id="mutant_11678" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; / serviceName)" />
    <mutant id="mutant_10348" viable="false" in="?" from="((2 * 32) * 46) + 8" to="8" />
    <mutant id="mutant_11679" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; * serviceName)" />
    <mutant id="mutant_10349" viable="false" in="?" from="((2 * 32) * 46) + 8" to="((2 * 32) * 46) % 8" />
    <mutant id="mutant_5911" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) + dstoff)" />
    <mutant id="mutant_5912" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="dstbuf.length" />
    <mutant id="mutant_5913" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="dstoff" />
    <mutant id="mutant_5914" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="1" />
    <mutant id="mutant_11670" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; - serviceName)" />
    <mutant id="mutant_5915" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="cnt" />
    <mutant id="mutant_10340" viable="false" in="?" from="((2 * 32) * 46)" to="((2 * 32) + 46)" />
    <mutant id="mutant_11671" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="&quot;application/x-&quot; + serviceName" />
    <mutant id="mutant_5916" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="(cnt % 1)" />
    <mutant id="mutant_10341" viable="false" in="?" from="((2 * 32) * 46)" to="46" />
    <mutant id="mutant_11672" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="&quot;-request&quot;" />
    <mutant id="mutant_5917" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="(cnt + 1)" />
    <mutant id="mutant_10342" viable="false" in="?" from="((2 * 32) * 46)" to="((2 * 32) - 46)" />
    <mutant id="mutant_11673" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="(&quot;application/x-&quot; + serviceName) - &quot;-request&quot;" />
    <mutant id="mutant_5918" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(cnt - 1)" to="(cnt / 1)" />
    <mutant id="mutant_10343" viable="false" in="?" from="((2 * 32) * 46)" to="((2 * 32) % 46)" />
    <mutant id="mutant_11674" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-request&quot;" to="(&quot;application/x-&quot; + serviceName) / &quot;-request&quot;" />
    <mutant id="mutant_5910" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) / dstoff)" />
    <mutant id="mutant_5908" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) * dstoff)" />
    <mutant id="mutant_10355" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="6" />
    <mutant id="mutant_11686" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="(&quot;application/x-&quot; + serviceName) / &quot;-result&quot;" />
    <mutant id="mutant_5909" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.inflate(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],boolean)" from="((dstbuf.length) - dstoff)" to="((dstbuf.length) % dstoff)" />
    <mutant id="mutant_10356" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="(6 * (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_11687" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="(&quot;application/x-&quot; + serviceName) % &quot;-result&quot;" />
    <mutant id="mutant_10357" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="(6 - (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_11688" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="&quot;-result&quot;" />
    <mutant id="mutant_10358" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="(maxTime - 1000L)" />
    <mutant id="mutant_11689" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="(status % &quot; &quot;)" />
    <mutant id="mutant_10359" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="(maxTime + 1000L)" />
    <mutant id="mutant_5900" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="(c / 1)" />
    <mutant id="mutant_5901" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hit(org.eclipse.jgit.internal.storage.file.WindowCache$Ref)" from="(c + 1)" to="(c - 1)" />
    <mutant id="mutant_5902" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="cnt + need" />
    <mutant id="mutant_11680" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="serviceName" />
    <mutant id="mutant_5903" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="need" />
    <mutant id="mutant_10350" viable="false" in="?" from="((2 * 32) * 46) + 8" to="((2 * 32) * 46) * 8" />
    <mutant id="mutant_11681" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="&quot;application/x-&quot;" />
    <mutant id="mutant_5904" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="cnt / need" />
    <mutant id="mutant_10351" viable="false" in="?" from="((2 * 32) * 46) + 8" to="(2 * 32) * 46" />
    <mutant id="mutant_11682" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; - serviceName)" />
    <mutant id="mutant_5905" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="cnt * need" />
    <mutant id="mutant_10352" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="Constants.OBJECT_ID_STRING_LENGTH" />
    <mutant id="mutant_11683" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="&quot;application/x-&quot; + serviceName" />
    <mutant id="mutant_5906" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="cnt % need" />
    <mutant id="mutant_10353" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="(6 / (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_11684" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="(&quot;application/x-&quot; + serviceName) * &quot;-result&quot;" />
    <mutant id="mutant_5907" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copy(org.eclipse.jgit.internal.storage.file.PackFile,long,byte[],int,int)" from="cnt - need" to="cnt" />
    <mutant id="mutant_10354" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markCommon(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.transport.PacketLineIn$AckNackResult)" from="(6 + (Constants.OBJECT_ID_STRING_LENGTH))" to="(6 % (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_11685" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName) + &quot;-result&quot;" to="(&quot;application/x-&quot; + serviceName) - &quot;-result&quot;" />
    <mutant id="mutant_10322" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="name.length()" />
    <mutant id="mutant_11653" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) / &quot; &quot;)" />
    <mutant id="mutant_12985" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" />
    <mutant id="mutant_10323" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="((name.length()) / 3)" />
    <mutant id="mutant_11654" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_12984" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) - &quot; AND &quot;)" />
    <mutant id="mutant_10324" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="3" />
    <mutant id="mutant_11655" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" />
    <mutant id="mutant_12987" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="&quot; AND &quot;" />
    <mutant id="mutant_10325" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="((name.length()) + 3)" />
    <mutant id="mutant_11656" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) * &quot; &quot;)" />
    <mutant id="mutant_12986" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) / &quot; AND &quot;)" />
    <mutant id="mutant_10326" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="((name.length()) * 3)" />
    <mutant id="mutant_11657" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) - &quot; &quot;)" />
    <mutant id="mutant_12989" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) % (TreeFilter.ANY_DIFF.toString()))" />
    <mutant id="mutant_10327" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="((name.length()) - 3)" to="((name.length()) % 3)" />
    <mutant id="mutant_11658" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) % &quot; &quot;)" />
    <mutant id="mutant_12988" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) * &quot; AND &quot;)" />
    <mutant id="mutant_10328" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="(name % &quot;^{}&quot;)" />
    <mutant id="mutant_11659" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) - (c.getResponseMessage()))" />
    <mutant id="mutant_10329" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="(name * &quot;^{}&quot;)" />
    <mutant id="mutant_12981" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_11650" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="(((u.toString()) + &quot;: &quot;) / (HttpSupport.response(c)))" />
    <mutant id="mutant_12980" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="((&quot;(FOLLOW(&quot; + (path.toString())) - &quot;)&quot;)" />
    <mutant id="mutant_10320" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="(nul / 1)" />
    <mutant id="mutant_11651" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="(((u.toString()) + &quot;: &quot;) * (HttpSupport.response(c)))" />
    <mutant id="mutant_12983" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) % &quot; AND &quot;)" />
    <mutant id="mutant_10321" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(nul + 1)" to="(nul * 1)" />
    <mutant id="mutant_11652" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c)))" to="(((u.toString()) + &quot;: &quot;) % (HttpSupport.response(c)))" />
    <mutant id="mutant_12982" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;)" to="((&quot;(FOLLOW(&quot; + (path.toString())) / &quot;)&quot;)" />
    <mutant id="mutant_10333" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="&quot;^{}&quot;" />
    <mutant id="mutant_11664" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) * (c.getResponseMessage()))" />
    <mutant id="mutant_12996" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) - &quot;)&quot;" />
    <mutant id="mutant_10334" viable="false" in="?" from="(2 * 32)" to="(2 - 32)" />
    <mutant id="mutant_11665" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; % serviceName)" />
    <mutant id="mutant_12995" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) / &quot;)&quot;" />
    <mutant id="mutant_10335" viable="false" in="?" from="(2 * 32)" to="2" />
    <mutant id="mutant_11666" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; / serviceName)" />
    <mutant id="mutant_12998" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())" />
    <mutant id="mutant_10336" viable="false" in="?" from="(2 * 32)" to="(2 + 32)" />
    <mutant id="mutant_11667" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="(&quot;application/x-&quot; * serviceName)" />
    <mutant id="mutant_12997" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) % &quot;)&quot;" />
    <mutant id="mutant_10337" viable="false" in="?" from="(2 * 32)" to="(2 % 32)" />
    <mutant id="mutant_11668" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="serviceName" />
    <mutant id="mutant_10338" viable="false" in="?" from="(2 * 32)" to="(2 / 32)" />
    <mutant id="mutant_11669" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service(java.lang.String)" from="(&quot;application/x-&quot; + serviceName)" to="&quot;application/x-&quot;" />
    <mutant id="mutant_12999" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString())) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_10339" viable="false" in="?" from="(2 * 32)" to="32" />
    <mutant id="mutant_12990" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="(((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;)" />
    <mutant id="mutant_11660" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;)" />
    <mutant id="mutant_12992" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) * (TreeFilter.ANY_DIFF.toString()))" />
    <mutant id="mutant_10330" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="(name - &quot;^{}&quot;)" />
    <mutant id="mutant_11661" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) / (c.getResponseMessage()))" />
    <mutant id="mutant_12991" viable="true" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="(TreeFilter.ANY_DIFF.toString())" />
    <mutant id="mutant_10331" viable="true" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="name" />
    <mutant id="mutant_11662" viable="true" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="c.getResponseMessage()" />
    <mutant id="mutant_12994" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) / (TreeFilter.ANY_DIFF.toString()))" />
    <mutant id="mutant_10332" viable="false" in="org.eclipse.jgit.transport.BasePackConnection.readAdvertisedRefsImpl()" from="(name + &quot;^{}&quot;)" to="(name / &quot;^{}&quot;)" />
    <mutant id="mutant_11663" viable="false" in="org.eclipse.jgit.transport.TransportHttp$HttpObjectDB.open(java.lang.String)" from="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) + (c.getResponseMessage()))" to="(((((u.toString()) + &quot;: &quot;) + (HttpSupport.response(c))) + &quot; &quot;) % (c.getResponseMessage()))" />
    <mutant id="mutant_12993" viable="false" in="org.eclipse.jgit.revwalk.FollowFilter.toString()" from="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) + (TreeFilter.ANY_DIFF.toString()))" to="((((&quot;(FOLLOW(&quot; + (path.toString())) + &quot;)&quot;) + &quot; AND &quot;) - (TreeFilter.ANY_DIFF.toString()))" />
    <mutant id="mutant_10388" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="1" />
    <mutant id="mutant_10389" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="nul" />
    <mutant id="mutant_4623" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="(&quot;.&quot; - (tmpEntry.getKey().getExtension()))" />
    <mutant id="mutant_5955" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="32" />
    <mutant id="mutant_10380" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="(10 - (Math.max(sendTime, oldTimeout)))" />
    <mutant id="mutant_4622" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="tmpEntry.getKey().getExtension()" />
    <mutant id="mutant_5956" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="pos / (buf.length)" />
    <mutant id="mutant_10381" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="10" />
    <mutant id="mutant_4621" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="(tmpBase * &quot;.bitmap_tmp&quot;)" />
    <mutant id="mutant_5957" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="pos * (buf.length)" />
    <mutant id="mutant_10382" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="(refNameEnd * 1)" />
    <mutant id="mutant_4620" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="(tmpBase / &quot;.bitmap_tmp&quot;)" />
    <mutant id="mutant_5958" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="pos - (buf.length)" />
    <mutant id="mutant_10383" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="1" />
    <mutant id="mutant_5959" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="pos" />
    <mutant id="mutant_10384" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="(refNameEnd % 1)" />
    <mutant id="mutant_10385" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="(refNameEnd / 1)" />
    <mutant id="mutant_10386" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="(refNameEnd - 1)" />
    <mutant id="mutant_10387" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStatusReport(java.util.Map)" from="(refNameEnd + 1)" to="refNameEnd" />
    <mutant id="mutant_4629" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="((realExt.getName()) * &quot;.new&quot;)" />
    <mutant id="mutant_4628" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="realExt.getName()" />
    <mutant id="mutant_5950" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="32 + (DeltaBaseCache.TABLE_BITS)" />
    <mutant id="mutant_4627" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="(&quot;.&quot; * (tmpEntry.getKey().getExtension()))" />
    <mutant id="mutant_5951" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="DeltaBaseCache.TABLE_BITS" />
    <mutant id="mutant_4626" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="(&quot;.&quot; / (tmpEntry.getKey().getExtension()))" />
    <mutant id="mutant_5952" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="32 / (DeltaBaseCache.TABLE_BITS)" />
    <mutant id="mutant_4625" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="(&quot;.&quot; % (tmpEntry.getKey().getExtension()))" />
    <mutant id="mutant_5953" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="32 * (DeltaBaseCache.TABLE_BITS)" />
    <mutant id="mutant_4624" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(&quot;.&quot; + (tmpEntry.getKey().getExtension()))" to="&quot;.&quot;" />
    <mutant id="mutant_5954" viable="false" in="?" from="32 - (DeltaBaseCache.TABLE_BITS)" to="32 % (DeltaBaseCache.TABLE_BITS)" />
    <mutant id="mutant_10399" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) * 1)" />
    <mutant id="mutant_4612" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="tmpBase" />
    <mutant id="mutant_5944" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="((window.size()) / ptr)" />
    <mutant id="mutant_10391" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="(nul % 1)" />
    <mutant id="mutant_4611" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="(tmpBase / &quot;.idx_tmp&quot;)" />
    <mutant id="mutant_5945" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="window.size()" />
    <mutant id="mutant_10392" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="(nul / 1)" />
    <mutant id="mutant_4610" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="(tmpBase % &quot;.idx_tmp&quot;)" />
    <mutant id="mutant_5946" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="ptr" />
    <mutant id="mutant_10393" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="(nul * 1)" />
    <mutant id="mutant_5947" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="((window.size()) * ptr)" />
    <mutant id="mutant_10394" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="line.length()" />
    <mutant id="mutant_5948" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="((window.size()) + ptr)" />
    <mutant id="mutant_10395" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="1" />
    <mutant id="mutant_5949" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((window.size()) - ptr)" to="((window.size()) % ptr)" />
    <mutant id="mutant_10396" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) / 1)" />
    <mutant id="mutant_10397" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) + 1)" />
    <mutant id="mutant_10398" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) % 1)" />
    <mutant id="mutant_4619" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="(tmpBase % &quot;.bitmap_tmp&quot;)" />
    <mutant id="mutant_4618" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="tmpBase" />
    <mutant id="mutant_4617" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="(tmpBase - &quot;.bitmap_tmp&quot;)" />
    <mutant id="mutant_4616" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.bitmap_tmp&quot;)" to="&quot;.bitmap_tmp&quot;" />
    <mutant id="mutant_5940" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="position / (window.start)" />
    <mutant id="mutant_4615" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="(tmpBase * &quot;.idx_tmp&quot;)" />
    <mutant id="mutant_5941" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="position % (window.start)" />
    <mutant id="mutant_4614" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="(tmpBase - &quot;.idx_tmp&quot;)" />
    <mutant id="mutant_5942" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="position * (window.start)" />
    <mutant id="mutant_4613" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="(tmpBase + &quot;.idx_tmp&quot;)" to="&quot;.idx_tmp&quot;" />
    <mutant id="mutant_5943" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="position + (window.start)" />
    <mutant id="mutant_10390" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack$FirstLine(java.lang.String)" from="(nul + 1)" to="(nul - 1)" />
    <mutant id="mutant_10366" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="(c.getId().name())" />
    <mutant id="mutant_11697" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="conn.getResponseMessage()" />
    <mutant id="mutant_10367" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="(&quot;have &quot; / (c.getId().name()))" />
    <mutant id="mutant_11698" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="((status + &quot; &quot;) % (conn.getResponseMessage()))" />
    <mutant id="mutant_10368" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="(&quot;have &quot; * (c.getId().name()))" />
    <mutant id="mutant_11699" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="(status + &quot; &quot;)" />
    <mutant id="mutant_10369" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="(&quot;have &quot; - (c.getId().name()))" />
    <mutant id="mutant_4601" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) + 2)" />
    <mutant id="mutant_5933" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="12 + 20" />
    <mutant id="mutant_4600" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_5934" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="length" />
    <mutant id="mutant_11690" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_5935" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="length + (12 + 20)" />
    <mutant id="mutant_10360" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="maxTime" />
    <mutant id="mutant_11691" viable="true" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="status" />
    <mutant id="mutant_5936" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="length / (12 + 20)" />
    <mutant id="mutant_10361" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="1000L" />
    <mutant id="mutant_11692" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="(status / &quot; &quot;)" />
    <mutant id="mutant_5937" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="length * (12 + 20)" />
    <mutant id="mutant_10362" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="(maxTime % 1000L)" />
    <mutant id="mutant_11693" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="(status * &quot; &quot;)" />
    <mutant id="mutant_5938" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="position" />
    <mutant id="mutant_10363" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.markReachable(java.util.Set,int)" from="(maxTime * 1000L)" to="(maxTime / 1000L)" />
    <mutant id="mutant_11694" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="(status + &quot; &quot;)" to="(status - &quot; &quot;)" />
    <mutant id="mutant_5939" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="((int)(position - (window.start)))" to="window.start" />
    <mutant id="mutant_10364" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="&quot;have &quot;" />
    <mutant id="mutant_11695" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="((status + &quot; &quot;) - (conn.getResponseMessage()))" />
    <mutant id="mutant_10365" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="(&quot;have &quot; + (c.getId().name()))" to="(&quot;have &quot; % (c.getId().name()))" />
    <mutant id="mutant_11696" viable="false" in="org.eclipse.jgit.transport.TransportHttp$Service.openResponse()" from="((status + &quot; &quot;) + (conn.getResponseMessage()))" to="((status + &quot; &quot;) * (conn.getResponseMessage()))" />
    <mutant id="mutant_4609" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="o1.hashCode()" />
    <mutant id="mutant_4608" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="((o1.hashCode()) / (o2.hashCode()))" />
    <mutant id="mutant_4607" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="((o1.hashCode()) + (o2.hashCode()))" />
    <mutant id="mutant_4606" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="((o1.hashCode()) % (o2.hashCode()))" />
    <mutant id="mutant_4605" viable="true" in="org.eclipse.jgit.internal.storage.file.GC$1.compare(org.eclipse.jgit.internal.storage.pack.PackExt,org.eclipse.jgit.internal.storage.pack.PackExt)" from="((o1.hashCode()) - (o2.hashCode()))" to="((o1.hashCode()) * (o2.hashCode()))" />
    <mutant id="mutant_4604" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 2)" />
    <mutant id="mutant_5930" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="(12 % 20)" />
    <mutant id="mutant_4603" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 2)" />
    <mutant id="mutant_5931" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="20" />
    <mutant id="mutant_4602" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.getStatistics()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 2)" />
    <mutant id="mutant_5932" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="length - (12 + 20)" to="length % (12 + 20)" />
    <mutant id="mutant_10377" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="(10 / (Math.max(sendTime, oldTimeout)))" />
    <mutant id="mutant_10378" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="(10 % (Math.max(sendTime, oldTimeout)))" />
    <mutant id="mutant_10379" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="Math.max(sendTime, oldTimeout)" />
    <mutant id="mutant_5922" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="(cnt - 1)" />
    <mutant id="mutant_5923" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="(pos / (cnt - 1))" />
    <mutant id="mutant_10370" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="((&quot;have &quot; + (c.getId().name())) * &quot;\n&quot;)" />
    <mutant id="mutant_5924" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="(pos % (cnt - 1))" />
    <mutant id="mutant_10371" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="((&quot;have &quot; + (c.getId().name())) % &quot;\n&quot;)" />
    <mutant id="mutant_5925" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="(pos - (cnt - 1))" />
    <mutant id="mutant_10372" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="((&quot;have &quot; + (c.getId().name())) / &quot;\n&quot;)" />
    <mutant id="mutant_5926" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="12" />
    <mutant id="mutant_10373" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="(&quot;have &quot; + (c.getId().name()))" />
    <mutant id="mutant_5927" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="(12 - 20)" />
    <mutant id="mutant_10374" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="((&quot;have &quot; + (c.getId().name())) - &quot;\n&quot;)" />
    <mutant id="mutant_5928" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="(12 * 20)" />
    <mutant id="mutant_10375" viable="false" in="org.eclipse.jgit.transport.BasePackFetchConnection.negotiate(org.eclipse.jgit.lib.ProgressMonitor)" from="((&quot;have &quot; + (c.getId().name())) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_5929" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.copyPackAsIs(org.eclipse.jgit.internal.storage.file.PackFile,long,org.eclipse.jgit.internal.storage.pack.PackOutputStream)" from="(12 + 20)" to="(12 / 20)" />
    <mutant id="mutant_10376" viable="true" in="org.eclipse.jgit.transport.BasePackPushConnection.readStringLongTimeout()" from="(10 * (Math.max(sendTime, oldTimeout)))" to="(10 + (Math.max(sendTime, oldTimeout)))" />
    <mutant id="mutant_5920" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="pos" />
    <mutant id="mutant_5921" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCursor.quickCopy(org.eclipse.jgit.internal.storage.file.PackFile,long,long)" from="(pos + (cnt - 1))" to="(pos * (cnt - 1))" />
    <mutant id="mutant_4670" viable="true" in="org.eclipse.jgit.internal.storage.file.InflatingBitSet.contains(int)" from="(org.eclipse.jgit.internal.storage.file.InflatingBitSet.block(sizeInBits)) + 1" to="1" />
    <mutant id="mutant_2004" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="(word - 1) % 8" />
    <mutant id="mutant_3336" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="(si - 6)" />
    <mutant id="mutant_4667" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="d" />
    <mutant id="mutant_5999" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_2005" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="word - 1" />
    <mutant id="mutant_3335" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="(si / 6)" />
    <mutant id="mutant_4666" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="(d % e)" />
    <mutant id="mutant_2002" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="word" />
    <mutant id="mutant_3334" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="6" />
    <mutant id="mutant_4665" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="(d / e)" />
    <mutant id="mutant_2003" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="(word - 1) + 8" />
    <mutant id="mutant_3333" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="(si % 6)" />
    <mutant id="mutant_4664" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="e" />
    <mutant id="mutant_2000" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="(word * 1)" />
    <mutant id="mutant_3332" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="(fi % 6)" />
    <mutant id="mutant_4663" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 2)" />
    <mutant id="mutant_2001" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1)" to="(word % 1)" />
    <mutant id="mutant_3331" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="(fi * 6)" />
    <mutant id="mutant_4662" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 2)" />
    <mutant id="mutant_3330" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="6" />
    <mutant id="mutant_4661" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 2)" />
    <mutant id="mutant_4660" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) + 2)" />
    <mutant id="mutant_5991" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_5992" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos + (start)" />
    <mutant id="mutant_5993" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_5994" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_2008" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="(word - 1) / 8" />
    <mutant id="mutant_5995" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos % (start)" />
    <mutant id="mutant_2009" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(b + 8)" to="8" />
    <mutant id="mutant_3339" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 7)" to="(fi - 7)" />
    <mutant id="mutant_5996" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos / (start)" />
    <mutant id="mutant_2006" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="(word - 1) - 8" />
    <mutant id="mutant_3338" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="(si * 6)" />
    <mutant id="mutant_4669" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="(d * e)" />
    <mutant id="mutant_5997" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos * (start)" />
    <mutant id="mutant_2007" viable="true" in="org.eclipse.jgit.lib.AbbreviatedObjectId.mask(int,int,int)" from="(word - 1) * 8" to="8" />
    <mutant id="mutant_3337" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 6)" to="si" />
    <mutant id="mutant_4668" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="(d + e)" to="(d - e)" />
    <mutant id="mutant_5998" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_5990" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_3325" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="si" />
    <mutant id="mutant_4656" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; / (ext.getExtension()))" />
    <mutant id="mutant_5988" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_3324" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="(si - 5)" />
    <mutant id="mutant_4655" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; % (ext.getExtension()))" />
    <mutant id="mutant_5989" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_3323" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="5" />
    <mutant id="mutant_4654" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="&quot;.&quot;" />
    <mutant id="mutant_3322" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="(si % 5)" />
    <mutant id="mutant_4653" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; - (ext.getExtension()))" />
    <mutant id="mutant_3321" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="(si / 5)" />
    <mutant id="mutant_4652" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="ext.getExtension()" />
    <mutant id="mutant_3320" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="(fi % 5)" />
    <mutant id="mutant_4651" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; * (ext.getExtension()))" />
    <mutant id="mutant_4650" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; / (ext.getExtension()))" />
    <mutant id="mutant_5980" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="(block.length) % ptr" />
    <mutant id="mutant_5981" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="(block.length) + ptr" />
    <mutant id="mutant_5982" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="block.length" />
    <mutant id="mutant_5983" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="(block.length) / ptr" />
    <mutant id="mutant_3329" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="(fi / 6)" />
    <mutant id="mutant_5984" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="ptr" />
    <mutant id="mutant_3328" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="fi" />
    <mutant id="mutant_4659" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_5985" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="(block.length) - ptr" to="(block.length) * ptr" />
    <mutant id="mutant_3327" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 6)" to="(fi - 6)" />
    <mutant id="mutant_4658" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePacked()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="2" />
    <mutant id="mutant_5986" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_3326" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 5)" to="(si * 5)" />
    <mutant id="mutant_4657" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; * (ext.getExtension()))" />
    <mutant id="mutant_5987" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_305" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="(context)" />
    <mutant id="mutant_306" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="2" />
    <mutant id="mutant_307" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="(2 + (context))" />
    <mutant id="mutant_308" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="(2 / (context))" />
    <mutant id="mutant_301" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="((e.get(i).getBeginA()) % (e.get((i - 1)).getEndA()))" />
    <mutant id="mutant_302" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="((e.get(i).getBeginA()) * (e.get((i - 1)).getEndA()))" />
    <mutant id="mutant_303" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="(e.get((i - 1)).getEndA())" />
    <mutant id="mutant_304" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="((e.get(i).getBeginA()) + (e.get((i - 1)).getEndA()))" />
    <mutant id="mutant_309" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="(2 % (context))" />
    <mutant id="mutant_3314" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="si" />
    <mutant id="mutant_4645" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="(d - fName)" />
    <mutant id="mutant_5977" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos % (start)" />
    <mutant id="mutant_3313" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="(si * 4)" />
    <mutant id="mutant_4644" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="fName" />
    <mutant id="mutant_5978" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos / (start)" />
    <mutant id="mutant_3312" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="(si % 4)" />
    <mutant id="mutant_4643" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="(d * fName)" />
    <mutant id="mutant_5979" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos * (start)" />
    <mutant id="mutant_3311" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="4" />
    <mutant id="mutant_4642" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="d" />
    <mutant id="mutant_3310" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="(si - 4)" />
    <mutant id="mutant_4641" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="(d % fName)" />
    <mutant id="mutant_4640" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="(d + fName)" to="(d / fName)" />
    <mutant id="mutant_5970" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_5971" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos % (start)" />
    <mutant id="mutant_300" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="((e.get(i).getBeginA()) / (e.get((i - 1)).getEndA()))" />
    <mutant id="mutant_3319" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="5" />
    <mutant id="mutant_5972" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos / (start)" />
    <mutant id="mutant_3318" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="fi" />
    <mutant id="mutant_4649" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; % (ext.getExtension()))" />
    <mutant id="mutant_5973" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos * (start)" />
    <mutant id="mutant_3317" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="(fi * 5)" />
    <mutant id="mutant_4648" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="&quot;.&quot;" />
    <mutant id="mutant_5974" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos + (start)" />
    <mutant id="mutant_3316" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="(fi / 5)" />
    <mutant id="mutant_4647" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="(&quot;.&quot; - (ext.getExtension()))" />
    <mutant id="mutant_5975" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_3315" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 5)" to="(fi - 5)" />
    <mutant id="mutant_4646" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prunePack(java.lang.String)" from="(&quot;.&quot; + (ext.getExtension()))" to="ext.getExtension()" />
    <mutant id="mutant_5976" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_316" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_317" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="((e.get(i).getBeginB()) / (e.get((i - 1)).getEndB()))" />
    <mutant id="mutant_318" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="((e.get(i).getBeginB()) + (e.get((i - 1)).getEndB()))" />
    <mutant id="mutant_319" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="((e.get(i).getBeginB()) - (e.get((i - 1)).getEndB()))" to="((e.get(i).getBeginB()) * (e.get((i - 1)).getEndB()))" />
    <mutant id="mutant_312" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_313" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_314" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_315" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_3303" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="(fi - 4)" />
    <mutant id="mutant_4634" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="2" />
    <mutant id="mutant_5966" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="block.length" />
    <mutant id="mutant_3302" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="si" />
    <mutant id="mutant_4633" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="&quot;.new&quot;" />
    <mutant id="mutant_5967" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="((block.length) / p)" />
    <mutant id="mutant_3301" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="(si % 3)" />
    <mutant id="mutant_4632" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="((realExt.getName()) % &quot;.new&quot;)" />
    <mutant id="mutant_5968" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos + (start)" />
    <mutant id="mutant_3300" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 3)" to="(si * 3)" />
    <mutant id="mutant_4631" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="((realExt.getName()) / &quot;.new&quot;)" />
    <mutant id="mutant_5969" viable="false" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_4630" viable="false" in="org.eclipse.jgit.internal.storage.file.GC.writePack(java.util.Set,java.util.Set,java.util.Set,java.util.List)" from="((realExt.getName()) + &quot;.new&quot;)" to="((realExt.getName()) - &quot;.new&quot;)" />
    <mutant id="mutant_310" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(2 * (context))" to="(2 - (context))" />
    <mutant id="mutant_3309" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(si + 4)" to="(si / 4)" />
    <mutant id="mutant_5960" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="pos % (buf.length)" />
    <mutant id="mutant_311" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineB(java.util.List,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_3308" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="(fi / 4)" />
    <mutant id="mutant_4639" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 2)" />
    <mutant id="mutant_5961" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock(org.eclipse.jgit.internal.storage.dfs.DfsPackKey,long,byte[])" from="pos + (buf.length)" to="buf.length" />
    <mutant id="mutant_3307" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="(fi % 4)" />
    <mutant id="mutant_4638" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 2)" />
    <mutant id="mutant_5962" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="((block.length) * p)" />
    <mutant id="mutant_3306" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="(fi * 4)" />
    <mutant id="mutant_4637" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 2)" />
    <mutant id="mutant_5963" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="((block.length) % p)" />
    <mutant id="mutant_3305" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="4" />
    <mutant id="mutant_4636" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) + 2)" />
    <mutant id="mutant_5964" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="p" />
    <mutant id="mutant_3304" viable="true" in="org.eclipse.jgit.lib.ObjectId.equals(byte[],int,byte[],int)" from="(fi + 4)" to="fi" />
    <mutant id="mutant_4635" viable="true" in="org.eclipse.jgit.internal.storage.file.GC.prune(java.util.Set)" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_5965" viable="true" in="org.eclipse.jgit.internal.storage.dfs.DfsBlock.copy(int,byte[],int,int)" from="((block.length) - p)" to="((block.length) + p)" />
    <mutant id="mutant_206" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) / (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_207" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) - (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_208" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(pathPadding)" />
    <mutant id="mutant_209" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="1" />
    <mutant id="mutant_202" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="((pathOffset) * 1)" />
    <mutant id="mutant_203" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) * (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_204" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_205" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseTree()" from="((pathPadding) + (Constants.OBJECT_ID_STRING_LENGTH))" to="((pathPadding) % (Constants.OBJECT_ID_STRING_LENGTH))" />
    <mutant id="mutant_3141" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_4472" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="(array.length) + pos" />
    <mutant id="mutant_3140" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4471" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="(array.length) % pos" />
    <mutant id="mutant_4470" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="array.length" />
    <mutant id="mutant_3138" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4469" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="pos" />
    <mutant id="mutant_3137" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_4468" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="(array.length) * pos" />
    <mutant id="mutant_3136" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4467" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.setInput(int,java.util.zip.Inflater)" from="(array.length) - pos" to="(array.length) / pos" />
    <mutant id="mutant_3135" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4466" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="((array.length) / p)" />
    <mutant id="mutant_3134" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4465" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="array.length" />
    <mutant id="mutant_3133" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4464" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="((array.length) + p)" />
    <mutant id="mutant_3132" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4463" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="p" />
    <mutant id="mutant_3131" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4462" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="((array.length) % p)" />
    <mutant id="mutant_5793" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="rs % 2" />
    <mutant id="mutant_5794" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="rs / 2" />
    <mutant id="mutant_200" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="pathOffset" />
    <mutant id="mutant_5795" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="rs" />
    <mutant id="mutant_201" viable="true" in="org.eclipse.jgit.notes.NoteParser.parseFanoutCell()" from="((pathOffset) + 1)" to="((pathOffset) / 1)" />
    <mutant id="mutant_5796" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="2" />
    <mutant id="mutant_5797" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="rs - 2" />
    <mutant id="mutant_5798" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="rs * 2" />
    <mutant id="mutant_5799" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntry(int)" from="rs + 2" to="rs % 2" />
    <mutant id="mutant_3139" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_217" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="indexOfStartBracket * 2" />
    <mutant id="mutant_218" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="indexOfStartBracket - 2" />
    <mutant id="mutant_219" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="indexOfStartBracket / 2" />
    <mutant id="mutant_213" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="indexOfStartBracket" />
    <mutant id="mutant_214" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="indexOfStartBracket - 1" />
    <mutant id="mutant_5790" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="2" />
    <mutant id="mutant_215" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="indexOfStartBracket % 2" />
    <mutant id="mutant_5791" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="rs - 2" />
    <mutant id="mutant_216" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="2" />
    <mutant id="mutant_5792" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="rs * 2" />
    <mutant id="mutant_3130" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4461" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.copy(int,byte[],int,int)" from="((array.length) - p)" to="((array.length) * p)" />
    <mutant id="mutant_4460" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="((1L &lt;&lt; remaining) * 1)" />
    <mutant id="mutant_3127" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_4458" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="(1L &lt;&lt; remaining)" />
    <mutant id="mutant_3126" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4457" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="((1L &lt;&lt; remaining) / 1)" />
    <mutant id="mutant_3125" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4456" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="1" />
    <mutant id="mutant_3124" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4455" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="((1L &lt;&lt; remaining) + 1)" />
    <mutant id="mutant_3123" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_4454" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="EWAHCompressedBitmap.wordinbits" />
    <mutant id="mutant_3122" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr - 4)" />
    <mutant id="mutant_4453" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="sizeInBits / (EWAHCompressedBitmap.wordinbits)" />
    <mutant id="mutant_3121" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="ptr" />
    <mutant id="mutant_4452" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="sizeInBits * (EWAHCompressedBitmap.wordinbits)" />
    <mutant id="mutant_3120" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr * 4)" />
    <mutant id="mutant_4451" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="sizeInBits - (EWAHCompressedBitmap.wordinbits)" />
    <mutant id="mutant_5782" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="(((Constants.LOGS) + '/') % refname)" />
    <mutant id="mutant_210" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="indexOfStartBracket % 1" />
    <mutant id="mutant_5783" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="((Constants.LOGS) + '/')" />
    <mutant id="mutant_211" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="indexOfStartBracket / 1" />
    <mutant id="mutant_5784" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="(((Constants.LOGS) + '/') * refname)" />
    <mutant id="mutant_212" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 1" to="indexOfStartBracket * 1" />
    <mutant id="mutant_5785" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="(((Constants.LOGS) + '/') / refname)" />
    <mutant id="mutant_5786" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="refname" />
    <mutant id="mutant_5787" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="(((Constants.LOGS) + '/') + refname)" to="(((Constants.LOGS) + '/') - refname)" />
    <mutant id="mutant_3129" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_5788" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="rs / 2" />
    <mutant id="mutant_3128" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4459" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="((1L &lt;&lt; remaining) - 1)" to="((1L &lt;&lt; remaining) % 1)" />
    <mutant id="mutant_5789" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl.getReverseEntries(int)" from="rs + 2" to="rs" />
    <mutant id="mutant_228" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="(classStart.charAt(1)) - &quot;]&quot;" />
    <mutant id="mutant_229" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="(classStart.charAt(1)) % &quot;]&quot;" />
    <mutant id="mutant_224" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="(indexOfStartBracket * 1)" />
    <mutant id="mutant_225" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="indexOfStartBracket" />
    <mutant id="mutant_226" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="(indexOfStartBracket - 1)" />
    <mutant id="mutant_5780" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) % '/')" />
    <mutant id="mutant_227" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="classStart.charAt(1)" />
    <mutant id="mutant_5781" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="'/'" />
    <mutant id="mutant_4450" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="sizeInBits + (EWAHCompressedBitmap.wordinbits)" />
    <mutant id="mutant_3116" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4447" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="(sizeInBits * (EWAHCompressedBitmap.wordinbits))" />
    <mutant id="mutant_5779" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) - '/')" />
    <mutant id="mutant_3115" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4446" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="(sizeInBits % (EWAHCompressedBitmap.wordinbits))" />
    <mutant id="mutant_3114" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4445" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="(sizeInBits - (EWAHCompressedBitmap.wordinbits))" />
    <mutant id="mutant_3113" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4444" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="(sizeInBits + (EWAHCompressedBitmap.wordinbits))" />
    <mutant id="mutant_3112" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4443" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="sizeInBits" />
    <mutant id="mutant_3111" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4442" viable="false" in="?" from="10 * 1024" to="10" />
    <mutant id="mutant_3110" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4441" viable="false" in="?" from="10 * 1024" to="10 / 1024" />
    <mutant id="mutant_4440" viable="false" in="?" from="10 * 1024" to="1024" />
    <mutant id="mutant_220" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="indexOfStartBracket + 2" to="indexOfStartBracket" />
    <mutant id="mutant_5771" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())" />
    <mutant id="mutant_221" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="1" />
    <mutant id="mutant_5772" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) * &quot;]&quot;" />
    <mutant id="mutant_222" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="(indexOfStartBracket % 1)" />
    <mutant id="mutant_5773" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_223" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(indexOfStartBracket + 1)" to="(indexOfStartBracket / 1)" />
    <mutant id="mutant_5774" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) - &quot;]&quot;" />
    <mutant id="mutant_5775" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) % &quot;]&quot;" />
    <mutant id="mutant_3119" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr / 4)" />
    <mutant id="mutant_5776" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) / '/')" />
    <mutant id="mutant_3118" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="(ptr % 4)" />
    <mutant id="mutant_4449" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="sizeInBits % (EWAHCompressedBitmap.wordinbits)" to="sizeInBits" />
    <mutant id="mutant_5777" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) * '/')" />
    <mutant id="mutant_3117" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 4)" to="4" />
    <mutant id="mutant_4448" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl.ones(int)" from="(sizeInBits / (EWAHCompressedBitmap.wordinbits))" to="EWAHCompressedBitmap.wordinbits" />
    <mutant id="mutant_5778" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogReaderImpl(org.eclipse.jgit.lib.Repository,java.lang.String)" from="((Constants.LOGS) + '/')" to="(Constants.LOGS)" />
    <mutant id="mutant_239" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="2" />
    <mutant id="mutant_235" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="2" />
    <mutant id="mutant_236" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="classStartIndex" />
    <mutant id="mutant_237" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="(classStartIndex % 2)" />
    <mutant id="mutant_238" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="(classStartIndex * 2)" />
    <mutant id="mutant_5770" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) + &quot;]&quot;" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment())) / &quot;]&quot;" />
    <mutant id="mutant_3105" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_4436" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position * (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_5768" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) * (getComment()))" />
    <mutant id="mutant_3104" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4435" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="BitmapIndexImpl.EXTRA_BITS" />
    <mutant id="mutant_5769" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="(getComment())" />
    <mutant id="mutant_3103" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4434" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position / (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_3102" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4433" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position % (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_3101" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_4432" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="position" />
    <mutant id="mutant_3100" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_4431" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.set(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position - (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_4430" viable="true" in="org.eclipse.jgit.internal.storage.file.BitmapIndexImpl$ComboBitset.remove(int)" from="(position + (BitmapIndexImpl.EXTRA_BITS))" to="(position * (BitmapIndexImpl.EXTRA_BITS))" />
    <mutant id="mutant_231" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="(classStart.charAt(1)) * &quot;]&quot;" />
    <mutant id="mutant_5760" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) / &quot;, &quot;)" />
    <mutant id="mutant_232" viable="false" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="(classStart.charAt(1)) / &quot;]&quot;" />
    <mutant id="mutant_5761" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="(((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho()))" />
    <mutant id="mutant_233" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="(classStartIndex - 2)" />
    <mutant id="mutant_5762" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="&quot;, &quot;" />
    <mutant id="mutant_234" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStartIndex + 2)" to="(classStartIndex / 2)" />
    <mutant id="mutant_5763" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) - &quot;, &quot;)" />
    <mutant id="mutant_3109" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_5764" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;)" />
    <mutant id="mutant_3108" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4439" viable="false" in="?" from="10 * 1024" to="10 + 1024" />
    <mutant id="mutant_5765" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) - (getComment()))" />
    <mutant id="mutant_3107" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4438" viable="false" in="?" from="10 * 1024" to="10 - 1024" />
    <mutant id="mutant_5766" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) / (getComment()))" />
    <mutant id="mutant_230" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="(classStart.charAt(1)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_3106" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4437" viable="false" in="?" from="10 * 1024" to="10 % 1024" />
    <mutant id="mutant_5767" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogEntryImpl.toString()" from="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) + (getComment()))" to="(((((((&quot;Entry[&quot; + (oldId.name())) + &quot;, &quot;) + (newId.name())) + &quot;, &quot;) + (getWho())) + &quot;, &quot;) % (getComment()))" />
    <mutant id="mutant_246" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="1" />
    <mutant id="mutant_247" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="(allHeads.size()) % 1" />
    <mutant id="mutant_248" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="(allHeads.size()) * 1" />
    <mutant id="mutant_249" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="allHeads.size()" />
    <mutant id="mutant_3185" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_3184" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_3183" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_3182" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_3181" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_3180" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_3179" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3178" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_3177" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3176" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_3175" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_242" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="classEndIndex * 2" />
    <mutant id="mutant_243" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="classEndIndex % 2" />
    <mutant id="mutant_244" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="classEndIndex / 2" />
    <mutant id="mutant_245" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="(allHeads.size()) / 1" />
    <mutant id="mutant_240" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="classEndIndex" />
    <mutant id="mutant_241" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.findGroupEnd(int,java.lang.String)" from="classEndIndex + 2" to="classEndIndex - 2" />
    <mutant id="mutant_257" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="1" />
    <mutant id="mutant_258" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="groupEnd - 1" />
    <mutant id="mutant_259" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="groupEnd" />
    <mutant id="mutant_3174" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_3173" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_3172" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_3171" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr - 2)" />
    <mutant id="mutant_3170" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_3169" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_3168" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4499" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="n" />
    <mutant id="mutant_3167" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_4498" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="(start) - n" />
    <mutant id="mutant_3166" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4497" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="start" />
    <mutant id="mutant_3165" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4496" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_3164" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4495" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_253" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="groupStart" />
    <mutant id="mutant_254" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="(groupStart % 1)" />
    <mutant id="mutant_255" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="(groupStart / 1)" />
    <mutant id="mutant_256" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="(groupStart - 1)" />
    <mutant id="mutant_250" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.createHeadsStartValues(java.lang.String,java.lang.Character)" from="(allHeads.size()) - 1" to="(allHeads.size()) + 1" />
    <mutant id="mutant_251" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="(groupStart * 1)" />
    <mutant id="mutant_252" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="(groupStart + 1)" to="1" />
    <mutant id="mutant_268" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="((e.size()) % 1)" />
    <mutant id="mutant_269" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) % &quot;-&gt;&quot;)" />
    <mutant id="mutant_3163" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4494" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_3162" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4493" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_3161" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4492" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_3160" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4491" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteBufferWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_4490" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos / (start)" />
    <mutant id="mutant_3159" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_3158" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_4489" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos * (start)" />
    <mutant id="mutant_3157" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_4488" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_3156" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_4487" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_3155" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr * 3)" />
    <mutant id="mutant_4486" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos % (start)" />
    <mutant id="mutant_3154" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr % 3)" />
    <mutant id="mutant_4485" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.write(org.eclipse.jgit.internal.storage.pack.PackOutputStream,long,int)" from="((int)(pos - (start)))" to="pos + (start)" />
    <mutant id="mutant_3153" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="3" />
    <mutant id="mutant_4484" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_264" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="((e.size()) / 1)" />
    <mutant id="mutant_265" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="((e.size()) * 1)" />
    <mutant id="mutant_266" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="((e.size()) + 1)" />
    <mutant id="mutant_267" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="e.size()" />
    <mutant id="mutant_260" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="groupEnd % 1" />
    <mutant id="mutant_261" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="groupEnd * 1" />
    <mutant id="mutant_262" viable="true" in="org.eclipse.jgit.fnmatch.FileNameMatcher.parseHeads(java.lang.String,java.lang.Character)" from="groupEnd + 1" to="groupEnd / 1" />
    <mutant id="mutant_263" viable="true" in="org.eclipse.jgit.diff.DiffAlgorithm.diff(org.eclipse.jgit.diff.SequenceComparator,S,S)" from="((e.size()) - 1)" to="1" />
    <mutant id="mutant_279" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) / (newPath))" />
    <mutant id="mutant_3152" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4483" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_3151" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4482" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_3150" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4481" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_4480" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_3149" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_3148" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4479" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.crc32(java.util.zip.CRC32,long,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_3147" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4478" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_270" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) * &quot;-&gt;&quot;)" />
    <mutant id="mutant_3146" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="ptr" />
    <mutant id="mutant_4477" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_3145" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr / 2)" />
    <mutant id="mutant_4476" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_3144" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr % 2)" />
    <mutant id="mutant_4475" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_3143" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="2" />
    <mutant id="mutant_4474" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_3142" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 2)" to="(ptr * 2)" />
    <mutant id="mutant_4473" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteArrayWindow.check(java.util.zip.Inflater,byte[],long,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_275" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((oldPath) + &quot;-&gt;&quot;)" />
    <mutant id="mutant_276" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) % (newPath))" />
    <mutant id="mutant_277" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) * (newPath))" />
    <mutant id="mutant_278" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) - (newPath))" />
    <mutant id="mutant_271" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) - &quot;-&gt;&quot;)" />
    <mutant id="mutant_272" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(oldPath)" />
    <mutant id="mutant_273" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) / &quot;-&gt;&quot;)" />
    <mutant id="mutant_274" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="&quot;-&gt;&quot;" />
    <mutant id="mutant_280" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="newPath" />
    <mutant id="mutant_281" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) % &quot;-&gt;&quot;)" />
    <mutant id="mutant_286" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="&quot;-&gt;&quot;" />
    <mutant id="mutant_287" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="((oldPath) + &quot;-&gt;&quot;)" />
    <mutant id="mutant_288" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) % (newPath))" />
    <mutant id="mutant_289" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) * (newPath))" />
    <mutant id="mutant_282" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) * &quot;-&gt;&quot;)" />
    <mutant id="mutant_283" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) - &quot;-&gt;&quot;)" />
    <mutant id="mutant_284" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="(oldPath)" />
    <mutant id="mutant_285" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="((oldPath) + &quot;-&gt;&quot;)" to="((oldPath) / &quot;-&gt;&quot;)" />
    <mutant id="mutant_11804" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="n" />
    <mutant id="mutant_11805" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="(dir + &quot;/&quot;) * n" />
    <mutant id="mutant_11806" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="(dir + &quot;/&quot;) % n" />
    <mutant id="mutant_11807" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="(dir + &quot;/&quot;) / n" />
    <mutant id="mutant_11808" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix % n)" />
    <mutant id="mutant_11809" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="prefix" />
    <mutant id="mutant_11800" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="(dir / &quot;/&quot;)" />
    <mutant id="mutant_11801" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="(dir * &quot;/&quot;)" />
    <mutant id="mutant_11802" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="(dir + &quot;/&quot;) - n" />
    <mutant id="mutant_11803" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;) + n" to="dir + &quot;/&quot;" />
    <mutant id="mutant_290" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) - (newPath))" />
    <mutant id="mutant_291" viable="false" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="(((oldPath) + &quot;-&gt;&quot;) / (newPath))" />
    <mutant id="mutant_292" viable="true" in="org.eclipse.jgit.diff.DiffEntry.toString()" from="(((oldPath) + &quot;-&gt;&quot;) + (newPath))" to="newPath" />
    <mutant id="mutant_297" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="(i * 1)" />
    <mutant id="mutant_298" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="(i % 1)" />
    <mutant id="mutant_299" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="((e.get(i).getBeginA()) - (e.get((i - 1)).getEndA()))" to="(e.get(i).getBeginA())" />
    <mutant id="mutant_293" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="(i / 1)" />
    <mutant id="mutant_294" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="(i + 1)" />
    <mutant id="mutant_295" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="1" />
    <mutant id="mutant_296" viable="true" in="org.eclipse.jgit.diff.DiffFormatter.combineA(java.util.List,int)" from="(i - 1)" to="i" />
    <mutant id="mutant_3199" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="ptr" />
    <mutant id="mutant_3198" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="end / ptr" />
    <mutant id="mutant_3197" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="end * ptr" />
    <mutant id="mutant_3196" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="end + ptr" />
    <mutant id="mutant_3195" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="end % ptr" />
    <mutant id="mutant_3194" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="ptr" />
    <mutant id="mutant_3193" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="ptr / 1" />
    <mutant id="mutant_3192" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="ptr % 1" />
    <mutant id="mutant_3191" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="1" />
    <mutant id="mutant_3190" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="ptr - 1" />
    <mutant id="mutant_3189" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPath(byte[],int,int)" from="ptr + 1" to="ptr * 1" />
    <mutant id="mutant_3188" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr - 3)" />
    <mutant id="mutant_3187" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="ptr" />
    <mutant id="mutant_3186" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkNotWindowsDevice(byte[],int,int)" from="(ptr + 3)" to="(ptr / 3)" />
    <mutant id="mutant_10506" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="JGitText.get().duplicateRef" />
    <mutant id="mutant_11837" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="(getTimeout()) + 1000" />
    <mutant id="mutant_10507" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="((JGitText.get().duplicateRef) * name)" />
    <mutant id="mutant_11838" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="(&quot;(&quot; / (URIish.OPT_DRIVE_LETTER_P))" />
    <mutant id="mutant_10508" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="(name / &quot;@&quot;)" />
    <mutant id="mutant_11839" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="(URIish.OPT_DRIVE_LETTER_P)" />
    <mutant id="mutant_10509" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="&quot;@&quot;" />
    <mutant id="mutant_11830" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="path / &quot;.lock&quot;" />
    <mutant id="mutant_10500" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="cmd.getRefName()" />
    <mutant id="mutant_11831" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="path - &quot;.lock&quot;" />
    <mutant id="mutant_10501" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="(&quot;ok &quot; * (cmd.getRefName()))" />
    <mutant id="mutant_11832" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="(getTimeout()) % 1000" />
    <mutant id="mutant_10502" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="((JGitText.get().duplicateRef) % name)" />
    <mutant id="mutant_11833" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="1000" />
    <mutant id="mutant_10503" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="((JGitText.get().duplicateRef) - name)" />
    <mutant id="mutant_11834" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="(getTimeout()) / 1000" />
    <mutant id="mutant_10504" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="name" />
    <mutant id="mutant_11835" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="(getTimeout()) - 1000" />
    <mutant id="mutant_10505" viable="false" in="org.eclipse.jgit.transport.BundleWriter.include(java.lang.String,org.eclipse.jgit.lib.AnyObjectId)" from="((JGitText.get().duplicateRef) + name)" to="((JGitText.get().duplicateRef) / name)" />
    <mutant id="mutant_11836" viable="true" in="org.eclipse.jgit.transport.TransportSftp.newSftp()" from="(getTimeout()) * 1000" to="getTimeout()" />
    <mutant id="mutant_10517" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="host" />
    <mutant id="mutant_11848" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) - &quot;[\\\\/]?&quot;)" />
    <mutant id="mutant_10518" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="name + &quot;@&quot;" />
    <mutant id="mutant_11849" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" />
    <mutant id="mutant_10519" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="(name + &quot;@&quot;) * host" />
    <mutant id="mutant_11840" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="(&quot;(&quot; % (URIish.OPT_DRIVE_LETTER_P))" />
    <mutant id="mutant_10510" viable="true" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="name" />
    <mutant id="mutant_11841" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="(&quot;(&quot; - (URIish.OPT_DRIVE_LETTER_P))" />
    <mutant id="mutant_10511" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="(name - &quot;@&quot;)" />
    <mutant id="mutant_11842" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="&quot;(&quot;" />
    <mutant id="mutant_10512" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="(name % &quot;@&quot;)" />
    <mutant id="mutant_11843" viable="false" in="?" from="(&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P))" to="(&quot;(&quot; * (URIish.OPT_DRIVE_LETTER_P))" />
    <mutant id="mutant_10513" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;)" to="(name * &quot;@&quot;)" />
    <mutant id="mutant_11844" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) / &quot;[\\\\/]?&quot;)" />
    <mutant id="mutant_10514" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="(name + &quot;@&quot;) - host" />
    <mutant id="mutant_11845" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="&quot;[\\\\/]?&quot;" />
    <mutant id="mutant_10515" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="(name + &quot;@&quot;) / host" />
    <mutant id="mutant_11846" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) % &quot;[\\\\/]?&quot;)" />
    <mutant id="mutant_10516" viable="false" in="org.eclipse.jgit.transport.Daemon$2.create(org.eclipse.jgit.transport.DaemonClient,org.eclipse.jgit.lib.Repository)" from="(name + &quot;@&quot;) + host" to="(name + &quot;@&quot;) % host" />
    <mutant id="mutant_11847" viable="false" in="?" from="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) + &quot;[\\\\/]?&quot;)" to="((&quot;(&quot; + (URIish.OPT_DRIVE_LETTER_P)) * &quot;[\\\\/]?&quot;)" />
    <mutant id="mutant_11815" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="((prefix + n) / &quot;/&quot;)" />
    <mutant id="mutant_11816" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_11817" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="((prefix + n) - &quot;/&quot;)" />
    <mutant id="mutant_11818" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="((prefix + n) % &quot;/&quot;)" />
    <mutant id="mutant_11819" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="(prefix + n)" />
    <mutant id="mutant_11810" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="n" />
    <mutant id="mutant_11811" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix - n)" />
    <mutant id="mutant_11812" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix * n)" />
    <mutant id="mutant_11813" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix / n)" />
    <mutant id="mutant_11814" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="((prefix + n) + &quot;/&quot;)" to="((prefix + n) * &quot;/&quot;)" />
    <mutant id="mutant_11826" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="path % &quot;.lock&quot;" />
    <mutant id="mutant_11827" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="&quot;.lock&quot;" />
    <mutant id="mutant_11828" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="path" />
    <mutant id="mutant_11829" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.writeFile(java.lang.String,byte[])" from="path + &quot;.lock&quot;" to="path * &quot;.lock&quot;" />
    <mutant id="mutant_11820" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix % n)" />
    <mutant id="mutant_11821" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="prefix" />
    <mutant id="mutant_11822" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="n" />
    <mutant id="mutant_11823" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix - n)" />
    <mutant id="mutant_11824" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix * n)" />
    <mutant id="mutant_11825" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(prefix + n)" to="(prefix / n)" />
    <mutant id="mutant_10429" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="10" />
    <mutant id="mutant_10421" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_11752" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="timeOut - 1000" />
    <mutant id="mutant_10422" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_11753" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="1000" />
    <mutant id="mutant_10423" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_11754" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="timeOut / 1000" />
    <mutant id="mutant_10424" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="(10 - (timeout))" />
    <mutant id="mutant_11755" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="&quot;# service=&quot; - service" />
    <mutant id="mutant_10425" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="(timeout)" />
    <mutant id="mutant_11756" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="&quot;# service=&quot; * service" />
    <mutant id="mutant_10426" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="(10 + (timeout))" />
    <mutant id="mutant_11757" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="&quot;# service=&quot; % service" />
    <mutant id="mutant_10427" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="(10 % (timeout))" />
    <mutant id="mutant_11758" viable="true" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="service" />
    <mutant id="mutant_10428" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="(10 * (timeout))" to="(10 / (timeout))" />
    <mutant id="mutant_11759" viable="true" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="&quot;# service=&quot;" />
    <mutant id="mutant_11750" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="timeOut + 1000" />
    <mutant id="mutant_10420" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_11751" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="timeOut" />
    <mutant id="mutant_10432" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="((10 * (timeout)) % 1000)" />
    <mutant id="mutant_11763" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="5" />
    <mutant id="mutant_10433" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="(10 * (timeout))" />
    <mutant id="mutant_11764" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="((n.length()) + 5)" />
    <mutant id="mutant_10434" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="1000" />
    <mutant id="mutant_11765" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="((n.length()) % 5)" />
    <mutant id="mutant_10435" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="((10 * (timeout)) / 1000)" />
    <mutant id="mutant_11766" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="((n.length()) * 5)" />
    <mutant id="mutant_10436" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="&quot; from &quot;" />
    <mutant id="mutant_11767" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) * &quot;.idx&quot;" />
    <mutant id="mutant_10437" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="&quot; from &quot; * (getRefLogIdent().toExternalString())" />
    <mutant id="mutant_11768" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="n.substring(0, ((n.length()) - 5))" />
    <mutant id="mutant_10438" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="&quot; from &quot; - (getRefLogIdent().toExternalString())" />
    <mutant id="mutant_11769" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) - &quot;.idx&quot;" />
    <mutant id="mutant_10439" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="&quot; from &quot; % (getRefLogIdent().toExternalString())" />
    <mutant id="mutant_11760" viable="false" in="org.eclipse.jgit.transport.TransportHttp.readSmartHeaders(java.io.InputStream,java.lang.String)" from="&quot;# service=&quot; + service" to="&quot;# service=&quot; / service" />
    <mutant id="mutant_10430" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="((10 * (timeout)) + 1000)" />
    <mutant id="mutant_11761" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="((n.length()) / 5)" />
    <mutant id="mutant_10431" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((10 * (timeout)) * 1000)" to="((10 * (timeout)) - 1000)" />
    <mutant id="mutant_11762" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="((n.length()) - 5)" to="n.length()" />
    <mutant id="mutant_10407" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) / &quot;-Timer&quot;)" />
    <mutant id="mutant_11738" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="&quot; &quot;" />
    <mutant id="mutant_10408" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) * &quot;-Timer&quot;)" />
    <mutant id="mutant_11739" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="status" />
    <mutant id="mutant_10409" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="&quot;-Timer&quot;" />
    <mutant id="mutant_11730" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(&quot;application/x-&quot; + service) + &quot;-advertisement&quot;" to="(&quot;application/x-&quot; + service) / &quot;-advertisement&quot;" />
    <mutant id="mutant_10400" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="line.length()" />
    <mutant id="mutant_11731" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="exp" />
    <mutant id="mutant_10401" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="1" />
    <mutant id="mutant_11732" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="(exp * &quot;, */*&quot;)" />
    <mutant id="mutant_10402" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) / 1)" />
    <mutant id="mutant_11733" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="(exp / &quot;, */*&quot;)" />
    <mutant id="mutant_10403" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) + 1)" />
    <mutant id="mutant_11734" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="(exp - &quot;, */*&quot;)" />
    <mutant id="mutant_10404" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) % 1)" />
    <mutant id="mutant_11735" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="&quot;, */*&quot;" />
    <mutant id="mutant_10405" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.chomp(java.lang.String)" from="((line.length()) - 1)" to="((line.length()) * 1)" />
    <mutant id="mutant_11736" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(exp + &quot;, */*&quot;)" to="(exp % &quot;, */*&quot;)" />
    <mutant id="mutant_10406" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) % &quot;-Timer&quot;)" />
    <mutant id="mutant_11737" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="(status % &quot; &quot;)" />
    <mutant id="mutant_10418" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_11749" viable="true" in="org.eclipse.jgit.transport.TransportHttp.httpOpen(java.lang.String,java.net.URL)" from="timeOut * 1000" to="timeOut % 1000" />
    <mutant id="mutant_10419" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_10410" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="((caller.getName()) - &quot;-Timer&quot;)" />
    <mutant id="mutant_11741" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="(status * &quot; &quot;)" />
    <mutant id="mutant_10411" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((caller.getName()) + &quot;-Timer&quot;)" to="caller.getName()" />
    <mutant id="mutant_11742" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="(status - &quot; &quot;)" />
    <mutant id="mutant_10412" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_11743" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="(status + &quot; &quot;) - (conn.getResponseMessage())" />
    <mutant id="mutant_10413" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_11744" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="(status + &quot; &quot;) * (conn.getResponseMessage())" />
    <mutant id="mutant_10414" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_11745" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="conn.getResponseMessage()" />
    <mutant id="mutant_10415" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_11746" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="(status + &quot; &quot;) % (conn.getResponseMessage())" />
    <mutant id="mutant_10416" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_11747" viable="true" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="status + &quot; &quot;" />
    <mutant id="mutant_10417" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.init(java.io.InputStream,java.io.OutputStream,java.io.OutputStream)" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_11748" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;) + (conn.getResponseMessage())" to="(status + &quot; &quot;) / (conn.getResponseMessage())" />
    <mutant id="mutant_11740" viable="false" in="org.eclipse.jgit.transport.TransportHttp.connect(java.lang.String)" from="(status + &quot; &quot;)" to="(status / &quot; &quot;)" />
    <mutant id="mutant_10465" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="(&quot;error: &quot; % what)" />
    <mutant id="mutant_11796" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="dir" />
    <mutant id="mutant_10466" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="((&quot;error: &quot; + what) - &quot;\n&quot;)" />
    <mutant id="mutant_11797" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="(dir % &quot;/&quot;)" />
    <mutant id="mutant_10467" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="((&quot;error: &quot; + what) / &quot;\n&quot;)" />
    <mutant id="mutant_11798" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_10468" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="((&quot;error: &quot; + what) * &quot;\n&quot;)" />
    <mutant id="mutant_11799" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readLooseRefs(java.util.TreeMap,java.lang.String,java.lang.String)" from="(dir + &quot;/&quot;)" to="(dir - &quot;/&quot;)" />
    <mutant id="mutant_10469" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="((&quot;error: &quot; + what) % &quot;\n&quot;)" />
    <mutant id="mutant_11790" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * target)" />
    <mutant id="mutant_10460" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="(&quot;error: &quot; * what)" />
    <mutant id="mutant_11791" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % target)" />
    <mutant id="mutant_10461" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="(&quot;error: &quot; / what)" />
    <mutant id="mutant_11792" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="target" />
    <mutant id="mutant_10462" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="what" />
    <mutant id="mutant_11793" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_10463" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="&quot;error: &quot;" />
    <mutant id="mutant_11794" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / target)" />
    <mutant id="mutant_10464" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="(&quot;error: &quot; + what)" to="(&quot;error: &quot; - what)" />
    <mutant id="mutant_11795" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readRef(java.util.TreeMap,java.lang.String,java.lang.String)" from="((WalkRemoteObjectDatabase.ROOT_DIR) + target)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - target)" />
    <mutant id="mutant_10476" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what % &quot;\n&quot;)" />
    <mutant id="mutant_10477" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_10478" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="unpackError.getMessage()" />
    <mutant id="mutant_10479" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="(&quot;unpack error &quot; % (unpackError.getMessage()))" />
    <mutant id="mutant_10470" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="(&quot;error: &quot; + what)" />
    <mutant id="mutant_10471" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendError(java.lang.String)" from="((&quot;error: &quot; + what) + &quot;\n&quot;)" to="&quot;\n&quot;" />
    <mutant id="mutant_10472" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what / &quot;\n&quot;)" />
    <mutant id="mutant_10473" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="what" />
    <mutant id="mutant_10474" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what * &quot;\n&quot;)" />
    <mutant id="mutant_10475" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendMessage(java.lang.String)" from="(what + &quot;\n&quot;)" to="(what - &quot;\n&quot;)" />
    <mutant id="mutant_10443" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="timeout" />
    <mutant id="mutant_11774" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="(mtimes.get(o2).intValue()) * (mtimes.get(o1).intValue())" />
    <mutant id="mutant_10444" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="((timeout) - 1000)" />
    <mutant id="mutant_11775" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="(mtimes.get(o2).intValue()) % (mtimes.get(o1).intValue())" />
    <mutant id="mutant_10445" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="1000" />
    <mutant id="mutant_11776" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="mtimes.get(o2).intValue()" />
    <mutant id="mutant_10446" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="((timeout) % 1000)" />
    <mutant id="mutant_11777" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="(mtimes.get(o2).intValue()) + (mtimes.get(o1).intValue())" />
    <mutant id="mutant_10447" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="((timeout) + 1000)" />
    <mutant id="mutant_11778" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) / (Constants.HEAD))" />
    <mutant id="mutant_10448" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="(&quot;ERR &quot; * (advertiseError))" />
    <mutant id="mutant_11779" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) - (Constants.HEAD))" />
    <mutant id="mutant_10449" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="&quot;ERR &quot;" />
    <mutant id="mutant_11770" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) / &quot;.idx&quot;" />
    <mutant id="mutant_10440" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="&quot; from &quot; / (getRefLogIdent().toExternalString())" />
    <mutant id="mutant_11771" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="(n.substring(0, ((n.length()) - 5))) % &quot;.idx&quot;" />
    <mutant id="mutant_10441" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="&quot; from &quot; + (getRefLogIdent().toExternalString())" to="getRefLogIdent().toExternalString()" />
    <mutant id="mutant_11772" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.getPackNames()" from="(n.substring(0, ((n.length()) - 5))) + &quot;.idx&quot;" to="&quot;.idx&quot;" />
    <mutant id="mutant_10442" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.receivePack()" from="((timeout) * 1000)" to="((timeout) / 1000)" />
    <mutant id="mutant_11773" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB$1.compare(java.lang.String,java.lang.String)" from="(mtimes.get(o2).intValue()) - (mtimes.get(o1).intValue())" to="(mtimes.get(o2).intValue()) / (mtimes.get(o1).intValue())" />
    <mutant id="mutant_10454" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; % (fail.getMessage()))" />
    <mutant id="mutant_11785" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) / &quot;refs&quot;)" />
    <mutant id="mutant_10455" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="&quot;ERR &quot;" />
    <mutant id="mutant_11786" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) % &quot;refs&quot;)" />
    <mutant id="mutant_10456" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="fail.getMessage()" />
    <mutant id="mutant_11787" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) * &quot;refs&quot;)" />
    <mutant id="mutant_10457" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; * (fail.getMessage()))" />
    <mutant id="mutant_11788" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_10458" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; - (fail.getMessage()))" />
    <mutant id="mutant_11789" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="((WalkRemoteObjectDatabase.ROOT_DIR) - &quot;refs&quot;)" />
    <mutant id="mutant_10459" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (fail.getMessage()))" to="(&quot;ERR &quot; / (fail.getMessage()))" />
    <mutant id="mutant_11780" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="Constants.HEAD" />
    <mutant id="mutant_10450" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="advertiseError" />
    <mutant id="mutant_11781" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) % (Constants.HEAD))" />
    <mutant id="mutant_10451" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="(&quot;ERR &quot; % (advertiseError))" />
    <mutant id="mutant_11782" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="WalkRemoteObjectDatabase.ROOT_DIR" />
    <mutant id="mutant_10452" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="(&quot;ERR &quot; - (advertiseError))" />
    <mutant id="mutant_11783" viable="false" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + (Constants.HEAD))" to="((WalkRemoteObjectDatabase.ROOT_DIR) * (Constants.HEAD))" />
    <mutant id="mutant_10453" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendAdvertisedRefs(org.eclipse.jgit.transport.RefAdvertiser)" from="(&quot;ERR &quot; + (advertiseError))" to="(&quot;ERR &quot; / (advertiseError))" />
    <mutant id="mutant_11784" viable="true" in="org.eclipse.jgit.transport.TransportSftp$SftpObjectDB.readAdvertisedRefs()" from="((WalkRemoteObjectDatabase.ROOT_DIR) + &quot;refs&quot;)" to="&quot;refs&quot;" />
    <mutant id="mutant_4502" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="(start) / n" />
    <mutant id="mutant_5834" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="data.length" />
    <mutant id="mutant_4501" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="(start) * n" />
    <mutant id="mutant_5835" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="((data.length) % n)" />
    <mutant id="mutant_4500" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow(org.eclipse.jgit.internal.storage.file.PackFile,long,int)" from="(start) + n" to="(start) % n" />
    <mutant id="mutant_5836" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="32 % bits" />
    <mutant id="mutant_5837" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="32 * bits" />
    <mutant id="mutant_5838" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="bits" />
    <mutant id="mutant_5839" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="32 + bits" />
    <mutant id="mutant_4509" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_4508" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_4507" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_4506" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_5830" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="((data.length) * n)" />
    <mutant id="mutant_4505" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_5831" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="((data.length) / n)" />
    <mutant id="mutant_4504" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_5832" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="((data.length) + n)" />
    <mutant id="mutant_4503" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.copy(long,byte[],int,int)" from="((int)(pos - (start)))" to="(pos + (start))" />
    <mutant id="mutant_5833" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="((data.length) - n)" to="n" />
    <mutant id="mutant_5823" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="31" />
    <mutant id="mutant_5824" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="avail" />
    <mutant id="mutant_5825" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="avail * (p.value)" />
    <mutant id="mutant_5826" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="avail / (p.value)" />
    <mutant id="mutant_5827" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="p.value" />
    <mutant id="mutant_5828" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="avail % (p.value)" />
    <mutant id="mutant_5829" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.open(java.io.InputStream,java.io.File,org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.internal.storage.file.WindowCursor)" from="avail - (p.value)" to="avail + (p.value)" />
    <mutant id="mutant_5820" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) - 31)" />
    <mutant id="mutant_5821" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255))" />
    <mutant id="mutant_5822" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) * 31)" />
    <mutant id="mutant_10487" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="(cmd.getRefName())" />
    <mutant id="mutant_10488" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="(&quot;ng &quot; * (cmd.getRefName()))" />
    <mutant id="mutant_10489" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="&quot;ng &quot;" />
    <mutant id="mutant_5812" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="name * (LockFile.SUFFIX)" />
    <mutant id="mutant_5813" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="name" />
    <mutant id="mutant_10480" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="&quot;unpack error &quot;" />
    <mutant id="mutant_5814" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="name - (LockFile.SUFFIX)" />
    <mutant id="mutant_10481" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="(&quot;unpack error &quot; / (unpackError.getMessage()))" />
    <mutant id="mutant_5815" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="LockFile.SUFFIX" />
    <mutant id="mutant_10482" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="(&quot;unpack error &quot; * (unpackError.getMessage()))" />
    <mutant id="mutant_5816" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="name % (LockFile.SUFFIX)" />
    <mutant id="mutant_10483" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;unpack error &quot; + (unpackError.getMessage()))" to="(&quot;unpack error &quot; - (unpackError.getMessage()))" />
    <mutant id="mutant_5817" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter.refLockFor(java.lang.String)" from="name + (LockFile.SUFFIX)" to="name / (LockFile.SUFFIX)" />
    <mutant id="mutant_10484" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="(&quot;ng &quot; / (cmd.getRefName()))" />
    <mutant id="mutant_5818" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) + 31)" />
    <mutant id="mutant_10485" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="(&quot;ng &quot; - (cmd.getRefName()))" />
    <mutant id="mutant_5819" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObject.isStandardFormat(byte[])" from="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) % 31)" to="(((fb &lt;&lt; 8) | ((hdr[1]) &amp; 255)) / 31)" />
    <mutant id="mutant_10486" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ng &quot; + (cmd.getRefName()))" to="(&quot;ng &quot; % (cmd.getRefName()))" />
    <mutant id="mutant_5810" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="(((Constants.LOGS) + '/') * (Constants.R_REFS))" />
    <mutant id="mutant_5811" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="(((Constants.LOGS) + '/') / (Constants.R_REFS))" />
    <mutant id="mutant_5809" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="((Constants.LOGS) + '/')" />
    <mutant id="mutant_10498" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="(&quot;ok &quot; - (cmd.getRefName()))" />
    <mutant id="mutant_10499" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="(&quot;ok &quot; % (cmd.getRefName()))" />
    <mutant id="mutant_5801" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) * '/')" />
    <mutant id="mutant_10490" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="((&quot;ng &quot; + (cmd.getRefName())) % &quot; n/a (unpacker error)&quot;)" />
    <mutant id="mutant_5802" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="(Constants.LOGS)" />
    <mutant id="mutant_10491" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="&quot; n/a (unpacker error)&quot;" />
    <mutant id="mutant_5803" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) - '/')" />
    <mutant id="mutant_10492" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="((&quot;ng &quot; + (cmd.getRefName())) * &quot; n/a (unpacker error)&quot;)" />
    <mutant id="mutant_5804" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) % '/')" />
    <mutant id="mutant_10493" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="((&quot;ng &quot; + (cmd.getRefName())) - &quot; n/a (unpacker error)&quot;)" />
    <mutant id="mutant_5805" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="'/'" />
    <mutant id="mutant_10494" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="((&quot;ng &quot; + (cmd.getRefName())) / &quot; n/a (unpacker error)&quot;)" />
    <mutant id="mutant_5806" viable="true" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="Constants.R_REFS" />
    <mutant id="mutant_10495" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="((&quot;ng &quot; + (cmd.getRefName())) + &quot; n/a (unpacker error)&quot;)" to="(&quot;ng &quot; + (cmd.getRefName()))" />
    <mutant id="mutant_5807" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="(((Constants.LOGS) + '/') % (Constants.R_REFS))" />
    <mutant id="mutant_10496" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="&quot;ok &quot;" />
    <mutant id="mutant_5808" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="(((Constants.LOGS) + '/') + (Constants.R_REFS))" to="(((Constants.LOGS) + '/') - (Constants.R_REFS))" />
    <mutant id="mutant_10497" viable="false" in="org.eclipse.jgit.transport.BaseReceivePack.sendStatusReport(boolean,java.lang.Throwable,org.eclipse.jgit.transport.BaseReceivePack$Reporter)" from="(&quot;ok &quot; + (cmd.getRefName()))" to="(&quot;ok &quot; / (cmd.getRefName()))" />
    <mutant id="mutant_5800" viable="false" in="org.eclipse.jgit.internal.storage.file.ReflogWriter(org.eclipse.jgit.lib.Repository,boolean)" from="((Constants.LOGS) + '/')" to="((Constants.LOGS) / '/')" />
    <mutant id="mutant_5880" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="(5 * (limit / wsz))" />
    <mutant id="mutant_3215" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end * ptr)" />
    <mutant id="mutant_4546" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="((Constants.GITDIR) % (getDirectory().getAbsolutePath()))" />
    <mutant id="mutant_5878" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="2" />
    <mutant id="mutant_3214" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end + ptr)" />
    <mutant id="mutant_4545" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="((Constants.GITDIR) * (getDirectory().getAbsolutePath()))" />
    <mutant id="mutant_5879" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((5 * (limit / wsz)) / 2)" to="((5 * (limit / wsz)) + 2)" />
    <mutant id="mutant_3213" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end % ptr)" />
    <mutant id="mutant_4544" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.MASTER" />
    <mutant id="mutant_3212" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4543" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) / (Constants.MASTER))" />
    <mutant id="mutant_3211" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_4542" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) % (Constants.MASTER))" />
    <mutant id="mutant_3210" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4541" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) - (Constants.MASTER))" />
    <mutant id="mutant_4540" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="((Constants.R_HEADS) * (Constants.MASTER))" />
    <mutant id="mutant_5870" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="(limit + wsz)" />
    <mutant id="mutant_5871" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="limit" />
    <mutant id="mutant_5872" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="(5 / (limit / wsz))" />
    <mutant id="mutant_5873" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="(5 - (limit / wsz))" />
    <mutant id="mutant_3219" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_5874" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="5" />
    <mutant id="mutant_3218" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="end" />
    <mutant id="mutant_4549" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="((Constants.GITDIR) - (getDirectory().getAbsolutePath()))" />
    <mutant id="mutant_5875" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="(limit / wsz)" />
    <mutant id="mutant_3217" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="ptr" />
    <mutant id="mutant_4548" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="Constants.GITDIR" />
    <mutant id="mutant_5876" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="(5 + (limit / wsz))" />
    <mutant id="mutant_3216" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(end - ptr)" to="(end / ptr)" />
    <mutant id="mutant_4547" viable="false" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.GITDIR) + (getDirectory().getAbsolutePath()))" to="((Constants.GITDIR) / (getDirectory().getAbsolutePath()))" />
    <mutant id="mutant_5877" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(5 * (limit / wsz))" to="(5 % (limit / wsz))" />
    <mutant id="mutant_3204" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr % 1)" />
    <mutant id="mutant_4535" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="(p2 / (&quot; to &quot;.length()))" />
    <mutant id="mutant_5867" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="(limit * wsz)" />
    <mutant id="mutant_3203" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_4534" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="p2" />
    <mutant id="mutant_5868" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="wsz" />
    <mutant id="mutant_3202" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4533" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="&quot; to &quot;.length()" />
    <mutant id="mutant_5869" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="(limit - wsz)" />
    <mutant id="mutant_3201" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4532" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="(d * e)" />
    <mutant id="mutant_3200" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="end - ptr" to="end" />
    <mutant id="mutant_4531" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="(d - e)" />
    <mutant id="mutant_4530" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="d" />
    <mutant id="mutant_5860" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="tableSize" />
    <mutant id="mutant_5861" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) * (tableSize)" />
    <mutant id="mutant_3209" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="1" />
    <mutant id="mutant_5862" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="(hash(pack.hash, position)) &gt;&gt;&gt; 1" />
    <mutant id="mutant_3208" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr - 1)" />
    <mutant id="mutant_4539" viable="true" in="org.eclipse.jgit.internal.storage.file.FileRepository.create(boolean)" from="((Constants.R_HEADS) + (Constants.MASTER))" to="Constants.R_HEADS" />
    <mutant id="mutant_5863" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) / (tableSize)" />
    <mutant id="mutant_3207" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr * 1)" />
    <mutant id="mutant_4538" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="(p2 - (&quot; to &quot;.length()))" />
    <mutant id="mutant_5864" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) - (tableSize)" />
    <mutant id="mutant_3206" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="ptr" />
    <mutant id="mutant_4537" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="(p2 % (&quot; to &quot;.length()))" />
    <mutant id="mutant_5865" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.slot(org.eclipse.jgit.internal.storage.file.PackFile,long)" from="((hash(pack.hash, position)) &gt;&gt;&gt; 1) % (tableSize)" to="((hash(pack.hash, position)) &gt;&gt;&gt; 1) + (tableSize)" />
    <mutant id="mutant_3205" viable="true" in="org.eclipse.jgit.lib.ObjectChecker.checkPathSegment2(byte[],int,int)" from="(ptr + 1)" to="(ptr / 1)" />
    <mutant id="mutant_4536" viable="true" in="org.eclipse.jgit.internal.storage.file.CheckoutEntryImpl(org.eclipse.jgit.lib.ReflogEntry)" from="(p2 + (&quot; to &quot;.length()))" to="(p2 * (&quot; to &quot;.length()))" />
    <mutant id="mutant_5866" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.tableSize(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="(limit / wsz)" to="(limit % wsz)" />
    <mutant id="mutant_4524" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) * 2)" />
    <mutant id="mutant_5856" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="packHash * ((int)((off &gt;&gt;&gt; (windowSizeShift))))" />
    <mutant id="mutant_4523" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) + 2)" />
    <mutant id="mutant_5857" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="packHash" />
    <mutant id="mutant_4522" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="(Constants.OBJECT_ID_STRING_LENGTH)" />
    <mutant id="mutant_5858" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="packHash - ((int)((off &gt;&gt;&gt; (windowSizeShift))))" />
    <mutant id="mutant_4521" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="2" />
    <mutant id="mutant_5859" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="packHash % ((int)((off &gt;&gt;&gt; (windowSizeShift))))" />
    <mutant id="mutant_4520" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="(end) + (start)" />
    <mutant id="mutant_5850" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) % 0.1" />
    <mutant id="mutant_4529" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="(d % e)" />
    <mutant id="mutant_5851" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="0.1" />
    <mutant id="mutant_4528" viable="false" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="(d / e)" />
    <mutant id="mutant_5852" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) + 0.1" />
    <mutant id="mutant_4527" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="(d + e)" to="e" />
    <mutant id="mutant_5853" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) / 0.1" />
    <mutant id="mutant_4526" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) % 2)" />
    <mutant id="mutant_5854" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="packHash / ((int)((off &gt;&gt;&gt; (windowSizeShift))))" />
    <mutant id="mutant_4525" viable="true" in="org.eclipse.jgit.internal.storage.file.CachedObjectDirectory.scanLoose()" from="((Constants.OBJECT_ID_STRING_LENGTH) - 2)" to="((Constants.OBJECT_ID_STRING_LENGTH) / 2)" />
    <mutant id="mutant_5855" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache.hash(int,long)" from="packHash + ((int)((off &gt;&gt;&gt; (windowSizeShift))))" to="((int)(off &gt;&gt;&gt; (windowSizeShift)))" />
    <mutant id="mutant_4513" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(pos * (start))" />
    <mutant id="mutant_5845" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="((t.bits) / 1)" />
    <mutant id="mutant_4512" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="start" />
    <mutant id="mutant_5846" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="t.bits" />
    <mutant id="mutant_4511" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="pos" />
    <mutant id="mutant_5847" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="((t.bits) - 1)" />
    <mutant id="mutant_4510" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(pos % (start))" />
    <mutant id="mutant_5848" viable="true" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="tableSize" />
    <mutant id="mutant_5849" viable="false" in="org.eclipse.jgit.internal.storage.file.WindowCache(org.eclipse.jgit.storage.file.WindowCacheConfig)" from="((int)((tableSize) * 0.1))" to="(tableSize) - 0.1" />
    <mutant id="mutant_4519" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="(end) * (start)" />
    <mutant id="mutant_4518" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="end" />
    <mutant id="mutant_5840" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="32 / bits" />
    <mutant id="mutant_4517" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="(end) / (start)" />
    <mutant id="mutant_5841" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache$Table(int)" from="32 - bits" to="32" />
    <mutant id="mutant_4516" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="(end) % (start)" />
    <mutant id="mutant_5842" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="((t.bits) * 1)" />
    <mutant id="mutant_4515" viable="false" in="org.eclipse.jgit.internal.storage.file.ByteWindow.size()" from="((int)((end) - (start)))" to="start" />
    <mutant id="mutant_5843" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="1" />
    <mutant id="mutant_4514" viable="true" in="org.eclipse.jgit.internal.storage.file.ByteWindow.setInput(long,java.util.zip.Inflater)" from="((int)(pos - (start)))" to="(pos / (start))" />
    <mutant id="mutant_5844" viable="true" in="org.eclipse.jgit.internal.storage.file.UnpackedObjectCache.add(org.eclipse.jgit.lib.AnyObjectId)" from="((t.bits) + 1)" to="((t.bits) % 1)" />
  </mutants>
</mutation>
