<?xml version="1.0" encoding="UTF-8"?>
<mutation-execution id="mutant_9415" time="309139">
  <failing>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedWithPeeled</case>
    <case>org.eclipse.jgit.gitrepo.RepoCommandTest.testRemoveOverlappingBare</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testReadNotExistingBranchConfig</case>
    <case>org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testWorkdirIsParent_CreateRepositoryFromGitDirOnlyWithBareConfigFalse</case>
    <case>org.eclipse.jgit.internal.storage.file.ObjectDirectoryTest.testConcurrentInsertionOfBlobsToTheSameNewFanOutDirectory</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasCRC32Copy</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testFirstExactRef_IgnoresGarbageRef</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testExactRef_IgnoresGarbageRef</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_EmptyDatabase</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryWithBranch</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversModifiedLoose</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryOnlyOneBranch</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownBlobFails</case>
    <case>org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectInNewPack</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_OnOff1</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_OnOff2</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_SymrefToPacked</case>
    <case>org.eclipse.jgit.gitrepo.RepoCommandTest.testReplaceManifestBare</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef4</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepository</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef3</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef2</case>
    <case>org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviateOnEmptyRepository</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CorruptSymbolicReference</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_IgnoresGarbageRef1</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testSuccess</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testIsNameConflicting</case>
    <case>org.eclipse.jgit.lib.ConfigTest.test002_ReadWithSubsection</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testPeelCommit</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testExactRef_FetchHead</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testRefsChangedStackOverflow</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflict</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testCreate</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_InvalidName</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4SizeThinVsNoThin</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeOffsetsVsRefs</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteIndex</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4ThinPack</case>
    <case>org.eclipse.jgit.api.PushCommandTest.testPushRefUpdate</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_CorruptObjectIdReference</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1NoObjectReuse</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteEmptyPack1</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseRefs</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_AnyHeadWithGarbage</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2DeltasReuseOffsets</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWriteEmptyPack2</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_DiscoversModifiedLoose</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_EmptyDatabase</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllPacked1</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenCommonBlobFails</case>
    <case>org.eclipse.jgit.api.AddCommandTest.testExecutableRetention</case>
    <case>org.eclipse.jgit.internal.storage.file.RepositorySetupWorkDirTest.testNotBare_CreateRepositoryFromGitDirOnlyWithBareConfigFalse</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CorruptObjectIdReference</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_PackedNotPeeled_Sorted</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseSorting_Bug_348834</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_TrueFalse1</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_SkipsLockFiles</case>
    <case>org.eclipse.jgit.gitrepo.RepoCommandTest.testRevisionBare</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testGetEnum</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testFilterHidesPrivate</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_TrueFalse2</case>
    <case>org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviateIsActuallyUnique</case>
    <case>org.eclipse.jgit.lib.BranchConfigTest.isRebase</case>
    <case>org.eclipse.jgit.lib.ReflogConfigTest.testlogAllRefUpdates</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepositoryNullRemote</case>
    <case>org.eclipse.jgit.api.GitConstructionTest.testWrap</case>
    <case>org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack1</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_Mixed</case>
    <case>org.eclipse.jgit.gitrepo.RepoCommandTest.testBareRepo</case>
    <case>org.eclipse.jgit.api.GitConstructionTest.testOpen</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testCloneRepositoryExplicitGitDirBare</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_DiscoversDeletedLoose</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingUnknownTreeFails</case>
    <case>org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedWithinPack</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testPeelLooseTag</case>
    <case>org.eclipse.jgit.api.PullCommandWithRebaseTest.testPullFastForwardWithLocalCommitAndRebaseFlagSet</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllPacked</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testExclude</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjects</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_CycleInSymbolicRef</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_TagsOnly_AllLoose</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_PackedNotPeeled_WrongSort</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testFirstExactRef_Mixed</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseOverridesPacked</case>
    <case>org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_SmallObjectChain</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose4</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateConflictThanksToDelete</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose3</case>
    <case>org.eclipse.jgit.internal.storage.file.PackFileTest.testWhole_SmallObject</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateNonFastForwardDoesNotDoExpensiveMergeCheck</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose2</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose1</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadsOnly_AllLoose</case>
    <case>org.eclipse.jgit.api.CherryPickCommandTest.testCherryPickOverExecutableChangeOnNonExectuableFileSystem</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_LooseSortedCorrectly</case>
    <case>org.eclipse.jgit.api.GitConstructionTest.testClose</case>
    <case>org.eclipse.jgit.internal.storage.file.T0003_BasicTest.test002_WriteEmptyTree</case>
    <case>org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviatePackedBlob</case>
    <case>org.eclipse.jgit.api.PushCommandTest.testPushWithRefSpecFromConfig</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testUsingHiddenDeltaBaseFails</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeatchedHead1</case>
    <case>org.eclipse.jgit.internal.storage.file.ConcurrentRepackTest.testObjectMovedToNewPack2</case>
    <case>org.eclipse.jgit.api.RevertCommandTest.testRevertOverExecutableChangeOnNonExectuableFileSystem</case>
    <case>org.eclipse.jgit.internal.storage.file.AbbreviationTest.testAbbreviateLooseBlob</case>
    <case>org.eclipse.jgit.transport.ReceivePackAdvertiseRefsHookTest.testCreateBranchAtHiddenCommitFails</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleForce</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeatchedHead2</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadOnOneBranch</case>
    <case>org.eclipse.jgit.api.PushCommandTest.testTrackingUpdate</case>
    <case>org.eclipse.jgit.api.CommitCommandTest.testExecutableRetention</case>
    <case>org.eclipse.jgit.transport.BundleWriterTest.testWriteSingleRef</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversNewLoose2</case>
    <case>org.eclipse.jgit.api.CloneCommandTest.testBareCloneRepositoryCustomRemote</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_HeadBranchNotBorn</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversDeletedLoose5</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack4</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack3</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DiscoversNewLoose1</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack1</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testBatchRefUpdateSimpleNoForce</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testWritePack2SizeDeltasVsNoDeltas</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.test_repack</case>
    <case>org.eclipse.jgit.api.PushCommandTest.testPushWithoutPushRefSpec</case>
    <case>org.eclipse.jgit.internal.storage.file.PackFileTest.testDelta_FailsOver2GiB</case>
    <case>org.eclipse.jgit.internal.storage.file.PackFileTest.testWhole_LargeObject</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_FetchHead</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testReadBranchConfig</case>
    <case>org.eclipse.jgit.gitrepo.RepoCommandTest.testCopyFileBare</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRefs_DeeplyNestedBranch</case>
    <case>org.eclipse.jgit.internal.storage.file.RefDirectoryTest.testGetRef_CorruptSymbolicReference</case>
    <case>org.eclipse.jgit.transport.BundleWriterTest.testIncrementalBundle</case>
    <case>org.eclipse.jgit.internal.storage.file.PackWriterTest.testIgnoreNonExistingObjectsWithBitmaps</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_YesNo1</case>
    <case>org.eclipse.jgit.lib.ConfigTest.testReadBoolean_YesNo2</case>
  </failing>
  <ignored>
    <case>org.eclipse.jgit.transport.URIishTest.testFileWithUserHome</case>
    <case>org.eclipse.jgit.api.HugeFileTest.testAddHugeFile</case>
  </ignored>
  <hanging />
</mutation-execution>
