<?xml version="1.0" encoding="UTF-8"?>
<!--
This is an execution file generated with SMF.
-->
<smf>
  <config skip-mvn-cp="false">
    <global>
      <classpath />
      <state>FRESH</state>
    </global>
    <source>
      <bytecode>bytecode/source</bytecode>
      <include>
        <path>src/main/java</path>
      </include>
    </source>
    <tests>
      <bytecode>bytecode/tests</bytecode>
      <include>
        <path>src/test/java</path>
      </include>
      <ressources />
    </tests>
    <mutation basedir="mutations/{id}/{op}">
      <source>source</source>
      <bytecode>bytecode</bytecode>
      <executions>exec</executions>
    </mutation>
  </config>
  <tests>
    <classes>
      <class>org.eclipse.draw2d.test.LookAheadTes</class>
      <class>org.eclipse.draw2d.test.PrecisionPointTes</class>
      <class>org.eclipse.draw2d.test.TextFlowWrapTes</class>
      <class>org.eclipse.draw2d.test.FlowBorderTest</class>
      <class>org.eclipse.draw2d.test.PrecisionRectangleTes</class>
      <class>org.eclipse.draw2d.test.LayeredPaneTes</class>
      <class>org.eclipse.draw2d.test.RayTes</class>
      <class>org.eclipse.draw2d.test.RelativeBendpointTes</class>
      <class>org.eclipse.draw2d.test.AdvancedGraphicsTest</class>
      <class>org.eclipse.draw2d.test.ImageUtilitiesTes</class>
      <class>org.eclipse.draw2d.test.ColorConstantTes</class>
      <class>org.eclipse.draw2d.test.AnchorNotificationTes</class>
      <class>org.eclipse.draw2d.test.ShortestPathRoutingTes</class>
      <class>org.eclipse.draw2d.test.FigureUtilitiesTes</class>
      <class>org.eclipse.draw2d.test.ConnectionEndPointMoveTes</class>
      <class>org.eclipse.draw2d.test.XYLayoutTes</class>
      <class>org.eclipse.draw2d.test.PaintDamageEraseTes</class>
      <class>org.eclipse.draw2d.test.TextualTest</class>
      <class>org.eclipse.draw2d.test.GraphicsClippin</class>
      <class>org.eclipse.draw2d.test.PointListTest</class>
      <class>org.eclipse.draw2d.test.ThumbnailTes</class>
      <class>org.eclipse.draw2d.test.PrecisionDimensionTes</class>
      <class>org.eclipse.draw2d.test.RectangleTes</class>
    </classes>
    <cases>
      <case>org.eclipse.draw2d.test.AdvancedGraphicsTests.testLineJoinCap()</case>
      <case>org.eclipse.draw2d.test.PaintDamageEraseTest.testPaintDamageErase()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionInverted()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemoveObstacleIntersection()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testOffsetShrink()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadPrecedingInline()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddPath()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersection()</case>
      <case>org.eclipse.draw2d.test.RectangleTest.test_creationSymmetry()</case>
      <case>org.eclipse.draw2d.test.FigureUtilitiesTest.test_findCommonAncestor_happypath()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomRightIntersectionInverted()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeformed()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTangent()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendHit2()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTangentInverted()</case>
      <case>org.eclipse.draw2d.test.GraphicsClipping.testSimpleClip()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemoveObstacleNoIntersection()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testBlockLeadingWord()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasMoveObstacleIntersection()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionInverted()</case>
      <case>org.eclipse.draw2d.test.TextFlowWrapTest.testHardWrapping()</case>
      <case>org.eclipse.draw2d.test.LayeredPaneTest.testIndexOutOfBounds()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionCross()</case>
      <case>org.eclipse.draw2d.test.RayTest.test_length()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testMoveTargetParent()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadAtEndOfBlock()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddObstacleNoIntersection()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testShortestPathOutsideOval()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersection()</case>
      <case>org.eclipse.draw2d.test.ThumbnailTest.test_EmptyThumbnail()</case>
      <case>org.eclipse.draw2d.test.ConnectionEndPointMoveTest.testConnectionDecoration()</case>
      <case>org.eclipse.draw2d.test.GraphicsClipping.testTranslatedClip()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomRightIntersection()</case>
      <case>org.eclipse.draw2d.test.TextFlowWrapTest.testInlineFlow()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextChineseCharLookahead()</case>
      <case>org.eclipse.draw2d.test.TextualTests.testLineRootBidiCommit()</case>
      <case>org.eclipse.draw2d.test.PrecisionDimensionTest.testEquals()</case>
      <case>org.eclipse.draw2d.test.FlowBorderTests.testBorderedTextFlow()</case>
      <case>org.eclipse.draw2d.test.ThumbnailTest.test_Thumbnail()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextHyphenLookahead()</case>
      <case>org.eclipse.draw2d.test.AdvancedGraphicsTests.testPatterns()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopRightIntersectionInverted()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testSingleLetter()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testMoveEverything()</case>
      <case>org.eclipse.draw2d.test.XYLayoutTest.testPreferredSize()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasMoveObstacleNoIntersection()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionBottom()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendHit()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionCross()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionCrossInverted()</case>
      <case>org.eclipse.draw2d.test.ColorConstantTest.test_ColorConstantInit()</case>
      <case>org.eclipse.draw2d.test.PrecisionRectangleTest.testCrop()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeformedInverted()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContainerLeadingWord()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemovePath()</case>
      <case>org.eclipse.draw2d.test.TextFlowWrapTest.testNestedInlineFlows()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testRemoveConnection()</case>
      <case>org.eclipse.draw2d.test.RectangleTest.test_sameBehavior()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendMiss()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionTop()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopRightIntersection()</case>
      <case>org.eclipse.draw2d.test.TextualTests.testGetFirstAndLastOffsetForLine()</case>
      <case>org.eclipse.draw2d.test.PrecisionPointTest.testEquals()</case>
      <case>org.eclipse.draw2d.test.AdvancedGraphicsTests.testFillRules()</case>
      <case>org.eclipse.draw2d.test.FigureUtilitiesTest.test_findCommonAncestor_bugzilla130042()</case>
      <case>org.eclipse.draw2d.test.ImageUtilitiesTest.testImageRotation()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionCrossInverted()</case>
      <case>org.eclipse.draw2d.test.RectangleTest.test_creationValues()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testRetargetTargetAnchor()</case>
      <case>org.eclipse.draw2d.test.RelativeBendpointTest.test237802()</case>
      <case>org.eclipse.draw2d.test.PrecisionRectangleTest.testCrop2()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionTopInverted()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testSingleSpace()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionBottomInverted()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddObstacleIntersection()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBlockedPath()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testBendpoints()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadFromNested()</case>
      <case>org.eclipse.draw2d.test.ImageUtilitiesTest.testRotatingImagesWithDifferentDepths()</case>
      <case>org.eclipse.draw2d.test.AdvancedGraphicsTests.testLineJoinCapAA()</case>
      <case>org.eclipse.draw2d.test.TextFlowWrapTest.testTruncatedWrapping()</case>
      <case>org.eclipse.draw2d.test.TextFlowWrapTest.testSoftWrapping()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testMoveSource()</case>
      <case>org.eclipse.draw2d.test.AdvancedGraphicsTests.testAntialias()</case>
      <case>org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadPastEmptyString()</case>
      <case>org.eclipse.draw2d.test.PointListTests.testIntersects()</case>
      <case>org.eclipse.draw2d.test.AnchorNotificationTest.testMoveTarget()</case>
      <case>org.eclipse.draw2d.test.ShortestPathRoutingTest.testSubpath()</case>
      <case>org.eclipse.draw2d.test.GraphicsClipping.testZoomedClip()</case>
    </cases>
  </tests>
  <original-execution time="-1">
    <failing />
    <ignored />
    <hanging />
    <callings>
      <test name="org.eclipse.draw2d.test.AdvancedGraphicsTests.testLineJoinCap()">
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.assertImageEquality(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1.paintControl(org.eclipse.swt.events.PaintEvent)</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.5.run()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1LineSettings.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translatePointArray(int[],int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPolyline(int[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.2.run()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1LineSettings.LineSettings(org.eclipse.draw2d.test.AdvancedGraphicsTests,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineJoin(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineStyle(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.displayImage()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineCap(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.performTestcase(java.lang.Runnable,java.lang.Runnable[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
      </test>
      <test name="org.eclipse.draw2d.test.PaintDamageEraseTest.testPaintDamageErase()">
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.Figure.getLocalForegroundColor()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.dispose()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getExtent()</node>
        <node>org.eclipse.draw2d.LightweightSystem.paint(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCropped(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doAbsoluteBoundsMixedMove()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.firePropertyChange(java.lang.String,int,int)</node>
        <node>org.eclipse.draw2d.Viewport.propertyChange(java.beans.PropertyChangeEvent)</node>
        <node>org.eclipse.draw2d.PopUpHelper.PopUpHelper(org.eclipse.swt.widgets.Control,int)</node>
        <node>org.eclipse.draw2d.UpdateManager.firePainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.updateCursor()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Viewport.getContentsTracksWidth()</node>
        <node>org.eclipse.draw2d.SWTGraphics.init()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.updateFigureUnderCursor(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.ToolTipHelper.ToolTipHelper(org.eclipse.swt.widgets.Control)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getLocation()</node>
        <node>org.eclipse.draw2d.MarginBorder.MarginBorder(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doRelativeBoundsMixedMove2()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.intersect(int,int,int,int)</node>
        <node>org.eclipse.draw2d.UpdateManager.fireValidating()</node>
        <node>org.eclipse.draw2d.SWTGraphics.clipRect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.StackLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.requestRemoveFocus(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doTestEraseBoxAfterMove(int,int,java.lang.String)</node>
        <node>org.eclipse.draw2d.LightweightSystem.EventHandler.mouseEnter(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.internalGetEventDispatcher()</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.setFigureUnderCursor(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.setCursor(org.eclipse.swt.graphics.Cursor)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.geometry.Point.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.performUpdate()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Viewport.getVerticalRangeModel()</node>
        <node>org.eclipse.draw2d.Figure.paintChildren(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.SWTGraphics(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.Figure.getToolTip()</node>
        <node>org.eclipse.draw2d.geometry.Point.setLocation(int,int)</node>
        <node>org.eclipse.draw2d.ViewportLayout.isSensitiveVertically(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doAbsoluteBoundsNegativeMove()</node>
        <node>org.eclipse.draw2d.LightweightSystem.getEventDispatcher()</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.setAll(int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.remove(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.LightweightSystem.getRootFigure()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.Shape.Shape()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doRelativeBoundsNegativeMove()</node>
        <node>org.eclipse.draw2d.Figure.isMouseEventTarget()</node>
        <node>org.eclipse.draw2d.geometry.Point.negate()</node>
        <node>org.eclipse.draw2d.RectangleFigure.fillShape(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getBoundingBox(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.dispatchMouseMoved(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.Figure.IdentitySearch.IdentitySearch()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.contains(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doAbsoluteBoundsMixedMove2()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.getFocusTraverseManager()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.UpdateRequest.run()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.FocusTraverseManager.setCurrentFocusOwner(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.repairDamage()</node>
        <node>org.eclipse.draw2d.Figure.internalGetEventDispatcher()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.performValidation()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Viewport.getContentsTracksHeight()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.ViewportLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.findMouseEventTargetAt(int,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.crop(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Viewport.getHorizontalRangeModel()</node>
        <node>org.eclipse.draw2d.Figure.setBorder(org.eclipse.draw2d.Border)</node>
        <node>org.eclipse.draw2d.Shape.paintFigure(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.UpdateManager.addUpdateListener(org.eclipse.draw2d.UpdateListener)</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getValue()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.setValue(int)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.getCurrentToolTip()</node>
        <node>org.eclipse.draw2d.Figure.removeNotify()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.paintFigure(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.Figure.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.LightweightSystem.2.handleEvent(org.eclipse.swt.widgets.Event)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineStyle(int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.SWTGraphics.fillRectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.notifyPainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.AbstractLayout.remove(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.shrink(int,int)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doRelativeBoundsMixedMove()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doIndividualSetup(boolean)</node>
        <node>org.eclipse.draw2d.ScrollPaneSolver.solve(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.Viewport,int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getSize()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getLightweightSystem()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.paint(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.Viewport.translateFromParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Figure.findFigureAt(int,int)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.AbstractBorder.isOpaque()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setLocation(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.Figure.paint(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.FigureCanvas.layoutViewport()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.ViewportLayout.isSensitiveHorizontally(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.findFigureAt(int,int,org.eclipse.draw2d.TreeSearch)</node>
        <node>org.eclipse.draw2d.RectangleFigure.RectangleFigure()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.IdentitySearch.prune(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.getPreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.FigureCanvas.1.propertyChange(java.beans.PropertyChangeEvent)</node>
        <node>org.eclipse.draw2d.FigureCanvas.2.propertyChange(java.beans.PropertyChangeEvent)</node>
        <node>org.eclipse.draw2d.Viewport.validate()</node>
        <node>org.eclipse.draw2d.FigureCanvas.3.notifyPainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.Figure.containsPoint(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getSize()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.sendUpdateRequest()</node>
        <node>org.eclipse.draw2d.test.FigureWithRelativeCoords.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.FigureCanvas.3.notifyValidating()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.LightweightSystem.setIgnoreResize(boolean)</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getMaximum()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.UpdateRequest.UpdateRequest(org.eclipse.draw2d.DeferredUpdateManager)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.translateFromParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.updateHoverSource(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.geometry.Point.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.isOpaque()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.getToolTipHelper()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getHorizontalScrollBarVisibility()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.PopUpHelper.createShell()</node>
        <node>org.eclipse.draw2d.geometry.Point.getNegated()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doIndividualTearDown()</node>
        <node>org.eclipse.draw2d.RectangleFigure.outlineShape(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawRectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.getGraphics(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.ViewportLayout.calculatePreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.LightweightSystem.EventHandler.mouseMove(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.Figure.paintBorder(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doRelativeBoundsPositiveMove()</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.NativeGraphicsSource.getGraphics(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.MarginBorder.getInsets(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getClientArea(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.PopUpHelper.getShell()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.findMouseEventTargetInDescendantsAt(int,int)</node>
        <node>org.eclipse.draw2d.Figure.isShowing()</node>
        <node>org.eclipse.draw2d.geometry.Point.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.paintClientArea(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.PopUpHelper.isShowing()</node>
        <node>org.eclipse.draw2d.FigureCanvas.setContents(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getExpanded(int,int)</node>
        <node>org.eclipse.draw2d.Viewport.getViewLocation()</node>
        <node>org.eclipse.draw2d.test.PaintDamageEraseTest.doAbsoluteBoundsPositiveMove()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.isEmpty()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.queueWork()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setXORMode(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.addNotify()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkFill()</node>
        <node>org.eclipse.draw2d.UpdateManager.isDisposed()</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.receive(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.ToolTipHelper.hookShellListeners()</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.Figure.getCursor()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.setHoverSource(org.eclipse.draw2d.Figure,org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.Viewport.getContents()</node>
        <node>org.eclipse.draw2d.AbstractLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.FigureCanvas.getViewport()</node>
        <node>org.eclipse.draw2d.Viewport.useGraphicsTranslate()</node>
        <node>org.eclipse.draw2d.Viewport.readjustScrollBars()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getVerticalScrollBarVisibility()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.isShowing()</node>
        <node>org.eclipse.draw2d.LightweightSystem.getUpdateManager()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.getFocusOwner()</node>
        <node>org.eclipse.draw2d.SWTEventDispatcher.dispatchMouseEntered(org.eclipse.swt.events.MouseEvent)</node>
        <node>org.eclipse.draw2d.Figure.getMinimumSize(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getTranslated(int,int)</node>
        <node>org.eclipse.draw2d.Figure.IdentitySearch.accept(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Viewport.getClientArea(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isEnabled()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getCopy()</node>
        <node>org.eclipse.draw2d.Graphics.fillRectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.MarginBorder.MarginBorder(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.Figure.getClientArea()</node>
        <node>org.eclipse.draw2d.ToolTipHelper.updateToolTip(org.eclipse.draw2d.IFigure,org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.getPreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.Viewport.paintClientArea(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.UpdateManager.removeUpdateListener(org.eclipse.draw2d.UpdateListener)</node>
        <node>org.eclipse.draw2d.Figure.getLocalBackgroundColor()</node>
        <node>org.eclipse.draw2d.Figure.findDescendantAtExcluding(int,int,org.eclipse.draw2d.TreeSearch)</node>
        <node>org.eclipse.draw2d.MarginBorder.paint(org.eclipse.draw2d.IFigure,org.eclipse.draw2d.Graphics,org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.Viewport.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Viewport.setContents(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getMinimum()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemoveObstacleIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.removeObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.dirtyPathsOn(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalRemoveObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testOffsetShrink()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getDeformedRectangle(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestOffsetShrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.graph.Vertex.updateOffset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getNearestVertex(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertOffsetShrink(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadPrecedingInline()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddPath()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNoPathsSolved()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.RectangleTest.test_creationSymmetry()">
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.FigureUtilitiesTest.test_findCommonAncestor_happypath()">
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.findCommonAncestor(org.eclipse.draw2d.IFigure,org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomRightIntersectionInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomRightIntersection()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeformed()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getDeformedRectangle(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathAbove(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestDeformed()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getNearestVertex(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTangent()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTangent()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathAbove(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendHit2()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getDeformedRectangle(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.graph.Vertex.updateOffset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestQuadBendMiss(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathRight(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getNearestVertex(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTangentInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTangent()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathAbove(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.GraphicsClipping.testSimpleClip()">
        <node>org.eclipse.draw2d.SWTGraphics.drawPoint(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.intersect(int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.test.GraphicsClipping.gcClipping()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.resize(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.clipRect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemoveObstacleNoIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(org.eclipse.draw2d.geometry.Point,int)</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.Path.isObstacleVisible(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNoPathsSolved()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.removeObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.dirtyPathsOn(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalRemoveObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testBlockLeadingWord()">
        <node>org.eclipse.draw2d.text.FlowFigure.addLeadingWordRequirements(int[])</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasMoveObstacleIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.updateObstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.dirtyPathsOn(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalRemoveObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextFlowWrapTest.testHardWrapping()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runHardWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest2(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiProcessor()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest(java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runGenericTests()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.LayeredPaneTest.testIndexOutOfBounds()">
        <node>org.eclipse.draw2d.LayeredPane.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.AbstractLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.remove(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.LayeredPane.remove(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.AbstractLayout.remove(org.eclipse.draw2d.IFigure)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionCross()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.RayTest.test_length()">
        <node>org.eclipse.draw2d.test.RayTest.testLengthValues(int,int,double)</node>
        <node>org.eclipse.draw2d.geometry.Ray.Ray(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Ray.dotProductL(org.eclipse.draw2d.geometry.Ray)</node>
        <node>org.eclipse.draw2d.geometry.Ray.length()</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testMoveTargetParent()">
        <node>org.eclipse.draw2d.AncestorHelper.fireAncestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.LocalCoordinates.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.ancestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AncestorHelper.figureMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.TestPolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.next()</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.fireAnchorMoved()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.PolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadAtEndOfBlock()">
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddObstacleNoIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(org.eclipse.draw2d.geometry.Point,int)</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNoPathsSolved()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testShortestPathOutsideOval()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ThumbnailTest.test_EmptyThumbnail()">
        <node>org.eclipse.draw2d.Figure.getSize()</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.getBackgroundColor()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setDirty(boolean)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.Thumbnail()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.Figure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.ScaledGraphics(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.adjustToAspectRatio(org.eclipse.draw2d.geometry.Dimension,boolean)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setSource(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.scale(double)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.init()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.zoomFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.setValues(org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.zoomFontHeight(int)</node>
        <node>org.eclipse.draw2d.Figure.getForegroundColor()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getLocation()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.Ellipse.Ellipse()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.FontKey()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getThumbnailImage()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getScaleX()</node>
        <node>org.eclipse.draw2d.test.ThumbnailTest.TestThumbnail.getThumbnailImage()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.dispose()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getSourceRectangle()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getLocalFont()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.negate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getNegated()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setLocalFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.UpdateManager.addUpdateListener(org.eclipse.draw2d.UpdateListener)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.isActive()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.hashCode()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Graphics.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.SWTGraphics.SWTGraphics(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setScale(double)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.restart()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.isEmpty()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getSize()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.FontKey(org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.resetTileValues()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.isDirty()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.SWTGraphics.getFont()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getCachedFont(org.eclipse.draw2d.ScaledGraphics.FontKey)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getLineWidth()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.start()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getCachedFontData(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.resetThumbnailImage()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Shape.Shape()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.isRunning()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setScales(float,float)</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.geometry.Point.negate()</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.createFont(org.eclipse.swt.graphics.FontData)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.stop()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ConnectionEndPointMoveTest.testConnectionDecoration()">
        <node>org.eclipse.draw2d.test.ConnectionEndPointMoveTest.notifyValidating()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.getLocalForegroundColor()</node>
        <node>org.eclipse.draw2d.DelegatingLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.dispose()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getExtent()</node>
        <node>org.eclipse.draw2d.LightweightSystem.paint(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCropped(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.expand(int,int)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize()</node>
        <node>org.eclipse.draw2d.UpdateManager.firePainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Viewport.getContentsTracksWidth()</node>
        <node>org.eclipse.draw2d.SWTGraphics.init()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getLocation()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.UpdateManager.addDirtyRegion(org.eclipse.draw2d.IFigure,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.toIntArray()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.intersect(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Polyline.outlineShape(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getBounds()</node>
        <node>org.eclipse.draw2d.UpdateManager.fireValidating()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.SWTGraphics.clipRect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.StackLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.AbstractLocator.getGap()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.geometry.Point.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.performUpdate()</node>
        <node>org.eclipse.draw2d.test.ConnectionEndPointMoveTest.notifyPainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Viewport.getVerticalRangeModel()</node>
        <node>org.eclipse.draw2d.Figure.paintChildren(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.SWTGraphics(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.ViewportLayout.isSensitiveVertically(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translatePointArray(int[],int,int)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.ConnectionLocator.getConnection()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.setAll(int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.LightweightSystem.getRootFigure()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.negate()</node>
        <node>org.eclipse.draw2d.RectangleFigure.fillShape(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.Figure.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.AbstractLocator.getRelativePosition()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getBoundingBox(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.contains(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.ConnectionLocator.setAlignment(int)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getExpanded(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.repairDamage()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int,int,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.performValidation()</node>
        <node>org.eclipse.draw2d.Viewport.getContentsTracksHeight()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.ViewportLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.crop(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Viewport.getHorizontalRangeModel()</node>
        <node>org.eclipse.draw2d.Shape.paintFigure(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.MidpointLocator.getReferencePoint()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getValue()</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.setValue(int)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.translateToRelative(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Figure.paintFigure(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.geometry.PointList.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.LightweightSystem.2.handleEvent(org.eclipse.swt.widgets.Event)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineStyle(int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.SWTGraphics.fillRectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.shrink(int,int)</node>
        <node>org.eclipse.draw2d.Polyline.getPoints()</node>
        <node>org.eclipse.draw2d.ScrollPaneSolver.solve(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.Viewport,int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getSize()</node>
        <node>org.eclipse.draw2d.ConnectionLocator.setConnection(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.FigureCanvas.getLightweightSystem()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.paint(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.Viewport.translateFromParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setLocation(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPolyline(int[])</node>
        <node>org.eclipse.draw2d.Figure.paint(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.MidpointLocator.MidpointLocator(org.eclipse.draw2d.Connection,int)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getSourceAnchor()</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.FigureCanvas.layoutViewport()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.ViewportLayout.isSensitiveHorizontally(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.AbstractLocator.getNewBounds(org.eclipse.draw2d.geometry.Dimension,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.getPreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.Viewport.validate()</node>
        <node>org.eclipse.draw2d.FigureCanvas.3.notifyPainting(org.eclipse.draw2d.geometry.Rectangle,java.util.Map)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.shrink(int,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getSize()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.sendUpdateRequest()</node>
        <node>org.eclipse.draw2d.FigureCanvas.3.notifyValidating()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToAbsolute(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.LightweightSystem.setIgnoreResize(boolean)</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getMaximum()</node>
        <node>org.eclipse.draw2d.AbstractLocator.AbstractLocator()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.UpdateRequest.UpdateRequest(org.eclipse.draw2d.DeferredUpdateManager)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.translateFromParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.geometry.Point.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Polyline.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.isOpaque()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getHorizontalScrollBarVisibility()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.geometry.Point.getNegated()</node>
        <node>org.eclipse.draw2d.RectangleFigure.outlineShape(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawRectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.getGraphics(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.ViewportLayout.calculatePreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.Figure.paintBorder(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.MidpointLocator.getIndex()</node>
        <node>org.eclipse.draw2d.NativeGraphicsSource.getGraphics(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.ConnectionLocator.ConnectionLocator(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.Figure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.AbstractLocator.relocate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getClientArea(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPolyline(org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.isShowing()</node>
        <node>org.eclipse.draw2d.geometry.Point.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.paintClientArea(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.Figure.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getExpanded(int,int)</node>
        <node>org.eclipse.draw2d.Viewport.getViewLocation()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.isEmpty()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.queueWork()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setXORMode(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkFill()</node>
        <node>org.eclipse.draw2d.UpdateManager.isDisposed()</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
        <node>org.eclipse.draw2d.DelegatingLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.AbstractLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Viewport.getContents()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getViewport()</node>
        <node>org.eclipse.draw2d.Viewport.useGraphicsTranslate()</node>
        <node>org.eclipse.draw2d.ConnectionLocator.ConnectionLocator(org.eclipse.draw2d.Connection,int)</node>
        <node>org.eclipse.draw2d.Viewport.readjustScrollBars()</node>
        <node>org.eclipse.draw2d.FigureCanvas.getVerticalScrollBarVisibility()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.isShowing()</node>
        <node>org.eclipse.draw2d.LightweightSystem.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.getMinimumSize(int,int)</node>
        <node>org.eclipse.draw2d.Viewport.getClientArea(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.PolylineConnection.layout()</node>
        <node>org.eclipse.draw2d.Figure.isEnabled()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getCopy()</node>
        <node>org.eclipse.draw2d.Graphics.fillRectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.getClientArea()</node>
        <node>org.eclipse.draw2d.AbstractLayout.getPreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.Viewport.paintClientArea(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.Figure.getLocalBackgroundColor()</node>
        <node>org.eclipse.draw2d.Viewport.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.DefaultRangeModel.getMinimum()</node>
      </test>
      <test name="org.eclipse.draw2d.test.GraphicsClipping.testTranslatedClip()">
        <node>org.eclipse.draw2d.SWTGraphics.drawPoint(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.test.GraphicsClipping.graphicsClip()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.intersect(int,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.test.GraphicsClipping.gcClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.clipRect(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getBoundingBox(org.eclipse.draw2d.geometry.Rectangle)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomRightIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomRightIntersection()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextFlowWrapTest.testInlineFlow()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runHardWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest2(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterDescent()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.text.NestedLine.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.InlineFlowLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest(java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setupLine(org.eclipse.draw2d.text.LineBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.text.NestedLine.NestedLine(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runGenericTests()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runSoftWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextChineseCharLookahead()">
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextualTests.testLineRootBidiCommit()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterDescent()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.text.NestedLine.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.isJoiningCharacter(char)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.InlineFlowLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.LineRoot.findParent(org.eclipse.draw2d.text.NestedLine,java.util.List,int)</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setupLine(org.eclipse.draw2d.text.LineBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.text.NestedLine.NestedLine(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.isJoiner(int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.text.LineRoot.Result.Result(org.eclipse.draw2d.text.LineBox,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.PrecisionDimensionTest.testEquals()">
        <node>org.eclipse.draw2d.geometry.PrecisionDimension.PrecisionDimension(double,double)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionDimension.updateInts()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionDimension.equals(java.lang.Object)</node>
      </test>
      <test name="org.eclipse.draw2d.test.FlowBorderTests.testBorderedTextFlow()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.AbstractFlowBorder.getLeftMargin()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.test.AbstractTextTest.TestBorder.TestBorder(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.test.FlowBorderTests.getTextFragment(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.setBorder(org.eclipse.draw2d.Border)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setupLine(org.eclipse.draw2d.text.LineBox)</node>
        <node>org.eclipse.draw2d.text.AbstractFlowBorder.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.AbstractFlowBorder.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.test.AbstractTextTest.TestBorder.getInsets(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.NestedLine.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int)</node>
        <node>org.eclipse.draw2d.test.SimpleTextTest.makePageWidth(java.lang.String,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.Figure.setBorder(org.eclipse.draw2d.Border)</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.AbstractFlowBorder.getTopMargin()</node>
        <node>org.eclipse.draw2d.test.AbstractTextTest.assertFragmentLocation(org.eclipse.draw2d.text.TextFragmentBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.NestedLine.NestedLine(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ThumbnailTest.test_Thumbnail()">
        <node>org.eclipse.draw2d.Figure.getSize()</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.getBackgroundColor()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setDirty(boolean)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.Thumbnail()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.Figure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.ScaledGraphics(org.eclipse.draw2d.Graphics)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.adjustToAspectRatio(org.eclipse.draw2d.geometry.Dimension,boolean)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setSource(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.scale(double)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.init()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.zoomFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.setValues(org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.zoomFontHeight(int)</node>
        <node>org.eclipse.draw2d.Figure.getForegroundColor()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getLocation()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.Ellipse.Ellipse()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.FontKey()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getThumbnailImage()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getScaleX()</node>
        <node>org.eclipse.draw2d.test.ThumbnailTest.TestThumbnail.getThumbnailImage()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getSourceRectangle()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getLocalFont()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.negate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.getNegated()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setLocalFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.expand(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.UpdateManager.addUpdateListener(org.eclipse.draw2d.UpdateListener)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.isActive()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.getPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.hashCode()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Graphics.translate(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.SWTGraphics.SWTGraphics(org.eclipse.swt.graphics.GC)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.setScale(double)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.restart()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.isEmpty()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getSize()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.FontKey.FontKey(org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.resetTileValues()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.isDirty()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.SWTGraphics.getFont()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.swt.graphics.Rectangle)</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getCachedFont(org.eclipse.draw2d.ScaledGraphics.FontKey)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getLineWidth()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.start()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.getCachedFontData(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.resetThumbnailImage()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Shape.Shape()</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.isRunning()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.setScales(float,float)</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.geometry.Point.negate()</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.ScaledGraphics.createFont(org.eclipse.swt.graphics.FontData)</node>
        <node>org.eclipse.draw2d.parts.Thumbnail.ThumbnailUpdater.stop()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextHyphenLookahead()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
      </test>
      <test name="org.eclipse.draw2d.test.AdvancedGraphicsTests.testPatterns()">
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1SetPattern.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.initTransform(boolean)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.assertImageEquality(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1.paintControl(org.eclipse.swt.events.PaintEvent)</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.SWTGraphics.fillText(java.lang.String,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1SetPattern.SetPattern(org.eclipse.draw2d.test.AdvancedGraphicsTests,org.eclipse.swt.graphics.Pattern,org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkText()</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.2.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.displayImage()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.6.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.performTestcase(java.lang.Runnable,java.lang.Runnable[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopRightIntersectionInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopRightIntersection()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testSingleLetter()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.assertLineBreakNotFound(boolean)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.assertLookaheadMatchesString(int[],java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testMoveEverything()">
        <node>org.eclipse.draw2d.AncestorHelper.fireAncestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.LocalCoordinates.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.ancestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AncestorHelper.figureMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.TestPolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.next()</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.fireAnchorMoved()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.PolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
      </test>
      <test name="org.eclipse.draw2d.test.XYLayoutTest.testPreferredSize()">
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.XYLayout.calculatePreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.setPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.RectangleFigure.RectangleFigure()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.setPreferredSize(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.IFigure.NoInsets.NoInsets()</node>
        <node>org.eclipse.draw2d.AbstractLayout.getBorderPreferredSize(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.union(org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getSize()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getPreferredSize(int,int)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.Shape.Shape()</node>
        <node>org.eclipse.draw2d.AbstractLayout.getPreferredSize(org.eclipse.draw2d.IFigure,int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.XYLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasMoveObstacleNoIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(org.eclipse.draw2d.geometry.Point,int)</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.updateObstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.Path.isObstacleVisible(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNoPathsSolved()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.dirtyPathsOn(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalRemoveObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionBottom()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestSideIntersectionBottom()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendHit()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getDeformedRectangle(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestQuadBendMiss(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathRight(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getNearestVertex(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionCross()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopLeftIntersectionCross()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopLeftIntersectionCrossInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopLeftIntersectionCross()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ColorConstantTest.test_ColorConstantInit()">
        <node>org.eclipse.draw2d.DeferredUpdateManager.performUpdate()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.UpdateRequest.run()</node>
        <node>org.eclipse.draw2d.UpdateManager.isDisposed()</node>
      </test>
      <test name="org.eclipse.draw2d.test.PrecisionRectangleTest.testCrop()">
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setWidth(double)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseY()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.updateInts()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.getPreciseCopy()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseHeight()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseWidth()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.PrecisionRectangle()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.performScale(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.crop(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.PrecisionRectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setHeight(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setY(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setX(double)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeformedInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getDeformedRectangle(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathAbove(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestDeformed()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getNearestVertex(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContainerLeadingWord()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.assertLookaheadMatchesString(int[],java.lang.String)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasRemovePath()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNoPathsSolved()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.removePath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextFlowWrapTest.testNestedInlineFlows()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runHardWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest2(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterDescent()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.text.NestedLine.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.InlineFlowLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest(java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.NestedLine.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.setupLine(org.eclipse.draw2d.text.LineBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.text.NestedLine.NestedLine(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runGenericTests()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runSoftWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testRemoveConnection()">
        <node>org.eclipse.draw2d.PolylineConnection.getTargetAnchor()</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.AncestorHelper.figureMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.PolylineConnection.unhookTargetAnchor()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.PolylineConnection.removeNotify()</node>
        <node>org.eclipse.draw2d.Figure.removeAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.next()</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.moveAll()</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.internalGetEventDispatcher()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.EventListenerList.removeListener(java.lang.Class,java.lang.Object)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.getOwner()</node>
        <node>org.eclipse.draw2d.PolylineConnection.getSourceAnchor()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.Figure.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.AbstractRouter.remove(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.PolylineConnection.addNotify()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)</node>
        <node>org.eclipse.draw2d.AncestorHelper.dispose()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.addNotify()</node>
        <node>org.eclipse.draw2d.EventListenerList.addListener(java.lang.Class,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.AncestorHelper.fireAncestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.LocalCoordinates.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.Figure.removeFigureListener(org.eclipse.draw2d.FigureListener)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.ancestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.AncestorHelper.removeAncestors(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.PolylineConnection.hookTargetAnchor()</node>
        <node>org.eclipse.draw2d.Figure.removeNotify()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.removeAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.TestPolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.fireAnchorMoved()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.AncestorHelper.isEmpty()</node>
        <node>org.eclipse.draw2d.Figure.remove(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.PolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestors(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.PolylineConnection.unhookSourceAnchor()</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.removeAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.Figure.addFigureListener(org.eclipse.draw2d.FigureListener)</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.AncestorHelper.AncestorHelper(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.PolylineConnection.hookSourceAnchor()</node>
        <node>org.eclipse.draw2d.AncestorHelper.removeAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
      </test>
      <test name="org.eclipse.draw2d.test.RectangleTest.test_sameBehavior()">
        <node>org.eclipse.draw2d.geometry.Rectangle.setLocation(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testQuadBendMiss()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestQuadBendMiss(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPathRight(org.eclipse.draw2d.geometry.PointList,org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionTop()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestSideIntersectionTop()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testTopRightIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestTopRightIntersection()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertRight(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextualTests.testGetFirstAndLastOffsetForLine()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getContinueOnSameLine()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFragmentsWithoutBorder()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getLastOffsetForLine(int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFirstOffsetForLine(int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.PrecisionPointTest.testEquals()">
        <node>org.eclipse.draw2d.geometry.Point.Point()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.PrecisionPoint(double,double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.updateInts()</node>
      </test>
      <test name="org.eclipse.draw2d.test.AdvancedGraphicsTests.testFillRules()">
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.assertImageEquality(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1.paintControl(org.eclipse.swt.events.PaintEvent)</node>
        <node>org.eclipse.draw2d.SWTGraphics.fillPolygon(int[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFillRule(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAntialias(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translatePointArray(int[],int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.2.run()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1FillRules.FillRules(org.eclipse.draw2d.test.AdvancedGraphicsTests,int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1FillRules.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.4.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.displayImage()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.performTestcase(java.lang.Runnable,java.lang.Runnable[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkFill()</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
      </test>
      <test name="org.eclipse.draw2d.test.FigureUtilitiesTest.test_findCommonAncestor_bugzilla130042()">
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.findCommonAncestor(org.eclipse.draw2d.IFigure,org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ImageUtilitiesTest.testImageRotation()">
        <node>org.eclipse.draw2d.ImageUtilities.rotateOptimized(org.eclipse.swt.graphics.ImageData)</node>
        <node>org.eclipse.draw2d.ImageUtilities.createRotatedImage(org.eclipse.swt.graphics.Image)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBottomLeftIntersectionCrossInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestBottomLeftIntersection()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertLeft(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.RectangleTest.test_creationValues()">
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testRetargetTargetAnchor()">
        <node>org.eclipse.draw2d.PolylineConnection.getTargetAnchor()</node>
        <node>org.eclipse.draw2d.EventListenerList.addListener(java.lang.Class,java.lang.Object)</node>
        <node>org.eclipse.draw2d.XYAnchor.XYAnchor(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.LocalCoordinates.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.Figure.removeFigureListener(org.eclipse.draw2d.FigureListener)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.AncestorHelper.removeAncestors(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.PolylineConnection.unhookTargetAnchor()</node>
        <node>org.eclipse.draw2d.PolylineConnection.hookTargetAnchor()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.removeAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.removeAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.EventListenerList.removeListener(java.lang.Class,java.lang.Object)</node>
        <node>org.eclipse.draw2d.PolylineConnection.setTargetAnchor(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.getOwner()</node>
        <node>org.eclipse.draw2d.AncestorHelper.isEmpty()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.Figure.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestors(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.removeAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.Figure.addFigureListener(org.eclipse.draw2d.FigureListener)</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.AncestorHelper.AncestorHelper(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)</node>
        <node>org.eclipse.draw2d.AncestorHelper.dispose()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.AncestorHelper.removeAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
      </test>
      <test name="org.eclipse.draw2d.test.RelativeBendpointTest.test237802()">
        <node>org.eclipse.draw2d.PolylineConnection.getTargetAnchor()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.PolylineConnection.unhookTargetAnchor()</node>
        <node>org.eclipse.draw2d.PolylineConnection.setSourceAnchor(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.expand(int,int)</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.RelativeBendpoint(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.PolylineConnection.setConnectionRouter(org.eclipse.draw2d.ConnectionRouter)</node>
        <node>org.eclipse.draw2d.FreeformHelper.hookChild(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(int,int)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.AbstractConnectionAnchor(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.getOwner()</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.setConnection(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getSourceAnchor()</node>
        <node>org.eclipse.draw2d.Figure.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getBounds()</node>
        <node>org.eclipse.draw2d.RectangleFigure.RectangleFigure()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Polyline.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.EventListenerList.addListener(java.lang.Class,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.LayeredPane.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.PrecisionPoint(double,double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.preciseX()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.shrink(int,int)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Shape.setFill(boolean)</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.getConnection()</node>
        <node>org.eclipse.draw2d.Figure.translateToAbsolute(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setLocation(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.translateFromParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.PolylineConnection.setTargetAnchor(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.Polyline.getBounds()</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestors(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.getLocation()</node>
        <node>org.eclipse.draw2d.Shape.Shape()</node>
        <node>org.eclipse.draw2d.PolylineConnection.unhookSourceAnchor()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.Figure.addFigureListener(org.eclipse.draw2d.FigureListener)</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.AncestorHelper.AncestorHelper(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FreeformLayeredPane.fireExtentChanged()</node>
        <node>org.eclipse.draw2d.XYLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.setWeight(float)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.preciseY()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.PrecisionPoint()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.test.RelativeBendpointTest.FixedAnchor.getReferencePoint()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getExpanded(int,int)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.setOwner(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.PrecisionPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point()</node>
        <node>org.eclipse.draw2d.test.RelativeBendpointTest.FixedAnchor.FixedAnchor(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.isShowing()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.preciseHeight()</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)</node>
        <node>org.eclipse.draw2d.AbstractRouter.remove(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.FreeformHelper.invalidate()</node>
        <node>org.eclipse.draw2d.PolylineConnection.addNotify()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.queueWork()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.union(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.AbstractHintLayout.invalidate()</node>
        <node>org.eclipse.draw2d.BendpointConnectionRouter.setConstraint(org.eclipse.draw2d.Connection,java.lang.Object)</node>
        <node>org.eclipse.draw2d.Figure.addNotify()</node>
        <node>org.eclipse.draw2d.ConnectionRouter.NullConnectionRouter.NullConnectionRouter()</node>
        <node>org.eclipse.draw2d.FreeformLayeredPane.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.addAnchorListener(org.eclipse.draw2d.AnchorListener)</node>
        <node>org.eclipse.draw2d.test.RelativeBendpointTest.FixedAnchor.getLocation(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.RelativeBendpointTest.ConnectionFigure.ConnectionFigure()</node>
        <node>org.eclipse.draw2d.PolylineConnection.setRoutingConstraint(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.updateInts()</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.AbstractLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.PolylineConnection.hookTargetAnchor()</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.translateToRelative(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.PolylineConnection.getConnectionRouter()</node>
        <node>org.eclipse.draw2d.LightweightSystem.RootFigure.isShowing()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.LightweightSystem.getUpdateManager()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getBounds()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.Figure.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.RelativeBendpoint.setRelativeDimensions(org.eclipse.draw2d.geometry.Dimension,org.eclipse.draw2d.geometry.Dimension)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.AncestorHelper.addAncestorListener(org.eclipse.draw2d.AncestorListener)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.preciseWidth()</node>
        <node>org.eclipse.draw2d.test.RelativeBendpointTest.NodeFigure.NodeFigure()</node>
        <node>org.eclipse.draw2d.Polyline.getPoints()</node>
        <node>org.eclipse.draw2d.PolylineConnection.hookSourceAnchor()</node>
      </test>
      <test name="org.eclipse.draw2d.test.PrecisionRectangleTest.testCrop2()">
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setWidth(double)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.geometry.Insets.Insets(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseY()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.updateInts()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.getPreciseCopy()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseHeight()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.preciseWidth()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.PrecisionRectangle()</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.performScale(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.crop(org.eclipse.draw2d.geometry.Insets)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.PrecisionRectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setHeight(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setY(double)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionRectangle.setX(double)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionTopInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestSideIntersectionTop()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testSingleSpace()">
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testSideIntersectionBottomInverted()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointBelow(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doTestSideIntersectionBottom()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.toString()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testDeltasAddObstacleIntersection()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(org.eclipse.draw2d.geometry.Point,int)</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.updateOffset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBlockedPath()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.addAllSegmentsBetween(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetAboveSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Path.addConnectingSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,boolean,boolean)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testBendpoints()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.graph.Path.setBendPoints(org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.regenerateChildPaths(org.eclipse.draw2d.graph.Path,java.util.List,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addAll(org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getLastPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Path.setStartPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.removePoint(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.setEndPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList(int[])</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.Path.getEndPoint()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadFromNested()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.InlineFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
      </test>
      <test name="org.eclipse.draw2d.test.ImageUtilitiesTest.testRotatingImagesWithDifferentDepths()">
        <node>org.eclipse.draw2d.ImageUtilities.rotateOptimized(org.eclipse.swt.graphics.ImageData)</node>
        <node>org.eclipse.draw2d.ImageUtilities.rotatePixelByPixel(org.eclipse.swt.graphics.ImageData)</node>
        <node>org.eclipse.draw2d.ImageUtilities.createRotatedImage(org.eclipse.swt.graphics.Image)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AdvancedGraphicsTests.testLineJoinCapAA()">
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.testLineJoinCap()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.assertImageEquality(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1.paintControl(org.eclipse.swt.events.PaintEvent)</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.5.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAntialias(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1LineSettings.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translatePointArray(int[],int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPolyline(int[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.2.run()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1LineSettings.LineSettings(org.eclipse.draw2d.test.AdvancedGraphicsTests,int,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineJoin(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineStyle(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.displayImage()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineCap(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.performTestcase(java.lang.Runnable,java.lang.Runnable[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextFlowWrapTest.testTruncatedWrapping()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest2(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getEllipsisWidth(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest(java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runGenericTests()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runTruncatedWrappingTests()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.TextFlowWrapTest.testSoftWrapping()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.add(org.eclipse.draw2d.text.FlowFigure,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.text.FlowPage.getPageWidth()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.Figure.getInsets()</node>
        <node>org.eclipse.draw2d.Figure.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.setRecommendedWidth(int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.text.LineBox.isOccupied()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.BlockFlowLayout(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.createBlockBox()</node>
        <node>org.eclipse.draw2d.text.LineRoot.layoutNestedLines(java.util.List)</node>
        <node>org.eclipse.draw2d.text.CompositeBox.getRecommendedWidth()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.push()</node>
        <node>org.eclipse.draw2d.Figure.repaint(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getLeftMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setupBlock()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
        <node>org.eclipse.draw2d.Figure.repaint(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.FlowContainerLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.layout()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.getWidth()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.FlowFigureLayout(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.TextLayout.TextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.createNewLine()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayout()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addBelowPreviousLine(org.eclipse.draw2d.text.CompositeBox)</node>
        <node>org.eclipse.draw2d.text.LineRoot.commit()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.PageFlowLayout(org.eclipse.draw2d.text.FlowPage)</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
        <node>org.eclipse.draw2d.Figure.validate()</node>
        <node>org.eclipse.draw2d.Figure.isVisible()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.setupFragment(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font,java.lang.String)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.blockContentsChanged()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterDescent()</node>
        <node>org.eclipse.draw2d.Figure.setLayoutManager(org.eclipse.draw2d.LayoutManager)</node>
        <node>org.eclipse.draw2d.Figure.getBorder()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.setOrientation(int)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.FlowFigure.add(org.eclipse.draw2d.IFigure,java.lang.Object,int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.LineRoot(boolean)</node>
        <node>org.eclipse.draw2d.text.ContentBox.getLineRoot()</node>
        <node>org.eclipse.draw2d.text.PageFlowLayout.getContextWidth()</node>
        <node>org.eclipse.draw2d.Figure.repaint()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.validate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.BlockFlow()</node>
        <node>org.eclipse.draw2d.Figure.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.Figure.isMirrored()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest2(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.findFirstDelimeter(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.preLayout()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setConstraint(org.eclipse.draw2d.IFigure,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.LineRoot.setLineTop(int)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getFlowUtilities()</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleBottom()</node>
        <node>org.eclipse.draw2d.text.FlowPage.postValidate()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getHeight()</node>
        <node>org.eclipse.draw2d.Figure.erase()</node>
        <node>org.eclipse.draw2d.Figure.setParent(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getWidth()</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.wrapFragmentInContext(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.draw2d.text.FlowContext,org.eclipse.draw2d.text.FlowUtilities.LookAhead,org.eclipse.swt.graphics.Font,int)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.isCurrentLineOccupied()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.setTruncated(boolean)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.isTruncated()</node>
        <node>org.eclipse.draw2d.Figure.getBounds()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderDescentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBidiLevel()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.ContentBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.LineRoot.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.LineBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.FlowBox.setWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.BidiEntry.BidiEntry(org.eclipse.draw2d.text.FlowFigure,int,int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.BlockBox(org.eclipse.draw2d.text.BlockFlow)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.validate()</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getContext()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getCurrentLine()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.addToCurrentLine(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getRightMargin()</node>
        <node>org.eclipse.draw2d.text.LineBox.requiresBidi()</node>
        <node>org.eclipse.draw2d.text.InlineFlow.getFragments()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.setIndex(int)</node>
        <node>org.eclipse.draw2d.text.LineRoot.contiguousCommit(org.eclipse.draw2d.text.FlowBox,int)</node>
        <node>org.eclipse.draw2d.Figure.translateToParent(org.eclipse.draw2d.geometry.Translatable)</node>
        <node>org.eclipse.draw2d.text.FlowPage.invalidate()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setBounds(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getHorizontalAligment()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.addCurrentLine()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.setContinueOnSameLine(boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getAscent()</node>
        <node>org.eclipse.draw2d.Figure.fireCoordinateSystemChanged()</node>
        <node>org.eclipse.draw2d.text.FlowFigure.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.text.LineRoot.bidiCommit()</node>
        <node>org.eclipse.draw2d.text.TextFlow.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setLineRoot(org.eclipse.draw2d.text.LineRoot)</node>
        <node>org.eclipse.draw2d.Figure.getFlag(int)</node>
        <node>org.eclipse.draw2d.text.BlockBox.add(org.eclipse.draw2d.text.FlowBox)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.flush()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.postValidate()</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getOuterAscent()</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.FlowFigure()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode(org.eclipse.draw2d.text.LineRoot.BidiLevelNode,int)</node>
        <node>org.eclipse.draw2d.Figure.isValid()</node>
        <node>org.eclipse.draw2d.text.LineRoot.buildBidiTree(org.eclipse.draw2d.text.FlowBox,org.eclipse.draw2d.text.LineRoot.BidiLevelNode,java.util.List)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endLine()</node>
        <node>org.eclipse.draw2d.text.LineBox.getFragments()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getFontMetrics(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.emit(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.setSize(int,int)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAscent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.SegmentLookahead.SegmentLookahead(org.eclipse.draw2d.text.ParagraphTextLayout,java.lang.String[],int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.measureString(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,int,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.isCoordinateSystem()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.setFlowContext(org.eclipse.draw2d.text.FlowContext)</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.doTest(java.lang.String,java.lang.String,java.lang.String[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setText(java.lang.String)</node>
        <node>org.eclipse.draw2d.text.TextFlow.TextFlow()</node>
        <node>org.eclipse.draw2d.text.ContentBox.getBaseline()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.performTranslate(int,int)</node>
        <node>org.eclipse.draw2d.TextUtilities.getDescent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.1.addDirtyRegion(org.eclipse.draw2d.IFigure,int,int,int,int)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.initBidi(org.eclipse.draw2d.text.TextFragmentBox,java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layout()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.Figure.add(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getBaseline()</node>
        <node>org.eclipse.draw2d.text.LineRoot.BidiLevelNode.BidiLevelNode()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getDescent()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.layout()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.text.TextLayout.getFragment(int,java.util.List)</node>
        <node>org.eclipse.draw2d.Figure.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidate()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.forceChildInvalidation(org.eclipse.draw2d.Figure)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getTextLayoutBounds(java.lang.String,org.eclipse.swt.graphics.Font,int,int)</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.getSegments(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.setBidiInfo(org.eclipse.draw2d.text.BidiInfo)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.text.FlowFigure.revalidateBidi(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.text.FlowBox.setX(int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getBottomMargin()</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getOrientation()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.text.LineBox.getTopMargin()</node>
        <node>org.eclipse.draw2d.TextUtilities.getAscent(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getAverageCharWidth(org.eclipse.draw2d.text.TextFragmentBox,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.TextFragmentBox(org.eclipse.draw2d.text.TextFlow)</node>
        <node>org.eclipse.draw2d.text.FlowBox.getX()</node>
        <node>org.eclipse.draw2d.geometry.Insets.getWidth()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getAscent()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.getBorderAscentWithMargin(org.eclipse.draw2d.text.InlineFlow)</node>
        <node>org.eclipse.draw2d.text.TextFragmentBox.getDescent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.endBlock()</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.assignResults(int[])</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.text.BlockBox.toRectangle()</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.layout(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.text.BlockFlow.getBlockBox()</node>
        <node>org.eclipse.draw2d.text.ContentBox.setBidiLevel(int)</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getBlockFlow()</node>
        <node>org.eclipse.draw2d.text.FlowUtilities.canBreakAfter(char)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getBidiInfo()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runGenericTests()</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.layoutChildren()</node>
        <node>org.eclipse.draw2d.text.ParagraphTextLayout.ParagraphTextLayout(org.eclipse.draw2d.text.TextFlow,int)</node>
        <node>org.eclipse.draw2d.text.LineBox.getAvailableWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.setPageWidth(int)</node>
        <node>org.eclipse.draw2d.text.BidiProcessor.process()</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.LineRoot.getVisibleTop()</node>
        <node>org.eclipse.draw2d.test.TextFlowWrapTest.runSoftWrappingTests()</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.cleanup()</node>
        <node>org.eclipse.draw2d.text.FlowContainerLayout.getRemainingLineWidth()</node>
        <node>org.eclipse.draw2d.text.FlowPage.createDefaultFlowLayout()</node>
        <node>org.eclipse.draw2d.text.TextFlow.contributeBidi(org.eclipse.draw2d.text.BidiProcessor)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testMoveSource()">
        <node>org.eclipse.draw2d.AncestorHelper.fireAncestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.ancestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AncestorHelper.figureMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.TestPolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.next()</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.fireAnchorMoved()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.PolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AdvancedGraphicsTests.testAntialias()">
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.assertImageEquality(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.performUpdate()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1.paintControl(org.eclipse.swt.events.PaintEvent)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.3.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.restoreState(org.eclipse.draw2d.SWTGraphics.State)</node>
        <node>org.eclipse.draw2d.DeferredUpdateManager.UpdateRequest.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAntialias(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.pushState()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translatePointArray(int[],int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setLineWidth(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPolyline(int[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawString(java.lang.String,int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAffineMatrix(float[])</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getCopy()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setAlpha(int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1AntialiasSettings.AntialiasSettings(org.eclipse.draw2d.test.AdvancedGraphicsTests,int,int,org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkText()</node>
        <node>org.eclipse.draw2d.SWTGraphics.State.clone()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.2.run()</node>
        <node>org.eclipse.draw2d.SWTGraphics.setTextAntialias(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setBackgroundPattern(org.eclipse.swt.graphics.Pattern)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setGraphicHints(int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setForegroundColor(org.eclipse.swt.graphics.Color)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.1AntialiasSettings.run()</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.displayImage()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(float,float,float,float)</node>
        <node>org.eclipse.draw2d.test.AdvancedGraphicsTests.performTestcase(java.lang.Runnable,java.lang.Runnable[])</node>
        <node>org.eclipse.draw2d.UpdateManager.isDisposed()</node>
        <node>org.eclipse.draw2d.SWTGraphics.popState()</node>
      </test>
      <test name="org.eclipse.draw2d.test.LookAheadTest.testContextLookaheadPastEmptyString()">
        <node>org.eclipse.draw2d.TextUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.Figure.getChildren()</node>
        <node>org.eclipse.draw2d.text.BlockFlowLayout.getWidthLookahead(org.eclipse.draw2d.text.FlowFigure,int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.setFont(org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getContext(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.text.InlineFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.getText()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getGC()</node>
        <node>org.eclipse.draw2d.geometry.Dimension.Dimension(org.eclipse.swt.graphics.Point)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getFollow(org.eclipse.draw2d.text.FlowFigure)</node>
        <node>org.eclipse.draw2d.Figure.getFont()</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringExtents(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.FlowFigureLayout.getFlowFigure()</node>
        <node>org.eclipse.draw2d.test.LookAheadTest.getWidth(java.lang.String)</node>
        <node>org.eclipse.draw2d.Figure.getLayoutManager()</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordWidth(java.lang.String,int[])</node>
        <node>org.eclipse.draw2d.text.TextFlow.addLeadingWordRequirements(int[])</node>
        <node>org.eclipse.draw2d.FigureUtilities.getStringDimension(java.lang.String,org.eclipse.swt.graphics.Font)</node>
        <node>org.eclipse.draw2d.text.TextFlow.getTextUtilities()</node>
      </test>
      <test name="org.eclipse.draw2d.test.PointListTests.testIntersects()">
        <node>org.eclipse.draw2d.geometry.Point.Point()</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.PrecisionPoint(double,double)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.geometry.PointList.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.PrecisionPoint.updateInts()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removePoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.isEmpty()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
      </test>
      <test name="org.eclipse.draw2d.test.AnchorNotificationTest.testMoveTarget()">
        <node>org.eclipse.draw2d.AncestorHelper.fireAncestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AbstractConnectionAnchor.ancestorMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.AncestorHelper.figureMoved(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.Figure.getUpdateManager()</node>
        <node>org.eclipse.draw2d.Figure.translate(int,int)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.TypeIterator(java.lang.Object[],java.lang.Class)</node>
        <node>org.eclipse.draw2d.Figure.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.invalidate()</node>
        <node>org.eclipse.draw2d.EventListenerList.getListeners(java.lang.Class)</node>
        <node>org.eclipse.draw2d.test.AnchorNotificationTest.TestPolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.1.addInvalidFigure(org.eclipse.draw2d.IFigure)</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.next()</node>
        <node>org.eclipse.draw2d.AbstractRouter.invalidate(org.eclipse.draw2d.Connection)</node>
        <node>org.eclipse.draw2d.EventListenerList.containsListener(java.lang.Class)</node>
        <node>org.eclipse.draw2d.ConnectionAnchorBase.fireAnchorMoved()</node>
        <node>org.eclipse.draw2d.Figure.useLocalCoordinates()</node>
        <node>org.eclipse.draw2d.EventListenerList.TypeIterator.hasNext()</node>
        <node>org.eclipse.draw2d.Figure.setFlag(int,boolean)</node>
        <node>org.eclipse.draw2d.PolylineConnection.anchorMoved(org.eclipse.draw2d.ConnectionAnchor)</node>
        <node>org.eclipse.draw2d.Figure.getParent()</node>
        <node>org.eclipse.draw2d.PolylineConnection.revalidate()</node>
        <node>org.eclipse.draw2d.Figure.primTranslate(int,int)</node>
        <node>org.eclipse.draw2d.AbstractLayout.invalidate()</node>
        <node>org.eclipse.draw2d.Figure.fireFigureMoved()</node>
        <node>org.eclipse.draw2d.Figure.isValidationRoot()</node>
        <node>org.eclipse.draw2d.Figure.setValid(boolean)</node>
      </test>
      <test name="org.eclipse.draw2d.test.ShortestPathRoutingTest.testSubpath()">
        <node>org.eclipse.draw2d.graph.Obstacle.reset()</node>
        <node>org.eclipse.draw2d.graph.Path.linkVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.testAndSet(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.fullReset()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.Path.cleanup()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Path.determineShortestPath()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addAll(org.eclipse.draw2d.geometry.PointList)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsFor(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.countVertices()</node>
        <node>org.eclipse.draw2d.geometry.PointList.getPoint(int)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.linesIntersect(int,int,int,int,int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.Vertex.addPath(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.productSign(long,long)</node>
        <node>org.eclipse.draw2d.geometry.Geometry.cross(long,long,long,long)</node>
        <node>org.eclipse.draw2d.geometry.Point.getPreciseDistance2(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.hashCode()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.getStartPoint()</node>
        <node>org.eclipse.draw2d.graph.Vertex.bend(int)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertPointAbove(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Path.reconnectSubPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseY()</node>
        <node>org.eclipse.draw2d.graph.Path.getSubPath(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.labelGraph()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solve()</node>
        <node>org.eclipse.draw2d.graph.Segment.intersects(int,int,int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.cleanup()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.shrinkVertices()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.refreshChildrenEndpoints(org.eclipse.draw2d.graph.Path,java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getPosition(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.PointList.ensureCapacity(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addObstacle(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstaclesPass()</node>
        <node>org.eclipse.draw2d.graph.Segment.Segment(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Vertex.grow()</node>
        <node>org.eclipse.draw2d.graph.Vertex.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Segment.getLength()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.addPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.containsProper(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.getDistance(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Point.preciseX()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.orderPath(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(int,int,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.geometry.PointList.size()</node>
        <node>org.eclipse.draw2d.graph.Path.invertPriorVertices(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.getSpacing()</node>
        <node>org.eclipse.draw2d.geometry.Point.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexForIntersections(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetObstacleExclusions()</node>
        <node>org.eclipse.draw2d.graph.Path.fullReset()</node>
        <node>org.eclipse.draw2d.geometry.PointList.removeAllPoints()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.contains(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testOffsetSegmentForIntersections(org.eclipse.draw2d.graph.Segment,int,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.intersects(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Path.resetPartial()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.growObstacles()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.checkVertexIntersections()</node>
        <node>org.eclipse.draw2d.geometry.Point.Point(int,int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineSubpaths()</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.graph.Vertex.shrink()</node>
        <node>org.eclipse.draw2d.graph.Segment.getSlope()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.solveDirtyPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.addSegment(org.eclipse.draw2d.graph.Segment,org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle,java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.removePoint(int)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelVertex(org.eclipse.draw2d.graph.Segment,long,org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.testAndDirtyPaths(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.Obstacle(org.eclipse.draw2d.geometry.Rectangle,org.eclipse.draw2d.graph.ShortestPathRouter)</node>
        <node>org.eclipse.draw2d.graph.Path.addSegmentsTargetBesideSource(org.eclipse.draw2d.graph.Obstacle,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSpacing()</node>
        <node>org.eclipse.draw2d.graph.Path.addPerimiterSegments(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.labelPaths()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCenter()</node>
        <node>org.eclipse.draw2d.graph.Path.createVisibilityGraph(java.util.List)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.getSubpathForSplit(org.eclipse.draw2d.graph.Path,org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Vertex.Vertex(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.bendPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.refreshExcludedObstacles(java.util.List)</node>
        <node>org.eclipse.draw2d.geometry.PointList.PointList()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.init(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Point.hashCode()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.internalAddObstacle(org.eclipse.draw2d.graph.Obstacle)</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.push(java.lang.Object)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.push(org.eclipse.draw2d.graph.Path)</node>
        <node>org.eclipse.draw2d.geometry.Point.toString()</node>
        <node>org.eclipse.draw2d.geometry.PointList.addPoint(org.eclipse.draw2d.geometry.Point)</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertex(org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.Path(org.eclipse.draw2d.graph.Vertex,org.eclipse.draw2d.graph.Vertex)</node>
        <node>org.eclipse.draw2d.graph.Path.generateShortestPath(java.util.List)</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doSetUp(org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Point,org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.getCopy()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.PathStack.pop()</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.resetVertices()</node>
        <node>org.eclipse.draw2d.graph.Path.getBendPoints()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.pop()</node>
        <node>org.eclipse.draw2d.graph.Segment.crossProduct(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.Path.getPoints()</node>
        <node>org.eclipse.draw2d.graph.Obstacle.growVertices()</node>
        <node>org.eclipse.draw2d.test.ShortestPathRoutingTest.doAssertNumPoints(org.eclipse.draw2d.geometry.PointList,int)</node>
        <node>org.eclipse.draw2d.graph.Segment.cosine(org.eclipse.draw2d.graph.Segment)</node>
        <node>org.eclipse.draw2d.graph.ShortestPathRouter.recombineChildrenPaths()</node>
        <node>org.eclipse.draw2d.graph.Path.SegmentStack.popObstacle()</node>
      </test>
      <test name="org.eclipse.draw2d.test.GraphicsClipping.testZoomedClip()">
        <node>org.eclipse.draw2d.SWTGraphics.scale(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.initTransform(boolean)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.translate(float,float)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkPaint()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.scale(float,float)</node>
        <node>org.eclipse.draw2d.test.GraphicsClipping.graphicsClip()</node>
        <node>org.eclipse.draw2d.SWTGraphics.reconcileHints(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.Rectangle(int,int,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.equals(java.lang.Object)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkGC()</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.setOn(org.eclipse.swt.graphics.GC,int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.translate(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.drawPoint(int,int)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.bottom()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.scale(double,double)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.RectangleClipping(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.right()</node>
        <node>org.eclipse.draw2d.geometry.Rectangle.scale(double)</node>
        <node>org.eclipse.draw2d.SWTGraphics.setClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.checkSharedClipping()</node>
        <node>org.eclipse.draw2d.SWTGraphics.translate(int,int)</node>
        <node>org.eclipse.draw2d.SWTGraphics.scale(double)</node>
        <node>org.eclipse.draw2d.SWTGraphics.getClip(org.eclipse.draw2d.geometry.Rectangle)</node>
        <node>org.eclipse.draw2d.SWTGraphics.RectangleClipping.getBoundingBox(org.eclipse.draw2d.geometry.Rectangle)</node>
      </test>
    </callings>
  </original-execution>
</smf>
