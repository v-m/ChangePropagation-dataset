<?xml version="1.0" encoding="UTF-8"?>
<!--
This is an execution file generated with SMF.
-->
<smf>
  <config skip-mvn-cp="false">
    <global>
      <classpath />
      <state>FRESH</state>
    </global>
    <source>
      <bytecode>bytecode/source</bytecode>
      <include>
        <path>src/main/java</path>
      </include>
    </source>
    <tests>
      <bytecode>bytecode/tests</bytecode>
      <include>
        <path>src/test/java</path>
      </include>
      <ressources />
    </tests>
    <mutation basedir="mutations/{id}/{op}">
      <source>source</source>
      <bytecode>bytecode</bytecode>
      <executions>exec</executions>
    </mutation>
  </config>
  <tests>
    <classes>
      <class>com.gadberry.utility.expression.symbol.EqualSymbolTest</class>
      <class>com.gadberry.utility.expression.function.FloorFunctionTest</class>
      <class>com.gadberry.utility.expression.symbol.SymbolTest</class>
      <class>com.gadberry.utility.expression.function.SubstrFunctionTest</class>
      <class>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTest</class>
      <class>com.gadberry.utility.expression.OperatorImplTest</class>
      <class>com.gadberry.utility.expression.function.CeilFunctionTest</class>
      <class>com.gadberry.utility.ExpressionLibraryTest</class>
      <class>com.gadberry.utility.expression.function.MaxFunctionTest</class>
      <class>com.gadberry.utility.expression.symbol.MultiplicationSymbolTest</class>
      <class>com.gadberry.utility.expression.function.MinFunctionTest</class>
      <class>com.gadberry.utility.expression.ArgumentTest</class>
      <class>com.gadberry.utility.expression.ExpressionTest</class>
      <class>com.gadberry.utility.expression.symbol.AdditionSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.GreaterThanSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.AndSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.DivisionSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.LessThanSymbolTest</class>
      <class>com.gadberry.utility.expression.function.NegFunctionTest</class>
      <class>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTest</class>
      <class>com.gadberry.utility.expression.function.FunctionTest</class>
      <class>com.gadberry.utility.expression.OperatorSetTest</class>
      <class>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTest</class>
      <class>com.gadberry.utility.expression.function.DateDifferenceFunctionTest</class>
      <class>com.gadberry.utility.CalendarUtilsTest</class>
      <class>com.gadberry.utility.expression.function.AbsFunctionTest</class>
      <class>com.gadberry.utility.expression.function.NotFunctionTest</class>
      <class>com.gadberry.utility.expression.function.SinFunctionTest</class>
      <class>com.gadberry.utility.expression.function.TanFunctionTest</class>
      <class>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTest</class>
      <class>com.gadberry.utility.expression.function.AsinFunctionTest</class>
      <class>com.gadberry.utility.expression.symbol.ModuloSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.OrSymbolTest</class>
      <class>com.gadberry.utility.expression.symbol.SubtractionSymbolTest</class>
      <class>com.gadberry.utility.expression.function.AcosFunctionTest</class>
      <class>com.gadberry.utility.expression.function.AtanFunctionTest</class>
      <class>com.gadberry.utility.expression.function.CosFunctionTest</class>
    </classes>
    <cases>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate1()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.OperatorSetTests.testAddOperator()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString3()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testToString()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testEvaluateNonExpression()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testExactDifferenceMinute1()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testExactDifferenceSecond2()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble4()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs6()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceDay2()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testConstructor1()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testResolve6()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate2()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testPriorities()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testGetOperatorSet()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve6()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.ExpressionLibraryTests.testOperators()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testTieredDifferenceSome1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testExactDifferenceSecond1()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble5()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString3()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testConstructor2()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate1()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate3()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testSetOperatorSet()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate2()</case>
      <case>com.gadberry.utility.expression.OperatorImplTests.testSetArguments()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.FunctionTests.testParseArgs()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testResolve5()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMillisecond2()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testResolve6()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate2()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs8()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.SymbolTests.testParseArgs()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString3()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testEvaluateInvalidExpression()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testLiterals()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate3()</case>
      <case>com.gadberry.utility.expression.function.NegFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testToBoolean()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMinute2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testExactDifferenceMinute2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString3()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs7()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate3()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.FunctionTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve6()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate3()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth1()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMinute1()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceSecond2()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString3()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.OperatorSetTests.testFindOperator()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve6()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testToInteger()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate2()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.AbsFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.OperatorImplTests.testGetArguments()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testResolve4()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceSecond1()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testIsDouble()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs9()</case>
      <case>com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMillisecond1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate3()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testTieredDifferenceAll1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs6()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate1()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceYear1()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveString1()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve5()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testStaticEvaluate()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceHour2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.OperatorImplTests.testGetArgument()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testEquals()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth3()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testGetResolver()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testParenthesees()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble1()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveString2()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testEvaluate()</case>
      <case>com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve4()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testAdd()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testSetResolver()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceYear2()</case>
      <case>com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testConstructor()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.ArgumentTests.testToDouble()</case>
      <case>com.gadberry.utility.expression.OperatorSetTests.testGetSymbols()</case>
      <case>com.gadberry.utility.expression.function.AtanFunctionTests.testResolve3()</case>
      <case>com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve4()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs5()</case>
      <case>com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceHour1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth2()</case>
      <case>com.gadberry.utility.expression.function.FloorFunctionTests.testResolve2()</case>
      <case>com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs1()</case>
      <case>com.gadberry.utility.expression.symbol.EqualSymbolTests.testGetPriority()</case>
      <case>com.gadberry.utility.expression.ExpressionTests.testEvaluateExpressionWithInvalidArguments()</case>
      <case>com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs3()</case>
      <case>com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.CalendarUtilsTests.testDifferenceDay1()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble2()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs2()</case>
      <case>com.gadberry.utility.expression.function.MinFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.function.AcosFunctionTests.testResolve1()</case>
      <case>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs4()</case>
      <case>com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble3()</case>
      <case>com.gadberry.utility.expression.function.CeilFunctionTests.testResolve1()</case>
    </cases>
  </tests>
  <original-execution time="-1">
    <failing />
    <ignored />
    <hanging />
    <callings>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.DegreesToRadiansFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorSetTests.testAddOperator()">
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.addOperator(java.lang.String,java.lang.Class)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testToString()">
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testEvaluateNonExpression()">
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NegFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testExactDifferenceMinute1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.exactDifference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testExactDifferenceSecond2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.exactDifference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs6()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AsinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceDay2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AcosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testConstructor1()">
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.SinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testResolve6()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testPriorities()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.OrSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.LessThanOrEqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.SubtractionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.GreaterThanOrEqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.TwoDoublesSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.TwoBooleansSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.MultiplicationSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.AndSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.TanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.AtanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testGetOperatorSet()">
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.OperatorSet.addOperator(java.lang.String,java.lang.Class)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve6()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.ExpressionLibraryTests.testOperators()">
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.OrSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.TanFunction.TanFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.function.AtanFunction.AtanFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.MinFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.SinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.TanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.DateDifferenceFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.TwoBooleansSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.DegreesToRadiansFunction.DegreesToRadiansFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.MultiplicationSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.NotFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.SimpleResolver.isDate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.AcosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.CeilFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.DivisionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.AndSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.SimpleResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.LessThanOrEqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.AbsFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.AcosFunction.AcosFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.SubstrFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.function.NegFunction.NegFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.SubtractionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.ModuloSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.FloorFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.GreaterThanOrEqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.DegreesToRadiansFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.OneDoubleFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.TwoDoublesSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.SimpleResolver.isDateUnit(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.CosFunction.CosFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AsinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AtanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.AsinFunction.AsinFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.SinFunction.SinFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.SimpleResolver.getDateUnit(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NegFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.CosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.SimpleResolver.getDate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.SimpleResolver.resolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testTieredDifferenceSome1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.tieredDifference(java.util.Calendar,java.util.Calendar,java.util.List)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AcosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AsinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testExactDifferenceSecond1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.exactDifference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.OrSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testConstructor2()">
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDate3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testSetOperatorSet()">
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.OperatorSet.addOperator(java.lang.String,java.lang.Class)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorImplTests.testSetArguments()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.MockOperator.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.RadiansToDegreesFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FunctionTests.testParseArgs()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NegFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMillisecond2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testResolve6()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AsinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs8()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testResolve1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.SinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.CosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testResolve2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AsinFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.AndSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SymbolTests.testParseArgs()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testEvaluateInvalidExpression()">
        <node>com.gadberry.utility.expression.InvalidExpressionException.InvalidExpressionException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testLiterals()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.SubstrFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NegFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NegFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testToBoolean()">
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.RadiansToDegreesFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMinute2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testExactDifferenceMinute2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.exactDifference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveString3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs7()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDate3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.CosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.SinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FunctionTests.testGetPriority()">
        <node>com.gadberry.utility.expression.Function.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve6()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMinute1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceSecond2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorSetTests.testFindOperator()">
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.CosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve6()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testToInteger()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDate2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.symbol.ModuloSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AbsFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.AbsFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorImplTests.testGetArguments()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.MockOperator.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceSecond1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testIsDouble()">
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs9()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CosFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMillisecond1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testResolveDate3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testTieredDifferenceAll1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.tieredDifference(java.util.Calendar,java.util.Calendar,java.util.List)</node>
        <node>com.gadberry.utility.CalendarUtils.tieredDifference(java.util.Calendar,java.util.Calendar)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DateDifferenceFunctionTests.testCheckArgs6()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.DateDifferenceFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDate1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.TanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.SubtractionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceYear1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveString1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.AtanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.function.NotFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testStaticEvaluate()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Function.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceHour2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorImplTests.testGetArgument()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getStandardOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorSet.addOperator(java.lang.String,java.lang.Class)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.MockOperator.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testEquals()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth3()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testGetResolver()">
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testParenthesees()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.MinFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.TwoDoublesSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.MultiplicationSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.DivisionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble1()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testResolveString2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testEvaluate()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Function.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AndSymbolTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.symbol.AndSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testAdd()">
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.OrSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MaxFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.DegreesToRadiansFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.DegreesToRadiansFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testSetResolver()">
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceYear2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.DivisionSymbolTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.DivisionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testConstructor()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.getPriority()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.AdditionSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Function.getPriority()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Symbol.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.AdditionSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanSymbolTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SinFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.ArgumentTests.testToDouble()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.MockResolver.canResolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.MockResolver.resolve(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.OperatorSetTests.testGetSymbols()">
        <node>com.gadberry.utility.expression.OperatorSet.addOperator(java.lang.String,java.lang.Class)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AtanFunctionTests.testResolve3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.AtanFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.MultiplicationSymbolTests.testResolve4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.symbol.MultiplicationSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.function.NotFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.OrSymbolTests.testCheckArgs5()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.symbol.TwoBooleansSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.RadiansToDegreesFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.SubtractionSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceHour1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.GreaterThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.symbol.GreaterThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.TanFunctionTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceMonth2()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.function.FloorFunctionTests.testResolve2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.FloorFunction.resolve()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.SubstrFunctionTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.SubstrFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.AdditionSymbolTests.testCheckArgs1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.EqualSymbolTests.testGetPriority()">
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.getPriority()</node>
      </test>
      <test name="com.gadberry.utility.expression.ExpressionTests.testEvaluateExpressionWithInvalidArguments()">
        <node>com.gadberry.utility.expression.Expression.evaluate(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Function.parseArgs(java.util.List,int)</node>
        <node>com.gadberry.utility.expression.Expression.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.MaxFunction.MaxFunction(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Function.tokenize(java.lang.String,char)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Function.Function(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.OperatorSet.createOperator(java.lang.Class,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Expression.getResolver()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.ModuloSymbolTests.testCheckArgs3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoDoublesSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.NotFunctionTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.function.NotFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isLiteral()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Expression.getDefaultOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorSet.findOperator(java.lang.String,com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.trim(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getOperatorSet()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorSet.getDelimeters()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.Expression.setResolver(com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.isBoolean()</node>
        <node>com.gadberry.utility.expression.Expression.evaluate()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Expression.Expression(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.tokenize(java.lang.String,java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.toInteger()</node>
        <node>com.gadberry.utility.expression.Argument.isInteger()</node>
        <node>com.gadberry.utility.expression.Expression.getPotentialOperators(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.getLowestPriorityOperator(java.util.List)</node>
        <node>com.gadberry.utility.expression.Expression.hasValidParenthesees(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Expression.setOperatorSet(com.gadberry.utility.expression.OperatorSet)</node>
        <node>com.gadberry.utility.expression.Expression.chooseDelimeter(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.CalendarUtilsTests.testDifferenceDay1()">
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Date,java.util.Date,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.difference(java.util.Calendar,java.util.Calendar,com.gadberry.utility.CalendarUtils.Unit)</node>
        <node>com.gadberry.utility.CalendarUtils.add(java.util.Calendar,int,long)</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanOrEqualSymbolTests.testResolveDouble2()">
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.LessThanSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.OperatorImpl(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getExpression()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.TwoArgumentsSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanOrEqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Symbol.Symbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.equals(java.lang.Object)</node>
        <node>com.gadberry.utility.expression.symbol.EqualSymbol.EqualSymbol(com.gadberry.utility.expression.Expression)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testCheckArgs2()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.MinFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArguments()</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.function.MinFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.function.MinFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.AcosFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.function.AcosFunction.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.GreaterThanOrEqualSymbolTests.testCheckArgs4()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.InvalidArgumentsException.InvalidArgumentsException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.symbol.LessThanSymbolTests.testResolveDouble3()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.Argument.toBoolean()</node>
        <node>com.gadberry.utility.expression.symbol.TwoArgumentsSymbol.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.symbol.LessThanSymbol.resolve()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
      <test name="com.gadberry.utility.expression.function.CeilFunctionTests.testResolve1()">
        <node>com.gadberry.utility.expression.ArgumentCastException.ArgumentCastException(java.lang.String)</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getResolver()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.getArgument(int)</node>
        <node>com.gadberry.utility.expression.Argument.isNull()</node>
        <node>com.gadberry.utility.expression.Argument.isDouble()</node>
        <node>com.gadberry.utility.expression.function.OneDoubleFunction.checkArgs(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toString()</node>
        <node>com.gadberry.utility.expression.ArgumentCastException.createMessage(java.lang.String,com.gadberry.utility.expression.Argument)</node>
        <node>com.gadberry.utility.expression.Argument.Argument(java.lang.Object,com.gadberry.utility.expression.Resolver)</node>
        <node>com.gadberry.utility.expression.Argument.stripLiteral(java.lang.String)</node>
        <node>com.gadberry.utility.expression.function.CeilFunction.resolve()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.setArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.toDate()</node>
        <node>com.gadberry.utility.expression.Argument.isDate()</node>
        <node>com.gadberry.utility.expression.Argument.getObject()</node>
        <node>com.gadberry.utility.expression.OperatorImpl.resolveArguments(java.util.List)</node>
        <node>com.gadberry.utility.expression.Argument.isResolved()</node>
        <node>com.gadberry.utility.expression.Argument.toDouble()</node>
      </test>
    </callings>
  </original-execution>
</smf>
