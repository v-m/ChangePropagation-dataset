<?xml version="1.0" encoding="UTF-8"?>
<!--
This is an execution file generated with SMF.
-->
<smf>
  <config skip-mvn-cp="false">
    <global>
      <classpath />
      <state>FRESH</state>
    </global>
    <source>
      <bytecode>bytecode/source</bytecode>
      <include>
        <path>src/main/java</path>
      </include>
    </source>
    <tests>
      <bytecode>bytecode/tests</bytecode>
      <include>
        <path>src/test/java</path>
      </include>
      <ressources />
    </tests>
    <mutation basedir="mutations/{id}/{op}">
      <source>source</source>
      <bytecode>bytecode</bytecode>
      <executions>exec</executions>
    </mutation>
  </config>
  <tests>
    <classes>
      <class>jester.tests.ConfigurationTes</class>
      <class>jester.tests.MainArgumentsTes</class>
      <class>jester.tests.SimpleIntCodeManglerTes</class>
      <class>jester.tests.IgnoreListDocumentTes</class>
      <class>jester.tests.IgnoreListTes</class>
      <class>jester.tests.XMLReportWriterTes</class>
      <class>jester.tests.TwoStringSwappingCodeManglerTes</class>
      <class>jester.tests.ClassTestTesterTes</class>
      <class>jester.tests.TestTesterTes</class>
      <class>jester.tests.ReportItemTes</class>
      <class>jester.tests.ReportTes</class>
      <class>jester.tests.MutationsListTes</class>
      <class>jester.tests.functionaltests.VeryTestedTes</class>
      <class>jester.tests.acceptancetests.VeryTestedTes</class>
    </classes>
    <cases>
      <case>jester.tests.MainArgumentsTest.testThatOneCanSpecifyOptionToNotShowProgressDialog()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testCouldntMangle()</case>
      <case>jester.tests.IgnoreListDocumentTest.testTextIsIgnored()</case>
      <case>jester.tests.ClassTestTesterTest.testThatMutationListIsUsed()</case>
      <case>jester.tests.TestTesterTest.testTestsMustStartOffWorking()</case>
      <case>jester.tests.IgnoreListTest.testReadingMultipleIgnoreBlankLines()</case>
      <case>jester.tests.ConfigurationTest.testDefaults()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testNotEqual()</case>
      <case>jester.tests.IgnoreListTest.testReadingEmptyIgnoreValues()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testConditionTrueBranch()</case>
      <case>jester.tests.MutationsListTest.testDefaults()</case>
      <case>jester.tests.ClassTestTesterTest.testThatOriginalContentsAreNotWrittenBackIfNoChanges()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testDoesntTryToChangeBadlyNamedMethodCalls()</case>
      <case>jester.tests.IgnoreListTest.testReadingIgnoreValues()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testInfiniteLoop()</case>
      <case>jester.tests.ReportItemTest.testXmlEncoding()</case>
      <case>jester.tests.IgnoreListDocumentTest.testCharAtReturnsSpaceInsideIgnoreRegion()</case>
      <case>jester.tests.ClassTestTesterTest.testThatChangeThatFailsTestsIsNotRecorded()</case>
      <case>jester.tests.MainArgumentsTest.testMandatoryArguments()</case>
      <case>jester.tests.ReportTest.testThatChangeThatDidNotCauseTestsToFailIsIncluded()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testBoolean()</case>
      <case>jester.tests.MutationsListTest.testReadMutationsIgnoreBogusLinesIncludingBlankOnes()</case>
      <case>jester.tests.IgnoreListTest.testReadingIgnoreValuesEndOfLineSpecialCase()</case>
      <case>jester.tests.ReportTest.testFileMustBeStarted()</case>
      <case>jester.tests.ReportTest.testTotalScoreForManyFiles()</case>
      <case>jester.tests.ReportItemTest.testLineNumberOneLine()</case>
      <case>jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearFirst()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testSimpleMangle()</case>
      <case>jester.tests.ReportTest.testFileScoreSeparateFromTotalScore()</case>
      <case>jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearInMiddleOfDirectoriesBecauseThereIsNoHarmInIt()</case>
      <case>jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearSecond()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testIncrement()</case>
      <case>jester.tests.IgnoreListTest.testReadingIncorrectFile()</case>
      <case>jester.tests.MainArgumentsTest.testClasspathArgument()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testContinuesIfChangeSucceeds()</case>
      <case>jester.tests.XMLReportWriterTest.testWritingChangesAsXMLHasBothGivenAndAbsoluteFilePaths()</case>
      <case>jester.tests.ReportTest.testMediumScore()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testContinuesIfChangeFails()</case>
      <case>jester.tests.ClassTestTesterTest.testThatOriginalContentsAreWrittenBack()</case>
      <case>jester.tests.MainArgumentsTest.testThatMultipleMutationDirectoriesOrFilesAreAllowed()</case>
      <case>jester.tests.ReportItemTest.testLineNumberSomeLines()</case>
      <case>jester.tests.SimpleIntCodeManglerTest.testBug955882()</case>
      <case>jester.tests.ReportTest.testThatChangeThatCausedTestsToFailIsNotIncluded()</case>
      <case>jester.tests.ReportTest.testChangesToSameFileOrderedByIndex()</case>
      <case>jester.tests.ClassTestTesterTest.testThatChangeThatPassesTestsIsRecorded()</case>
      <case>jester.tests.ReportTest.testInitialScore()</case>
      <case>jester.tests.MutationsListTest.testReadMutations()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testDecrement()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testInt()</case>
      <case>jester.tests.ReportTest.testBottomScore()</case>
      <case>jester.tests.MainArgumentsTest.testMissingFileCauseExceptionToBeThrown()</case>
      <case>jester.tests.TestTesterTest.testThatTestRunByIterator()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testConditionFalseBranch()</case>
      <case>jester.tests.ReportTest.testCantFinishDifferentFile()</case>
      <case>jester.tests.ReportTest.testCantStartTwoFiles()</case>
      <case>jester.tests.MainArgumentsTest.testMissingArgumentsCauseExceptionToBeThrown()</case>
      <case>jester.tests.TwoStringSwappingCodeManglerTest.testSimpleMangle1()</case>
      <case>jester.tests.TwoStringSwappingCodeManglerTest.testCouldntMangle()</case>
      <case>jester.tests.ReportTest.testTopScore()</case>
      <case>jester.tests.acceptancetests.VeryTestedTest.testEqual()</case>
      <case>jester.tests.IgnoreListTest.testReadingMultipleIgnoreValues()</case>
      <case>jester.tests.IgnoreListDocumentTest.testTextIsIgnoredForMultipleIgnores()</case>
      <case>jester.tests.functionaltests.VeryTestedTest.testNumber()</case>
      <case>jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearLast()</case>
    </cases>
  </tests>
  <original-execution time="-1">
    <failing />
    <ignored />
    <hanging />
    <callings>
      <test name="jester.tests.MainArgumentsTest.testThatOneCanSpecifyOptionToNotShowProgressDialog()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.shouldShowProgressDialog()</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testCouldntMangle()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.IgnoreListDocumentTest.testTextIsIgnored()">
        <node>jester.IgnoreRegion.includes(int)</node>
        <node>jester.IgnoreRegion.IgnoreRegion(int,int)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.getStart()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.indexOf(java.lang.String,int)</node>
        <node>jester.IgnorePair.getEnd()</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions(jester.IgnorePair)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
      </test>
      <test name="jester.tests.ClassTestTesterTest.testThatMutationListIsUsed()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.tests.MockMutationsList.verify()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.tests.MockClassSourceChanger.finishJesting()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.RealClassTestTester.testUsing(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.tests.MockMutationsList.MockMutationsList()</node>
        <node>jester.RealClassTestTester.RealClassTestTester(jester.TestRunner,jester.MutationsList)</node>
        <node>jester.tests.MockClassSourceChanger.startJesting()</node>
        <node>jester.tests.MockMutationsList.setExpectedVisitCalls(int)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealClassTestTester.test(jester.CodeMangler,jester.ClassSourceCodeChanger)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.TestTesterTest.testTestsMustStartOffWorking()">
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.tests.MockTestRunner.setTestsRunWithoutFailures(boolean)</node>
        <node>jester.tests.MockTestRunner.testsRunWithoutFailures()</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.TestTester.TestTester(jester.TestRunner,jester.ClassIterator,jester.ClassTestTester)</node>
        <node>jester.TestTester.run()</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingMultipleIgnoreBlankLines()">
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.tests.IgnoreListTest.ignorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.equals(jester.IgnorePair)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnorePair.equals(java.lang.Object)</node>
      </test>
      <test name="jester.tests.ConfigurationTest.testDefaults()">
        <node>jester.RealConfiguration.stringProperty(java.lang.String,java.lang.String)</node>
        <node>jester.RealConfiguration.shouldReportEagerly()</node>
        <node>jester.RealConfiguration.compilationCommand()</node>
        <node>jester.RealConfiguration.RealConfiguration(java.lang.String,java.io.PrintStream)</node>
        <node>jester.RealLogger.RealLogger()</node>
        <node>jester.RealConfiguration.sourceFileExtension()</node>
        <node>jester.RealConfiguration.testsPassString()</node>
        <node>jester.RealConfiguration.testRunningCommand()</node>
        <node>jester.RealConfiguration.closeUIOnFinish()</node>
        <node>jester.RealConfiguration.isTrueProperty(java.lang.String,boolean)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testNotEqual()">
        <node>jester.tests.acceptancetests.VeryTested.mustNotBeEqual()</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingEmptyIgnoreValues()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testConditionTrueBranch()">
        <node>jester.tests.acceptancetests.VeryTested.mustTakeCorrectBranchFor(boolean)</node>
      </test>
      <test name="jester.tests.MutationsListTest.testDefaults()">
        <node>jester.tests.MockMutationMaker.addExpectedMutateValues(java.lang.String,java.lang.String)</node>
        <node>jester.RealMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.RealMutationsList.RealMutationsList(java.lang.String,java.io.PrintStream)</node>
        <node>jester.tests.MockMutationMaker.mutate(java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockMutationMaker.MockMutationMaker()</node>
        <node>jester.tests.MockMutationMaker.verify()</node>
      </test>
      <test name="jester.tests.ClassTestTesterTest.testThatOriginalContentsAreNotWrittenBackIfNoChanges()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeCausedTestsToFailCalls(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.tests.MockClassSourceChanger.finishJesting()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.RealClassTestTester.testUsing(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.tests.MockMutationsList.MockMutationsList()</node>
        <node>jester.RealClassTestTester.RealClassTestTester(jester.TestRunner,jester.MutationsList)</node>
        <node>jester.tests.MockClassSourceChanger.startJesting()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealClassTestTester.test(jester.CodeMangler,jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedFinishJestingCalls(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.tests.ClassTestTesterTest.newRealClassTestTester(jester.TestRunner)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeDidNotCauseTestsToFailCalls(int)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedStartJestingCalls(int)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testDoesntTryToChangeBadlyNamedMethodCalls()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingIgnoreValues()">
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.tests.IgnoreListTest.ignorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.equals(jester.IgnorePair)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnorePair.equals(java.lang.Object)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testInfiniteLoop()">
        <node>jester.tests.acceptancetests.VeryTested.turnIntoInfiniteLoop()</node>
      </test>
      <test name="jester.tests.ReportItemTest.testXmlEncoding()">
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.xmlEncoded(java.lang.String)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.ReportItemTest.newReportItem(java.lang.String,java.lang.String,java.lang.String,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.ReportItem.asXML()</node>
      </test>
      <test name="jester.tests.IgnoreListDocumentTest.testCharAtReturnsSpaceInsideIgnoreRegion()">
        <node>jester.IgnoreRegion.includes(int)</node>
        <node>jester.IgnoreRegion.IgnoreRegion(int,int)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.getStart()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnorePair.getEnd()</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions(jester.IgnorePair)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
      </test>
      <test name="jester.tests.ClassTestTesterTest.testThatChangeThatFailsTestsIsNotRecorded()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOriginalContentsBack()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeCausedTestsToFailCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.tests.MockTestRunner.setTestsRunWithoutFailures(boolean)</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.tests.MockClassSourceChanger.finishJesting()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.RealClassTestTester.testUsing(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.tests.MockTestRunner.testsRunWithoutFailures()</node>
        <node>jester.tests.MockMutationsList.MockMutationsList()</node>
        <node>jester.RealClassTestTester.RealClassTestTester(jester.TestRunner,jester.MutationsList)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.startJesting()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealClassTestTester.test(jester.CodeMangler,jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedFinishJestingCalls(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.tests.ClassTestTesterTest.newRealClassTestTester(jester.TestRunner)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeDidNotCauseTestsToFailCalls(int)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedStartJestingCalls(int)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.tests.MockClassSourceChanger.lastChangeCausedTestsToFail()</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testMandatoryArguments()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.ReportTest.testThatChangeThatDidNotCauseTestsToFailIsIncluded()">
        <node>jester.RealReport.reportFileProgress()</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.tests.MockProgressReporter.progress()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.printFileChanges()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.writeChangesToXMLFile()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.RealReport.sortedReportItems()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.reportItemComparitor()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testBoolean()">
        <node>jester.tests.acceptancetests.VeryTested.mustReturnTrue()</node>
      </test>
      <test name="jester.tests.MutationsListTest.testReadMutationsIgnoreBogusLinesIncludingBlankOnes()">
        <node>jester.tests.MockMutationMaker.addExpectedMutateValues(java.lang.String,java.lang.String)</node>
        <node>jester.RealMutationsList.RealMutationsList(java.lang.String,java.io.PrintStream)</node>
        <node>jester.RealMutationsList.visitLine(java.lang.String,jester.MutationMaker)</node>
        <node>jester.tests.MockMutationMaker.mutate(java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockMutationMaker.MockMutationMaker()</node>
        <node>jester.tests.MockMutationMaker.verify()</node>
        <node>jester.RealMutationsList.visit(java.io.BufferedReader,jester.MutationMaker)</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingIgnoreValuesEndOfLineSpecialCase()">
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.tests.IgnoreListTest.ignorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.equals(jester.IgnorePair)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnorePair.equals(java.lang.Object)</node>
      </test>
      <test name="jester.tests.ReportTest.testFileMustBeStarted()">
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
      </test>
      <test name="jester.tests.ReportTest.testTotalScoreForManyFiles()">
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.RealReport.reportFileProgress()</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.tests.MockProgressReporter.progress()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.printFileChanges()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.compareToReportItem(jester.ReportItem)</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.1.compare(java.lang.Object,java.lang.Object)</node>
        <node>jester.RealReport.writeChangesToXMLFile()</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.sortedReportItems()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.reportItemComparitor()</node>
        <node>jester.RealReport.greenBar()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.ReportItemTest.testLineNumberOneLine()">
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.ReportItemTest.lineNumberForCharacterIndex(java.lang.String,int)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.ReportItemTest.newReportItem(java.lang.String,java.lang.String,java.lang.String,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.ReportItem.lineNumber()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearFirst()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.checkThatClasspathArgumentCanAppearInAnyOrder(java.lang.String[])</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testSimpleMangle()">
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.ReportTest.testFileScoreSeparateFromTotalScore()">
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.RealReport.reportFileProgress()</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.tests.MockProgressReporter.progress()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.printFileChanges()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.writeChangesToXMLFile()</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.sortedReportItems()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.reportItemComparitor()</node>
        <node>jester.RealReport.greenBar()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearInMiddleOfDirectoriesBecauseThereIsNoHarmInIt()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.checkThatClasspathArgumentCanAppearInAnyOrder(java.lang.String[])</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearSecond()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.checkThatClasspathArgumentCanAppearInAnyOrder(java.lang.String[])</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testIncrement()">
        <node>jester.tests.acceptancetests.VeryTested.mustIncrement(int)</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingIncorrectFile()">
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.ConfigurationException.ConfigurationException(java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testClasspathArgument()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testContinuesIfChangeSucceeds()">
        <node>jester.tests.MockClassSourceChanger.setThrowExceptionOnFirstChangeAttempt(boolean)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOriginalContentsBack()</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.XMLReportWriterTest.testWritingChangesAsXMLHasBothGivenAndAbsoluteFilePaths()">
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.RealXMLReportWriter.RealXMLReportWriter(java.io.Writer)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.RealXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.ReportItem.xmlEncoded(java.lang.String)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.ReportItem.asXML()</node>
      </test>
      <test name="jester.tests.ReportTest.testMediumScore()">
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.greenBar()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testContinuesIfChangeFails()">
        <node>jester.tests.MockClassSourceChanger.setThrowExceptionOnFirstChangeAttempt(boolean)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOriginalContentsBack()</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.ClassTestTesterTest.testThatOriginalContentsAreWrittenBack()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOriginalContentsBack()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeCausedTestsToFailCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.tests.MockClassSourceChanger.finishJesting()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.RealClassTestTester.testUsing(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.tests.MockTestRunner.testsRunWithoutFailures()</node>
        <node>jester.tests.MockMutationsList.MockMutationsList()</node>
        <node>jester.RealClassTestTester.RealClassTestTester(jester.TestRunner,jester.MutationsList)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.startJesting()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealClassTestTester.test(jester.CodeMangler,jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedFinishJestingCalls(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.tests.ClassTestTesterTest.newRealClassTestTester(jester.TestRunner)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeDidNotCauseTestsToFailCalls(int)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedStartJestingCalls(int)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.tests.MockClassSourceChanger.lastChangeCausedTestsToFail()</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testThatMultipleMutationDirectoriesOrFilesAreAllowed()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
      <test name="jester.tests.ReportItemTest.testLineNumberSomeLines()">
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.ReportItemTest.lineNumberForCharacterIndex(java.lang.String,int)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.ReportItemTest.newReportItem(java.lang.String,java.lang.String,java.lang.String,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.ReportItem.lineNumber()</node>
      </test>
      <test name="jester.tests.SimpleIntCodeManglerTest.testBug955882()">
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.ReportTest.testThatChangeThatCausedTestsToFailIsNotIncluded()">
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.RealReport.reportFileProgress()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.tests.MockProgressReporter.progress()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.printFileChanges()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.writeChangesToXMLFile()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.RealReport.sortedReportItems()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.RealReport.reportItemComparitor()</node>
        <node>jester.RealReport.greenBar()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.ReportTest.testChangesToSameFileOrderedByIndex()">
        <node>jester.RealReport.reportFileProgress()</node>
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.tests.MockProgressReporter.progress()</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.printFileChanges()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.compareToReportItem(jester.ReportItem)</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.1.compare(java.lang.Object,java.lang.Object)</node>
        <node>jester.RealReport.writeChangesToXMLFile()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockXMLReportWriter.writeXMLReport(java.lang.Object[],java.lang.String,int,int,int)</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.RealReport.sortedReportItems()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.reportItemComparitor()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.ClassTestTesterTest.testThatChangeThatPassesTestsIsRecorded()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.IgnoreListDocument.charAt(int)</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.lastChangeDidNotCauseTestsToFail()</node>
        <node>jester.tests.MockClassSourceChanger.writeOriginalContentsBack()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeCausedTestsToFailCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.incremented(int)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleIntCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.tests.MockTestRunner.setTestsRunWithoutFailures(boolean)</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.tests.MockClassSourceChanger.finishJesting()</node>
        <node>jester.SimpleIntCodeMangler.SimpleIntCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.RealClassTestTester.testUsing(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.tests.MockTestRunner.testsRunWithoutFailures()</node>
        <node>jester.tests.MockMutationsList.MockMutationsList()</node>
        <node>jester.RealClassTestTester.RealClassTestTester(jester.TestRunner,jester.MutationsList)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.startJesting()</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOriginalBackCalls(int)</node>
        <node>jester.SimpleIntCodeMangler.charAsInt(char)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealClassTestTester.test(jester.CodeMangler,jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedFinishJestingCalls(int)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.tests.ClassTestTesterTest.newRealClassTestTester(jester.TestRunner)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedLastChangeDidNotCauseTestsToFailCalls(int)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedStartJestingCalls(int)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockMutationsList.visit(jester.MutationMaker)</node>
        <node>jester.SimpleIntCodeMangler.indexOfNumber(jester.IgnoreListDocument)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.ReportTest.testInitialScore()">
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
      </test>
      <test name="jester.tests.MutationsListTest.testReadMutations()">
        <node>jester.tests.MockMutationMaker.addExpectedMutateValues(java.lang.String,java.lang.String)</node>
        <node>jester.RealMutationsList.RealMutationsList(java.lang.String,java.io.PrintStream)</node>
        <node>jester.RealMutationsList.visitLine(java.lang.String,jester.MutationMaker)</node>
        <node>jester.tests.MockMutationMaker.mutate(java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockMutationMaker.MockMutationMaker()</node>
        <node>jester.tests.MockMutationMaker.verify()</node>
        <node>jester.RealMutationsList.visit(java.io.BufferedReader,jester.MutationMaker)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testDecrement()">
        <node>jester.tests.acceptancetests.VeryTested.mustDecrement(int)</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testInt()">
        <node>jester.tests.acceptancetests.VeryTested.mustReturnOne()</node>
      </test>
      <test name="jester.tests.ReportTest.testBottomScore()">
        <node>jester.RealReport.changeThatDidNotCauseTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.redBar()</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.shouldReportEagerly()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testMissingFileCauseExceptionToBeThrown()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.2.exists(java.lang.String)</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.JesterArgumentException.JesterArgumentException(java.lang.String)</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
      </test>
      <test name="jester.tests.TestTesterTest.testThatTestRunByIterator()">
        <node>jester.tests.MockClassTestTester.MockClassTestTester()</node>
        <node>jester.tests.MockTestRunner.setTestsRunWithoutFailures(boolean)</node>
        <node>jester.tests.MockTestRunner.testsRunWithoutFailures()</node>
        <node>jester.tests.MockTestRunner.MockTestRunner()</node>
        <node>jester.TestTester.TestTester(jester.TestRunner,jester.ClassIterator,jester.ClassTestTester)</node>
        <node>jester.tests.MockClassIterator.iterate(jester.ClassTestTester)</node>
        <node>jester.tests.MockClassIterator.setExpectedIterate(jester.ClassTestTester)</node>
        <node>jester.tests.MockClassIterator.setExpectedIterateCalls(int)</node>
        <node>jester.TestTester.run()</node>
        <node>jester.tests.MockClassIterator.MockClassIterator()</node>
        <node>jester.tests.MockClassIterator.verify()</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testConditionFalseBranch()">
        <node>jester.tests.acceptancetests.VeryTested.mustTakeCorrectBranchFor(boolean)</node>
      </test>
      <test name="jester.tests.ReportTest.testCantFinishDifferentFile()">
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.finishFile(java.lang.String)</node>
      </test>
      <test name="jester.tests.ReportTest.testCantStartTwoFiles()">
        <node>jester.SourceChangeException.SourceChangeException(java.lang.String)</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testMissingArgumentsCauseExceptionToBeThrown()">
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.JesterArgumentException.JesterArgumentException(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
      </test>
      <test name="jester.tests.TwoStringSwappingCodeManglerTest.testSimpleMangle1()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.TwoStringSwappingCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.SimpleCodeMangler.makeChange(int,java.lang.String,java.lang.String)</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.TwoStringSwappingCodeManglerTest.newCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.TwoStringSwappingCodeMangler.TwoStringSwappingCodeMangler(jester.ClassSourceCodeChanger,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreListDocument.indexOf(java.lang.String,int)</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.writeOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacing(int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.TwoStringSwappingCodeManglerTest.testCouldntMangle()">
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.TwoStringSwappingCodeMangler.makeSomeChangeToFileSource()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockClassSourceChanger.getOriginalContents()</node>
        <node>jester.SimpleCodeMangler.SimpleCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.tests.MockClassSourceChanger.setExpectedWriteOverSourceReplacingCalls(int)</node>
        <node>jester.tests.MockClassSourceChanger.verify()</node>
        <node>jester.SimpleCodeMangler.makeChangeToClass()</node>
        <node>jester.SimpleCodeMangler.getIndexOfLastChange()</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String,jester.IgnoreList)</node>
        <node>jester.TwoStringSwappingCodeMangler.TwoStringSwappingCodeMangler(jester.ClassSourceCodeChanger,java.lang.String,java.lang.String)</node>
        <node>jester.tests.TwoStringSwappingCodeManglerTest.newCodeMangler(jester.ClassSourceCodeChanger)</node>
        <node>jester.IgnoreListDocument.indexOf(java.lang.String,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.MockClassSourceChanger.MockClassSourceChanger()</node>
        <node>jester.tests.MockClassSourceChanger.setOriginalContents(java.lang.String)</node>
        <node>jester.SimpleCodeMangler.getOriginalContents()</node>
      </test>
      <test name="jester.tests.ReportTest.testTopScore()">
        <node>jester.RealReport.changeThatCausedTestsToFail(int,java.lang.String,java.lang.String)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.tests.TestConfiguration.TestConfiguration()</node>
        <node>jester.RealReport.RealReport(jester.Configuration,java.io.PrintWriter,jester.XMLReportWriter,jester.ProgressReporter)</node>
        <node>jester.tests.MockProgressReporter.setColor(java.awt.Color)</node>
        <node>jester.IgnoreListDocument.length()</node>
        <node>jester.RealReport.fileNumberOfChangesThatDidNotCauseTestsToFail()</node>
        <node>jester.ReportItem.ReportItem(java.lang.String,jester.IgnoreListDocument,int,java.lang.String,java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport(java.io.PrintWriter)</node>
        <node>jester.RealReport.totalScore()</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.tests.MockProgressReporter.setText(java.lang.String)</node>
        <node>jester.tests.ReportTest.newRealReport()</node>
        <node>jester.RealReport.totalNumberOfChanges()</node>
        <node>jester.IgnoreListDocument.substring(int,int)</node>
        <node>jester.ReportItem.lineNumber()</node>
        <node>jester.RealReport.fileNumberOfChanges()</node>
        <node>jester.RealReport.startFile(java.lang.String,jester.IgnoreListDocument)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.RealReport.greenBar()</node>
        <node>jester.RealReport.fileScore()</node>
        <node>jester.RealReport.score(int,int)</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.tests.ReportTest.startFile(jester.Report,java.lang.String,java.lang.String)</node>
        <node>jester.ReportItem.toString()</node>
      </test>
      <test name="jester.tests.acceptancetests.VeryTestedTest.testEqual()">
        <node>jester.tests.acceptancetests.VeryTested.mustBeEqual()</node>
      </test>
      <test name="jester.tests.IgnoreListTest.testReadingMultipleIgnoreValues()">
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.tests.IgnoreListTest.ignorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.equals(jester.IgnorePair)</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
        <node>jester.IgnorePair.equals(java.lang.Object)</node>
      </test>
      <test name="jester.tests.IgnoreListDocumentTest.testTextIsIgnoredForMultipleIgnores()">
        <node>jester.IgnoreRegion.includes(int)</node>
        <node>jester.IgnoreRegion.IgnoreRegion(int,int)</node>
        <node>jester.IgnoreListDocument.IgnoreListDocument(java.lang.String,jester.IgnoreList)</node>
        <node>jester.IgnorePair.IgnorePair(java.lang.String,java.lang.String)</node>
        <node>jester.IgnorePair.getStart()</node>
        <node>jester.IgnoreList.ignorePairs()</node>
        <node>jester.IgnoreListDocument.indexOf(java.lang.String,int)</node>
        <node>jester.IgnorePair.getEnd()</node>
        <node>jester.IgnoreListDocument.isInIgnoreRegion(int)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions(jester.IgnorePair)</node>
        <node>jester.IgnoreListDocument.calculateIgnoreRegions()</node>
        <node>jester.IgnoreList.IgnoreList(java.lang.String)</node>
      </test>
      <test name="jester.tests.functionaltests.VeryTestedTest.testNumber()">
        <node>jester.tests.functionaltests.VeryTested.mustReturnOne()</node>
        <node>jester.tests.functionaltests.VeryTested.VeryTested()</node>
      </test>
      <test name="jester.tests.MainArgumentsTest.testThatClasspathArgumentCanAppearLast()">
        <node>jester.MainArguments.checkDirectoriesOrFilesToMutateExist()</node>
        <node>jester.tests.MainArgumentsTest.checkThatClasspathArgumentCanAppearInAnyOrder(java.lang.String[])</node>
        <node>jester.tests.MainArgumentsTest.assertEquals(java.lang.String[],java.lang.String[])</node>
        <node>jester.MainArguments.setDirectoriesOrFilesToMutateFromArguments(java.util.List)</node>
        <node>jester.MainArguments.setTestClassFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getDirectoryOrFileNames()</node>
        <node>jester.MainArguments.setOptionalShouldShowProgressDialogFromArguments(java.util.List)</node>
        <node>jester.MainArguments.getTestClassName()</node>
        <node>jester.tests.MainArgumentsTest.1.exists(java.lang.String)</node>
        <node>jester.MainArguments.readArguments(java.lang.String[])</node>
        <node>jester.MainArguments.MainArguments(java.lang.String[],jester.FileExistenceChecker)</node>
        <node>jester.MainArguments.setOptionalClasspathFromArguments(java.util.List)</node>
      </test>
    </callings>
  </original-execution>
</smf>
