<?xml version="1.0" encoding="UTF-8"?>
<!--
This is an execution file generated with SMF.
-->
<smf>
  <config skip-mvn-cp="false">
    <global>
      <classpath />
      <state>FRESH</state>
    </global>
    <source>
      <bytecode>bytecode/source</bytecode>
      <include>
        <path>src/main/java</path>
      </include>
    </source>
    <tests>
      <bytecode>bytecode/tests</bytecode>
      <include>
        <path>src/test/java</path>
      </include>
      <ressources />
    </tests>
    <mutation basedir="mutations/{id}/{op}">
      <source>source</source>
      <bytecode>bytecode</bytecode>
      <executions>exec</executions>
    </mutation>
  </config>
  <tests>
    <classes>
      <class>daikon.test.inv.InvariantTeste</class>
      <class>daikon.test.diff.DetailedStatisticsVisitorTeste</class>
      <class>daikon.test.config.ConfigurationTes</class>
      <class>daikon.test.diff.ConsequentCVFSortComparatorTeste</class>
      <class>daikon.test.diff.UnionVisitorTeste</class>
      <class>daikon.test.ProglangTypeTes</class>
      <class>daikon.test.inv.unary.scalar.OneOfScalarTeste</class>
      <class>daikon.test.LinearTernaryCoreTes</class>
      <class>daikon.test.TestQuan</class>
      <class>daikon.test.diff.PrintDifferingInvariantsVisitorTeste</class>
      <class>daikon.test.VarComparabilityTes</class>
      <class>daikon.test.inv.unary.sequence.OneOfSequenceTeste</class>
      <class>daikon.test.TestAs</class>
      <class>daikon.test.diff.XorVisitorTeste</class>
      <class>utilMDE.TestUtilMD</class>
      <class>daikon.test.InvariantFormatTeste</class>
      <class>daikon.test.VarInfoNameTes</class>
      <class>daikon.test.TestAnnotat</class>
      <class>daikon.test.diff.MinusVisitorTeste</class>
      <class>daikon.test.diff.DiffTeste</class>
      <class>daikon.test.diff.InvMapTeste</class>
      <class>daikon.test.ModBitTrackerTes</class>
      <class>daikon.test.diff.ConsequentCVFPairComparatorTeste</class>
      <class>daikon.test.split.SplitterFactoryTes</class>
    </classes>
    <cases>
      <case>daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNonNonNon()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isEmpty_19()</case>
      <case>daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_nDarray_whole()</case>
      <case>daikon.test.VarInfoNameTest.testSubscript()</case>
      <case>daikon.test.TestQuant.test_lexGTE()</case>
      <case>utilMDE.TestUtilMDE.testOptions()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_checkRep_5()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_2()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_13()</case>
      <case>utilMDE.TestUtilMDE.testWeakIdentityHashMap()</case>
      <case>daikon.test.TestQuant.test_eltsLT()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_orderStatistic_15()</case>
      <case>daikon.test.TestQuant.test_setEqual()</case>
      <case>daikon.test.diff.DiffTester.testNonModulus()</case>
      <case>daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_scalar()</case>
      <case>daikon.test.TestQuant.test_eltsGTE()</case>
      <case>daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNonNonNull()</case>
      <case>daikon.test.VarInfoNameTest.testParse()</case>
      <case>daikon.test.TestQuant.test_eltsGtIndex()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_8()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_29()</case>
      <case>daikon.test.TestQuant.test_eltsLtIndex()</case>
      <case>daikon.test.diff.ConsequentCVFSortComparatorTester.testCompare()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__36()</case>
      <case>daikon.test.TestQuant.test_lexEqual()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_27()</case>
      <case>daikon.test.TestQuant.test_pairwiseLTE()</case>
      <case>daikon.test.diff.DiffTester.testNullaryInvs()</case>
      <case>daikon.test.TestQuant.test_eltsGT()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_32()</case>
      <case>daikon.test.TestQuant.test_eltwiseEqual()</case>
      <case>daikon.test.diff.DiffTester.testPpts1Ppts2()</case>
      <case>daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_1Darray_whole()</case>
      <case>daikon.test.inv.unary.scalar.OneOfScalarTester.testNullNull()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__43()</case>
      <case>daikon.test.diff.DiffTester.testEmptyEmpty()</case>
      <case>daikon.test.ProglangTypeTest.test_parse_value()</case>
      <case>daikon.test.diff.InvMapTester.testCAB()</case>
      <case>daikon.test.InvariantFormatTester.testFormats()</case>
      <case>daikon.test.TestQuant.test_eltsNotEqual()</case>
      <case>daikon.test.TestQuant.test_eltsNotEqualIndex()</case>
      <case>daikon.test.TestAnnotate.testGetTabbedIndex()</case>
      <case>daikon.test.diff.MinusVisitorTester.testMinus()</case>
      <case>utilMDE.TestUtilMDE.testTestUtilMDE()</case>
      <case>daikon.test.inv.unary.sequence.OneOfSequenceTester.testDifferentLengths()</case>
      <case>daikon.test.diff.DiffTester.testConditionalPptsFalse()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_10()</case>
      <case>utilMDE.TestUtilMDE.testHasher()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_1()</case>
      <case>daikon.test.diff.DetailedStatisticsVisitorTester.testShouldAddFrequency()</case>
      <case>daikon.test.ModBitTrackerTest.testModBitTracker()</case>
      <case>daikon.test.TestQuant.test_lexNotEqual()</case>
      <case>daikon.test.TestQuant.test_subsetOf_different_types()</case>
      <case>utilMDE.TestUtilMDE.testSequenceAndIndices()</case>
      <case>daikon.test.diff.ConsequentCVFPairComparatorTester.testCompare()</case>
      <case>daikon.test.inv.unary.scalar.OneOfScalarTester.testNullNon()</case>
      <case>daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_1Darray_parts()</case>
      <case>daikon.test.inv.unary.scalar.OneOfScalarTester.testNonNon()</case>
      <case>daikon.test.TestQuant.test_isReverse()</case>
      <case>daikon.test.TestQuant.test_eltsEqual()</case>
      <case>daikon.test.split.SplitterFactoryTest.testmisc_Fib_main_18()</case>
      <case>daikon.test.TestQuant.test_noDups()</case>
      <case>daikon.test.LinearTernaryCoreTest.test_format()</case>
      <case>daikon.test.diff.DiffTester.testInvs1Invs3()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_9()</case>
      <case>daikon.test.VarInfoNameTest.testJML()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isEmpty_20()</case>
      <case>daikon.test.TestQuant.test_pairwiseEqual()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__35()</case>
      <case>daikon.test.diff.DiffTester.testEmptyPpts1()</case>
      <case>daikon.test.diff.XorVisitorTester.testXor()</case>
      <case>daikon.test.TestQuant.test_eltwiseNotEqual()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_28()</case>
      <case>daikon.test.diff.DiffTester.testPpts1Ppts1()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__39()</case>
      <case>utilMDE.TestUtilMDE.testIntern()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_31()</case>
      <case>daikon.test.config.ConfigurationTest.testGetInstance()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__42()</case>
      <case>daikon.test.diff.DetailedStatisticsVisitorTester.testFreq()</case>
      <case>daikon.test.TestQuant.test_pairwiseGTE()</case>
      <case>daikon.test.TestQuant.test_lexLTE()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_0()</case>
      <case>daikon.test.diff.UnionVisitorTester.testXor()</case>
      <case>daikon.test.TestQuant.test_eltwiseGTE()</case>
      <case>daikon.test.TestQuant.test_eltsLteIndex()</case>
      <case>daikon.test.inv.InvariantTester.test_prob_or()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_11()</case>
      <case>daikon.test.TestQuant.test_pairwiseDivides()</case>
      <case>daikon.test.TestQuant.test_union()</case>
      <case>utilMDE.TestUtilMDE.testArraysMDE()</case>
      <case>daikon.test.TestQuant.test_intersection()</case>
      <case>daikon.test.VarInfoNameTest.testEscForall()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_getFront_23()</case>
      <case>daikon.test.inv.InvariantTester.test_prob_and()</case>
      <case>daikon.test.TestQuant.test_pairwiseLT()</case>
      <case>daikon.test.TestQuant.test_pairwiseBitwiseSubset()</case>
      <case>daikon.test.TestQuant.test_eltwiseLT()</case>
      <case>daikon.test.diff.DiffTester.testInvs1Invs2()</case>
      <case>utilMDE.TestUtilMDE.testLimitedSizeIntSet()</case>
      <case>daikon.test.LinearTernaryCoreTest.test_set_tri_linear()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_6()</case>
      <case>daikon.test.TestQuant.test_slice()</case>
      <case>daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNullNonNull()</case>
      <case>daikon.test.TestQuant.testCollect()</case>
      <case>utilMDE.TestUtilMDE.test_create_combinations()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__34()</case>
      <case>daikon.test.inv.InvariantTester.test_prob_is_ge()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_25()</case>
      <case>daikon.test.inv.InvariantTester.testClassVarnameComparator()</case>
      <case>daikon.test.TestQuant.test_subsetOf()</case>
      <case>daikon.test.diff.DiffTester.testInvs1Empty()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_30()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__38()</case>
      <case>daikon.test.diff.DiffTester.testConditionalPptsTrue()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__41()</case>
      <case>daikon.test.diff.InvMapTester.testABC()</case>
      <case>daikon.test.TestQuant.test_eltsGteIndex()</case>
      <case>daikon.test.TestQuant.testCollect_field()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_size_16()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_3()</case>
      <case>daikon.test.diff.DiffTester.testPpts1Empty()</case>
      <case>utilMDE.TestUtilMDE.testMathMDE()</case>
      <case>daikon.test.diff.PrintDifferingInvariantsVisitorTester.testShouldPrint()</case>
      <case>daikon.test.TestQuant.test_pairwiseBitwiseComplement()</case>
      <case>utilMDE.TestUtilMDE.testOrderedPairIterator()</case>
      <case>daikon.test.TestQuant.test_pairwiseSquare()</case>
      <case>daikon.test.inv.unary.sequence.OneOfSequenceTester.testNullNullNullNull()</case>
      <case>daikon.test.TestQuant.test_lexLT()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_checkRep_4()</case>
      <case>utilMDE.TestUtilMDE.testFuzzyFloat()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_12()</case>
      <case>daikon.test.TestQuant.test_concat()</case>
      <case>daikon.test.TestQuant.test_eltwiseGT()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isFull_21()</case>
      <case>daikon.test.TestQuant.test_pairwiseGT()</case>
      <case>daikon.test.TestQuant.test_eltwiseLTE()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_orderStatistic_14()</case>
      <case>daikon.test.TestQuant.test_eltsLTE()</case>
      <case>daikon.test.TestAst.test_Ast_Ppt_Match()</case>
      <case>daikon.test.TestQuant.test_eltsEqualIndex()</case>
      <case>daikon.test.TestQuant.test_lexGT()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__40()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isFull_22()</case>
      <case>daikon.test.diff.DiffTester.testInvs1Invs1()</case>
      <case>utilMDE.TestUtilMDE.testInternObject()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_7()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_getFront_24()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__33()</case>
      <case>daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_26()</case>
      <case>daikon.test.diff.DiffTester.testPpts1Ppts3()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__37()</case>
      <case>daikon.test.TestQuant.test_pairwiseNotEqual()</case>
      <case>daikon.test.TestQuant.test_memberOf()</case>
      <case>utilMDE.TestUtilMDE.test_unqualified_name()</case>
      <case>daikon.test.TestQuant.test_setDiff()</case>
      <case>daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_size_17()</case>
    </cases>
  </tests>
  <original-execution time="-1">
    <failing />
    <ignored />
    <hanging />
    <callings>
      <test name="daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNonNonNon()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.enabled()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.is_hashcode()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.OneOfSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.sort_rep()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.get_proto()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_modified(long[],int)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.check_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isEmpty_19()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_nDarray_whole()">
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.comparable(daikon.VarComparabilityImplicit,daikon.VarComparabilityImplicit)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.VarComparabilityImplicit(int,daikon.VarComparabilityImplicit[],int)</node>
        <node>daikon.ProglangType.ProglangType(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.indexType(int)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.VarComparability.comparable(daikon.VarComparability,daikon.VarComparability)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.VarComparabilityImplicit.parse(java.lang.String,daikon.ProglangType)</node>
        <node>daikon.ProglangType.parse(java.lang.String)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.VarComparabilityImplicit.alwaysComparable()</node>
        <node>daikon.VarComparabilityImplicit.elementType()</node>
        <node>daikon.VarComparability.parse(int,java.lang.String,daikon.ProglangType)</node>
        <node>daikon.test.VarComparabilityTest.comp(daikon.VarComparability,daikon.VarComparability)</node>
      </test>
      <test name="daikon.test.VarInfoNameTest.testSubscript()">
        <node>daikon.VarInfoName.Replacer.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.VarInfoName.Replacer.Replacer(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.applySize()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.test.VarInfoNameDriver.Subscript.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.repr_impl()</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.VarInfoName.Subscript.esc_name_impl()</node>
        <node>daikon.VarInfoName.Subscript.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Elements.Elements(daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameDriver.Elements.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Replacer.replace(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.VarInfoName.ElementsFinder.inPre()</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Simple.isLiteralConstant()</node>
        <node>daikon.VarInfoName.indexExplicit(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Elements.repr_impl()</node>
        <node>daikon.VarInfoName.Add.simplify_name_impl(boolean)</node>
        <node>daikon.test.VarInfoNameTest.diff(java.lang.String[],java.lang.String[])</node>
        <node>daikon.VarInfoName.Elements.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.applyElements()</node>
        <node>daikon.test.VarInfoNameDriver.run(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.ElementsFinder.elems()</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.VarInfoName.Subscript.name_impl()</node>
        <node>daikon.VarInfoName.simplify_name(boolean)</node>
        <node>daikon.test.VarInfoNameDriver.run_helper(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.applySubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.simplify_name()</node>
        <node>daikon.VarInfoName.ElementsFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Elements.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Elements.esc_name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.applyAdd(int)</node>
        <node>daikon.VarInfoName.Subscript.Subscript(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.Elements.name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.toString()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoName.SizeOf.repr_impl()</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(java.lang.String,boolean)</node>
        <node>daikon.VarInfoName.Add.Add(daikon.VarInfoName,int)</node>
        <node>daikon.test.VarInfoNameTest.run(java.lang.String)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.VarInfoName.Subscript.repr_impl()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.SizeOf.get_term()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.test.VarInfoNameDriver.Parse.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.SizeOf.SizeOf(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.ElementsFinder.ElementsFinder(daikon.VarInfoName)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.test.VarInfoNameDriver.SimplifyName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.SizeOf.simplify_name_impl(boolean)</node>
        <node>daikon.test.VarInfoNameDriver.EscName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.amount()</node>
        <node>daikon.VarInfoName.esc_name()</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexGTE()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.gt(int,int)</node>
        <node>daikon.Quant.lexGTE(int[],int[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testOptions()">
        <node>utilMDE.Options.parse_option(java.lang.String)</node>
        <node>utilMDE.Options.type_short_name(java.lang.Class)</node>
        <node>utilMDE.Options.set_arg(utilMDE.Options.OptionInfo,java.lang.String,java.lang.String)</node>
        <node>utilMDE.Options.OptionInfo.argument_required()</node>
        <node>utilMDE.SimpleLog.LongVal.LongVal(long)</node>
        <node>utilMDE.Options.Options(java.lang.String,java.lang.Object[])</node>
        <node>utilMDE.SimpleLog.SimpleLog(boolean)</node>
        <node>utilMDE.Options.parse(java.lang.String[])</node>
        <node>utilMDE.Options.OptionInfo.OptionInfo(utilMDE.Options,java.lang.reflect.Field,utilMDE.Option,java.lang.Object)</node>
        <node>utilMDE.UtilMDE.unqualified_name(java.lang.String)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_checkRep_5()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_2()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_13()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testWeakIdentityHashMap()">
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakIdentityHashMap.maskNull(java.lang.Object)</node>
        <node>utilMDE.WeakIdentityHashMap.getTable()</node>
        <node>utilMDE.WeakIdentityHashMap.WeakIdentityHashMap()</node>
        <node>utilMDE.WeakIdentityHashMap.indexFor(int,int)</node>
        <node>utilMDE.WeakIdentityHashMap.eq(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakIdentityHashMap.Entry.Entry(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,utilMDE.WeakIdentityHashMap.Entry)</node>
        <node>utilMDE.WeakIdentityHashMap.get(java.lang.Object)</node>
        <node>utilMDE.WeakIdentityHashMap.hasher(java.lang.Object)</node>
        <node>utilMDE.WeakIdentityHashMap.remove(java.lang.Object)</node>
        <node>utilMDE.WeakIdentityHashMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakIdentityHashMap.expungeStaleEntries()</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsLT()">
        <node>daikon.Quant.eltsLT(int[],int)</node>
        <node>daikon.Quant.gte(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_orderStatistic_15()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_setEqual()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.setEqual(int[],int[])</node>
        <node>daikon.Quant.memberOf(int,int[])</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testNonModulus()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.PptMap.add(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.inv.unary.scalar.NonModulus.enabled()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.config.Configuration.addRecord(java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.PptSlice1.addInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.inv.unary.scalar.NonModulus.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.inv.unary.scalar.NonModulus.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.config.Configuration.getInstance()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.config.Configuration.apply(java.lang.reflect.Field,java.lang.String)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.unary.scalar.NonModulus.get_proto()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.config.Configuration.apply(java.lang.Class,java.lang.String,java.lang.String)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.NonModulus.NonModulus(daikon.PptSlice)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_scalar()">
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.comparable(daikon.VarComparabilityImplicit,daikon.VarComparabilityImplicit)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.VarComparabilityImplicit(int,daikon.VarComparabilityImplicit[],int)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.VarComparability.comparable(daikon.VarComparability,daikon.VarComparability)</node>
        <node>daikon.VarComparabilityImplicit.parse(java.lang.String,daikon.ProglangType)</node>
        <node>daikon.ProglangType.parse(java.lang.String)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.VarComparabilityImplicit.alwaysComparable()</node>
        <node>daikon.VarComparability.parse(int,java.lang.String,daikon.ProglangType)</node>
        <node>daikon.test.VarComparabilityTest.comp(daikon.VarComparability,daikon.VarComparability)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsGTE()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.eltsGTE(int[],int)</node>
      </test>
      <test name="daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNonNonNull()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.enabled()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.is_hashcode()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.OneOfSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.sort_rep()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.get_proto()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_modified(long[],int)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.check_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
      </test>
      <test name="daikon.test.VarInfoNameTest.testParse()">
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.VarInfoName.Replacer.Replacer(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.applySize()</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.VarInfoName.NodeFinder.NodeFinder(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Replacer.visitTypeOf(daikon.VarInfoName.TypeOf)</node>
        <node>daikon.VarInfoName.NodeFinder.inPre()</node>
        <node>daikon.VarInfoName.Elements.Elements(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.TypeOf.TypeOf(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.ElementsFinder.inPre()</node>
        <node>daikon.VarInfoName.applyTypeOf()</node>
        <node>daikon.VarInfoName.Replacer.visitField(daikon.VarInfoName.Field)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator2(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_var_initial_state(daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Simple.isLiteralConstant()</node>
        <node>daikon.VarInfoName.QuantifierVisitor.unquants()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.SimpleNamesVisitor(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.indexExplicit(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.PostPreConverter.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.Elements.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.format_esc(daikon.VarInfoName[],boolean)</node>
        <node>daikon.VarInfoName.Elements.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.applyElements()</node>
        <node>daikon.test.VarInfoNameDriver.run(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.ElementsFinder.elems()</node>
        <node>daikon.VarInfoName.Elements.getUpperBound()</node>
        <node>daikon.VarInfoName.simplify_name(boolean)</node>
        <node>daikon.VarInfoName.applyDecrement()</node>
        <node>daikon.VarInfoName.simplify_name()</node>
        <node>daikon.test.VarInfoNameDriver.QuantifySimplifyName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Elements.esc_name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.applyAdd(int)</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName[],boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.applyPoststate()</node>
        <node>daikon.VarInfoName.Subscript.Subscript(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Poststate.Poststate(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitTypeOf(daikon.VarInfoName.TypeOf)</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(java.lang.String,boolean)</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName.QuantHelper.QuantifyReturn,boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.test.VarInfoNameTest.run(java.lang.String)</node>
        <node>daikon.VarInfoName.NodeFinder.visitField(daikon.VarInfoName.Field)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_format_forall(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Simple.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.test.VarInfoNameDriver.Parse.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.NodeFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.FreeVar(java.lang.String)</node>
        <node>daikon.test.VarInfoNameDriver.SimplifyName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.amount()</node>
        <node>daikon.VarInfoName.inPrestateContext(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_increment(daikon.VarInfoName,int,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Replacer.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Field.name_impl()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.simples()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.VarInfoName.Add.repr_impl()</node>
        <node>daikon.VarInfoName.Add.esc_name_impl()</node>
        <node>daikon.VarInfoName.Subscript.esc_name_impl()</node>
        <node>daikon.VarInfoName.TypeOf.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Subscript.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Field.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.Poststate.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.format_simplify(daikon.VarInfoName[],boolean,boolean,boolean,boolean)</node>
        <node>daikon.VarInfoName.TypeOf.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.TypeOf.esc_name_impl()</node>
        <node>daikon.VarInfoName.Replacer.replace(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator1(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.TypeOf.name_impl()</node>
        <node>daikon.VarInfoName.Field.Field(daikon.VarInfoName,java.lang.String)</node>
        <node>daikon.VarInfoName.Elements.getLowerBound()</node>
        <node>daikon.VarInfoName.QuantHelper.format_simplify(daikon.VarInfoName[])</node>
        <node>daikon.VarInfoName.name_using(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.applyField(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_step_terminator(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Elements.getSubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.NodeFinder.visitTypeOf(daikon.VarInfoName.TypeOf)</node>
        <node>daikon.VarInfoName.Add.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.QuantHelper.replace(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameTest.diff(java.lang.String[],java.lang.String[])</node>
        <node>daikon.VarInfoName.SizeOf.esc_name_impl()</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.VarInfoName.Subscript.name_impl()</node>
        <node>daikon.VarInfoName.Simple.esc_name_impl()</node>
        <node>daikon.test.VarInfoNameDriver.run_helper(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitField(daikon.VarInfoName.Field)</node>
        <node>daikon.VarInfoName.applySubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.TypeOf.repr_impl()</node>
        <node>daikon.VarInfoName.Elements.name_impl()</node>
        <node>daikon.VarInfoName.ElementsFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Field.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.repr_impl()</node>
        <node>daikon.VarInfoName.Elements.simplify_name_impl(boolean)</node>
        <node>daikon.test.VarInfoNameDriver.QuantifyEscName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.Field.esc_name_impl()</node>
        <node>daikon.VarInfoName.Elements.name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_execution_condition(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoName.toString()</node>
        <node>daikon.VarInfoName.SizeOf.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.quantify(daikon.VarInfoName[])</node>
        <node>daikon.VarInfoName.Field.repr_impl()</node>
        <node>daikon.test.VarInfoNameDriver.PostPreConverter.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.Add(daikon.VarInfoName,int)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.Subscript.repr_impl()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.SizeOf.get_term()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.VarInfoName.Poststate.name_impl()</node>
        <node>daikon.VarInfoName.SizeOf.SizeOf(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.ElementsFinder.ElementsFinder(daikon.VarInfoName)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.QuantifierVisitor(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.SizeOf.simplify_name_impl(boolean)</node>
        <node>daikon.test.VarInfoNameDriver.EscName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.QuantHelper.format_esc(daikon.VarInfoName[])</node>
        <node>daikon.VarInfoName.esc_name()</node>
        <node>daikon.VarInfoName.PostPreConverter.PostPreConverter()</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsGtIndex()">
        <node>daikon.Quant.eltsGtIndex(int[])</node>
        <node>daikon.Quant.lte(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_8()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_29()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsLtIndex()">
        <node>daikon.Quant.eltsLtIndex(int[])</node>
        <node>daikon.Quant.gte(int,int)</node>
      </test>
      <test name="daikon.test.diff.ConsequentCVFSortComparatorTester.testCompare()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.Implication.consequent()</node>
        <node>daikon.inv.unary.scalar.NonZero.enabled()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.Invariant.ClassVarnameFormulaComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.initInvariantsSeen()</node>
        <node>daikon.inv.unary.scalar.NonZero.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.PptSlice0.hasImplication(daikon.inv.Implication)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.PptSlice0.ImplicationWrapper.format()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.unary.scalar.NonZero.get_proto()</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.hashCode()</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.OutputFormat.isJavaFamily()</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.inv.Implication.predicate()</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.inv.unary.scalar.NonZero.NonZero(daikon.PptSlice)</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.diff.ConsequentSortComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Implication.makeImplication(daikon.PptTopLevel,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoAux.getFlag(java.lang.String)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.Implication.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.ConsequentCVFSortComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.inv.unary.scalar.NonZero.zero(daikon.inv.OutputFormat)</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.ConsequentSortComparator.ConsequentSortComparator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.Implication.Implication(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.ImplicationWrapper(daikon.inv.Implication)</node>
        <node>daikon.inv.Joiner.Joiner(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.NonZero.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.NonZero.is_pointer()</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__36()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexEqual()">
        <node>daikon.Quant.pairwiseEqual(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.lexEqual(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_27()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseLTE()">
        <node>daikon.Quant.pairwiseLTE(int[],int[])</node>
        <node>daikon.Quant.gt(int,int)</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testNullaryInvs()">
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsGT()">
        <node>daikon.Quant.lte(int,int)</node>
        <node>daikon.Quant.eltsGT(int[],int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_32()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseEqual()">
        <node>daikon.Quant.eltwiseEqual(int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testPpts1Ppts2()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_1Darray_whole()">
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.comparable(daikon.VarComparabilityImplicit,daikon.VarComparabilityImplicit)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.VarComparabilityImplicit(int,daikon.VarComparabilityImplicit[],int)</node>
        <node>daikon.VarComparabilityImplicit.indexType(int)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.VarComparability.comparable(daikon.VarComparability,daikon.VarComparability)</node>
        <node>daikon.VarComparabilityImplicit.parse(java.lang.String,daikon.ProglangType)</node>
        <node>daikon.ProglangType.parse(java.lang.String)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.VarComparabilityImplicit.alwaysComparable()</node>
        <node>daikon.VarComparabilityImplicit.elementType()</node>
        <node>daikon.VarComparability.parse(int,java.lang.String,daikon.ProglangType)</node>
        <node>daikon.test.VarComparabilityTest.comp(daikon.VarComparability,daikon.VarComparability)</node>
      </test>
      <test name="daikon.test.inv.unary.scalar.OneOfScalarTester.testNullNull()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_hashcode()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.check_mod_elem(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.sort_rep()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_mod_elem(long,int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_modified(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.runValue(long,int,boolean)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.enabled()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.OneOfScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_boolean()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.get_proto()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isScalar()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__43()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testEmptyEmpty()">
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
      </test>
      <test name="daikon.test.ProglangTypeTest.test_parse_value()">
        <node>daikon.test.ProglangTypeTest.comparrcomp(java.lang.Object,java.lang.Object[])</node>
        <node>utilMDE.Intern.internedLong(long)</node>
        <node>daikon.test.ProglangTypeTest.longarrcomp(java.lang.Object,long[])</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.StringArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.ArraysMDE.ComparableArrayComparatorLexical.compare(java.lang.Comparable[],java.lang.Comparable[])</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.Intern.intern(java.lang.String)</node>
        <node>utilMDE.ArraysMDE.LongArrayComparatorLexical.compare(long[],long[])</node>
        <node>utilMDE.Intern.intern(java.lang.Long)</node>
        <node>daikon.ProglangType.parse_value(java.lang.String)</node>
        <node>utilMDE.UtilMDE.unescapeNonJava(java.lang.String)</node>
        <node>daikon.ProglangType.myParseLong(java.lang.String)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.Intern.intern(java.lang.String[])</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.LongHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>utilMDE.Intern.internStrings(java.lang.String[])</node>
      </test>
      <test name="daikon.test.diff.InvMapTester.testCAB()">
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.InvMap.pptIterator()</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
      </test>
      <test name="daikon.test.InvariantFormatTester.testFormats()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.VarInfoName.Replacer.Replacer(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.enabled()</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.Divides.Divides(daikon.PptSlice,boolean)</node>
        <node>daikon.Ppt.indexOf(java.lang.String)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.is_boolean()</node>
        <node>daikon.inv.ternary.threeScalar.ThreeScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.ProglangType.parse_value(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_element_conditions(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>utilMDE.UtilMDE.unescapeNonJava(java.lang.String)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_simplify()</node>
        <node>daikon.inv.binary.BinaryInvariant.BinaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.check_mod_elem(long,int)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.enabled()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.get_proto()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.LinearBinary(daikon.PptSlice)</node>
        <node>daikon.inv.unary.stringsequence.SingleStringSequence.valid_types(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.QuantifierVisitor.unquants()</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>daikon.VarInfoName.indexExplicit(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.add_modified(long[],int)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.hasNext()</node>
        <node>daikon.inv.ValueSet.ValueSetString.ValueSetString(int)</node>
        <node>daikon.inv.OutputFormat.isJavaFamily()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.get_proto()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.Quantify.IOAQuantification.IOAQuantification(daikon.VarInfo)</node>
        <node>daikon.VarInfo.esc_name()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorLong.next()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoString.TwoString.TwoString(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.Modulus.Modulus(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.SeqIndexIntGreaterThan(daikon.PptSlice)</node>
        <node>daikon.VarInfo.apply_subscript(java.lang.String)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfo.isPrestate()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.SeqIntLessThan(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.TwoSequence.var2()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.Quantify.IOAQuantification.getFreeVar(int)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_ioa()</node>
        <node>daikon.inv.unary.sequence.EltNonZero.enabled()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.scalar.NonModulus.updateResults()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.add_mod_elem(java.lang.String,int)</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.enabled()</node>
        <node>utilMDE.UtilMDE.NullableStringComparator.compare(java.lang.String,java.lang.String)</node>
        <node>daikon.ProglangType.elementIsIntegral()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.inv.unary.scalar.NonZero.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_esc()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_daikon()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>utilMDE.MathMDE.check_first_and_last_nonmodulus(long[],utilMDE.UtilMDE.RemoveFirstAndLastIterator)</node>
        <node>daikon.VarInfo.java_name()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoString.StringEqual.get_proto()</node>
        <node>daikon.Quantify.IOAQuantification.IOAQuantification(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.Elements.dbc_name_impl(daikon.VarInfo)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_ioa()</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.var1()</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator1(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_daikon()</node>
        <node>daikon.suppress.NISuppression.NISuppression(daikon.suppress.NISuppressor[],daikon.suppress.NISuppressee)</node>
        <node>daikon.inv.binary.twoString.TwoString.var2()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_daikon()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.SeqIntLessEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.check_modified(long[],long,int)</node>
        <node>daikon.Quantify.QuantFlags.element_wise()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.add_modified(java.lang.String[],int)</node>
        <node>utilMDE.UtilMDE.escapeNonASCII(char)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_daikon()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,daikon.VarInfo[],java.lang.String)</node>
        <node>daikon.VarInfoName.Simple.esc_name_impl()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_esc()</node>
        <node>utilMDE.Intern.intern(java.lang.String)</node>
        <node>daikon.test.FormatTestCase.instantiateClass(java.lang.Class,daikon.PptSlice,java.lang.Class[],java.lang.Object[])</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.get_proto()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.add_modified(long[],long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_ioa()</node>
        <node>daikon.VarInfoName.QuantHelper.quantify(daikon.VarInfoName[])</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.Divides.get_format_str(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.PairwiseIntLessEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.maxsep_indices()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.get_proto()</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.Ppt.find_var_by_name(java.lang.String)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_esc()</node>
        <node>daikon.VarInfo.isDerived()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.enabled()</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Simple.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.Quantify.IOAQuantification.IOAQuantification(daikon.VarInfo,daikon.VarInfo)</node>
        <node>daikon.VarComparabilityNone.indexType(int)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.LinearTernaryCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice3.arity()</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.RemoveFirstAndLastIterator(java.util.Iterator)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.IntGreaterEqual(daikon.PptSlice)</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.Modulus.add_modified(long,int)</node>
        <node>daikon.VarInfoName.QuantHelper.simplifyNameAndBounds(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.ProglangType.isFloat()</node>
        <node>daikon.VarInfoName.applySize()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.get_proto()</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>utilMDE.MathMDE.mod_positive(long,long)</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(boolean)</node>
        <node>daikon.VarInfoName.ElementsFinder.inPre()</node>
        <node>daikon.inv.ternary.threeScalar.ThreeScalar.var2()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.format_simplify(java.lang.String,java.lang.String,double,double,double)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_simplify()</node>
        <node>daikon.inv.unary.LowerBoundCore.LowerBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_esc()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.SimpleNamesVisitor(daikon.VarInfoName)</node>
        <node>daikon.ProglangType.base()</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_simplify()</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.check_modified(long[],long[],int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_daikon()</node>
        <node>daikon.inv.unary.scalar.NonZero.NonZero(daikon.PptSlice)</node>
        <node>daikon.VarInfo.ioa_name()</node>
        <node>daikon.VarInfoName.applyDecrement()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_esc()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.sort_rep()</node>
        <node>utilMDE.Fmt.i(int)</node>
        <node>daikon.test.FormatTestCase.getFormat(java.lang.String)</node>
        <node>daikon.test.FormatTestCase.getGoalOutput(java.lang.String)</node>
        <node>daikon.VarInfoName.Simple.simplify_name_impl(java.lang.String,boolean)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_ioa()</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.ternary.TernaryInvariant.TernaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.sort_rep()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_ioa()</node>
        <node>daikon.PptSlice3.PptSlice3(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_simplify()</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.add_modified(long[],int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.get_proto()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.Member(daikon.PptSlice)</node>
        <node>daikon.test.FormatTestCase.instantiate(java.io.LineNumberReader,boolean)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_ioa()</node>
        <node>utilMDE.MathMDE.nonmodulus_strict_long(java.util.Iterator)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.check_modified(long[],long,int)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.enabled()</node>
        <node>daikon.test.FormatTestCase.getSamples(daikon.ProglangType[],java.io.BufferedReader,java.util.List,boolean,java.lang.String)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isString()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.enabled()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.add_modified(long[],int)</node>
        <node>daikon.inv.unary.scalar.Positive.enabled()</node>
        <node>daikon.VarInfoName.QuantHelper.replace(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.SizeOf.esc_name_impl()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.test.FormatTestCase.FormatTestCase(java.util.List,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.inv.binary.twoSequence.SeqSeqIntEqual.get_proto()</node>
        <node>daikon.test.FormatTestCase.getNextRealLine(java.io.BufferedReader)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_daikon()</node>
        <node>daikon.VarInfoName.Elements.simplify_name_impl(boolean)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_daikon()</node>
        <node>daikon.Quantify.Term.ioa_name()</node>
        <node>daikon.test.FormatTestCase.populateWithSamples(daikon.inv.Invariant,java.util.List)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.check_modified(long[],long[],int)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.IntNonEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.get_proto()</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_esc()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.enabled()</node>
        <node>daikon.inv.unary.scalar.UpperBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_daikon()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.subarray_rep()</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_daikon()</node>
        <node>daikon.inv.binary.twoSequence.Reverse.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_ioa()</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_simplify()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.planarIntervention(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.inv.unary.LowerBoundCore.wouldChange(long)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualMinusOne.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.check_modified(long[],long[],int)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.is_type()</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.add_modified(long[],int)</node>
        <node>daikon.test.FormatTestCase.SingleOutputTestCase.SingleOutputTestCase(java.lang.reflect.Method,java.lang.Object[],java.lang.String,int,java.lang.String)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.check_modified(long[],long[],int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.runValue(long,int,boolean)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_simplify()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfo.simplify_quantify(java.util.EnumSet,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.format_simplify()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.separation(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point,daikon.inv.ternary.threeScalar.LinearTernaryCore.Point)</node>
        <node>daikon.VarInfoName.NodeFinder.inPre()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_simplify()</node>
        <node>daikon.inv.binary.twoString.StringEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.enabled()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_simplify()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.get_proto()</node>
        <node>daikon.test.InvariantFormatTester.execute()</node>
        <node>daikon.inv.unary.scalar.NonModulus.add_modified(long,int)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.add_modified(long[],int)</node>
        <node>daikon.VarInfoName.java_name(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.QuantHelper.format_esc(daikon.VarInfoName[],boolean)</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.IntLessEqual(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_using(daikon.inv.OutputFormat)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_esc()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.get_proto()</node>
        <node>daikon.inv.unary.scalar.Modulus.instantiate_ok(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.Positive.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_daikon()</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName[],boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.string.OneOfString.format_daikon()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_esc()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,double,double,double)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_daikon()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.get_proto()</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName.QuantHelper.QuantifyReturn,boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>daikon.simplify.SimpUtil.assert_well_formed(java.lang.String)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.try_points_linear(double,double,double)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.enabled()</node>
        <node>daikon.inv.binary.twoSequence.Reverse.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.EltUpperBound(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.format_unimplemented(daikon.inv.OutputFormat)</node>
        <node>daikon.test.InvariantFormatTester.isComment(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.FreeVar(java.lang.String)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfo.apply_subscript(java.lang.String,java.lang.String)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.hasNodeOfType(java.lang.Class)</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.check_mod_elem(java.lang.String,int)</node>
        <node>utilMDE.MathMDE.modulus_strict_long(java.util.Iterator,boolean)</node>
        <node>daikon.Quantify.FreeVar.name()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.Point.Point(long,long,long)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.get_proto()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.runValue(java.lang.String[],int,boolean)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.Add.repr_impl()</node>
        <node>daikon.inv.unary.scalar.Modulus.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Subscript.esc_name_impl()</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.format_daikon()</node>
        <node>daikon.VarInfoName.QuantHelper.format_simplify(daikon.VarInfoName[],boolean,boolean,boolean,boolean)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.calc_tri_linear(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_simplify()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.add_modified(long,long,int)</node>
        <node>daikon.ProglangType.myParseLong(java.lang.String)</node>
        <node>daikon.test.FormatTestCase.getTypes(java.lang.String)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.add_modified(long[],long[],int)</node>
        <node>daikon.inv.binary.twoString.StringEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Elements.getLowerBound()</node>
        <node>daikon.inv.unary.string.OneOfString.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.name_using(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_step_terminator(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.add_modified(long[],int)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.OutputFormat.toString()</node>
        <node>daikon.VarInfoName.InorderFlattener.InorderFlattener(daikon.VarInfoName)</node>
        <node>daikon.suppress.NISuppressor.swap()</node>
        <node>daikon.inv.unary.UpperBoundCore.add_modified(long,int)</node>
        <node>daikon.ProglangType.baseIsFloat()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_ioa()</node>
        <node>daikon.inv.unary.string.OneOfString.enabled()</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.get_proto()</node>
        <node>daikon.VarInfoName.QuantHelper.freshDistinctFrom(java.util.Set)</node>
        <node>daikon.inv.InvariantStatus.InvariantStatus(java.lang.String)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.format_simplify()</node>
        <node>daikon.inv.unary.string.SingleString.SingleString(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.SizeOf.repr_impl()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.Positive.Positive(daikon.PptSlice)</node>
        <node>daikon.VarInfo.isIOASet()</node>
        <node>daikon.inv.unary.string.OneOfString.format_esc()</node>
        <node>daikon.VarInfoName.SizeOf.SizeOf(daikon.VarInfoName)</node>
        <node>daikon.inv.Invariant.simplify_format_long(long)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.NumericInt(daikon.PptSlice,boolean)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_simplify()</node>
        <node>utilMDE.ArraysMDE.indexOf(java.lang.Object[],java.lang.Object)</node>
        <node>daikon.VarInfoName.Elements.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.Quantify.FreeVar.FreeVar(java.lang.String)</node>
        <node>daikon.VarInfo.jml_name()</node>
        <node>daikon.VarInfo.esc_quantify(boolean,daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.NonZero.enabled()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.NonModulus.enabled()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,java.lang.String,double,double,double,double)</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorLong.hasNext()</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_daikon()</node>
        <node>daikon.inv.unary.scalar.UpperBound.add_modified(long,int)</node>
        <node>daikon.VarInfoName.NodeFinder.NodeFinder(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.inv.binary.twoSequence.SeqSeqIntEqual.SeqSeqIntEqual(daikon.PptSlice,boolean)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.format_simplify(java.lang.String,java.lang.String,java.lang.String,double,double,double,double)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.PairwiseIntEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.get_swap()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_daikon()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.check_modified(long[],int)</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.format_simplify_explicit()</node>
        <node>daikon.inv.binary.twoString.TwoString.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.sclvar()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.SubSequence(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.scl_index()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_esc()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.get_proto()</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.seqvar()</node>
        <node>daikon.test.FormatTestCase.createSlice(daikon.VarInfo[],daikon.PptTopLevel)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_ioa()</node>
        <node>daikon.VarInfoName.jml_name(daikon.VarInfo)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.add_modified(long[],long[],int)</node>
        <node>daikon.VarInfoName.Elements.getUpperBound()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.SeqIndexIntNonEqual(daikon.PptSlice)</node>
        <node>utilMDE.UtilMDE.replaceString(java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.VarInfoName.simplify_name(boolean)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.inv.unary.scalar.NonModulus.get_proto()</node>
        <node>daikon.VarInfoName.Subscript.Subscript(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>utilMDE.Intern.intern(java.lang.Long)</node>
        <node>daikon.ProglangType.baseIsString()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.ArraysMDE.indexOf(long[],long[])</node>
        <node>daikon.VarInfoName.Elements.java_name_impl(daikon.VarInfo)</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.SequenceString(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.NodeFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.Reverse.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.Reverse.Reverse(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfo.get_enclosing_var()</node>
        <node>utilMDE.ArraysMDE.isSubarray(long[],long[],int)</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.SeqIndexIntNonEqual()</node>
        <node>daikon.inv.unary.scalar.Modulus.enabled()</node>
        <node>daikon.test.FormatTestCase.getVarInfo(daikon.ProglangType,int)</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Add.esc_name_impl()</node>
        <node>daikon.inv.unary.string.OneOfString.sort_rep()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.SeqIntGreaterThan(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_daikon()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_daikon()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Replacer.replace(daikon.VarInfoName)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.enabled()</node>
        <node>daikon.VarInfo.isDerivedSubSequenceOf()</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.seq_first()</node>
        <node>daikon.VarInfo.get_ioa_quantify(daikon.VarInfo,daikon.VarInfo)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_ioa()</node>
        <node>daikon.VarInfoName.Add.simplify_name_impl(boolean)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.Divides.get_proto(boolean)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.Reverse.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.check_modified(long[],long,int)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.SeqIndexIntGreaterThan()</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.enabled()</node>
        <node>daikon.inv.unary.string.OneOfString.get_proto()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Elements.name_impl()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>daikon.inv.binary.sequenceString.MemberString.enabled()</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.repr_impl()</node>
        <node>daikon.inv.unary.string.OneOfString.runValue(java.lang.String,int,boolean)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.enabled()</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.VarInfo.simplify_name()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.formatTerm(double,java.lang.String,boolean)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.get_proto()</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfo.simplifyNameAndBounds()</node>
        <node>daikon.VarInfoName.Elements.name_impl(java.lang.String)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.get_proto()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_esc()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_esc()</node>
        <node>daikon.inv.unary.string.OneOfString.check_mod_elem(java.lang.String,int)</node>
        <node>daikon.inv.unary.string.OneOfString.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.Quantify.IOAQuantification.getFreeVarName(int)</node>
        <node>daikon.Quantify.IOAQuantification.getMembershipRestriction(int)</node>
        <node>daikon.VarInfoName.SizeOf.simplify_name_impl(boolean)</node>
        <node>daikon.inv.binary.sequenceString.MemberString.format_ioa()</node>
        <node>daikon.inv.unary.LowerBoundCore.add_modified(long,int)</node>
        <node>daikon.inv.binary.twoString.StringEqual.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_simplify()</node>
        <node>daikon.inv.unary.scalar.LowerBound.LowerBound(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.ioa_name()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.add_modified(long[],int)</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.ValueSet.ValueSetStringArray.ValueSetStringArray(int)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_esc()</node>
        <node>daikon.test.FormatTestCase.passes()</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.LinearTernary(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Elements.Elements(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.UpperBoundCore.wouldChange(long)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.inv.unary.stringsequence.SingleStringSequence.var()</node>
        <node>daikon.VarInfoName.Simple.java_name_impl(daikon.VarInfo)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.get_proto()</node>
        <node>daikon.test.InvariantFormatTester.getNextRealLine(java.io.BufferedReader)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_ioa()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.add_modified(long[],long,int)</node>
        <node>utilMDE.Intern.intern(java.lang.String[])</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_ioa()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>utilMDE.Intern.LongHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.binary.sequenceString.MemberString.format_daikon()</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.sclvar()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_esc()</node>
        <node>daikon.inv.ternary.threeScalar.ThreeScalar.ThreeScalar(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.simplify_name()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.add_modified(long[],long,int)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_simplify()</node>
        <node>daikon.inv.OutputFormat.get(java.lang.String)</node>
        <node>daikon.inv.unary.string.OneOfString.add_modified(java.lang.String,int)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_esc()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.TwoSequence.TwoSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_hashcode()</node>
        <node>daikon.inv.unary.scalar.NonZero.zero(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.add_mod_elem(long,int)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.SeqIntEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.var2()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.string.SingleString.valid_types(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.Add.amount()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.format_ioa()</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfo.simplify_quantify(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltNonZero.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.ioaFormatVar(java.lang.String)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_simplify()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.LinearBinaryCore(daikon.inv.Invariant)</node>
        <node>utilMDE.Intern.StringArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.sort_rep()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.OneOfScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.InorderFlattener.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.set_bi_linear(long,long,long,long)</node>
        <node>daikon.inv.binary.twoSequence.TwoSequence.var1()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.EltwiseIntLessThan(daikon.PptSlice)</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.binary.BinaryInvariant.is_symmetric()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.get_proto()</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.seq_first()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.SeqIntGreaterEqual(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.EltLowerBound(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.Elements.getSubscript(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_boolean()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.UpperBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_simplify_explicit()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.format_simplify()</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.next()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_ioa()</node>
        <node>daikon.VarInfoName.applySubscript(daikon.VarInfoName)</node>
        <node>daikon.inv.binary.sequenceScalar.Member.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.ElementsFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.UpperBound.get_proto()</node>
        <node>daikon.VarInfoName.QuantHelper.quant_execution_condition(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.Point.equals(long,long,long)</node>
        <node>daikon.inv.binary.twoString.TwoString.var1()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfo.get_ioa_quantify(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.QuantifierVisitor(daikon.VarInfoName)</node>
        <node>utilMDE.Stopwatch.Stopwatch(boolean)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_ioa()</node>
        <node>daikon.VarInfoName.esc_name()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.suppress.NISuppressionSet.swap()</node>
        <node>utilMDE.Intern.intern(java.lang.Object)</node>
        <node>daikon.inv.unary.scalar.UpperBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.check_modified(long[],int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_esc()</node>
        <node>daikon.VarInfo.dbc_name()</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_esc()</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.get_proto()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.string.OneOfString.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.PairwiseIntGreaterEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.get_proto()</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.getFirst()</node>
        <node>daikon.inv.unary.scalar.NonModulus.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.logDetail()</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.TwoScalar(daikon.PptSlice)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.add_modified(long,long,long,int)</node>
        <node>daikon.VarInfoName.dbc_name(daikon.VarInfo)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.ElementsFinder.elems()</node>
        <node>utilMDE.UtilMDE.escapeNonASCII(java.lang.String)</node>
        <node>daikon.VarInfo.get_simplify_free_index(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.UpperBoundCore.UpperBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.suppress.NISuppression.NISuppression(daikon.suppress.NISuppressor,daikon.suppress.NISuppressee)</node>
        <node>daikon.VarInfoAux.getFlag(java.lang.String)</node>
        <node>daikon.VarInfoName.applyAdd(int)</node>
        <node>daikon.test.FormatTestCase.SingleOutputTestCase.createTestOutput(daikon.inv.Invariant)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.maxsep_triples(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.VarInfoName.QuantHelper.quant_format_forall(daikon.inv.OutputFormat)</node>
        <node>daikon.Quantify.IOAQuantification.getVarIndexedString(int)</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.ternary.threeScalar.ThreeScalar.var3()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.format_ioa()</node>
        <node>daikon.VarComparabilityNone.elementType()</node>
        <node>daikon.VarInfo.domainTypeIOA()</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.inv.binary.sequenceScalar.Member.check_modified(long[],long,int)</node>
        <node>daikon.inv.binary.sequenceString.MemberString.MemberString(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.TwoSequence.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.check_modified(long[],int)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.inv.ValueSet.ValueSetScalarArray.ValueSetScalarArray(int)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_increment(daikon.VarInfoName,int,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfo.isIOAArray()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.check_modified(java.lang.String[],java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.format_ioa()</node>
        <node>daikon.VarInfoName.Replacer.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.enabled()</node>
        <node>daikon.ProglangType.isPointerFileRep()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.SequenceScalar(daikon.PptSlice)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.calc_bi_linear(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.scl_index()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.NonModulus.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.Member.get_proto()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_esc()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.string.OneOfString.format_simplify()</node>
        <node>daikon.inv.unary.sequence.EltNonZero.EltNonZero(daikon.PptSlice)</node>
        <node>daikon.PptSlice2.arity()</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.add_modified(long[],long,int)</node>
        <node>daikon.test.FormatTestCase.SingleOutputTestCase.performTest(daikon.inv.Invariant)</node>
        <node>utilMDE.Intern.internedLong(long)</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.format_daikon()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.suppress.NISuppressee.NISuppressee(java.lang.Class,int)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.add_modified(long,long,long,int)</node>
        <node>daikon.VarInfoName.toString()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_ioa()</node>
        <node>daikon.inv.ternary.threeScalar.ThreeScalar.var1()</node>
        <node>daikon.suppress.NISuppressee.NISuppressee(java.lang.Class,boolean)</node>
        <node>utilMDE.FuzzyFloat.eq(double,double)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.format_simplify()</node>
        <node>daikon.VarInfoName.ElementsFinder.ElementsFinder(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.subarray_rep()</node>
        <node>daikon.inv.unary.scalar.NonModulus.NonModulus(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.enabled()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernary.get_proto()</node>
        <node>daikon.inv.unary.scalar.Modulus.get_proto()</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.suppress.NISuppression.NISuppression(daikon.suppress.NISuppressor,daikon.suppress.NISuppressor,daikon.suppress.NISuppressee)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_ioa()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.subarray_rep()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.get_proto()</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.add_modified(long[],long[],int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_java_family(daikon.inv.OutputFormat)</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object[])</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_ioa()</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>daikon.inv.binary.twoString.StringEqual.check_modified(java.lang.String,java.lang.String,int)</node>
        <node>daikon.test.FormatTestCase.parseGoal(java.lang.String)</node>
        <node>daikon.test.FormatTestCase.getArity(java.lang.Class)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.add_modified(long[],long,int)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfo.simplify_name(java.lang.String)</node>
        <node>daikon.VarInfoName.Simple.ioa_name_impl()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceString.MemberString.get_proto()</node>
        <node>daikon.PptSlice2.PptSlice2(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_simplify()</node>
        <node>utilMDE.Intern.LongHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_ioa()</node>
        <node>daikon.VarInfoName.Elements.repr_impl()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.PairwiseIntLessThan(daikon.PptSlice)</node>
        <node>daikon.suppress.NISuppressionSet.NISuppressionSet(daikon.suppress.NISuppression[])</node>
        <node>daikon.VarInfoName.applyElements()</node>
        <node>daikon.inv.unary.string.OneOfString.add_mod_elem(java.lang.String,int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.simplify.LemmaStack.noticeInt(long)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.IntEqual(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_mod_elem(long,int)</node>
        <node>daikon.VarComparability.comparable(daikon.VarComparability,daikon.VarComparability)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_daikon()</node>
        <node>daikon.suppress.NISuppressor.NISuppressor(int,int,java.lang.Class)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.getLast()</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.enabled()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,java.lang.String)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.unary.string.OneOfString.OneOfString(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.Simple.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.maxsep_doubles(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.enabled()</node>
        <node>daikon.Quantify.IOAQuantification.getQuantifierExp()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.find_bi_linear(long,long,long,long,double[])</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.check_modified(long[],int)</node>
        <node>daikon.VarInfoName.Simple.dbc_name_impl(daikon.VarInfo)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.enabled()</node>
        <node>daikon.inv.unary.string.OneOfString.is_type()</node>
        <node>daikon.VarInfoName.inPrestateContext(daikon.VarInfoName)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_simplify()</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.VarInfo.is_direct_non_slice_array()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.format_daikon()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_daikon()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.enabled()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.check_modified(long[],long[],int)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_ioa()</node>
        <node>daikon.test.InvariantFormatTester.performTest(java.io.LineNumberReader,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Subscript.simplify_name_impl(boolean)</node>
        <node>daikon.inv.binary.sequenceScalar.Member.enabled()</node>
        <node>daikon.VarInfo.esc_quantify(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_ioa()</node>
        <node>daikon.VarInfo.get_all_simple_names()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.format_esc()</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.formatTerm(double,java.lang.String,boolean)</node>
        <node>daikon.Debug.logDetail()</node>
        <node>daikon.inv.unary.stringsequence.SingleStringSequence.SingleStringSequence(daikon.PptSlice)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.VarInfoName.InorderFlattener.nodes()</node>
        <node>daikon.suppress.NISuppressee.swap()</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.linearIntervention(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>daikon.VarInfo.has_typeof()</node>
        <node>daikon.inv.unary.scalar.NonModulus.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.format_simplify()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.enabled()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.inv.unary.scalar.Modulus.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntEqual.check_modified(long[],long,int)</node>
        <node>daikon.inv.unary.string.SingleString.var()</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.simplify_name_impl(boolean)</node>
        <node>daikon.inv.binary.twoString.StringEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.Subscript.repr_impl()</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualOne.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.Divides.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.IntGreaterThan(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.add_modified(long[],long[],int)</node>
        <node>daikon.Quantify.quantify(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoString.StringEqual.StringEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.enabled()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.NonZero.is_pointer()</node>
        <node>daikon.inv.unary.scalar.LowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>utilMDE.Intern.internStrings(java.lang.String[])</node>
        <node>daikon.inv.unary.sequence.EltOneOf.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.NoDuplicates(daikon.PptSlice)</node>
        <node>daikon.test.FormatTestCase.getAddModified(java.lang.Class)</node>
        <node>daikon.inv.unary.scalar.Positive.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.is_hashcode()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.maxsep_point(long[],long[])</node>
        <node>daikon.suppress.NISuppressor.toString()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.add_modified(long[],long[],int)</node>
        <node>utilMDE.MathMDE.nonmodulus_strict_long_internal(java.util.Iterator)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.add_modified(long[],long,int)</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntGreaterThan.format_simplify()</node>
        <node>daikon.inv.unary.scalar.NonZero.get_proto()</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorLong.MissingNumbersIteratorLong(java.util.Iterator,boolean)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.Member.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptTopLevel.is_constant(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator2(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_var_initial_state(daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoString.StringEqual.add_modified(java.lang.String,java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_esc()</node>
        <node>daikon.VarInfoName.Simple.isLiteralConstant()</node>
        <node>daikon.inv.unary.scalar.Positive.get_proto()</node>
        <node>daikon.inv.unary.sequence.SeqIndexIntNonEqual.enabled()</node>
        <node>daikon.inv.unary.scalar.LowerBound.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.seq_index()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.check_mod_elem(long,int)</node>
        <node>daikon.VarInfoName.Elements.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.test.FormatTestCase.getClass(java.lang.String)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.UpperBound.UpperBound(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.format_java_family(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.string.OneOfString.format_ioa()</node>
        <node>daikon.inv.unary.scalar.LowerBound.add_modified(long,int)</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.enabled()</node>
        <node>daikon.VarInfoName.Elements.esc_name_impl(java.lang.String)</node>
        <node>daikon.test.InvariantFormatTester.isWhitespace(java.lang.String)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.UpperBound.enabled()</node>
        <node>daikon.VarInfoName.QuantHelper.getFreeIndex(daikon.VarInfoName[])</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.check_modified(long[],long,int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.add_modified(long[],long[],int)</node>
        <node>daikon.VarInfo.isPointer()</node>
        <node>daikon.Quantify.QuantFlags.include_index()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntLessThan.format_simplify()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>daikon.test.FormatTestCase.getVarInfos(java.lang.Class,daikon.ProglangType[])</node>
        <node>daikon.Quantify.QuantifyReturn.QuantifyReturn(daikon.VarInfo)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.PairwiseIntGreaterThan(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoSequence.Reverse.format_daikon()</node>
        <node>daikon.inv.unary.scalar.LowerBound.get_proto()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessEqual.check_modified(long[],long[],int)</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualZero.get_proto()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntLessThan.get_proto()</node>
        <node>daikon.inv.unary.sequence.EltNonZero.is_pointer()</node>
        <node>daikon.inv.unary.sequence.EltwiseIntComparison.EltwiseIntComparison(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.simples()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.format_esc()</node>
        <node>daikon.inv.binary.sequenceScalar.SequenceScalar.seqvar()</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.VarInfoName.hasTypeOf()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.enabled()</node>
        <node>daikon.inv.binary.sequenceString.SequenceString.seq_index()</node>
        <node>daikon.inv.unary.sequence.EltLowerBound.enabled()</node>
        <node>daikon.inv.binary.sequenceString.MemberString.add_modified(java.lang.String[],java.lang.String,int)</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntLessThan.enabled()</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_simplify()</node>
        <node>daikon.VarInfoName.inOrderTraversal()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoSequence.SubSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.ArraysMDE.indexOf(long[],long)</node>
        <node>daikon.inv.Invariant.simplify_format_string(java.lang.String)</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.sequence.EltOneOf.EltOneOf(daikon.PptSlice)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.inv.unary.sequence.EltUpperBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.Quantify.QuantFlags.adjacent()</node>
        <node>daikon.VarInfoName.Elements.ioa_name_impl()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_modified(long,int)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.stringsequence.EltOneOfString.EltOneOfString(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>utilMDE.MathMDE.gcd(long,long)</node>
        <node>daikon.VarInfo.simplifyFixup(java.lang.String)</node>
        <node>daikon.VarInfoName.Add.Add(daikon.VarInfoName,int)</node>
        <node>daikon.inv.Invariant.is_false()</node>
        <node>daikon.VarInfoName.SizeOf.get_term()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.add_modified(long,long,int)</node>
        <node>daikon.VarComparabilityNone.comparable(daikon.VarComparabilityNone,daikon.VarComparabilityNone)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.enabled()</node>
        <node>daikon.Quantify.IOAQuantification.getClosingExp()</node>
        <node>daikon.VarInfoName.InorderFlattener.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.Quantify.QuantFlags.distinct()</node>
        <node>daikon.inv.binary.twoSequence.PairwiseIntGreaterThan.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.sequenceScalar.SeqIntGreaterEqual.format_esc()</node>
        <node>daikon.inv.unary.sequence.NoDuplicates.get_proto()</node>
        <node>daikon.inv.unary.sequence.EltOneOf.format_daikon()</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>daikon.suppress.NISuppressor.NISuppressor(int,java.lang.Class)</node>
        <node>daikon.inv.Invariant.log(java.lang.String,java.lang.Object[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsNotEqual()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.eltsNotEqual(int[],int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsNotEqualIndex()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.eltsNotEqualIndex(int[])</node>
      </test>
      <test name="daikon.test.TestAnnotate.testGetTabbedIndex()">
        <node>daikon.tools.jtb.AnnotateVisitor.getTabbedIndex(int,java.lang.String)</node>
      </test>
      <test name="daikon.test.diff.MinusVisitorTester.testMinus()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.Invariant.ClassVarnameFormulaComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,double,boolean,boolean)</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.test.diff.DiffDummyInvariant.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.diff.Diff.setAllInvComparators(java.util.Comparator)</node>
        <node>daikon.diff.Diff.setInvSortComparator1(java.util.Comparator)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.diff.Diff.setInvSortComparator2(java.util.Comparator)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.test.diff.DiffDummyInvariant.repr()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.diff.Diff.setInvPairComparator(java.util.Comparator)</node>
        <node>daikon.diff.MinusVisitor.shouldAdd(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.diff.InvMap.addPpt(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean,boolean,boolean)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.InvMap.pptIterator()</node>
        <node>daikon.test.diff.DiffDummyInvariant.computeConfidence()</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.diff.InvMap.add(daikon.PptTopLevel,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.MinusVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.diff.MinusVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.MinusVisitor.getResult()</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.InvMap.toString()</node>
        <node>daikon.inv.Invariant.format()</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testTestUtilMDE()">
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.TestUtilMDE.int_iterator_array(java.util.Iterator)</node>
        <node>utilMDE.TestUtilMDE.int_array_iterator(int[])</node>
      </test>
      <test name="daikon.test.inv.unary.sequence.OneOfSequenceTester.testDifferentLengths()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.enabled()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.is_hashcode()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.OneOfSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.sort_rep()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.get_proto()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_modified(long[],int)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.check_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testConditionalPptsFalse()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_10()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testHasher()">
        <node>utilMDE.WeakHasherMap.EntrySet.iterator()</node>
        <node>utilMDE.WeakHasherMap.size()</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(int[])</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.Entry.Entry(utilMDE.WeakHasherMap,java.util.Map.Entry,java.lang.Object)</node>
        <node>utilMDE.TestUtilMDE.1InternTest.test(boolean)</node>
        <node>utilMDE.WeakHasherMap.EntrySet.1.hasNext()</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.numIntArrays()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.Intern.IntArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.EntrySet.1.next()</node>
        <node>utilMDE.WeakHasherMap.EntrySet.size()</node>
        <node>utilMDE.WeakHasherMap.entrySet()</node>
        <node>utilMDE.Intern.IntArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_1()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DetailedStatisticsVisitorTester.testShouldAddFrequency()">
        <node>daikon.diff.DetailedStatisticsVisitor.shouldAddFrequency(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isWorthPrinting()</node>
      </test>
      <test name="daikon.test.ModBitTrackerTest.testModBitTracker()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.ValueTuple.tuplemodHasMissingFlow(int)</node>
        <node>daikon.ValueTuple.isMissingFlow(int)</node>
        <node>utilMDE.MathMDE.pow_fast(int,int)</node>
        <node>daikon.ModBitTracker.add(daikon.ValueTuple,int)</node>
        <node>daikon.ValueTuple.tuplemodHasMissingNonsensical(int)</node>
        <node>daikon.test.ModBitTrackerTest.makeModBitTracker(java.util.BitSet[])</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.ModBitTracker.num_vars()</node>
        <node>daikon.ModBitTracker.split(int)</node>
        <node>daikon.test.ModBitTrackerTest.randomModBoolean(int,int)</node>
        <node>daikon.ValueTuple.isMissing(int)</node>
        <node>daikon.test.ModBitTrackerTest.checkModBitTracker(daikon.ModBitTracker,java.util.BitSet[])</node>
        <node>utilMDE.MathMDE.pow(int,int)</node>
        <node>daikon.ValueTuple.size()</node>
        <node>daikon.test.ModBitTrackerTest.makeBitSets(int,int,double)</node>
        <node>daikon.ValueTuple.tuplemodHasModified(int)</node>
        <node>daikon.test.ModBitTrackerTest.oneModBitTrackerTest(int,int,double)</node>
        <node>daikon.ModBitTracker.num_sets()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.ValueTuple.makeUninterned(java.lang.Object[],int[])</node>
        <node>daikon.ModBitTracker.get(int)</node>
        <node>daikon.test.ModBitTrackerTest.booleanToModBit(boolean)</node>
        <node>daikon.ValueTuple.ValueTuple(java.lang.Object[],int[],boolean)</node>
        <node>daikon.ModBitTracker.num_samples()</node>
        <node>daikon.ValueTuple.isMissingNonsensical(int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexNotEqual()">
        <node>daikon.Quant.lexNotEqual(int[],int[])</node>
        <node>daikon.Quant.pairwiseEqual(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.lexEqual(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_subsetOf_different_types()">
        <node>daikon.Quant.eq(long,long)</node>
        <node>daikon.Quant.memberOf(float,float[])</node>
        <node>daikon.Quant.subsetOf(double[],double[])</node>
        <node>utilMDE.FuzzyFloat.eq(double,double)</node>
        <node>daikon.Quant.eq(double,double)</node>
        <node>daikon.Quant.subsetOf(float[],double[])</node>
        <node>daikon.Quant.isIntegralType(java.lang.Class)</node>
        <node>daikon.Quant.subsetOf(float[],float[])</node>
        <node>daikon.Quant.memberOf(float,double[])</node>
        <node>daikon.Quant.subsetOf(double[],float[])</node>
        <node>daikon.Quant.memberOf(long,long[])</node>
        <node>daikon.Quant.memberOf(short,short[])</node>
        <node>daikon.Quant.subsetOf(byte[],int[])</node>
        <node>daikon.Quant.memberOf(double,float[])</node>
        <node>daikon.Quant.subsetOf(short[],short[])</node>
        <node>daikon.Quant.subsetOf(java.lang.Object,java.lang.Object)</node>
        <node>daikon.Quant.eq(float,float)</node>
        <node>daikon.Quant.subsetOf(long[],long[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testSequenceAndIndices()">
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.SequenceAndIndices.hashCode()</node>
        <node>utilMDE.ArraysMDE.subarray(long[],int,int)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.internSubsequence(long[],int,int)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.Intern.IntArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.Intern.internSubsequence(int[],int,int)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(int[])</node>
        <node>utilMDE.Intern.isInterned(java.lang.Object)</node>
        <node>utilMDE.ArraysMDE.subarray(int[],int,int)</node>
        <node>utilMDE.Intern.SequenceAndIndicesHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.SequenceAndIndicesHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.ArraysMDE.isSubarray(int[],int[],int)</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.IntArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.SequenceAndIndices.SequenceAndIndices(java.lang.Object,int,int)</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>utilMDE.Intern.SequenceAndIndices.equals(utilMDE.Intern.SequenceAndIndices)</node>
      </test>
      <test name="daikon.test.diff.ConsequentCVFPairComparatorTester.testCompare()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.Implication.consequent()</node>
        <node>daikon.inv.unary.scalar.NonZero.enabled()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.Invariant.ClassVarnameFormulaComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.initInvariantsSeen()</node>
        <node>daikon.inv.unary.scalar.NonZero.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.PptSlice0.hasImplication(daikon.inv.Implication)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.PptSlice0.ImplicationWrapper.format()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.unary.scalar.NonZero.get_proto()</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.unary.scalar.NonZero.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.diff.ConsequentPairComparator.ConsequentPairComparator(java.util.Comparator)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.hashCode()</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.OutputFormat.isJavaFamily()</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.inv.unary.scalar.NonZero.NonZero(daikon.PptSlice)</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Implication.makeImplication(daikon.PptTopLevel,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoAux.getFlag(java.lang.String)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.Implication.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.diff.ConsequentCVFPairComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.inv.unary.scalar.NonZero.zero(daikon.inv.OutputFormat)</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.diff.ConsequentPairComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.Implication.Implication(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.ImplicationWrapper(daikon.inv.Implication)</node>
        <node>daikon.inv.Joiner.Joiner(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.NonZero.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.NonZero.is_pointer()</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
      </test>
      <test name="daikon.test.inv.unary.scalar.OneOfScalarTester.testNullNon()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_hashcode()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.check_mod_elem(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.sort_rep()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_mod_elem(long,int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_modified(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.runValue(long,int,boolean)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.enabled()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.OneOfScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_boolean()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.get_proto()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isScalar()</node>
      </test>
      <test name="daikon.test.VarComparabilityTest.test_VarComparabilityImplicit_1Darray_parts()">
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.comparable(daikon.VarComparabilityImplicit,daikon.VarComparabilityImplicit)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.VarComparabilityImplicit(int,daikon.VarComparabilityImplicit[],int)</node>
        <node>daikon.ProglangType.ProglangType(java.lang.String,int)</node>
        <node>daikon.VarComparabilityImplicit.indexType(int)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.VarComparability.comparable(daikon.VarComparability,daikon.VarComparability)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.VarComparabilityImplicit.parse(java.lang.String,daikon.ProglangType)</node>
        <node>daikon.ProglangType.parse(java.lang.String)</node>
        <node>daikon.test.VarComparabilityTest.parsei(java.lang.String)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.VarComparabilityImplicit.alwaysComparable()</node>
        <node>daikon.VarComparabilityImplicit.elementType()</node>
        <node>daikon.VarComparability.parse(int,java.lang.String,daikon.ProglangType)</node>
        <node>daikon.test.VarComparabilityTest.comp(daikon.VarComparability,daikon.VarComparability)</node>
      </test>
      <test name="daikon.test.inv.unary.scalar.OneOfScalarTester.testNonNon()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_hashcode()</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.check_mod_elem(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.sort_rep()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_mod_elem(long,int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.add_modified(long,int)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.runValue(long,int,boolean)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.enabled()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.OneOfScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.is_boolean()</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.get_proto()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.OneOfScalar.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isScalar()</node>
      </test>
      <test name="daikon.test.TestQuant.test_isReverse()">
        <node>daikon.Quant.isReverse(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsEqual()">
        <node>daikon.Quant.ne(int,int)</node>
        <node>daikon.Quant.eltsEqual(int[],int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testmisc_Fib_main_18()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_noDups()">
        <node>daikon.Quant.noDups(int[])</node>
        <node>utilMDE.ArraysMDE.noDuplicates(int[])</node>
      </test>
      <test name="daikon.test.LinearTernaryCoreTest.test_format()">
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,java.lang.String,double,double,double,double)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.formatTerm(double,java.lang.String,boolean)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.formatTerm(double,java.lang.String,boolean)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.LinearTernaryCore(daikon.inv.Invariant)</node>
        <node>daikon.test.LinearTernaryCoreTest.one_test_format(double,double,double,double,java.lang.String)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.inv.OutputFormat.isJavaFamily()</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testInvs1Invs3()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.UpperBoundCore.calc_modulus()</node>
        <node>daikon.inv.unary.scalar.UpperBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isInteresting()</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.unary.scalar.UpperBound.computeConfidence()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.PptSlice1.num_samples()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeConfidence()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.num_samples(daikon.VarInfo)</node>
        <node>daikon.inv.unary.LowerBoundCore.LowerBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.LowerBound.computeConfidence()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.inv.Invariant.logDetail()</node>
        <node>daikon.inv.unary.scalar.LowerBound.enabled()</node>
        <node>daikon.inv.unary.scalar.UpperBound.isInteresting()</node>
        <node>daikon.inv.unary.UpperBoundCore.calc_avg_samples_per_val(long,double)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>daikon.inv.unary.LowerBoundCore.computeProbability()</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrintln()</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_range()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.UpperBound.UpperBound(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.InvariantComparatorForPrinting.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.inv.unary.UpperBoundCore.UpperBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.inv.unary.UpperBoundCore.prob_and(double,double)</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineType(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.UpperBoundCore.prob_or(double,double)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_modulus()</node>
        <node>daikon.inv.unary.scalar.UpperBound.enabled()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,java.lang.String)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineRelationship(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_or(double,double)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.printPrintability(daikon.inv.Invariant)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrint(java.lang.String)</node>
        <node>daikon.inv.unary.UpperBoundCore.computeProbability()</node>
        <node>daikon.inv.unary.scalar.LowerBound.get_proto()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.Invariant.prob_and(double,double)</node>
        <node>daikon.inv.unary.UpperBoundCore.prob_is_ge(double,double)</node>
        <node>daikon.inv.unary.LowerBoundCore.isSameFormula(daikon.inv.unary.LowerBoundCore)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.Invariant.isWorthPrinting()</node>
        <node>daikon.Debug.logDetail()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.diff.PrintAllVisitor.printInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepPropFilters(daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.inv.unary.scalar.UpperBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_is_ge(double,double)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.unary.UpperBoundCore.calc_range()</node>
        <node>daikon.inv.Invariant.prob_is_ge(double,double)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,daikon.VarInfo[],java.lang.String)</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Invariant.prob_or(double,double)</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeep(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.diff.PrintAllVisitor.printConfidence(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.inv.unary.scalar.UpperBound.get_proto()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.inv.unary.scalar.UpperBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepVarFilters(daikon.inv.Invariant)</node>
        <node>daikon.ModBitTracker.get(int)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.filter.InvariantFilter.shouldDiscard(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.UpperBoundCore.computeConfidence()</node>
        <node>daikon.inv.filter.UnjustifiedFilter.shouldDiscardInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.inv.filter.InvariantFilters.defaultFilters()</node>
        <node>daikon.inv.unary.scalar.LowerBound.LowerBound(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.LowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_and(double,double)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_avg_samples_per_val(long,double)</node>
        <node>daikon.inv.Invariant.log(java.lang.String,java.lang.Object[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_9()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.VarInfoNameTest.testJML()">
        <node>daikon.VarInfoName.FunctionOf.name_impl()</node>
        <node>daikon.VarInfoName.FunctionOfN.name_impl()</node>
        <node>daikon.VarInfoName.FunctionOfN.FunctionOfN(java.lang.String,java.util.List)</node>
        <node>daikon.test.VarInfoNameDriver.Prestate.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Replacer.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.VarInfoName.Prestate.name_impl()</node>
        <node>daikon.test.VarInfoNameDriver.FunctionOfN.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Replacer.Replacer(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.applySize()</node>
        <node>daikon.VarInfoName.Field.name_impl()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.test.VarInfoNameDriver.Subscript.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.repr_impl()</node>
        <node>daikon.VarInfoName.FunctionOf.java_family_name_impl(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.VarInfoName.TypeOf.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.test.VarInfoNameDriver.TypeOf.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.SizeOf.java_family_impl(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.Elements.Elements(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.TypeOf.TypeOf(daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameDriver.Elements.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.test.VarInfoNameDriver.Add.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Replacer.replace(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.FunctionOfN.repr_impl()</node>
        <node>daikon.VarInfoName.applyPrestate()</node>
        <node>daikon.VarInfoName.FunctionOf.repr_impl()</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.VarInfoName.Prestate.Prestate(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.FunctionOfN.elts_repr()</node>
        <node>daikon.VarInfoName.ElementsFinder.inPre()</node>
        <node>daikon.test.VarInfoNameDriver.Size.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.applyTypeOf()</node>
        <node>daikon.VarInfoName.Subscript.java_family_impl(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.TypeOf.name_impl()</node>
        <node>daikon.VarInfoName.Field.Field(daikon.VarInfoName,java.lang.String)</node>
        <node>daikon.VarInfoName.SizeOf.name_impl()</node>
        <node>daikon.VarInfoName.Prestate.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.applyField(java.lang.String)</node>
        <node>daikon.VarInfoName.Add.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.Elements.repr_impl()</node>
        <node>daikon.VarInfoName.Prestate.repr_impl()</node>
        <node>daikon.test.VarInfoNameTest.diff(java.lang.String[],java.lang.String[])</node>
        <node>daikon.VarInfoName.jml_name(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.Elements.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.applyElements()</node>
        <node>daikon.test.VarInfoNameDriver.run(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.ElementsFinder.elems()</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.VarInfoName.applyFunctionOfN(java.lang.String,java.util.List)</node>
        <node>daikon.VarInfoName.Subscript.name_impl()</node>
        <node>daikon.test.VarInfoNameDriver.Field.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.applyFunction(java.lang.String)</node>
        <node>daikon.test.VarInfoNameDriver.run_helper(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.applySubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.FunctionOfN.java_family_name_impl(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.TypeOf.repr_impl()</node>
        <node>daikon.VarInfoName.ElementsFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Elements.name_impl()</node>
        <node>daikon.VarInfoName.Subscript.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.Field.java_family_name(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.FunctionOfN.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.applyAdd(int)</node>
        <node>daikon.VarInfoName.Subscript.Subscript(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.Field.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.FunctionOf.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.Elements.name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.toString()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoName.SizeOf.repr_impl()</node>
        <node>daikon.VarInfoName.Field.repr_impl()</node>
        <node>daikon.test.VarInfoNameDriver.JMLName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Add.Add(daikon.VarInfoName,int)</node>
        <node>daikon.VarInfoName.FunctionOf.FunctionOf(java.lang.String,daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameTest.run(java.lang.String)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.VarInfoName.Subscript.repr_impl()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.SizeOf.jml_name_impl(daikon.VarInfo)</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.test.VarInfoNameDriver.Parse.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.SizeOf.SizeOf(daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameDriver.Function.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>utilMDE.UtilMDE.join(java.util.List,java.lang.String)</node>
        <node>daikon.VarInfoName.ElementsFinder.ElementsFinder(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Simple.jml_name_impl(daikon.VarInfo)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.VarInfoName.FunctionOfN.elts_repr_commas()</node>
        <node>daikon.VarInfoName.Add.name_impl()</node>
        <node>daikon.VarInfoName.Add.amount()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isEmpty_20()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseEqual()">
        <node>daikon.Quant.pairwiseEqual(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__35()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testEmptyPpts1()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.diff.XorVisitorTester.testXor()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.diff.XorVisitor.shouldAddInv1(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.ClassVarnameFormulaComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,double,boolean,boolean)</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.test.diff.DiffDummyInvariant.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.diff.Diff.setAllInvComparators(java.util.Comparator)</node>
        <node>daikon.diff.Diff.setInvSortComparator1(java.util.Comparator)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.XorVisitor.visit(daikon.diff.InvNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.diff.Diff.setInvSortComparator2(java.util.Comparator)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.test.diff.DiffDummyInvariant.repr()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.diff.Diff.setInvPairComparator(java.util.Comparator)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.diff.InvMap.addPpt(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.XorVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.XorVisitor.shouldAddInv2(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean,boolean,boolean)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.InvMap.pptIterator()</node>
        <node>daikon.test.diff.DiffDummyInvariant.computeConfidence()</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.diff.InvMap.add(daikon.PptTopLevel,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.diff.XorVisitor.getResult()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.InvMap.toString()</node>
        <node>daikon.inv.Invariant.format()</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseNotEqual()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.eltwiseNotEqual(int[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_28()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testPpts1Ppts1()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__39()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testIntern()">
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>utilMDE.Intern.isInterned(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.internedLong(java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.Intern.intern(java.lang.Long)</node>
        <node>utilMDE.Intern.intern(java.lang.Integer)</node>
        <node>utilMDE.Intern.IntegerHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.LongHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>utilMDE.Intern.internedInteger(java.lang.String)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_31()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.config.ConfigurationTest.testGetInstance()">
        <node>daikon.config.Configuration.getInstance()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__42()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DetailedStatisticsVisitorTester.testFreq()">
        <node>daikon.diff.DetailedStatisticsVisitor.freq(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseGTE()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.pairwiseGTE(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexLTE()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.gt(int,int)</node>
        <node>daikon.Quant.lexLTE(int[],int[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_0()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.UnionVisitorTester.testXor()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.Invariant.ClassVarnameFormulaComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,double,boolean,boolean)</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.UnionVisitor.getResult()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.test.diff.DiffDummyInvariant.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.diff.Diff.setAllInvComparators(java.util.Comparator)</node>
        <node>daikon.diff.Diff.setInvSortComparator1(java.util.Comparator)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.diff.Diff.setInvSortComparator2(java.util.Comparator)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,double)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.test.diff.DiffDummyInvariant.repr()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.diff.Diff.setInvPairComparator(java.util.Comparator)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.diff.InvMap.addPpt(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.UnionVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.test.diff.DiffDummyInvariant.DiffDummyInvariant(daikon.PptSlice,java.lang.String,boolean,boolean,boolean)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.InvMap.pptIterator()</node>
        <node>daikon.test.diff.DiffDummyInvariant.computeConfidence()</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.diff.InvMap.add(daikon.PptTopLevel,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.UnionVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.InvMap.toString()</node>
        <node>daikon.inv.Invariant.format()</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseGTE()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.eltwiseGTE(int[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsLteIndex()">
        <node>daikon.Quant.gt(int,int)</node>
        <node>daikon.Quant.eltsLteIndex(int[])</node>
      </test>
      <test name="daikon.test.inv.InvariantTester.test_prob_or()">
        <node>daikon.inv.Invariant.prob_or(double,double)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_11()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseDivides()">
        <node>daikon.Quant.pairwiseDivides(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_union()">
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.concat(int[],int[])</node>
        <node>daikon.Quant.concat(int[],int[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>daikon.test.TestQuant.removeAdjacentDups(int[])</node>
        <node>daikon.Quant.union(int[],int[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testArraysMDE()">
        <node>utilMDE.ArraysMDE.sum(double[][])</node>
        <node>utilMDE.ArraysMDE.LongArrayComparatorLengthFirst.compare(long[],long[])</node>
        <node>utilMDE.ArraysMDE.IntArrayComparatorLexical.compare(int[],int[])</node>
        <node>utilMDE.ArraysMDE.fn_compose(int[],int[])</node>
        <node>utilMDE.ArraysMDE.fn_identity(int)</node>
        <node>utilMDE.ArraysMDE.fn_inverse_permutation(int[])</node>
        <node>utilMDE.ArraysMDE.isSubarray(java.lang.Object[],java.lang.Object[],int)</node>
        <node>utilMDE.ArraysMDE.noDuplicates(int[])</node>
        <node>utilMDE.ArraysMDE.sum(double[])</node>
        <node>utilMDE.ArraysMDE.indexOf(int[],int)</node>
        <node>utilMDE.ArraysMDE.noDuplicates(java.lang.String[])</node>
        <node>utilMDE.ArraysMDE.ComparableArrayComparatorLexical.compare(java.lang.Comparable[],java.lang.Comparable[])</node>
        <node>utilMDE.ArraysMDE.IntArrayComparatorLengthFirst.compare(int[],int[])</node>
        <node>utilMDE.ArraysMDE.LongArrayComparatorLexical.compare(long[],long[])</node>
        <node>utilMDE.ArraysMDE.DoubleArrayComparatorLexical.compare(double[],double[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.element_range(int[])</node>
        <node>utilMDE.ArraysMDE.sum(int[][])</node>
        <node>utilMDE.ArraysMDE.sum(int[])</node>
        <node>utilMDE.ArraysMDE.min_max(int[])</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.ArraysMDE.indexOfEq(java.lang.Object[],java.lang.Object[])</node>
        <node>utilMDE.ArraysMDE.min(int[])</node>
        <node>utilMDE.ArraysMDE.fn_inverse(int[],int)</node>
        <node>utilMDE.ArraysMDE.ComparableArrayComparatorLengthFirst.compare(java.lang.Comparable[],java.lang.Comparable[])</node>
        <node>utilMDE.ArraysMDE.all_null(java.lang.Object[])</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.ArraysMDE.isSubarrayEq(java.lang.Object[],java.lang.Object[],int)</node>
        <node>utilMDE.ArraysMDE.indexOf(java.lang.Object[],java.lang.Object[])</node>
        <node>utilMDE.ArraysMDE.any_null(java.lang.Object[])</node>
        <node>utilMDE.ArraysMDE.indexOf(int[],int[])</node>
        <node>utilMDE.ArraysMDE.max(int[])</node>
        <node>utilMDE.ArraysMDE.noDuplicates(double[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(double[],double[])</node>
        <node>utilMDE.ArraysMDE.fn_is_total(int[])</node>
        <node>utilMDE.ArraysMDE.fn_is_permutation(int[])</node>
        <node>utilMDE.ArraysMDE.noDuplicates(long[])</node>
        <node>utilMDE.ArraysMDE.isSubarray(int[],int[],int)</node>
        <node>utilMDE.ArraysMDE.indexOf(java.lang.Object[],java.lang.Object)</node>
        <node>utilMDE.ArraysMDE.indexOf(boolean[],boolean)</node>
        <node>utilMDE.ArraysMDE.indexOfEq(java.lang.Object[],java.lang.Object)</node>
        <node>utilMDE.ArraysMDE.toString(int[])</node>
        <node>utilMDE.ArraysMDE.isSubset(double[],double[])</node>
        <node>utilMDE.ArraysMDE.sorted(int[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_intersection()">
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.intersection(int[],int[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.subarray(int[],int,int)</node>
        <node>daikon.test.TestQuant.removeAdjacentDups(int[])</node>
        <node>daikon.Quant.memberOf(int,int[])</node>
      </test>
      <test name="daikon.test.VarInfoNameTest.testEscForall()">
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.VarInfoName.Replacer.Replacer(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.applySize()</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitPrestate(daikon.VarInfoName.Prestate)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.applySlice(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.VarInfoName.NodeFinder.NodeFinder(daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_element_conditions(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.NodeFinder.inPre()</node>
        <node>daikon.VarInfoName.Elements.Elements(daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameDriver.Elements.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.applyPrestate()</node>
        <node>daikon.VarInfoName.ElementsFinder.inPre()</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator2(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_var_initial_state(daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.AbstractVisitor.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Simple.isLiteralConstant()</node>
        <node>daikon.VarInfoName.QuantifierVisitor.unquants()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.SimpleNamesVisitor(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.indexExplicit(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Elements.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.format_esc(daikon.VarInfoName[],boolean)</node>
        <node>daikon.VarInfoName.Elements.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.applyElements()</node>
        <node>daikon.test.VarInfoNameDriver.run(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.ElementsFinder.elems()</node>
        <node>daikon.test.VarInfoNameDriver.Slice.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.Elements.getUpperBound()</node>
        <node>daikon.VarInfoName.applyDecrement()</node>
        <node>daikon.VarInfoName.Elements.esc_name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.applyAdd(int)</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName[],boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Subscript.Subscript(daikon.VarInfoName.Elements,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Slice.Slice(daikon.VarInfoName.Elements,daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Prestate.esc_name_impl()</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.QuantHelper.format_java_style(daikon.VarInfoName.QuantHelper.QuantifyReturn,boolean,boolean,daikon.inv.OutputFormat)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.test.VarInfoNameTest.run(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_format_forall(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Slice.getSubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Simple.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.Slice.getUpperBound()</node>
        <node>daikon.test.VarInfoNameDriver.Parse.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.isLiteralConstant()</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.FreeVar(java.lang.String)</node>
        <node>daikon.VarInfoName.Add.amount()</node>
        <node>daikon.VarInfoName.NodeFinder.visitPrestate(daikon.VarInfoName.Prestate)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitSlice(daikon.VarInfoName.Slice)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitSlice(daikon.VarInfoName.Slice)</node>
        <node>daikon.test.VarInfoNameDriver.Prestate.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.inPrestateContext(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_increment(daikon.VarInfoName,int,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Replacer.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Prestate.name_impl()</node>
        <node>daikon.VarInfoName.Slice.getLowerBound()</node>
        <node>daikon.VarInfoName.SimpleNamesVisitor.simples()</node>
        <node>daikon.VarInfoName.Slice.repr_impl()</node>
        <node>daikon.VarInfoName.Slice.name_impl()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.VarInfoName.Add.repr_impl()</node>
        <node>daikon.VarInfoName.Add.esc_name_impl()</node>
        <node>daikon.VarInfoName.Subscript.esc_name_impl()</node>
        <node>daikon.VarInfoName.Replacer.replace(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.quant_separator1(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Prestate.Prestate(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Prestate.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.name_using(daikon.inv.OutputFormat,daikon.VarInfo)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_step_terminator(daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.Elements.getSubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.Prestate.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.replace(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName)</node>
        <node>daikon.test.VarInfoNameTest.diff(java.lang.String[],java.lang.String[])</node>
        <node>daikon.VarInfoName.Slice.accept(daikon.VarInfoName.Visitor)</node>
        <node>daikon.VarInfoName.SizeOf.esc_name_impl()</node>
        <node>daikon.VarInfoName.Simple.esc_name_impl()</node>
        <node>daikon.test.VarInfoNameDriver.run_helper(java.io.InputStream,java.io.PrintStream)</node>
        <node>daikon.VarInfoName.applySubscript(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.ElementsFinder.visitElements(daikon.VarInfoName.Elements)</node>
        <node>daikon.VarInfoName.Replacer.visitSlice(daikon.VarInfoName.Slice)</node>
        <node>daikon.VarInfoName.QuantHelper.FreeVar.repr_impl()</node>
        <node>daikon.test.VarInfoNameDriver.QuantifyEscName.handle(java.util.Map,java.lang.String[],java.io.PrintStream)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.VarInfoName.Elements.name_impl(java.lang.String)</node>
        <node>daikon.VarInfoName.QuantHelper.quant_execution_condition(daikon.VarInfoName,daikon.VarInfoName,daikon.VarInfoName,daikon.inv.OutputFormat)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.VarInfoName.toString()</node>
        <node>daikon.VarInfoName.SizeOf.repr_impl()</node>
        <node>daikon.VarInfoName.QuantHelper.quantify(daikon.VarInfoName[])</node>
        <node>daikon.VarInfoName.Add.Add(daikon.VarInfoName,int)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.visitSimple(daikon.VarInfoName.Simple)</node>
        <node>daikon.VarInfoName.Subscript.repr_impl()</node>
        <node>daikon.VarInfoName.Replacer.visitPrestate(daikon.VarInfoName.Prestate)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.SizeOf.get_term()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.VarInfoName.SizeOf.SizeOf(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.ElementsFinder.ElementsFinder(daikon.VarInfoName)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.VarInfoName.QuantifierVisitor.QuantifierVisitor(daikon.VarInfoName)</node>
        <node>daikon.VarInfoName.QuantHelper.format_esc(daikon.VarInfoName[])</node>
        <node>daikon.VarInfoName.NodeFinder.visitSlice(daikon.VarInfoName.Slice)</node>
        <node>daikon.VarInfoName.esc_name()</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_getFront_23()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.inv.InvariantTester.test_prob_and()">
        <node>daikon.inv.Invariant.prob_and(double,double,double)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.Invariant.prob_and(double,double)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseLT()">
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.pairwiseLT(int[],int[])</node>
        <node>daikon.Quant.gte(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseBitwiseSubset()">
        <node>daikon.Quant.pairwiseBitwiseSubset(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseLT()">
        <node>daikon.Quant.eltwiseLT(int[])</node>
        <node>daikon.Quant.gte(int,int)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testInvs1Invs2()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isInteresting()</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice1.addInvariant(daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.PptSlice1.num_samples()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeConfidence()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.num_samples(daikon.VarInfo)</node>
        <node>daikon.inv.unary.LowerBoundCore.LowerBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.LowerBound.computeConfidence()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.inv.Invariant.logDetail()</node>
        <node>daikon.inv.unary.scalar.LowerBound.enabled()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeProbability()</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrintln()</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_range()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.InvariantComparatorForPrinting.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineType(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_modulus()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,java.lang.String)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineRelationship(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_or(double,double)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.diff.PrintAllVisitor.printPrintability(daikon.inv.Invariant)</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrint(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.LowerBound.get_proto()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.Invariant.prob_and(double,double)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.unary.LowerBoundCore.isSameFormula(daikon.inv.unary.LowerBoundCore)</node>
        <node>daikon.inv.Invariant.isWorthPrinting()</node>
        <node>daikon.Debug.logDetail()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.PrintAllVisitor.printInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepPropFilters(daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_is_ge(double,double)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.prob_is_ge(double,double)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,daikon.VarInfo[],java.lang.String)</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Invariant.prob_or(double,double)</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeep(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.diff.PrintAllVisitor.printConfidence(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepVarFilters(daikon.inv.Invariant)</node>
        <node>daikon.ModBitTracker.get(int)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.filter.InvariantFilter.shouldDiscard(daikon.inv.Invariant)</node>
        <node>daikon.inv.filter.UnjustifiedFilter.shouldDiscardInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.inv.filter.InvariantFilters.defaultFilters()</node>
        <node>daikon.inv.unary.scalar.LowerBound.LowerBound(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.LowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_avg_samples_per_val(long,double)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_and(double,double)</node>
        <node>daikon.inv.Invariant.log(java.lang.String,java.lang.Object[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testLimitedSizeIntSet()">
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.TestUtilMDE.lsis_test(int)</node>
        <node>utilMDE.LimitedSizeIntSet.toString()</node>
        <node>utilMDE.TestUtilMDE.lsis_add_elts(int,utilMDE.LimitedSizeIntSet)</node>
        <node>utilMDE.LimitedSizeIntSet.add(int)</node>
        <node>utilMDE.LimitedSizeIntSet.size()</node>
        <node>utilMDE.ArraysMDE.toString(int[])</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
      </test>
      <test name="daikon.test.LinearTernaryCoreTest.test_set_tri_linear()">
        <node>daikon.test.LinearTernaryCoreTest.set_cache(daikon.inv.ternary.threeScalar.LinearTernaryCore,int,long,long,long)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.LinearTernaryCore(daikon.inv.Invariant)</node>
        <node>daikon.test.LinearTernaryCoreTest.one_test_set_tri_linear(int[][],long,long,long,long)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.calc_tri_linear(daikon.inv.ternary.threeScalar.LinearTernaryCore.Point[])</node>
        <node>utilMDE.MathMDE.gcd(long,long)</node>
        <node>daikon.inv.ternary.threeScalar.LinearTernaryCore.Point.Point(long,long,long)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_6()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_slice()">
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>daikon.Quant.slice(int[],int,int)</node>
        <node>utilMDE.ArraysMDE.subarray(int[],int,int)</node>
      </test>
      <test name="daikon.test.inv.unary.sequence.OneOfSequenceTester.testNonNullNonNull()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.enabled()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.is_hashcode()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.OneOfSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.sort_rep()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.get_proto()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_modified(long[],int)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.check_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
      </test>
      <test name="daikon.test.TestQuant.testCollect()">
        <node>daikon.Quant.collectint(java.lang.Object,java.lang.String)</node>
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>daikon.Quant.collectString(java.lang.Object,java.lang.String)</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>daikon.Quant.collectObject(java.lang.Object,java.lang.String)</node>
        <node>daikon.Quant.collectint(java.lang.Object,java.lang.String[],int)</node>
        <node>daikon.Quant.collectObject(java.lang.Object,java.lang.String[],int)</node>
        <node>daikon.Quant.collectString(java.lang.Object,java.lang.String[],int)</node>
      </test>
      <test name="utilMDE.TestUtilMDE.test_create_combinations()">
        <node>utilMDE.UtilMDE.create_combinations(int,int,java.util.List)</node>
        <node>utilMDE.UtilMDE.create_combinations(int,int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__34()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.inv.InvariantTester.test_prob_is_ge()">
        <node>daikon.inv.Invariant.prob_is_ge(double,double)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_25()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.inv.InvariantTester.testClassVarnameComparator()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualMinusOne.get_proto()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptSlice0.initInvariantsSeen()</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.unary.scalar.RangeInt.GreaterEqualZero.GreaterEqualZero(daikon.PptSlice)</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.enabled()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.get_proto()</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object[])</node>
        <node>daikon.suppress.NISuppressor.toString()</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.config.Configuration.apply(java.lang.String)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.config.Configuration.addRecord(java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.config.Configuration.apply(java.lang.String,java.lang.String)</node>
        <node>daikon.test.Common.makeIntVarInfo(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.NonZero.get_proto()</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.BinaryInvariant.BinaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.RangeInt.Bound0_63.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.get_proto()</node>
        <node>daikon.PptSlice2.PptSlice2(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.LinearBinary(daikon.PptSlice)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.hashCode()</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.TwoScalar(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntLessThan.IntLessThan(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.IntLessEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.UtilMDE.replaceString(java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.NonZero.NonZero(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntLessThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.config.Configuration.apply(java.lang.reflect.Field,java.lang.String)</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.IntEqual(daikon.PptSlice)</node>
        <node>utilMDE.Fmt.i(int)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualMinusOne.EqualMinusOne(daikon.PptSlice)</node>
        <node>daikon.inv.Implication.makeImplication(daikon.PptTopLevel,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.enabled()</node>
        <node>daikon.inv.binary.twoScalar.IntLessThan.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String,double,double,double)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.suppress.NISuppressor.NISuppressor(int,int,java.lang.Class)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement.get_format_str(daikon.inv.OutputFormat)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)</node>
        <node>daikon.config.Configuration.apply(java.lang.Class,java.lang.String,java.lang.String)</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Implication.Implication(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant,boolean,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.var2()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.inv.binary.twoScalar.IntLessThan.enabled()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.enabled()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.inv.Invariant.format_too_few_samples(daikon.inv.OutputFormat,java.lang.String)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement.BitwiseComplement(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualZero.get_proto()</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Implication.consequent()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.LinearBinaryCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualZero.EqualZero(daikon.PptSlice)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.PptSlice0.hasImplication(daikon.inv.Implication)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareImplications(daikon.inv.Implication,daikon.inv.Implication)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.format()</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.enabled()</node>
        <node>daikon.inv.unary.scalar.RangeInt.RangeInt(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.TwoScalar.var1()</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.enabled()</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.config.Configuration.apply(java.lang.String,java.lang.String,java.lang.String)</node>
        <node>daikon.PptSlice2.arity()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.config.Configuration.getInstance()</node>
        <node>daikon.inv.Implication.predicate()</node>
        <node>daikon.VarInfoName.Simple.name_impl()</node>
        <node>daikon.inv.unary.scalar.RangeInt.GreaterEqualZero.get_proto()</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.enabled()</node>
        <node>daikon.inv.binary.twoScalar.IntLessEqual.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.scalar.RangeInt.Bound0_63.Bound0_63(daikon.PptSlice)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.inv.binary.twoScalar.IntEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Implication.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinaryCore.format_using(daikon.inv.OutputFormat,java.lang.String,java.lang.String)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.BitwiseComplement.get_proto()</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.get_proto()</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.IntNonEqual(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.LinearBinary.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualOne.get_proto()</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterThan.IntGreaterThan(daikon.PptSlice)</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.enabled()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoScalar.NumericInt.NumericInt(daikon.PptSlice,boolean)</node>
        <node>daikon.inv.unary.scalar.RangeInt.EqualOne.EqualOne(daikon.PptSlice)</node>
        <node>daikon.PptSlice0.ImplicationWrapper.ImplicationWrapper(daikon.inv.Implication)</node>
        <node>utilMDE.Fmt.spf(java.lang.String,java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.Joiner.Joiner(daikon.PptSlice,daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.binary.twoScalar.IntLessThan.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.binary.twoScalar.IntNonEqual.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.suppress.NISuppressor.NISuppressor(int,java.lang.Class)</node>
        <node>daikon.inv.binary.twoScalar.IntGreaterEqual.IntGreaterEqual(daikon.PptSlice)</node>
      </test>
      <test name="daikon.test.TestQuant.test_subsetOf()">
        <node>daikon.Quant.subsetOf(int[],int[])</node>
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.memberOf(int,int[])</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testInvs1Empty()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isInteresting()</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice1.addInvariant(daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.PptSlice1.num_samples()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeConfidence()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.num_samples(daikon.VarInfo)</node>
        <node>daikon.inv.unary.LowerBoundCore.LowerBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.LowerBound.computeConfidence()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.inv.Invariant.logDetail()</node>
        <node>daikon.inv.filter.DerivedVariableFilter.DerivedVariableFilter()</node>
        <node>daikon.inv.unary.scalar.LowerBound.enabled()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>daikon.inv.unary.LowerBoundCore.computeProbability()</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrintln()</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_range()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.filter.InvariantFilters.addPropertyFilter(daikon.inv.filter.InvariantFilter)</node>
        <node>daikon.inv.Invariant.InvariantComparatorForPrinting.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.inv.filter.OnlyConstantVariablesFilter.OnlyConstantVariablesFilter()</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineType(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_modulus()</node>
        <node>daikon.inv.filter.ParentFilter.ParentFilter()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,java.lang.String)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineRelationship(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_or(double,double)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.printPrintability(daikon.inv.Invariant)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrint(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.LowerBound.get_proto()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.inv.filter.ObviousFilter.ObviousFilter()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.Invariant.prob_and(double,double)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.Invariant.isWorthPrinting()</node>
        <node>daikon.Debug.logDetail()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.diff.PrintAllVisitor.printInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.inv.filter.InvariantFilter.InvariantFilter(boolean)</node>
        <node>daikon.inv.filter.UnjustifiedFilter.UnjustifiedFilter()</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.inv.filter.InvariantFilters.InvariantFilters()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepPropFilters(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_is_ge(double,double)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.prob_is_ge(double,double)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,daikon.VarInfo[],java.lang.String)</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Invariant.prob_or(double,double)</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeep(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.diff.PrintAllVisitor.printConfidence(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.inv.filter.DerivedParameterFilter.DerivedParameterFilter()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepVarFilters(daikon.inv.Invariant)</node>
        <node>daikon.ModBitTracker.get(int)</node>
        <node>daikon.inv.filter.InvariantFilter.InvariantFilter()</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.filter.SimplifyFilter.SimplifyFilter(daikon.inv.filter.InvariantFilters)</node>
        <node>daikon.inv.filter.InvariantFilter.shouldDiscard(daikon.inv.Invariant)</node>
        <node>daikon.inv.filter.UnjustifiedFilter.shouldDiscardInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.inv.filter.InvariantFilters.defaultFilters()</node>
        <node>daikon.inv.unary.scalar.LowerBound.LowerBound(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.LowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_and(double,double)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_avg_samples_per_val(long,double)</node>
        <node>daikon.inv.Invariant.log(java.lang.String,java.lang.Object[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_enqueue_30()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__38()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testConditionalPptsTrue()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.PptTopLevel.CondIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptTopLevel.cond_iterator()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.PptTopLevel.CondIterator.hasNext()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__41()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.InvMapTester.testABC()">
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.InvMap.pptIterator()</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsGteIndex()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.eltsGteIndex(int[])</node>
      </test>
      <test name="daikon.test.TestQuant.testCollect_field()">
        <node>daikon.test.TestQuant.Foo2.set_xstatic(java.lang.Object)</node>
        <node>daikon.Quant.collectString_field(java.lang.Object,java.lang.String)</node>
        <node>daikon.Quant.collectint_field(java.lang.Object,java.lang.String)</node>
        <node>daikon.Quant.collectObject_field(java.lang.Object,java.lang.String)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_size_16()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_StreetNumberSet_3()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testPpts1Empty()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testMathMDE()">
        <node>utilMDE.MathMDE.MissingNumbersIteratorInt.MissingNumbersIteratorInt(java.util.Iterator,boolean)</node>
        <node>utilMDE.MathMDE.missing_numbers(int[])</node>
        <node>utilMDE.TestUtilMDE.1TestNonModulus.check(int[],int[],boolean)</node>
        <node>utilMDE.MathMDE.check_first_and_last_nonmodulus(int[],utilMDE.UtilMDE.RemoveFirstAndLastIterator)</node>
        <node>utilMDE.TestUtilMDE.1TestNonModulus.check_strict(int[],int[])</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.next()</node>
        <node>utilMDE.MathMDE.pow_fast(int,int)</node>
        <node>utilMDE.MathMDE.gcd_differences(int[])</node>
        <node>utilMDE.MathMDE.nonmodulus_strict_int(java.util.Iterator)</node>
        <node>utilMDE.TestUtilMDE.int_array_iterator(int[])</node>
        <node>utilMDE.TestUtilMDE.1TestMissingNumbersIteratorInt.test(int[],boolean,int[])</node>
        <node>utilMDE.MathMDE.nonmodulus_strict(int[])</node>
        <node>utilMDE.TestUtilMDE.1TestModulus.check_iterator(int[],int[])</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorInt.hasNext()</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.element_range(int[])</node>
        <node>utilMDE.TestUtilMDE.1TestNonModulus.check_nonstrict(int[],int[])</node>
        <node>utilMDE.MathMDE.nonmodulus_nonstrict(int[])</node>
        <node>utilMDE.MathMDE.modulus_int(java.util.Iterator)</node>
        <node>utilMDE.MathMDE.negate(int)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.getLast()</node>
        <node>utilMDE.MathMDE.modulus_strict_int(java.util.Iterator,boolean)</node>
        <node>utilMDE.TestUtilMDE.1TestModulus.check(java.util.Iterator,int[])</node>
        <node>utilMDE.ArraysMDE.min_max(int[])</node>
        <node>utilMDE.MathMDE.bitwiseComplement(int)</node>
        <node>utilMDE.TestUtilMDE.1TestModulus.check(int[],int[])</node>
        <node>utilMDE.MathMDE.pow(int,int)</node>
        <node>utilMDE.MathMDE.sign(int)</node>
        <node>utilMDE.MathMDE.mod_positive(int,int)</node>
        <node>utilMDE.MathMDE.gcd(int,int)</node>
        <node>utilMDE.TestUtilMDE.int_iterator_array(java.util.Iterator)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.getFirst()</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorInt.next()</node>
        <node>utilMDE.MathMDE.gcd(int[])</node>
        <node>utilMDE.ArraysMDE.indexOf(boolean[],boolean)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.hasNext()</node>
        <node>utilMDE.MathMDE.nonmodulus_strict_int_internal(java.util.Iterator)</node>
        <node>utilMDE.UtilMDE.RemoveFirstAndLastIterator.RemoveFirstAndLastIterator(java.util.Iterator)</node>
        <node>utilMDE.MathMDE.modulus(int[])</node>
        <node>utilMDE.MathMDE.MissingNumbersIteratorInt.MissingNumbersIteratorInt(int[],boolean)</node>
      </test>
      <test name="daikon.test.diff.PrintDifferingInvariantsVisitorTester.testShouldPrint()">
        <node>daikon.Debug.logOn()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.test.diff.DiffDummyInvariant.isInteresting()</node>
        <node>daikon.test.diff.DiffDummyInvariant.computeConfidence()</node>
        <node>daikon.diff.PrintDifferingInvariantsVisitor.PrintDifferingInvariantsVisitor(java.io.PrintStream,boolean,boolean,boolean)</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineRelationship(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isWorthPrinting()</node>
        <node>daikon.diff.PrintDifferingInvariantsVisitor.shouldPrint(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineType(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.test.diff.DiffDummyInvariant.isSameInvariant(daikon.inv.Invariant)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseBitwiseComplement()">
        <node>daikon.Quant.pairwiseBitwiseComplement(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testOrderedPairIterator()">
        <node>utilMDE.OrderedPairIterator.return1()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.TestUtilMDE.compareOrderedPairIterator(utilMDE.OrderedPairIterator,int[][])</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.OrderedPairIterator.return2()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseSquare()">
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
        <node>daikon.Quant.pairwiseSquare(int[],int[])</node>
      </test>
      <test name="daikon.test.inv.unary.sequence.OneOfSequenceTester.testNullNullNullNull()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.SingleScalarSequence(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.enabled()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.is_hashcode()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.OneOfSequence(daikon.PptSlice)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.runValue(long[],int,boolean)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.baseIsScalar()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>daikon.ProglangType.isArray()</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.ProglangType.elementType()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>daikon.ProglangType.intern(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.sort_rep()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.get_proto()</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.var()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.add_modified(long[],int)</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>daikon.inv.unary.sequence.SingleSequence.SingleSequence(daikon.PptSlice)</node>
        <node>daikon.ProglangType.find(java.lang.String,int)</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.check_mod_elem(long[],int)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>daikon.ProglangType.dimensions()</node>
        <node>daikon.inv.unary.sequence.OneOfSequence.instantiate_dyn(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.inv.unary.sequence.SingleScalarSequence.valid_types(daikon.VarInfo[])</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>daikon.ProglangType.isPseudoArray()</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexLT()">
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.gt(int,int)</node>
        <node>daikon.Quant.lexLT(int[],int[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_checkRep_4()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testFuzzyFloat()">
        <node>utilMDE.FuzzyFloat.eq(double,double)</node>
        <node>utilMDE.FuzzyFloat.isElemMatch(double[],double[])</node>
        <node>utilMDE.FuzzyFloat.ne(double,double)</node>
        <node>utilMDE.FuzzyFloat.isSubset(double[],double[])</node>
        <node>utilMDE.FuzzyFloat.DoubleArrayComparatorLexical.compare(double[],double[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(double[],double[])</node>
        <node>utilMDE.FuzzyFloat.indexOf(double[],double)</node>
        <node>utilMDE.FuzzyFloat.lt(double,double)</node>
        <node>utilMDE.FuzzyFloat.set_rel_diff(double)</node>
        <node>utilMDE.FuzzyFloat.lte(double,double)</node>
        <node>utilMDE.FuzzyFloat.gt(double,double)</node>
        <node>utilMDE.FuzzyFloat.gte(double,double)</node>
        <node>utilMDE.FuzzyFloat.indexOf(double[],double[])</node>
        <node>utilMDE.FuzzyFloat.FuzzyFloat(double)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_12()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_concat()">
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.concat(int[],int[])</node>
        <node>daikon.Quant.concat(int[],int[])</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseGT()">
        <node>daikon.Quant.eltwiseGT(int[])</node>
        <node>daikon.Quant.lte(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isFull_21()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseGT()">
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>daikon.Quant.lte(int,int)</node>
        <node>daikon.Quant.pairwiseGT(int[],int[])</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltwiseLTE()">
        <node>daikon.Quant.eltwiseLTE(int[])</node>
        <node>daikon.Quant.gt(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_orderStatistic_14()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsLTE()">
        <node>daikon.Quant.eltsLTE(int[],int)</node>
        <node>daikon.Quant.gt(int,int)</node>
      </test>
      <test name="daikon.test.TestAst.test_Ast_Ppt_Match()">
        <node>jtb.JavaParser.jj_2_15(int)</node>
        <node>jtb.JavaParser.jj_3R_118()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Statement)</node>
        <node>jtb.syntaxtree.NodeSequence.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ShiftExpression.ShiftExpression(jtb.syntaxtree.AdditiveExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>daikon.tools.jtb.PptNameMatcher.getUngenerifiedType(jtb.syntaxtree.FormalParameter)</node>
        <node>jtb.syntaxtree.TypeParameters.TypeParameters(jtb.syntaxtree.NodeToken,jtb.syntaxtree.TypeParameter,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeToken)</node>
        <node>daikon.tools.jtb.Ast.getName(jtb.syntaxtree.MethodDeclaration)</node>
        <node>jtb.syntaxtree.NodeSequence.elementAt(int)</node>
        <node>daikon.tools.jtb.PptNameMatcher.extractPptArgs(daikon.PptName)</node>
        <node>jtb.syntaxtree.ReturnStatement.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBody.ClassOrInterfaceBody(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.Statement()</node>
        <node>jtb.JavaParser.ClassOrInterfaceBody(boolean)</node>
        <node>jtb.syntaxtree.MultiplicativeExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.TypeParameters.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.TypeArgument.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.NodeToken.addSpecial(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.jj_3R_107()</node>
        <node>jtb.JavaParser.jj_3R_48()</node>
        <node>jtb.JavaParser.jj_3_19()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ReferenceType)</node>
        <node>jtb.syntaxtree.TypeArguments.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ConditionalAndExpression)</node>
        <node>jtb.visitor.TreeFormatter.space(int)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.InstanceOfExpression)</node>
        <node>daikon.tools.jtb.Ast.create(java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)</node>
        <node>jtb.JavaParser.jj_3R_119()</node>
        <node>jtb.JavaCharStream.JavaCharStream(java.io.Reader,int,int)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ConditionalExpression)</node>
        <node>jtb.syntaxtree.PrimaryExpression.PrimaryExpression(jtb.syntaxtree.PrimaryPrefix,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Literal)</node>
        <node>jtb.JavaCharStream.JavaCharStream(java.io.InputStream,int,int,int)</node>
        <node>daikon.tools.jtb.Ast.removeWhitespace(java.lang.String)</node>
        <node>daikon.tools.jtb.Ast.print(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.InstanceOfExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.UnaryExpressionNotPlusMinus.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.Name.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeArgument)</node>
        <node>jtb.JavaParser.jj_3R_108()</node>
        <node>jtb.syntaxtree.NodeToken.numSpecials()</node>
        <node>jtb.JavaParserTokenManager.jjCheckNAdd(int)</node>
        <node>jtb.JavaParser.jj_3R_47()</node>
        <node>jtb.syntaxtree.CompilationUnit.getParent()</node>
        <node>jtb.JavaParser.jj_3_18()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>jtb.syntaxtree.TypeBound.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa3_0(long,long,long,long)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.copy(java.util.HashMap)</node>
        <node>jtb.JavaCharStream.getBeginColumn()</node>
        <node>jtb.syntaxtree.NodeOptional.NodeOptional()</node>
        <node>daikon.test.TestAst.checkMatch(java.lang.String,jtb.syntaxtree.MethodDeclaration,daikon.tools.jtb.PptNameMatcher)</node>
        <node>jtb.syntaxtree.TypeArguments.TypeArguments(jtb.syntaxtree.NodeToken,jtb.syntaxtree.TypeArgument,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.syntaxtree.MethodDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Type)</node>
        <node>jtb.JavaParser.jj_3R_58()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.PostfixExpression)</node>
        <node>jtb.syntaxtree.Type.Type(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.syntaxtree.Literal.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.Expression()</node>
        <node>jtb.syntaxtree.NodeChoice.NodeChoice(jtb.syntaxtree.Node,int)</node>
        <node>jtb.JavaParser.jj_3R_180()</node>
        <node>jtb.JavaParser.jj_3R_104()</node>
        <node>jtb.syntaxtree.ConditionalOrExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaCharStream.getEndColumn()</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.syntaxtree.PackageDeclaration.PackageDeclaration(jtb.syntaxtree.NodeToken,jtb.syntaxtree.Name,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.Token.newToken(int)</node>
        <node>daikon.tools.jtb.Ast.getParameters(jtb.syntaxtree.MethodDeclaration)</node>
        <node>jtb.syntaxtree.Modifiers.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_69()</node>
        <node>jtb.syntaxtree.TypeBound.TypeBound(jtb.syntaxtree.NodeToken,jtb.syntaxtree.ClassOrInterfaceType,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.AndExpression)</node>
        <node>jtb.syntaxtree.NodeToken.NodeToken(java.lang.String,int,int,int,int,int)</node>
        <node>jtb.JavaParserTokenManager.MoreLexicalActions()</node>
        <node>jtb.syntaxtree.NullLiteral.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_116()</node>
        <node>jtb.syntaxtree.PrimaryPrefix.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.UnaryExpressionNotPlusMinus)</node>
        <node>jtb.syntaxtree.EqualityExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.MethodDeclaration(int)</node>
        <node>jtb.syntaxtree.ImportDeclaration.ImportDeclaration(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.Name,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.syntaxtree.MethodDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_117()</node>
        <node>daikon.test.TestAst.ClassOrInterfaceDeclarationHarvester.visit(jtb.syntaxtree.ClassOrInterfaceDeclaration)</node>
        <node>jtb.JavaParser.jj_2_5(int)</node>
        <node>daikon.test.TestAst.MethodDeclarationHarvester.visit(jtb.syntaxtree.MethodDeclaration)</node>
        <node>jtb.JavaParser.jj_3R_57()</node>
        <node>jtb.syntaxtree.AdditiveExpression.AdditiveExpression(jtb.syntaxtree.MultiplicativeExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.visitor.TreeFormatter.TreeFormatter()</node>
        <node>jtb.syntaxtree.VariableDeclaratorId.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeDumper.TreeDumper(java.io.Writer)</node>
        <node>jtb.JavaParser.JavaParser(java.io.InputStream)</node>
        <node>jtb.syntaxtree.InstanceOfExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3R_105()</node>
        <node>jtb.JavaParser.MethodDeclarator()</node>
        <node>jtb.JavaParser.ClassOrInterfaceDeclaration(int)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ClassOrInterfaceBodyDeclaration)</node>
        <node>jtb.JavaParser.jj_3R_106()</node>
        <node>jtb.syntaxtree.TypeDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParserTokenManager.JavaParserTokenManager(jtb.JavaCharStream)</node>
        <node>jtb.syntaxtree.TypeDeclaration.TypeDeclaration(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.syntaxtree.VariableDeclaratorId.VariableDeclaratorId(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.ReferenceType.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NodeSequence.NodeSequence(int)</node>
        <node>jtb.syntaxtree.UnaryExpression.UnaryExpression(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.JavaParser.jj_3R_68()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ExclusiveOrExpression)</node>
        <node>jtb.syntaxtree.NodeListOptional.elements()</node>
        <node>jtb.syntaxtree.NodeSequence.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.ImportDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NodeListOptional.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NodeListOptional.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeParameter)</node>
        <node>jtb.visitor.TreeFormatter.add(jtb.visitor.FormatCommand)</node>
        <node>jtb.JavaCharStream.getBeginLine()</node>
        <node>jtb.JavaParser.jj_3_27()</node>
        <node>jtb.syntaxtree.ResultType.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ConditionalOrExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3R_56()</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBody.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeFormatter.space()</node>
        <node>daikon.tools.jtb.Ast.format(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.ConditionalAndExpression()</node>
        <node>jtb.syntaxtree.ClassOrInterfaceDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3R_102()</node>
        <node>jtb.JavaParser.jj_3R_148()</node>
        <node>jtb.syntaxtree.PrimaryExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_125()</node>
        <node>jtb.JavaParser.PrimaryExpression()</node>
        <node>jtb.syntaxtree.ShiftExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBodyDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ImportDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.MultiplicativeExpression)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceDeclaration.ClassOrInterfaceDeclaration(jtb.syntaxtree.NodeChoice,jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.ClassOrInterfaceBody)</node>
        <node>jtb.JavaParser.jj_3_15()</node>
        <node>jtb.JavaParser.jj_3R_67()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ClassOrInterfaceDeclaration)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeBound)</node>
        <node>jtb.syntaxtree.BlockStatement.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.TypeDeclaration()</node>
        <node>jtb.syntaxtree.PrimaryExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.MultiplicativeExpression()</node>
        <node>jtb.JavaParser.jj_3R_137()</node>
        <node>jtb.JavaParser.jj_3R_114()</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.ungenerify(jtb.syntaxtree.ClassOrInterfaceType)</node>
        <node>jtb.syntaxtree.Type.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.TypeArguments()</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa0_0()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.UnaryExpression)</node>
        <node>jtb.syntaxtree.TypeArgument.TypeArgument(jtb.syntaxtree.NodeChoice)</node>
        <node>daikon.tools.jtb.SimpleTreeDumper.SimpleTreeDumper(java.io.Writer)</node>
        <node>jtb.syntaxtree.TypeArgument.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_55()</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBodyDeclaration.ClassOrInterfaceBodyDeclaration(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.FormalParameter)</node>
        <node>jtb.JavaParser.jj_3R_126()</node>
        <node>jtb.JavaParser.jj_3R_149()</node>
        <node>jtb.JavaParser.jj_3R_103()</node>
        <node>jtb.JavaParser.PrimaryPrefix()</node>
        <node>jtb.JavaParser.jj_3_1()</node>
        <node>jtb.visitor.FormatCommand.getNumCommands()</node>
        <node>jtb.syntaxtree.TypeBound.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParserTokenManager.getNextToken()</node>
        <node>daikon.PptName.getFullClassName()</node>
        <node>jtb.JavaParser.Name()</node>
        <node>jtb.JavaParser.jj_2_16(int)</node>
        <node>jtb.JavaParser.jj_3_14()</node>
        <node>jtb.visitor.TreeFormatter.processList(jtb.syntaxtree.NodeListInterface)</node>
        <node>utilMDE.UtilMDE.splitLines(java.lang.String)</node>
        <node>jtb.JavaParser.jj_3R_89()</node>
        <node>jtb.visitor.TreeDumper.printToken(java.lang.String)</node>
        <node>daikon.tools.jtb.PptNameMatcher.typeMatch(java.lang.String,jtb.syntaxtree.FormalParameter)</node>
        <node>jtb.syntaxtree.NullLiteral.NullLiteral(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.jj_3R_115()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.NodeSequence)</node>
        <node>jtb.visitor.TreeFormatter.placeToken(jtb.syntaxtree.NodeToken,int,int)</node>
        <node>jtb.syntaxtree.NodeListOptional.NodeListOptional()</node>
        <node>jtb.JavaParserTokenManager.jjMoveNfa_0(int,int)</node>
        <node>jtb.syntaxtree.NodeListOptional.addNode(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.CompilationUnit()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ClassOrInterfaceType)</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa0_1()</node>
        <node>jtb.syntaxtree.Expression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_54()</node>
        <node>jtb.JavaParserTokenManager.jjFillToken()</node>
        <node>jtb.JavaParser.jj_3_29()</node>
        <node>jtb.JavaParser.jj_3R_77()</node>
        <node>jtb.syntaxtree.PackageDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa4_0(long,long,long,long)</node>
        <node>jtb.syntaxtree.UnaryExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.EqualityExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_169()</node>
        <node>daikon.tools.jtb.Ast.getParent(java.lang.Class,jtb.syntaxtree.Node)</node>
        <node>daikon.PptName.getSignature()</node>
        <node>jtb.JavaParser.jj_3R_123()</node>
        <node>jtb.JavaParserTokenManager.jjStartNfaWithStates_0(int,int,int)</node>
        <node>jtb.syntaxtree.NodeToken.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_100()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.FormalParameters)</node>
        <node>jtb.JavaParser.jj_3_4()</node>
        <node>jtb.syntaxtree.PackageDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeFormatter.TreeFormatter(int,int)</node>
        <node>jtb.syntaxtree.TypeArguments.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.FormalParameter)</node>
        <node>jtb.JavaParser.jj_2_36(int)</node>
        <node>jtb.syntaxtree.ConditionalAndExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3_17()</node>
        <node>jtb.JavaParser.jj_3R_210()</node>
        <node>jtb.JavaParser.EqualityExpression()</node>
        <node>jtb.JavaCharStream.JavaCharStream(java.io.Reader,int,int,int)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.PackageDeclaration)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Expression)</node>
        <node>jtb.JavaCharStream.JavaCharStream(java.io.InputStream,int,int)</node>
        <node>jtb.syntaxtree.RelationalExpression.RelationalExpression(jtb.syntaxtree.ShiftExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.JavaParser.jj_3R_88()</node>
        <node>jtb.JavaParser.ConditionalOrExpression()</node>
        <node>jtb.JavaParser.jj_3R_135()</node>
        <node>jtb.syntaxtree.ExclusiveOrExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.FormalParameters()</node>
        <node>jtb.JavaParserTokenManager.SkipLexicalActions(jtb.Token)</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa1_0(long,long)</node>
        <node>daikon.tools.jtb.Ast.getPackage(jtb.syntaxtree.CompilationUnit)</node>
        <node>jtb.JavaParser.jj_3R_53()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.JavaParser.Type()</node>
        <node>jtb.JavaParser.jj_3_28()</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.visit(jtb.syntaxtree.MethodDeclaration)</node>
        <node>daikon.tools.jtb.Ast.typeMatch(java.lang.String,java.lang.String)</node>
        <node>jtb.JavaParser.jj_2_18(int)</node>
        <node>jtb.JavaParser.jj_3R_76()</node>
        <node>jtb.JavaParser.jj_3R_99()</node>
        <node>daikon.tools.jtb.Ast.getType(jtb.syntaxtree.FormalParameter)</node>
        <node>jtb.JavaParser.jj_2_21(int)</node>
        <node>jtb.JavaParser.jj_ntk()</node>
        <node>jtb.syntaxtree.InclusiveOrExpression.InclusiveOrExpression(jtb.syntaxtree.ExclusiveOrExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.NodeOptional.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.fixMultipleRightBrackets(jtb.Token)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Name)</node>
        <node>jtb.JavaParser.jj_3R_124()</node>
        <node>jtb.JavaCharStream.FillBuff()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ReturnStatement)</node>
        <node>jtb.syntaxtree.Statement.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.TypeDeclaration.getParent()</node>
        <node>jtb.JavaParser.jj_3R_101()</node>
        <node>jtb.JavaParser.jj_3_3()</node>
        <node>jtb.syntaxtree.FormalParameter.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.ClassOrInterfaceBodyDeclaration(boolean)</node>
        <node>jtb.syntaxtree.TypeParameter.accept(jtb.visitor.Visitor)</node>
        <node>utilMDE.UtilMDE.removeWhitespaceBefore(java.lang.String,java.lang.String)</node>
        <node>jtb.JavaParser.jj_3_16()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.CompilationUnit)</node>
        <node>jtb.JavaParser.TypeParameter()</node>
        <node>jtb.syntaxtree.NodeToken.trimSpecials()</node>
        <node>jtb.JavaParser.jj_3R_87()</node>
        <node>jtb.syntaxtree.TypeParameter.TypeParameter(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.visitor.FormatCommand.getCommand()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.PrimaryPrefix)</node>
        <node>jtb.JavaParser.jj_3R_136()</node>
        <node>jtb.syntaxtree.AndExpression.AndExpression(jtb.syntaxtree.EqualityExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>daikon.PptName.toString()</node>
        <node>jtb.JavaParser.jj_3R_75()</node>
        <node>jtb.JavaParser.TypeParameters()</node>
        <node>jtb.JavaParser.jj_3R_52()</node>
        <node>jtb.syntaxtree.ExclusiveOrExpression.ExclusiveOrExpression(jtb.syntaxtree.AndExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.ConditionalAndExpression.ConditionalAndExpression(jtb.syntaxtree.InclusiveOrExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.JavaParser.PostfixExpression()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ShiftExpression)</node>
        <node>jtb.JavaParser.jj_3R_98()</node>
        <node>jtb.syntaxtree.ClassOrInterfaceType.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.NullLiteral)</node>
        <node>jtb.syntaxtree.NodeListOptional.getParent()</node>
        <node>jtb.syntaxtree.RelationalExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.FormalParameters.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.Block.Block(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.syntaxtree.TypeParameter.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_121()</node>
        <node>daikon.PptName.getMethodName()</node>
        <node>jtb.syntaxtree.EqualityExpression.EqualityExpression(jtb.syntaxtree.InstanceOfExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.JavaParser.jj_3R_86()</node>
        <node>jtb.syntaxtree.PrimaryPrefix.PrimaryPrefix(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.JavaParser.jj_3R_63()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.RelationalExpression)</node>
        <node>jtb.syntaxtree.InstanceOfExpression.InstanceOfExpression(jtb.syntaxtree.RelationalExpression,jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Block)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBodyDeclaration.getParent()</node>
        <node>jtb.JavaParser.jj_2_17(int)</node>
        <node>jtb.JavaParser.jj_2_4(int)</node>
        <node>jtb.JavaParser.ReferenceType()</node>
        <node>jtb.JavaParser.jj_3R_133()</node>
        <node>jtb.JavaParser.jj_3R_110()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ResultType)</node>
        <node>jtb.JavaParser.jj_3R_74()</node>
        <node>jtb.JavaParser.jj_3R_97()</node>
        <node>jtb.JavaParser.jj_3R_51()</node>
        <node>jtb.syntaxtree.NodeToken.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3_22()</node>
        <node>jtb.syntaxtree.PostfixExpression.PostfixExpression(jtb.syntaxtree.PrimaryExpression,jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.EqualityExpression)</node>
        <node>jtb.syntaxtree.NodeOptional.addNode(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.getToken(int)</node>
        <node>jtb.syntaxtree.FormalParameters.FormalParameters(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeToken)</node>
        <node>daikon.tools.jtb.Ast.1GetParametersVisitor.visit(jtb.syntaxtree.FormalParameter)</node>
        <node>daikon.tools.jtb.SimpleTreeDumper.printToken(java.lang.String)</node>
        <node>jtb.syntaxtree.NodeChoice.getParent()</node>
        <node>utilMDE.UtilMDE.removeWhitespaceAfter(java.lang.String,java.lang.String)</node>
        <node>jtb.syntaxtree.ResultType.ResultType(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.JavaParser.AndExpression()</node>
        <node>jtb.JavaParser.Block()</node>
        <node>jtb.JavaParser.jj_3R_122()</node>
        <node>jtb.JavaParser.jj_3R_85()</node>
        <node>jtb.JavaParser.jj_3_5()</node>
        <node>jtb.JavaParser.jj_3R_62()</node>
        <node>jtb.JavaParser.jj_3_10()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ImportDeclaration)</node>
        <node>jtb.JavaParser.jj_2_13(int)</node>
        <node>jtb.syntaxtree.ShiftExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.ReturnStatement.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.InclusiveOrExpression)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceType.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NodeSequence.getParent()</node>
        <node>daikon.tools.jtb.PptNameMatcher.matches(daikon.PptName,jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.PrimaryExpression)</node>
        <node>jtb.syntaxtree.Block.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaCharStream.readChar()</node>
        <node>jtb.JavaParser.RelationalExpression()</node>
        <node>jtb.JavaParser.jj_3R_134()</node>
        <node>jtb.JavaParser.jj_3R_50()</node>
        <node>jtb.JavaParser.jj_3R_96()</node>
        <node>jtb.syntaxtree.MethodDeclarator.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_73()</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.ReferenceType)</node>
        <node>jtb.JavaParser.jj_3_25()</node>
        <node>jtb.syntaxtree.Literal.Literal(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.syntaxtree.AndExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.InclusiveOrExpression()</node>
        <node>jtb.syntaxtree.MethodDeclarator.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.PostfixExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeFormatter.processList(jtb.syntaxtree.NodeListInterface,jtb.visitor.FormatCommand)</node>
        <node>jtb.syntaxtree.NodeSequence.elements()</node>
        <node>jtb.syntaxtree.ConditionalExpression.ConditionalExpression(jtb.syntaxtree.ConditionalOrExpression,jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.JavaParser.jj_3R_61()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.MethodDeclarator)</node>
        <node>jtb.syntaxtree.NodeChoice.setParent(jtb.syntaxtree.Node)</node>
        <node>daikon.tools.jtb.Ast.create(java.lang.String,java.lang.String)</node>
        <node>jtb.JavaParser.jj_3_13()</node>
        <node>jtb.JavaParser.jj_3_36()</node>
        <node>jtb.JavaParser.ResultType()</node>
        <node>jtb.JavaParser.TypeArgument()</node>
        <node>jtb.syntaxtree.NodeOptional.present()</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa5_0(long,long,long,long)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.VariableDeclaratorId)</node>
        <node>jtb.syntaxtree.MethodDeclaration.getParent()</node>
        <node>jtb.JavaParser.jj_2_25(int)</node>
        <node>jtb.syntaxtree.Expression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.TreeDumper.visit(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.UnaryExpressionNotPlusMinus()</node>
        <node>jtb.JavaParser.jj_3R_72()</node>
        <node>jtb.JavaParser.AdditiveExpression()</node>
        <node>jtb.syntaxtree.ReturnStatement.ReturnStatement(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBodyDeclaration.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JTBToolkit.makeNodeToken(jtb.Token)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.augmentShadowingMap(jtb.syntaxtree.TypeParameters)</node>
        <node>jtb.syntaxtree.ResultType.setParent(jtb.syntaxtree.Node)</node>
        <node>utilMDE.UtilMDE.removeWhitespaceAround(java.lang.String,java.lang.String)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeDeclaration)</node>
        <node>jtb.JavaParser.JavaParser(java.io.Reader)</node>
        <node>jtb.JavaParser.jj_3R_120()</node>
        <node>jtb.syntaxtree.NodeOptional.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.ImportDeclaration()</node>
        <node>jtb.syntaxtree.FormalParameter.FormalParameter(jtb.syntaxtree.NodeOptional,jtb.syntaxtree.Type,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.VariableDeclaratorId)</node>
        <node>jtb.JavaParser.jj_3_12()</node>
        <node>jtb.JavaParser.jj_3_35()</node>
        <node>jtb.JavaParser.jj_3R_60()</node>
        <node>jtb.syntaxtree.Modifiers.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.VariableDeclaratorId()</node>
        <node>jtb.syntaxtree.MultiplicativeExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.ClassOrInterfaceType)</node>
        <node>jtb.syntaxtree.ConditionalAndExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.ExclusiveOrExpression()</node>
        <node>jtb.JavaParser.Literal()</node>
        <node>jtb.JavaParser.ReturnStatement()</node>
        <node>jtb.syntaxtree.CompilationUnit.CompilationUnit(jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeListOptional,jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParserTokenManager.jjStopAtPos(int,int)</node>
        <node>daikon.tools.jtb.PptNameMatcher.PptNameMatcher(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.InstanceOfExpression()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeParameters)</node>
        <node>jtb.JavaParser.jj_3R_163()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.AdditiveExpression)</node>
        <node>jtb.syntaxtree.ConditionalOrExpression.ConditionalOrExpression(jtb.syntaxtree.ConditionalAndExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.JavaParser.ConditionalExpression()</node>
        <node>jtb.syntaxtree.BlockStatement.BlockStatement(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.JavaCharStream.getEndLine()</node>
        <node>jtb.syntaxtree.UnaryExpressionNotPlusMinus.UnaryExpressionNotPlusMinus(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceDeclaration.getParent()</node>
        <node>jtb.syntaxtree.Expression.Expression(jtb.syntaxtree.ConditionalExpression,jtb.syntaxtree.NodeOptional)</node>
        <node>jtb.JavaParser.jj_2_3(int)</node>
        <node>jtb.JavaParser.jj_3_30()</node>
        <node>jtb.syntaxtree.TypeParameters.accept(jtb.visitor.Visitor)</node>
        <node>daikon.tools.jtb.Ast.getClassName(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ClassOrInterfaceBody)</node>
        <node>jtb.syntaxtree.NodeListOptional.present()</node>
        <node>jtb.syntaxtree.PrimaryPrefix.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParserTokenManager.jjStopStringLiteralDfa_0(int,long,long)</node>
        <node>jtb.JavaParser.jj_2_1(int)</node>
        <node>jtb.syntaxtree.Name.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.jj_2_14(int)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.visit(jtb.syntaxtree.ClassOrInterfaceType)</node>
        <node>jtb.syntaxtree.AndExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>daikon.tools.jtb.Ast.quickFixForInternalComment(java.lang.String)</node>
        <node>jtb.JavaParser.jj_3R_70()</node>
        <node>jtb.JavaParser.PackageDeclaration()</node>
        <node>jtb.syntaxtree.RelationalExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.ConditionalExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3R_164()</node>
        <node>jtb.JavaParser.NullLiteral()</node>
        <node>jtb.JavaParser.jj_2_35(int)</node>
        <node>jtb.syntaxtree.TypeDeclaration.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ReferenceType.ReferenceType(jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBody.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa2_0(long,long,long,long)</node>
        <node>jtb.JavaParserTokenManager.jjMoveNfa_1(int,int)</node>
        <node>jtb.JavaCharStream.GetImage()</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.UtilMDE.split(java.lang.String,java.lang.String)</node>
        <node>jtb.syntaxtree.Modifiers.Modifiers(jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.InclusiveOrExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_81()</node>
        <node>jtb.JavaParser.UnaryExpression()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.ConditionalOrExpression)</node>
        <node>jtb.syntaxtree.PostfixExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.Type.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_2_10(int)</node>
        <node>jtb.syntaxtree.ExclusiveOrExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.FormalParameters.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.TypeArguments)</node>
        <node>jtb.JavaParser.ClassOrInterfaceType()</node>
        <node>jtb.JavaParser.TypeBound()</node>
        <node>jtb.JavaParser.ShiftExpression()</node>
        <node>jtb.JavaParser.FormalParameter()</node>
        <node>jtb.syntaxtree.Statement.Statement(jtb.syntaxtree.NodeChoice)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.augmentShadowingMap(jtb.syntaxtree.TypeParameter)</node>
        <node>daikon.tools.jtb.SimpleTreeDumper.visit(jtb.syntaxtree.NodeToken)</node>
        <node>jtb.JavaParser.jj_consume_token(int)</node>
        <node>jtb.syntaxtree.MethodDeclarator.MethodDeclarator(jtb.syntaxtree.NodeToken,jtb.syntaxtree.FormalParameters,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.JavaParser.jj_3_21()</node>
        <node>jtb.syntaxtree.ReferenceType.accept(jtb.visitor.Visitor)</node>
        <node>daikon.tools.jtb.PptNameMatcher.matches(daikon.PptName,java.lang.String,java.lang.String,java.util.List)</node>
        <node>jtb.JavaParserTokenManager.jjStartNfa_0(int,long,long)</node>
        <node>jtb.JavaParser.Modifiers()</node>
        <node>jtb.syntaxtree.NodeSequence.addNode(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_161()</node>
        <node>jtb.syntaxtree.UnaryExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.UnaryExpressionNotPlusMinus.accept(jtb.visitor.Visitor)</node>
        <node>jtb.visitor.FormatCommand.FormatCommand(int,int)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.MethodDeclaration)</node>
        <node>jtb.syntaxtree.BlockStatement.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.Modifiers)</node>
        <node>jtb.JavaParser.jj_3R_109()</node>
        <node>jtb.JavaParser.jj_scan_token(int)</node>
        <node>jtb.JavaParser.jj_3R_80()</node>
        <node>jtb.syntaxtree.InclusiveOrExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.NodeList.NodeList()</node>
        <node>jtb.syntaxtree.ConditionalExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NodeChoice.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.Name.Name(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeListOptional)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.1.visit(jtb.syntaxtree.TypeParameter)</node>
        <node>jtb.JavaCharStream.UpdateLineColumn(char)</node>
        <node>jtb.JavaParser.jj_2_12(int)</node>
        <node>jtb.JavaParser.jj_3_20()</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.visitor.DepthFirstVisitor.visit(jtb.syntaxtree.BlockStatement)</node>
        <node>jtb.syntaxtree.AdditiveExpression.accept(jtb.visitor.Visitor)</node>
        <node>jtb.JavaParser.jj_3R_162()</node>
        <node>jtb.JavaCharStream.ReadByte()</node>
        <node>jtb.JavaParserTokenManager.jjMoveStringLiteralDfa6_0(long,long,long,long)</node>
        <node>jtb.syntaxtree.MethodDeclaration.MethodDeclaration(jtb.syntaxtree.NodeOptional,jtb.syntaxtree.ResultType,jtb.syntaxtree.MethodDeclarator,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeChoice)</node>
        <node>jtb.JavaParserTokenManager.TokenLexicalActions(jtb.Token)</node>
        <node>jtb.syntaxtree.FormalParameter.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.Literal.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.Type)</node>
        <node>jtb.JavaCharStream.BeginToken()</node>
        <node>jtb.visitor.TreeFormatter.visit(jtb.syntaxtree.VariableDeclaratorId)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceType.ClassOrInterfaceType(jtb.syntaxtree.NodeToken,jtb.syntaxtree.NodeOptional,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.AdditiveExpression.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.Block.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.JavaParser.jj_3R_49()</node>
        <node>jtb.JavaParser.BlockStatement()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>jtb.syntaxtree.VariableDeclaratorId.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.ClassOrInterfaceBody.getParent()</node>
        <node>jtb.syntaxtree.CompilationUnit.accept(jtb.visitor.Visitor)</node>
        <node>jtb.syntaxtree.MultiplicativeExpression.MultiplicativeExpression(jtb.syntaxtree.UnaryExpression,jtb.syntaxtree.NodeListOptional)</node>
        <node>jtb.syntaxtree.Statement.setParent(jtb.syntaxtree.Node)</node>
        <node>jtb.syntaxtree.NullLiteral.accept(jtb.visitor.Visitor)</node>
        <node>daikon.tools.jtb.ClassOrInterfaceTypeDecorateVisitor.visit(jtb.syntaxtree.ClassOrInterfaceDeclaration)</node>
        <node>jtb.JavaCharStream.backup(int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_eltsEqualIndex()">
        <node>daikon.Quant.eltsEqualIndex(int[])</node>
        <node>daikon.Quant.ne(int,int)</node>
      </test>
      <test name="daikon.test.TestQuant.test_lexGT()">
        <node>daikon.Quant.lexGT(int[],int[])</node>
        <node>daikon.Quant.lt(int,int)</node>
        <node>daikon.Quant.gt(int,int)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bmul__40()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_isFull_22()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testInvs1Invs1()">
        <node>daikon.ProglangType.baseIsIntegral()</node>
        <node>daikon.Debug.logOn()</node>
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.var()</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.InvNode)</node>
        <node>daikon.VarInfoName.parse(java.lang.String)</node>
        <node>daikon.inv.ValueSet.ValueSet(int)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isInteresting()</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.VarInfo.new_ppt()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.VarInfoName.repr()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareClass(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.InvNode(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.PptSlice1.addInvariant(daikon.inv.Invariant)</node>
        <node>utilMDE.LimitedSizeIntSet.LimitedSizeIntSet(int)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.PptSlice1.num_samples()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeConfidence()</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.num_samples(daikon.VarInfo)</node>
        <node>daikon.inv.unary.LowerBoundCore.LowerBoundCore(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.LowerBound.computeConfidence()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.inv.Invariant.logDetail()</node>
        <node>daikon.inv.unary.scalar.LowerBound.enabled()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>daikon.inv.unary.LowerBoundCore.computeProbability()</node>
        <node>daikon.test.diff.DiffTester.newIntVarInfo(java.lang.String)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrintln()</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_range()</node>
        <node>daikon.inv.Invariant.instantiate(daikon.PptSlice)</node>
        <node>daikon.inv.Invariant.InvariantComparatorForPrinting.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.inv.Invariant.logOn()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.inv.Invariant.Invariant(daikon.PptSlice)</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineType(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.VarInfoName.equals(daikon.VarInfoName)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_modulus()</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,java.lang.String)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.inv.Invariant.getConfidence()</node>
        <node>daikon.ProglangType.fileTypeToRepType()</node>
        <node>daikon.diff.DetailedStatisticsVisitor.determineRelationship(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>daikon.inv.unary.UnaryInvariant.UnaryInvariant(daikon.PptSlice)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_or(double,double)</node>
        <node>daikon.PptSlice1.arity()</node>
        <node>daikon.diff.PrintAllVisitor.printPrintability(daikon.inv.Invariant)</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>daikon.diff.PrintAllVisitor.bufPrint(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.LowerBound.get_proto()</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,daikon.VarInfoAux)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.inv.ValueSet.ValueSetScalar.ValueSetScalar(int)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.isSameInvariant(daikon.inv.Invariant)</node>
        <node>daikon.VarInfo.VarInfo(java.lang.String,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.VarInfoName.Simple.Simple(java.lang.String)</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_ok(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.VarInfo.relate_var()</node>
        <node>daikon.inv.Invariant.prob_and(double,double)</node>
        <node>daikon.VarInfoName.Simple.repr_impl()</node>
        <node>daikon.inv.unary.LowerBoundCore.isSameFormula(daikon.inv.unary.LowerBoundCore)</node>
        <node>daikon.inv.Invariant.isWorthPrinting()</node>
        <node>daikon.Debug.logDetail()</node>
        <node>daikon.inv.ValueSet.factory(daikon.VarInfo)</node>
        <node>daikon.VarInfo.VarInfo(daikon.VarInfoName,daikon.ProglangType,daikon.ProglangType,daikon.VarComparability,boolean,java.lang.Object,daikon.VarInfoAux)</node>
        <node>daikon.diff.PrintAllVisitor.printInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.justified()</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.valid_types(daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compareVariables(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>daikon.diff.InvNode.getInv2()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepPropFilters(daikon.inv.Invariant)</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.ProglangType.isScalar()</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_is_ge(double,double)</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.VarInfo.name_using(daikon.inv.OutputFormat)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariant.prob_is_ge(double,double)</node>
        <node>daikon.inv.unary.scalar.LowerBound.isSameFormula(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.PptSlice1.PptSlice1(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.Debug.log(java.lang.Class,daikon.Ppt,daikon.VarInfo[],java.lang.String)</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.VarInfo.name()</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>daikon.inv.Invariant.prob_or(double,double)</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeep(daikon.inv.Invariant)</node>
        <node>daikon.ProglangType.isIntegral()</node>
        <node>daikon.diff.PrintAllVisitor.printConfidence(daikon.inv.Invariant)</node>
        <node>daikon.inv.unary.scalar.SingleScalar.SingleScalar(daikon.PptSlice)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.intern()</node>
        <node>daikon.diff.InvNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.VarInfoName.name()</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.VarInfoAux.getDefault()</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.VarInfoName.hashCode()</node>
        <node>daikon.VarInfoName.equals(java.lang.Object)</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>daikon.inv.unary.scalar.LowerBound.instantiate_dyn(daikon.PptSlice)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.inv.Invariant.ClassVarnameComparator.compare(daikon.inv.Invariant,daikon.inv.Invariant)</node>
        <node>daikon.diff.InvNode.getInv1()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.inv.filter.InvariantFilters.shouldKeepVarFilters(daikon.inv.Invariant)</node>
        <node>daikon.ModBitTracker.get(int)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.inv.filter.InvariantFilter.shouldDiscard(daikon.inv.Invariant)</node>
        <node>daikon.inv.filter.UnjustifiedFilter.shouldDiscardInvariant(daikon.inv.Invariant)</node>
        <node>daikon.inv.Invariant.format()</node>
        <node>daikon.inv.filter.InvariantFilters.defaultFilters()</node>
        <node>daikon.inv.unary.scalar.LowerBound.LowerBound(daikon.PptSlice)</node>
        <node>daikon.inv.unary.scalar.LowerBound.format_using(daikon.inv.OutputFormat)</node>
        <node>daikon.inv.unary.LowerBoundCore.calc_avg_samples_per_val(long,double)</node>
        <node>daikon.inv.unary.LowerBoundCore.prob_and(double,double)</node>
        <node>daikon.inv.Invariant.log(java.lang.String,java.lang.Object[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.testInternObject()">
        <node>utilMDE.Intern.LongArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.intern(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.get(java.lang.Object)</node>
        <node>utilMDE.Intern.IntegerHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.LongArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.StringArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.WeakHasherMap.put(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.WeakKey(utilMDE.WeakHasherMap,java.lang.Object,java.lang.ref.ReferenceQueue)</node>
        <node>utilMDE.Intern.intern(java.lang.String)</node>
        <node>utilMDE.Intern.DoubleHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.IntArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(java.lang.Long)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>utilMDE.Intern.StringArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.WeakKeyCreate(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(int[])</node>
        <node>utilMDE.Intern.intern(java.lang.Object[])</node>
        <node>utilMDE.WeakHasherMap.keyHashCode(java.lang.Object)</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>utilMDE.WeakHasherMap.WeakKey.equals(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(long[])</node>
        <node>utilMDE.Intern.ObjectArrayHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.intern(java.lang.Double)</node>
        <node>utilMDE.Intern.LongHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.intern(double[])</node>
        <node>utilMDE.Intern.intern(java.lang.String[])</node>
        <node>utilMDE.Intern.DoubleHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.keyEquals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.DoubleArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.ObjectArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.IntArrayHasher.equals(java.lang.Object,java.lang.Object)</node>
        <node>utilMDE.Intern.intern(java.lang.Integer)</node>
        <node>utilMDE.Intern.IntegerHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.Intern.LongHasher.hashCode(java.lang.Object)</node>
        <node>utilMDE.WeakHasherMap.processQueue()</node>
        <node>utilMDE.WeakHasherMap.WeakKey.hashCode()</node>
        <node>utilMDE.Intern.DoubleArrayHasher.hashCode(java.lang.Object)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_contains_7()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_getFront_24()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__33()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testDataStructures_QueueAr_dequeue_26()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.diff.DiffTester.testPpts1Ppts3()">
        <node>daikon.ModBitTracker.ModBitTracker(int)</node>
        <node>daikon.PptTopLevel.viewsAsCollection()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap,boolean)</node>
        <node>daikon.test.Common.makePptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptSlice0.arity()</node>
        <node>daikon.diff.Node.getUserLeft()</node>
        <node>utilMDE.OrderedPairIterator.hasNext()</node>
        <node>daikon.test.diff.DiffTester.newPptTopLevel(java.lang.String,daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.views_iterator()</node>
        <node>daikon.diff.PrintAllVisitor.PrintAllVisitor(java.io.PrintStream,boolean,boolean)</node>
        <node>daikon.diff.InvMap.get(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.Node()</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.ViewsIteratorIterator(daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.children()</node>
        <node>daikon.diff.PrintAllVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.Ppt.NameComparator.compare(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>utilMDE.OrderedPairIterator.setnext1()</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.RootNode)</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.next()</node>
        <node>daikon.diff.Node.getUserRight()</node>
        <node>daikon.diff.Node.Node(utilMDE.Pair)</node>
        <node>daikon.diff.PptNode.getPpt2()</node>
        <node>utilMDE.OrderedPairIterator.returnboth()</node>
        <node>daikon.test.diff.DiffTester.printTree(daikon.diff.RootNode)</node>
        <node>utilMDE.OrderedPairIterator.next()</node>
        <node>utilMDE.OrderedPairIterator.OrderedPairIterator(java.util.Iterator,java.util.Iterator,java.util.Comparator)</node>
        <node>daikon.Ppt.NameComparator.swap(java.lang.String,char,char)</node>
        <node>daikon.PptSlice.PptSlice(daikon.PptTopLevel,daikon.VarInfo[])</node>
        <node>daikon.inv.Invariants.Invariants()</node>
        <node>daikon.diff.Diff.shouldAdd(daikon.PptTopLevel)</node>
        <node>daikon.PptTopLevel.getInvariants()</node>
        <node>daikon.PptSlice0.PptSlice0(daikon.PptTopLevel)</node>
        <node>utilMDE.UtilMDE.sortList(java.util.List,java.util.Comparator)</node>
        <node>daikon.diff.RootNode.RootNode()</node>
        <node>daikon.PptName.isEnterPoint()</node>
        <node>daikon.diff.Diff.convertToInvMap(daikon.PptMap)</node>
        <node>daikon.PptTopLevel.init_vars(daikon.VarInfo[])</node>
        <node>daikon.PptTopLevel.ViewsIteratorIterator.hasNext()</node>
        <node>daikon.diff.Diff.diffPptTopLevel(daikon.PptTopLevel,daikon.PptTopLevel,daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.diff.PptNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.RootNode.accept(daikon.diff.Visitor)</node>
        <node>daikon.diff.PptNode.PptNode(daikon.PptTopLevel,daikon.PptTopLevel)</node>
        <node>daikon.diff.Node.add(java.lang.Object)</node>
        <node>daikon.diff.InvMap.pptSortedIterator(java.util.Comparator)</node>
        <node>utilMDE.Assert.assertTrue(boolean)</node>
        <node>daikon.Ppt.Ppt()</node>
        <node>daikon.diff.Diff.diffInvMap(daikon.diff.InvMap,daikon.diff.InvMap,boolean)</node>
        <node>daikon.PptName.isCombinedExitPoint()</node>
        <node>daikon.diff.InvMap.InvMap()</node>
        <node>utilMDE.OrderedPairIterator.setnext2()</node>
        <node>utilMDE.Assert.assertTrue(boolean,java.lang.String)</node>
        <node>daikon.diff.InvMap.put(daikon.PptTopLevel,java.util.List)</node>
        <node>daikon.PptTopLevel.name()</node>
        <node>daikon.PptName.PptName(java.lang.String)</node>
        <node>daikon.PptMap.asCollection()</node>
        <node>daikon.diff.PptNode.getPpt1()</node>
        <node>daikon.diff.Diff.diffPptMap(daikon.PptMap,daikon.PptMap)</node>
        <node>utilMDE.Pair.Pair(java.lang.Object,java.lang.Object)</node>
        <node>daikon.diff.DepthFirstVisitor.visit(daikon.diff.PptNode)</node>
        <node>daikon.PptTopLevel.PptTopLevel(java.lang.String,daikon.VarInfo[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMath__BigFloat_bdiv__37()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
      <test name="daikon.test.TestQuant.test_pairwiseNotEqual()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.pairwiseNotEqual(int[],int[])</node>
        <node>daikon.Quant.sameLength(int[],int[])</node>
        <node>utilMDE.FuzzyFloat.FuzzyFloat()</node>
      </test>
      <test name="daikon.test.TestQuant.test_memberOf()">
        <node>daikon.Quant.eq(int,int)</node>
        <node>daikon.Quant.memberOf(int,int[])</node>
      </test>
      <test name="utilMDE.TestUtilMDE.test_unqualified_name()">
        <node>utilMDE.UtilMDE.unqualified_name(java.lang.String)</node>
      </test>
      <test name="daikon.test.TestQuant.test_setDiff()">
        <node>daikon.test.TestQuant.assert_arrays_equals(int[],int[])</node>
        <node>daikon.Quant.eq(int,int)</node>
        <node>utilMDE.TestUtilMDE.assert_arrays_equals(int[],int[])</node>
        <node>utilMDE.ArraysMDE.subarray(int[],int,int)</node>
        <node>daikon.Quant.setDiff(int[],int[])</node>
        <node>daikon.Quant.memberOf(int,int[])</node>
      </test>
      <test name="daikon.test.split.SplitterFactoryTest.testMapQuick1_StreetNumberSet_size_17()">
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.lang.String)</node>
        <node>daikon.test.split.SplitterFactoryTest.assertEqualFiles(java.lang.String,java.lang.String)</node>
        <node>utilMDE.UtilMDE.equalFiles(java.lang.String,java.lang.String,boolean)</node>
        <node>utilMDE.UtilMDE.lineNumberFileReader(java.io.File)</node>
      </test>
    </callings>
  </original-execution>
</smf>
