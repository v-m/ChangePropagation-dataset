<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key id="type" for="node" attr.name="type" attr.type="string" />
  <key id="type" for="edge" attr.name="type" attr.type="string" />
  <key id="type" for="edge" attr.name="sourcecode" attr.type="string" />
  <key id="type" for="node" attr.name="formaltype" attr.type="string" />
  <key id="type" for="node" attr.name="USES_REFLEXION" attr.type="boolean">
    <default>false</default>
  </key>
  <graph id="G" edgedefault="directed" buildtime="1712">
    <node id="org.codehaus.jparsec.easymock.BaseMockTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.mock(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[3426-3550;96-99;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.getMockFields(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[2137-2921;51-73;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.replay()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[3555-3632;101-104;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.runBare()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[3020-3282;79-87;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.runTest()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[3289-3421;89-94;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.easymock.BaseMockTest.verify()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/easymock/BaseMockTest.java;[3639-3716;106-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporter()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ErrorReporter.java;[1444-2211;30-50;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParseErrorDetails.getFailureMessage()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParseErrorDetails.java;[1782-1944;39-43;3-29];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParseErrorDetails.getExpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParseErrorDetails.java;[1598-1674;33-34;3-29];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporter.reportList(java.lang.StringBuilder,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ErrorReporter.java;[2218-2676;52-67;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParseErrorDetails.getEncountered()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParseErrorDetails.java;[1495-1591;30-31;3-26];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParseErrorDetails.getUnexpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParseErrorDetails.java;[1681-1775;36-37;3-25];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.reportList(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1974-2173;59-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testReportList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1584-1967;50-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testToString_expected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[795-1195;32-39;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.Location(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/Location.java;[1486-1698;31-40;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testToString_failure()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[562-788;26-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testToString_null()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[325-419;18-20;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testToString_nullError()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[426-555;22-24;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.testToString_unexpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1202-1577;41-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.getMockFields(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.runTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.runBare()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ErrorReporterTest.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.Location.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/Location.java;[1705-1910;42-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.Location.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/Location.java;[1915-1982;50-52;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.Location.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/Location.java;[1987-2073;54-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.LocationTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.LocationTest.testEquals()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/LocationTest.java;[1527-1719;34-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectTester.assertEqual(java.lang.Object,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectTester.java;[274-479;13-18;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectTester.assertNotEqual(java.lang.Object,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectTester.java;[486-736;20-26;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.LocationTest.testToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/LocationTest.java;[1421-1520;30-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException(java.lang.Throwable,org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[2058-2619;44-58;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException.toErrorMessage(java.lang.String,java.lang.String,org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[2777-3213;65-76;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException(org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[1580-2053;30-42;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException.getModuleName()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[3220-3332;78-81;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException.getLocation()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[3339-3438;83-86;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParserException.getErrorDetails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[2624-2770;60-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.error.ParseErrorDetails.getIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParseErrorDetails.java;[1399-1488;27-28;3-17];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$1.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[1606-1674;32-34;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Map.java;[1363-1429;25-26;3-20];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[1680-1745;35-37;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4500-4562;127-129;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$2.map(java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4420-4494;124-126;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Map2.java;[1391-1466;25-26;3-18];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples.pair(A,B)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuples.java;[1469-1648;28-31;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A,B</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4752-4815;137-139;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$3.map(java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4656-4746;134-136;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Map3.map(A,B,C)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Map3.java;[1406-1497;26-27;3-23];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples.tuple(A,B,C)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuples.java;[1831-1985;38-41;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A,B,C</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5018-5081;147-149;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$4.map(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4909-5012;144-146;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Map4.map(A,B,C,D)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Map4.java;[1420-1527;26-27;3-28];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples.tuple(A,B,C,D)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuples.java;[1992-2163;43-46;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A,B,C,D</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5301-5364;157-159;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$5.map(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5179-5295;154-156;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Map5.map(A,B,C,D,E)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Map5.java;[1434-1557;26-27;3-33];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples.tuple(A,B,C,D,E)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuples.java;[2170-2358;48-51;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A,B,C,D,E</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$6.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[6272-6322;187-189;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$6.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[6328-6382;190-190;5-59];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$7.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[6496-6566;195-197;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$7.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[6572-6638;198-200;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[6650-6666;203-203;3-19];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toTuple5()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5984-6199;180-184;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toTuple4()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5771-5977;174-178;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toTuple3()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5567-5764;168-172;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toPair()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[5376-5560;162-166;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$10.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3370-3449;85-87;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$10.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3457-3543;88-90;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toEnum(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3076-3554;79-92;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$11()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$11.map(F)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3896-3929;103-103;7-40];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">F</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$11.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3937-4014;104-106;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.constant(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3733-4025;100-108;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$12()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$12.map(K)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4189-4240;113-115;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">K</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$12.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4248-4320;116-118;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.map(java.util.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[4032-4331;110-120;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.mapToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2825-3069;70-77;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.identity()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[3561-3726;94-98;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$8.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2118-2192;46-48;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2200-2273;49-51;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toLowerCase(java.util.Locale)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[1919-2284;43-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$9.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2652-2726;61-63;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps$9.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2734-2807;64-66;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Maps.toUpperCase(java.util.Locale)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Maps.java;[2453-2818;58-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest$MyEnum()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testConstant()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[1115-1300;44-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testIdentity()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[926-1108;38-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testJmap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[1307-1616;50-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testMapToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[1623-1847;59-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToEnum()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[734-919;33-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[208-361;14-17;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToLowerCase()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[368-522;19-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToPair()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[1854-2005;65-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToTuple3()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[2012-2175;70-73;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToTuple4()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[2182-2353;75-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToTuple5()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[2360-2539;80-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.MapsTest.testToUpperCase()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[529-683;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Pair(A,B)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Pair.java;[1410-1468;30-33;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
      <data key="formaltype">A,B</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Pair.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Pair.java;[1588-1736;39-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Pair.equals(org.codehaus.jparsec.functors.Pair)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Pair.java;[1475-1581;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Objects.equals(java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Objects.java;[1489-1731;29-35;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Pair.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Pair.java;[1743-1838;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Objects.hashCode(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Objects.java;[1319-1482;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Pair.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Pair.java;[1845-1921;50-52;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3(A,B,C)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple3.java;[1416-1482;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
      <data key="formaltype">A,B,C</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple3.java;[1600-1758;38-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3.equals(org.codehaus.jparsec.functors.Tuple3)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple3.java;[1489-1593;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple3.java;[1765-1857;45-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple3.java;[1864-1951;49-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple3.equals(org.codehaus.jparsec.functors.Pair)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4(A,B,C,D)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple4.java;[1424-1498;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
      <data key="formaltype">A,B,C,D</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple4.java;[1619-1783;38-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.equals(org.codehaus.jparsec.functors.Tuple4)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple4.java;[1505-1612;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple4.java;[1790-1882;45-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple4.java;[1889-1987;49-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.equals(org.codehaus.jparsec.functors.Tuple3)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple4.equals(org.codehaus.jparsec.functors.Pair)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5(A,B,C,D,E)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple5.java;[1429-1511;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
      <data key="formaltype">A,B,C,D,E</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple5.java;[1635-1807;38-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.equals(org.codehaus.jparsec.functors.Tuple5)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple5.java;[1518-1628;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple5.java;[1814-1908;46-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuple5.java;[1915-2026;51-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.equals(org.codehaus.jparsec.functors.Tuple4)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.equals(org.codehaus.jparsec.functors.Tuple3)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuple5.equals(org.codehaus.jparsec.functors.Pair)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.Tuples.tuple(A,B)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/functors/Tuples.java;[1655-1824;33-36;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A,B</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest.testPair()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/TuplesTest.java;[233-593;14-21;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest.testTuple2()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/TuplesTest.java;[600-963;23-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest.testTuple3()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/TuplesTest.java;[970-1438;32-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest.testTuple4()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/TuplesTest.java;[1445-2025;43-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.functors.TuplesTest.testTuple5()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/TuplesTest.java;[2032-2733;56-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry(java.lang.Object,org.codehaus.jparsec.misc.Invokable,java.lang.Object[],int[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[2185-2386;59-64;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper(java.lang.Object,org.codehaus.jparsec.misc.Invokable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[3960-4065;89-92;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[2393-3721;66-92;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[1359-1899;25-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.findCurryIndex(java.lang.reflect.Constructor,java.lang.Class[],int,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5098-5546;136-144;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkDup(int[],int,int,java.lang.Object,java.lang.reflect.Constructor)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[4652-5093;124-134;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[4255-4543;109-118;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.valueList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[4550-4645;120-122;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.expectedParams()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[6561-6650;178-180;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.expectedParams()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18682-18753;446-448;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.find(int[],int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[6377-6554;169-176;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.isInstance(java.lang.Class,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[1209-1313;43-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.getClassName(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[192-375;13-16;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[4053-4248;101-107;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5553-6370;146-167;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.invoke(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20692-20807;523-526;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokable.parameterTypes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokable.java;[152-179;10-10;3-30];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[23348-23691;599-606;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokable.invoke(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokable.java;[183-229;11-11;3-49];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkFutureParameters(java.lang.Class,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[3729-4046;95-99;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18125-18278;434-436;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(int,java.lang.Class,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18283-18675;438-444;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.toArray(java.util.Collection)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24113-24244;624-626;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8113-9850;198-236;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20160-20328;501-508;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.propagate(java.lang.Throwable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20335-20687;510-521;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19741-20153;486-499;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.unary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6120-6419;142-149;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[4072-5511;94-126;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.getTargetType(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21609-22138;550-560;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.name()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18760-18829;450-452;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[17371-17985;415-427;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.findMapMethod(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[22408-22923;572-586;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24012-24108;620-622;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13499-15004;326-363;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.getRawClass(java.lang.reflect.Type)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[22145-22403;562-570;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.asBinary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19269-19736;470-484;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.binary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6424-6736;151-158;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24249-24399;628-630;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.introspectMapperMethod(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21054-21602;537-548;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.asUnary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18834-19264;454-468;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.checkArgumentTypes(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[22928-23343;588-597;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6743-8106;160-196;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24406-25478;632-657;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[17992-18120;429-432;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.mapMethod(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20814-21047;528-535;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9857-11231;238-274;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Curry.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$AbstractBar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8376-8398;304-304;5-27];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$AmbiguousConstructor(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9070-9106;331-331;5-41];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$AmbiguousConstructor(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9112-9151;332-332;5-44];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$Bar(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[848-936;36-39;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$Baz(byte,short,int,long,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1070-1217;49-55;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$Foo(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[672-760;26-29;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$InfixExpr(org.codehaus.jparsec.misc.CurryTest$Expr,java.lang.String,org.codehaus.jparsec.misc.CurryTest$Expr)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[2995-3122;133-137;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$InfixExpr2(org.codehaus.jparsec.misc.CurryTest$Expr,java.lang.String,int,org.codehaus.jparsec.misc.CurryTest$Expr)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3268-3430;146-151;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$NoPublicConstructor()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8698-8721;317-317;5-28];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$PostfixExpr(org.codehaus.jparsec.misc.CurryTest$Expr,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[2527-2618;110-113;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$PostfixExpr2(org.codehaus.jparsec.misc.CurryTest$Expr,int,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[2744-2870;121-125;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$PrefixExpr(java.lang.String,org.codehaus.jparsec.misc.CurryTest$Expr)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[2082-2172;88-91;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$PrefixExpr2(java.lang.String,int,org.codehaus.jparsec.misc.CurryTest$Expr)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[2297-2422;99-103;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$ThrowCheckedException(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7350-7454;272-274;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$ThrowError(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6432-6513;239-241;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$ThrowUncheckedException(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6851-6955;255-257;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$VarargConstructor(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9500-9543;346-346;5-48];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testAbstractClass()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8409-8652;307-314;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testAmbiguousConstructor()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9162-9456;335-343;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testAmbiguousCurryArg()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10204-10416;375-382;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testAsBinary_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10859-11046;401-407;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testAsUnary_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10670-10852;393-399;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testBinary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1688-1901;73-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20502-20612;549-552;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testCurryArgTypeMismatch()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9983-10197;366-373;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testEquals()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8017-8329;296-301;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5252-5592;204-213;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.constant(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5237-5660;138-151;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5992-6389;226-236;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12999-13395;464-473;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7854-8066;182-190;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInfix_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12625-12992;453-462;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testInvoke_wrongParameterNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[13402-13706;475-482;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testName()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7916-8010;292-294;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testNoPublicConstructor()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8732-9023;320-328;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPostfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4334-4598;179-185;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4922-5245;195-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12218-12618;442-451;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPostfix_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11837-12211;431-440;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPrefix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3441-3697;154-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4013-4327;170-177;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11432-11830;420-429;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testPrefix_wrongParamNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11053-11425;409-418;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testSequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1228-1466;58-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesCheckedException()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7465-7800;277-286;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesError()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6524-6795;244-252;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesUncheckedException()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6966-7296;260-269;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7807-7909;288-290;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testTooManyCurryArgs()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9829-9976;359-364;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testUnary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1473-1681;66-71;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testVarargConstructor()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9554-9822;349-357;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.CurryTest.testWrongArgumentType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10423-10663;384-391;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$ValueInvokable(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1367-1428;48-50;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$ValueInvokable.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1511-1691;56-61;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$ValueInvokable.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1435-1504;52-54;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$ValueInvokable.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1702-1774;63-65;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1(java.lang.Object)">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.returnType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[670-733;23-25;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokable.returnType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokable.java;[127-148;9-9;3-24];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.parameterTypes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[588-662;20-22;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.invoke(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[473-580;17-19;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$1.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables.constructor(net.sf.cglib.reflect.FastConstructor)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[223-744;13-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2(java.lang.Object)">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.returnType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1180-1244;39-41;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.parameterTypes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[1098-1172;36-38;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.invoke(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[987-1090;33-35;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.hashCode()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables$2.equals(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Invokables.method(java.lang.Object,net.sf.cglib.reflect.FastMethod)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Invokables.java;[751-1255;29-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$1.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[23881-23931;612-614;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[23937-24000;615-617;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[3708-3953;82-87;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkState(boolean,java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[1906-2424;40-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Lists.arrayList(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Lists.java;[1498-1718;33-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[11042-11259;292-295;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5071-5347;119-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkNotNullState(java.lang.Object,java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[2431-2860;55-65;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.wrapperClass(java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[1010-1202;37-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.map(org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[8009-8240;213-219;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$6$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$6$1.map(T,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14888-14973;357-359;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$6.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14805-14992;355-361;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$7$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$7$1.map(T,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[17067-17333;403-409;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$7.map(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[16979-17352;401-411;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.array(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[8533-8766;224-230;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$4$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$4$1.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11135-11200;268-270;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$4.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11052-11219;266-272;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$5$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$5$1.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13253-13461;315-320;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$5.map(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13167-13480;313-322;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$2$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$2$1.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8011-8075;190-192;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$2.map(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[7929-8094;188-194;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$3$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$3$1.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9722-9819;229-232;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$3.map(java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9633-9838;227-234;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.list(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[8773-9052;232-238;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$9.map(T,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19578-19651;477-479;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$9.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19659-19725;480-482;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$10.map(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20004-20068;492-494;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$10.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20076-20142;495-497;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$8.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19128-19179;461-463;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Mapper$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19187-19253;464-466;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.isAssignable(java.lang.Class,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[1320-1449;47-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.map(java.lang.String,java.lang.Integer)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[720-810;33-36;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.map(java.lang.String,java.lang.Integer)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13738-13847;466-469;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$CharSequenceSubMap.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$Foo(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[583-637;27-29;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$Thing(java.lang.String,int,long,boolean,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6621-6774;242-248;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$Thing.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6785-6858;250-252;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.map(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5950-6055;214-217;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$12.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.fooMapper()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5879-6066;212-219;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.map(int,boolean,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6955-7088;257-260;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$14.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.thingMapper()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6869-7099;255-262;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.assertFoo(java.lang.String,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[11591-11730;385-388;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.assertWrongParameters(org.codehaus.jparsec.misc.Mapper,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[11737-12260;390-404;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.always()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[2900-3039;68-72;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.map()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12990-13072;432-435;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.map(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12893-12980;428-431;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$16.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testAmbiguousMapperMethods()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12802-13140;425-439;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testAsMap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1337-1642;57-62;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.map(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2099-2197;78-81;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$2.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testBinary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testCurry_sequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1134-1330;50-55;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.map()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13491-13601;456-459;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$18.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testIncompatibleGenericReturnType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13388-13669;453-463;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.map()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13237-13313;444-447;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$17.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testIncompatibleReturnType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13147-13381;441-451;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.map(java.lang.String,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3599-3708;130-133;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$7.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testInfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.map(java.lang.String,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3889-4009;140-143;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$8.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForInfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[10698-11584;358-383;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPostfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[9795-10691;331-356;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPrefix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8897-9788;304-329;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.map(java.lang.String,java.lang.Integer)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4251-4346;151-154;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$9.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMap_errorPropagated()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4114-4490;148-162;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.map(java.lang.String,java.lang.Integer)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5089-5205;183-186;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$11.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMap_exceptionPropagated()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4936-5375;180-194;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.map(java.lang.String,java.lang.Integer)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4671-4770;167-170;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$10.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMap_runtimeExceptionPropagated()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4497-4929;164-178;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMapperMethodInSubclass()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13973-14084;476-478;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.map(java.lang.String,java.lang.Integer)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$19.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMapperMethodInSuperclass()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13858-13966;472-474;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$15.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testMissingMapperMethod()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12656-12795;418-423;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testName()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[898-982;41-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.map(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6335-6438;228-231;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$13.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testNonGenericMapper()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6222-6482;225-233;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.map(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3027-3125;110-113;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$5.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testPostfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.map(java.lang.String,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3305-3414;120-123;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$6.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.map(java.lang.String,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2457-2555;90-93;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$3.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testPrefix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.map(java.lang.String,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2733-2842;100-103;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$4.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testSequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[989-1127;45-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testTargetTypeUnknownAtConstructionTime()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6073-6215;221-223;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1739-1841;66-69;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.toArray(java.util.Collection)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.apply(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.propagate(java.lang.Throwable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.asMap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.unary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.invoke(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.getTargetType(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.name()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.findMapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.isSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.asBinary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.binary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.expectedParams()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.asUnary()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.mapMethod(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest$1.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testUnary()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testWrongParameters()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5382-5647;196-204;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testWrongParametersForSequencing()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5654-5874;206-210;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.MapperTest.testWrongType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12267-12649;406-416;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.{static}">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[620-1003;25-35;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection.primitive(java.lang.Class,java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[499-613;21-23;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.Reflection()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.ReflectionTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.misc.ReflectionTest.testGetClassName()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[189-353;12-15;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.ReflectionTest.testIsAssignable()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[689-1022;25-31;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.ReflectionTest.testIsInstance()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[360-682;17-23;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.misc.ReflectionTest.testWrapperClass()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[1029-1759;33-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$1.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[1558-1602;31-31;5-49];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicate.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicate.java;[1326-1406;25-26;3-25];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[1608-1670;32-34;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$2.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[1810-1853;39-39;5-48];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[1859-1930;40-42;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$3.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[2166-2283;50-52;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[2291-2364;53-55;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$4.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[2573-2652;63-65;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[2660-2731;66-68;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$5.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[2940-3019;76-78;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[3027-3098;79-81;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$6.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[3308-3388;89-91;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$6.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[3396-3468;92-94;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$7.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[3646-3741;99-101;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$7.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[3749-3819;102-104;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$8.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4038-4145;112-114;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4153-4224;115-117;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$9.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4426-4502;125-127;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$9.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4510-4578;128-130;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$10.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4801-4914;138-140;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$10.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[4922-4995;141-143;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$11()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$11.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5219-5344;151-153;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$11.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5352-5426;154-156;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[1397-1423;27-27;3-29];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$16()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$16.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7332-7408;222-224;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$16.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7416-7493;225-227;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.among(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7112-7504;216-229;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$19()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$19.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8559-8658;264-266;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$19.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8666-8759;267-269;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.and(org.codehaus.jparsec.pattern.CharPredicate,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8289-8770;258-271;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$21()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$21.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9617-9791;297-302;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$21.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9799-9892;303-305;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Strings.java;[1334-1636;25-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.and(org.codehaus.jparsec.pattern.CharPredicate[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9264-9903;288-307;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$12()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$12.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5621-5682;162-164;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$12.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5690-5771;165-167;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5440-5782;159-169;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$18()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$18.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8113-8188;249-251;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$18.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8196-8271;252-254;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.not(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7917-8282;246-256;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$17()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$17.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7738-7813;237-239;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$17.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7821-7899;240-242;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.notAmong(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7511-7910;231-244;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$13()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$13.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5975-6036;174-176;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$13.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6044-6131;177-179;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.notChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[5789-6142;171-181;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$15()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$15.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6928-7002;207-209;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$15.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[7010-7094;210-212;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.notRange(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6698-7105;201-214;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$20()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$20.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9047-9146;279-281;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$20.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9154-9246;282-284;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.or(org.codehaus.jparsec.pattern.CharPredicate,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[8777-9257;273-286;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$22()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$22.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[10262-10435;318-323;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$22.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[10443-10535;324-326;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.or(org.codehaus.jparsec.pattern.CharPredicate[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9910-10546;309-328;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$14()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$14.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6372-6443;189-191;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates$14.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6451-6534;192-194;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicates.range(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[6149-6545;183-196;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testAlways()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[5870-6061;172-177;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testAmong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[1951-2203;60-66;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testAnd()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[6430-7155;192-205;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsAlpha()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[4122-4457;122-130;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsAlphaNumeric()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[4808-5160;142-150;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsAlphaNumeric_()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[5167-5521;152-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsAlpha_()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[4464-4801;132-140;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[519-730;17-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsDigit()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[1301-1593;41-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsHexDigit()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[2477-3016;76-89;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsLetter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[5528-5863;162-170;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsLowerCase()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[3375-3720;101-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsUpperCase()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[3023-3368;91-99;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsWhitespace()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[3727-4115;111-120;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testNever()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[6068-6248;179-184;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testNot()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[6255-6423;186-190;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotAmong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[2210-2470;68-74;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[737-951;24-29;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotRange()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[1600-1944;50-58;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testOr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[7162-7864;207-220;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.CharPredicatesTest.testRange()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[958-1294;31-39;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[1675-2120;30-39;3-66];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4568-4914;124-131;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18947-19573;528-542;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.many()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2696-2898;59-65;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15257-15474;419-425;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.many(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2905-3225;67-76;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14863-15252;408-417;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.many1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3232-3423;78-84;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2127-2500;41-50;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.sequence(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[12442-13041;338-354;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.not()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4189-4377;109-115;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.not(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[10805-11066;286-293;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.optional()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2507-2689;52-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.optional(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20407-20660;566-573;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[5117-5290;140-143;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.or(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[11919-12437;322-336;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.peek()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4384-4561;117-122;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.peek(org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[11071-11333;295-302;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.repeat(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4921-5110;133-138;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13529-13934;369-380;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.some(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3430-3747;86-95;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16913-17166;466-473;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Pattern.some(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3754-4182;97-107;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16500-16908;455-464;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testIfElse()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2207-2776;65-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6345-6645;162-168;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8095-8398;208-215;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testMany()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2783-3063;80-85;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[5531-5932;136-147;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testMany1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3070-3362;87-92;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testMany_throwsForNegativeMin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3865-4056;104-111;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testMany_withMin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3369-3858;94-102;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testMismatch()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[363-424;14-16;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testNext()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[431-685;18-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testNot()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[692-832;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testOptional()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1172-1389;36-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testOr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[839-1165;29-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testPeek()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1396-1610;42-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testRepeat()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1617-1997;48-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testRepeat_throwsForNegativeNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2004-2200;56-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testSome()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4063-4458;113-120;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testSome_throwsForNegativeMax()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4841-5032;130-137;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testSome_throwsForNegativeMinMax()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[5039-5382;139-152;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternTest.testSome_withMin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4465-4834;122-128;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[1571-1673;33-35;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$1.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[1816-1903;40-42;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$2.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[2512-2732;59-63;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$3.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[1415-1435;29-29;3-23];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.compareIgnoreCase(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9867-9993;256-258;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[21964-22216;616-622;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[22223-22605;624-632;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20667-20992;575-583;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20999-21316;585-594;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[21323-21619;596-603;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[21626-21957;605-614;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchString(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9998-10380;260-271;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.matchStringCaseInsensitive(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[10385-10800;273-284;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.among(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6965-7262;178-184;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7269-7790;186-198;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[11608-11903;310-318;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$13.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.and(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[11338-11914;304-320;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.getModifiersPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[22900-23006;641-643;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.getRegularExpressionPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[22612-22893;634-639;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[5771-5921;142-145;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$4.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6176-6327;155-158;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$5.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.hasExact(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[5939-6338;149-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[19078-19562;530-540;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$28.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7552-7779;192-196;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$6.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7795-8088;200-206;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14515-14856;397-406;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.longer(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17173-17450;475-481;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.longest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17457-18005;483-498;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17746-17994;489-496;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$26.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14234-14497;389-393;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$18.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13941-14508;382-395;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkMin(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3100-3243;74-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14982-15241;411-415;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$20.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14715-14845;402-404;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$19.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15335-15463;421-423;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$21.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.many1(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[19580-19767;544-547;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[10877-11055;288-291;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$11.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9033-9269;232-237;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$9.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.notString(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8754-9280;226-239;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9600-9851;247-252;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$10.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.notStringCaseInsensitive(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9287-9862;241-254;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20484-20649;568-571;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$30.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[12186-12426;328-334;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$14.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[11144-11322;297-300;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$12.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.range(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6652-6958;170-176;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.regex(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20232-20402;561-564;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.regex(java.util.regex.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[19774-20225;549-559;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[19937-20214;552-557;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$29.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13376-13511;363-365;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$16.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13046-13522;356-367;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3398-3638;86-93;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13790-13923;376-378;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$17.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[12702-13030;344-352;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$15.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.shorter(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18012-18292;500-506;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.shortest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18299-18942;508-526;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18590-18931;514-524;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$27.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15793-16067;434-438;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$22.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15481-16078;427-440;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[2865-3095;67-72;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16637-16897;458-462;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$24.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16349-16484;449-451;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$23.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16085-16495;442-453;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks.checkMax(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3248-3391;80-84;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17027-17155;469-471;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$25.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8261-8387;211-213;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$7.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8595-8736;220-222;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns$8.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.Patterns.stringCaseInsensitive(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8405-8747;217-224;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testAlways()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[368-538;15-19;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testAmong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[3439-3815;85-93;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testAnd()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6244-6682;142-149;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testAnyChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[739-1066;27-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testDecInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[15289-15577;348-353;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testDecimal()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[13952-14279;316-322;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testDecimalL()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[12957-13467;296-304;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testDecimalR()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[13474-13945;306-314;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[1853-2038;52-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testEscaped()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[3822-4164;95-101;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testHasAtLeast()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[1073-1493;35-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testHasExact()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[1500-1846;44-50;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testHexInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[15584-16009;355-362;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[14656-14925;333-338;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testIsChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2045-2330;58-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testIsChar_withPredicate()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2337-2790;65-71;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testLineComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4171-4577;103-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testLonger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10898-11424;258-266;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testLongest()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11431-11914;268-275;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testMany()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8068-8325;182-186;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testMany1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8332-8693;188-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testMany_negativeNumberThrows()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9083-9299;202-209;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testMany_withMin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8700-9076;195-200;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testNever()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[545-732;21-25;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testNotString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5430-5749;127-132;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testNotStringCaseInsensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5756-6237;134-140;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testOctInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[14932-15282;340-346;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testOr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6689-7166;151-157;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRange()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2797-3432;73-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRegex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[16638-17058;378-385;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRegexpModifiers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[17604-17840;397-401;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRegexpPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[17065-17597;387-395;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRepeat()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7545-7836;167-171;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testRepeat_negativeNumberThrows()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7843-8061;173-180;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testScientificNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[16016-16631;364-376;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7173-7538;159-165;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testShorter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11921-12454;277-285;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testShortest()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[12461-12950;287-294;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSome()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9306-9653;211-216;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSome_minBiggerThanMaxThrows()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10669-10891;249-256;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSome_negativeMaxThrows()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10055-10439;225-238;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSome_negativeMinThrows()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10446-10662;240-247;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testSome_withMin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9660-10048;218-223;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4584-4882;111-116;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testStringCaseInsensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4889-5423;118-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.pattern.PatternsTest.testWord()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[14286-14649;324-331;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Checks()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.checkNotNullState_noThrowIfObjectIsntNull()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[1130-1352;44-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.testCheckArgument_noThrowIfConditionIsTrue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[233-447;14-18;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.testCheckArgument_throwsIfConditionIsFalse()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[454-685;20-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.testCheckNotNullState_throwsIfObjectIsNull()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[1359-1604;50-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.testCheckState_noThrowIfConditionIsTrue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[692-894;29-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ChecksTest.testCheckState_throwsIfConditionIsFalse()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[901-1123;35-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[1827-1912;45-48;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[1661-1820;40-43;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.calcSize(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2781-2949;86-89;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2131-2410;60-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.checkIndex(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2011-2124;55-58;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.set(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2417-2774;71-84;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.size()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[1919-2004;50-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.toArray()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[1454-1654;31-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[3422-3627;111-121;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.ensureCapacity(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2956-3249;91-101;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntList.grow(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[3256-3415;103-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.assertEqualArray(int[],int[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[2360-2561;95-100;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testCalcSize()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[183-439;12-18;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testConstructor()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[446-554;20-23;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testConstructor_withCapacity()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[561-683;25-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testEnsureCapacity()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1756-1965;71-77;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testGet()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[934-1172;38-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testGet_throwsForIndexOutOfBounds()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1369-1554;55-61;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testGet_throwsForNegativeIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1179-1362;47-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testSet()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1561-1749;63-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testSet_throwsForIndexOutOfBounds()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[2165-2353;87-93;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testSet_throwsForNegativeIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1972-2158;79-85;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.IntListTest.testToArray()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[690-927;30-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Lists()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Lists.arrayList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Lists.java;[1371-1491;28-31;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Lists.capacity(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Lists.java;[1725-1874;38-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectTester$AnotherType()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectTester()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Objects()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Objects.in(java.lang.Object,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Objects.java;[1738-1991;37-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectsTest.testEquals()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectsTest.java;[183-382;12-17;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectsTest.testHashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectsTest.java;[389-520;19-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.ObjectsTest.testIn()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectsTest.java;[527-649;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Strings()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Strings.join(java.lang.StringBuilder,java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Strings.java;[1641-1944;32-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.StringsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.StringsTest.testJoin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/StringsTest.java;[189-399;12-16;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.StringsTest.testJoin_withStringBuilder()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/StringsTest.java;[406-730;18-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.util.Utils()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.util.Utils.readFile(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/Utils.java;[219-781;18-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser(java.lang.Runnable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ActionParser.java;[1305-1365;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[3354-3364;65-65;3-13];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ActionParser.java;[1372-1454;25-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[22056-22097;604-604;3-44];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ActionParser.java;[1461-1530;30-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.skipMany()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5807-5975;143-146;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21202-21520;573-582;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[14173-14618;398-407;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.atomic()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9664-9817;265-268;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.newReference()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4172-4307;93-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12671-12965;353-360;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[16917-17578;460-471;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12092-12664;337-351;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.skipTimes(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[6938-7139;179-185;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18841-19714;508-524;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5354-5590;127-133;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.token()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[17585-17940;473-481;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.optional(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[8793-9021;239-244;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4758-5064;111-117;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.many1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5982-6187;148-154;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.peek()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9492-9657;260-263;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.not(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9192-9485;251-258;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[19721-20162;526-536;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10282-10471;286-289;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[16190-16912;445-458;2-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.step(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9824-10065;270-277;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.label(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[11125-11370;309-315;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.times(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[7355-7690;195-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18491-18834;498-506;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.times(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[7146-7348;187-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4501-4751;103-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[15130-15630;421-431;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18118-18484;488-496;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.cast()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[11377-11634;317-324;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.retn(R)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4314-4494;98-101;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">R</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.parse(java.lang.Readable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20620-20769;555-558;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[13550-14168;382-396;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20169-20495;538-547;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[13259-13545;372-380;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.many()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5597-5800;135-141;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.skipMany1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[6194-6372;156-161;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.not()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9028-9185;246-249;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[11642-12087;326-335;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.or(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[8245-8535;221-229;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21527-21629;584-587;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12970-13254;362-370;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[15635-16186;433-443;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20774-21195;560-571;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.skipAtLeast(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[6678-6931;171-177;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10785-11118;300-307;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.atLeast(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[6380-6671;163-169;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.optional()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[8542-8786;231-237;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.source()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[17947-18111;483-486;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.succeeds()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10072-10275;279-284;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21636-21881;589-593;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[14623-15125;409-419;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.skipTimes(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[7697-8002;204-211;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10478-10778;291-298;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21888-22049;595-602;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ActionParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AllTests()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.AllTests.suite()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/AllTests.java;[1372-1459;28-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AnyCharScanner.java;[1362-1416;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AnyCharScanner.java;[1421-1603;30-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5224-5248;156-156;3-27];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.expected(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6491-6565;204-206;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.next()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7314-7360;237-240;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AnyCharScanner.java;[1610-1666;40-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AnyCharScanner.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ArrayParser.java;[1438-1503;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ArrayParser.java;[1508-1814;30-39;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ArrayParser.java;[1821-1880;41-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ArrayParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertArrayEquals(java.lang.Object[],java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2300-2444;78-80;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[377-668;21-29;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.Class)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1581-1963;57-67;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[675-1073;31-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1080-1574;43-55;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1970-2100;69-71;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2107-2293;73-76;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2621-2727;86-88;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2451-2614;82-84;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2981-3105;95-97;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2734-2974;90-93;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AtomicParser.java;[1297-1343;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AtomicParser.java;[1348-1550;25-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.setAt(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7228-7307;232-235;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AtomicParser.java;[1557-1621;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.AtomicParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser(org.codehaus.jparsec.Parser[],org.codehaus.jparsec.IntOrder)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BestParser.java;[1346-1460;23-26;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BestParser.java;[1465-1961;28-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.runForBestFit(org.codehaus.jparsec.IntOrder,org.codehaus.jparsec.Parser[],int,org.codehaus.jparsec.ParseContext,java.lang.Object,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[1338-2029;27-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.set(int,int,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6657-6769;212-216;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BestParser.java;[1968-2036;44-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BestParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BindNextParser.java;[1635-1795;30-34;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BindNextParser.java;[1800-1933;36-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.runNext(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[20292-20508;545-549;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BindNextParser.java;[1940-2006;42-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.BindNextParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator(java.lang.CharSequence)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[6257-6437;163-170;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5910-6250;152-161;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator(java.lang.CharSequence,int,int,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5386-5903;136-150;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2350-2929;54-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakColumnIndex(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[4653-5003;114-122;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakLocation(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5010-5135;124-126;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.location(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5142-5270;128-130;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.locate(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5277-5379;132-134;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SourceLocator.locate(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SourceLocator.java;[1395-1503;27-28;3-29];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2936-3501;70-81;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[3508-4646;83-112;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5868-6026;168-174;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5711-5861;162-166;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_allSmaller()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1750-1874;54-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsBigger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1052-1185;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsEqual()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[913-1045;30-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsBigger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1611-1743;50-52;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsEqual()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1473-1604;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_noElement()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2271-2386;70-72;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneBiggerElement()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2010-2133;62-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneEqualElement()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1881-2003;58-60;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneSmallerElement()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2140-2264;66-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsBigger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1332-1466;42-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsEqual()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1192-1325;38-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5453-5704;156-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate_emptySource()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[662-906;23-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate_onlyOneLineBreakCharacter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[338-655;15-21;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInLastLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3950-4172;115-119;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInSecondLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3030-3254;91-95;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInThirdLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3491-3714;103-107;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstLineBreak()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2806-3023;85-89;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_inFirstLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2585-2799;79-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInSecondLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3261-3484;97-101;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInThirdLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3721-3943;109-113;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_noLineBreaksScanned()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2393-2578;74-77;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_secondCharInLastLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4179-4402;121-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_indexOnEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4643-4900;135-140;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_indexOutOfBounds()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4409-4636;127-133;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_lastCharOfLine()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5178-5446;149-154;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_spansLines()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4907-5171;142-147;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.ListFactory)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedListParser.java;[1494-1633;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[1463-1558;28-31;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.begin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedListParser.java;[1638-1702;34-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.begin()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[2342-2373;60-62;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactory.newList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListFactory.java;[1329-1375;27-28;3-20];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.element(org.codehaus.jparsec.ParseContext,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedListParser.java;[1707-1805;38-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.element(org.codehaus.jparsec.ParseContext,R)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[2378-2421;64-64;3-46];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">R</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.element(org.codehaus.jparsec.ParseContext,R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[1563-2337;33-58;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[2428-2491;66-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.toString()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedListParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.greedyRun(org.codehaus.jparsec.Parser,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4990-5248;138-144;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.stillThere(org.codehaus.jparsec.ParseContext,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[3771-4063;105-112;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.DelimitedParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyListParser.java;[1627-1654;35-35;3-30];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.instance()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyListParser.java;[1523-1620;30-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyListParser.java;[1661-1764;37-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyListParser.java;[1771-1827;42-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyListParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError(int,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1560-1671;34-37;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError.getIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1887-1937;51-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError.getEncountered()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1678-1743;39-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError.getFailureMessage()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1827-1882;47-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError.getUnexpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1942-1993;55-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseError.getExpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EmptyParseError.java;[1748-1822;43-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseErrorTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.EmptyParseErrorTest.testEmptyParseError()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/EmptyParseErrorTest.java;[1377-1693;27-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EofParser.java;[1340-1389;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EofParser.java;[1394-1519;30-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EofParser.java;[1526-1582;36-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.EofParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ExpectParser.java;[1387-1439;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ExpectParser.java;[1444-1534;30-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ExpectParser.java;[1541-1597;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ExpectParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/FailureParser.java;[1369-1423;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/FailureParser.java;[1428-1517;30-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.fail(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6409-6484;200-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/FailureParser.java;[1524-1583;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.FailureParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/GetIndexParser.java;[1360-1465;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5255-5363;158-161;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/GetIndexParser.java;[1472-1534;29-31;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.GetIndexParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IfElseParser.java;[1470-1695;25-30;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IfElseParser.java;[1700-2081;32-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.runWithoutRecordingError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[5253-5529;146-152;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IfElseParser.java;[2088-2148;44-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IfElseParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$Punctuation()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$1.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[2023-2112;43-45;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[2118-2186;46-48;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[3754-3926;90-93;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation(java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[3480-3747;81-88;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.analyzeIndentations(java.util.List,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[5103-6480;127-166;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.index()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[1831-1933;47-50;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.value()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[1940-2018;52-55;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.newLine(org.codehaus.jparsec.Token,java.util.Stack,int,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[6487-7218;168-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.length()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[1742-1824;42-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.pseudoToken(int,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[7225-7326;195-197;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.indent()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[3933-4071;95-98;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.token(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4975-5098;123-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4889-4956;117-119;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation$2.map(java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4770-4881;114-116;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.lexer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4226-4968;105-121;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[10557-10828;268-276;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[11267-11538;298-305;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Indentation.outdent()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4078-4219;100-103;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.token(org.codehaus.jparsec.TokenMap)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[18489-18962;495-505;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.tokenWithSameValue(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[1925-2224;45-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token(int,int,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[1483-1735;31-40;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.analyze(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5644-5776;122-124;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5781-6312;126-143;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testAnalyzeIndentations()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3330-4612;77-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testIndent()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4619-4937;98-104;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testInlineWhitespace()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[1903-2217;41-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testInlineWhitespaces()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[2650-3053;60-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testLexer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5272-5637;114-120;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testLineContinuation()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[2224-2643;50-58;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testOutdent()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4944-5265;106-112;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IndentationTest.testWhitespaces()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3060-3323;70-75;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$1.compare(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IntOrders.java;[1529-1582;31-31;5-58];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrder.compare(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IntOrder.java;[1311-1466;24-31;3-32];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IntOrders.java;[1588-1654;32-34;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$2.compare(int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IntOrders.java;[1883-1934;44-44;5-56];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IntOrders.java;[1940-2005;45-47;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IntOrders()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$1.map(java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2322-2390;58-60;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2396-2464;61-63;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$2.map(java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2566-2632;68-70;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2638-2704;71-73;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$3.map(java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2808-2884;78-80;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2890-2956;81-83;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$4.map(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3059-3145;88-90;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3151-3217;91-93;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$5.map(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3320-3416;98-100;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3422-3488;101-103;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.lastOfFive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3955-4075;126-129;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.lastOfFour()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3834-3948;121-124;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.lastOfThree()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3717-3827;116-119;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.lastOfTwo()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3610-3710;111-114;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$8.map(F)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[4366-4485;138-141;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">F</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[4493-4563;142-144;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.fallback(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[4080-4574;131-146;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.firstOfTwo()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[3500-3603;106-109;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$6.map(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[1669-1835;33-38;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenMap.map(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenMap.java;[1381-1538;26-30;3-28];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$6.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[1843-1907;39-41;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors.isTokenType(java.lang.Class,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[1549-1918;31-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$7.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2132-2213;50-52;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctors$7.map(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/InternalFunctors.java;[2030-2124;47-49;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.fallback()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[3265-3363;97-99;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.testBothMapsReturnNull()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[2958-3155;86-91;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.testFirstMapReturnsNonNull()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[2554-2724;73-77;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.testFirstMapReturnsNull()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[2735-2949;79-84;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.testToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[3166-3254;93-95;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.getMockFields(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.runTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.runBare()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest$FallbackTest.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testFirstOfTwo()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1304-1500;39-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testIsTokenType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[506-855;20-26;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testLastOfFive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[2163-2407;63-67;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testLastOfFour()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1928-2156;57-61;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testLastOfThree()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1706-1921;51-55;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testLastOfTwo()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1507-1699;45-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.InternalFunctorsTest.testTokenWithSameValue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[862-1297;28-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner(java.lang.String,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsCharScanner.java;[1453-1563;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsCharScanner.java;[1568-1866;34-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.peekChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5477-5582;166-167;3-27];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsCharScanner.java;[1873-1929;49-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsCharScanner.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsFragment()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IsFragment.isExpectedTag(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsFragment.java;[1704-1782;37-38;3-46];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsFragment.map(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsFragment.java;[1449-1697;27-35;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.tag()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3327-3418;101-104;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.text()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3222-3316;96-99;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser(org.codehaus.jparsec.TokenMap)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1318-1401;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.getToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5370-5470;163-164;3-28];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1754-1826;41-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.IsTokenParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive$1.compare(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2681-2881;65-70;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive$2.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3222-3300;81-83;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive.toMap(java.util.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3042-3315;78-85;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$StringCase.toMap(java.util.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[1679-1761;37-37;5-87];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive.toKey(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2970-3036;75-77;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$StringCase.toKey(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[1651-1673;36-36;5-27];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseInsensitive.comparator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2894-2964;72-74;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$StringCase.comparator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[1614-1645;35-35;5-36];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive$1.compare(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2066-2256;45-50;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive.toMap(java.util.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2403-2525;58-60;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive.toKey(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2345-2397;55-57;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$CaseSensitive.comparator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[2269-2339;52-54;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords$1.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[4257-4412;110-114;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords.lexicon(org.codehaus.jparsec.Parser,java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3680-4488;98-117;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords.getStringCase(boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3326-3455;88-90;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Keywords.unique(java.util.Comparator,java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3462-3673;92-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.reserved(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[1652-1890;38-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[1739-1855;37-40;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.KeywordsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.KeywordsTest.testLexicon_caseInsensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[812-1494;27-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[3179-3581;77-88;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.identifier(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[1897-2138;48-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.KeywordsTest.testLexicon_caseSensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[238-805;14-25;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.KeywordsTest.testUnique()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[1501-1668;42-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser(java.util.concurrent.atomic.AtomicReference)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1548-1615;31-33;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1622-1701;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.deref()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1706-1907;39-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1914-1972;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LazyParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.union(org.codehaus.jparsec.Lexicon)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[3588-3841;90-95;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.phrase(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2040-2484;48-59;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.token(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2960-3174;72-75;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[10834-11035;287-290;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2491-2953;61-70;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.never()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3046-3180;74-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[11859-12277;317-325;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Lexicon.tokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[1862-2033;42-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LexiconTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.LexiconTest.testWord()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/LexiconTest.java;[264-579;15-21;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.LexiconTest.testWord_throwsForNullValue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/LexiconTest.java;[586-968;23-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories$1.newList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListFactories.java;[2149-2217;51-53;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories.arrayListFactory()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListFactories.java;[1423-1623;30-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories$2.newList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListFactories.java;[1889-2015;42-46;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactories.arrayListFactoryWithFirstElement(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListFactories.java;[1630-2026;36-48;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactoriesTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactoriesTest.testArrayListFactory()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ListFactoriesTest.java;[241-715;14-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListFactoriesTest.testArrayListFactoryWithFirstElement()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ListFactoriesTest.java;[722-989;24-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListParser.java;[1549-1623;32-34;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListParser.java;[1628-1911;36-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListParser.java;[1918-1976;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ListParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/MapParser.java;[1404-1516;24-27;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/MapParser.java;[1521-1698;29-35;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/MapParser.java;[1705-1769;37-39;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.MapParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestableBlockCommentScanner.java;[1468-1662;29-33;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestableBlockCommentScanner.java;[1667-2666;35-66;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestableBlockCommentScanner.java;[2673-2749;68-70;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestableBlockCommentScanner.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1351-1459;22-25;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1464-1798;27-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState(java.lang.String,java.lang.CharSequence,org.codehaus.jparsec.Token[],int,org.codehaus.jparsec.SourceLocator,int,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1760-1995;44-49;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.runNestedParser(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4068-4655;114-127;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1805-1874;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1457-1566;27-30;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1571-1886;32-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState(java.lang.String,java.lang.CharSequence,int,int,org.codehaus.jparsec.SourceLocator,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[1522-2074;32-44;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.characters()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7909-8027;263-264;3-37];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1893-1961;40-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NestedScanner.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NeverParser.java;[1269-1351;20-23;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.trap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6347-6402;196-198;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NeverParser.java;[1358-1417;25-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NeverParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.toDecDigit(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[1441-1503;26-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.toHexDigit(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[1579-1748;34-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.toOctDigit(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[1510-1572;30-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeDecimalAsLong(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[1753-1951;40-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeHexAsLong(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[2156-2422;58-66;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeOctalAsLong(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[1956-2151;49-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable$Operator(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.OperatorTable$Associativity)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[2223-2395;49-53;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable$Operator.compareTo(org.codehaus.jparsec.OperatorTable$Operator)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[2406-2676;55-60;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable$Associativity()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.buildExpressionParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Operator[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[5052-6212;143-179;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.slice(org.codehaus.jparsec.OperatorTable$Operator[],int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6219-6447;181-187;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.infixl(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[3432-3826;89-100;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.infixn(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[4232-4625;114-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.infixr(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[3833-4228;102-113;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.postfix(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[3058-3425;76-87;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.prefix(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[2687-3051;63-74;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.operators()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[4932-5045;138-141;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[4633-4925;128-136;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[15152-15594;407-417;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.op(java.lang.String,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2494-2591;67-69;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2106-2487;55-65;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.testBuildExpressionParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[1019-1930;29-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.testEmptyOperatorTable()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[1937-2101;50-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.getMockFields(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.runTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.runBare()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableExpressionTest.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.assertOrder(T,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[2049-2282;62-65;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T:java.lang.Comparable</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.assertSameOrder(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[2289-2439;67-69;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T:java.lang.Comparable</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.assertTotalOrder(T[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[1767-2042;53-60;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T:java.lang.Comparable</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.operator(int,org.codehaus.jparsec.OperatorTable$Associativity)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[2446-2584;71-73;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.testAssociativityOrder()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[680-784;22-24;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.testGetOperators()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[1102-1762;34-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorTableTest.testOperatorOrder()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[791-1095;26-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$Suite(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[3734-3795;80-82;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$Suite.add(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[3806-4154;84-95;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$Suites()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$Suites.toArray()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[4813-5386;117-131;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$Suites.add(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[4443-4802;105-115;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Operators$1.compare(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[2906-2989;59-61;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Operators.sort(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[5397-5929;134-147;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[1579-2806;34-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorsTest.testLexicon()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[607-1009;22-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OperatorsTest.testSort()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[183-600;13-20;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OrParser.java;[1316-1404;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OrParser.java;[1409-1797;25-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OrParser.java;[1804-1860;40-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.OrParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$ErrorType(boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[2514-2583;68-70;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext(java.lang.CharSequence,int,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7437-7624;247-250;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext(java.lang.CharSequence,java.lang.Object,int,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7631-7904;252-261;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.suppressError(boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3071-3269;84-89;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.errorIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3276-3416;91-94;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.toIndex(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5589-5701;169-170;3-32];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.getEncountered()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4743-4881;138-143;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.getInputName(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5096-5219;153-154;3-40];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.errors()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3543-3658;101-104;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.errorType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3421-3536;96-99;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1(int,java.lang.String)">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1.getUnexpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4172-4260;117-119;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1.getFailureMessage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1.getIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1.getExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$1.getEncountered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2(int,java.lang.String)">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2.getFailureMessage()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4362-4454;123-125;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2.getUnexpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2.getIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2.getExpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$2.getEncountered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3(int,java.lang.String)">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3.getExpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4573-4658;130-132;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3.getUnexpected()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3.getFailureMessage()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3.getIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext$3.getEncountered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.renderError()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3665-4738;106-136;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5708-6340;172-194;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.next(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[7367-7430;242-245;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6971-7221;224-230;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.setEncountered(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4888-5089;145-151;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6776-6966;218-222;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParseContext.unexpected(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6572-6650;208-210;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$Reference()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$Reference.lazy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[3981-4161;84-90;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5665-5948;153-159;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3532-4013;90-102;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1418-1539;25-27;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map2)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[9326-9647;248-255;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.nested(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[4698-5232;124-136;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tokens(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[4239-4691;112-122;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.infixl(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21855-23161;588-621;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.infixn(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[20730-21850;557-586;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.infixr(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[23166-23965;623-641;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.expect(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[18105-18289;485-488;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.unexpected(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[18294-18484;490-493;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12284-12524;327-333;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PeekParser.java;[1300-1359;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$1.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12448-12628;345-348;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ListFactory)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1544-1715;29-33;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parser$2.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[13981-14156;391-394;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1332-1427;22-25;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser(org.codehaus.jparsec.Parser,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1355-1477;23-27;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ReturnSourceParser.java;[1415-1482;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser(org.codehaus.jparsec.Parser,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StepParser.java;[1324-1406;23-26;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser(org.codehaus.jparsec.Parser,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1443-1576;26-28;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser(org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ToTokenParser.java;[238-300;11-13;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[7886-8488;190-204;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.longer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[16023-16340;431-438;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.shorter(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[17059-17379;458-465;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest$1.map(java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[7006-7398;171-180;11-11];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[9101-9935;217-231;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5953-6187;161-164;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[6192-6458;166-170;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesLonger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3883-4082;107-111;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TestParsers.java;[222-454;14-20;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesOr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3685-3876;101-105;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesPlus()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3474-3678;95-99;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesShorter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4089-4290;113-117;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectMerged()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2974-3303;80-87;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectOverridesNot()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1852-2022;43-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectedMerged()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3310-3467;89-93;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExpect()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2029-2182;49-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.fail(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3364-3525;85-88;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExplicitExpect()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2189-2375;55-59;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstFailureWins()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2828-2967;75-78;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNeverWins()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2560-2663;66-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNotWins()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2670-2821;70-73;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testMoreRelevantErrorWins()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2382-2553;61-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testNotOverridesNever()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1670-1845;37-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testOuterExpectWins()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5486-5623;142-144;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.many(org.codehaus.jparsec.Parser,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[3395-3766;94-103;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[2769-3032;74-81;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.repeatAtMost(org.codehaus.jparsec.Parser,int,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[3037-3390;83-92;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.many(org.codehaus.jparsec.Parser,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[2209-2499;56-63;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[2034-2204;49-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.repeatAtMost(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[2504-2764;65-72;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserInternals.copyError(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4660-4985;129-136;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserReferenceTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserReferenceTest.testLazy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserReferenceTest.java;[311-674;15-24;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserReferenceTest.testUninitializedLazy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserReferenceTest.java;[681-886;26-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.isEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1515-1576;31-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.peekChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[2002-2106;51-53;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.toIndex(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1583-1695;35-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.characters()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[2113-2227;55-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.getInputName(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[2232-2350;59-62;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[2025-2161;57-60;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.getToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1700-1753;40-42;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.trap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.errorType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.next()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.fail(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.setAt(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.expected(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.unexpected(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.set(int,int,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.suppressError(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.getEncountered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.getIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.renderError()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.errorIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.setEncountered(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserState.next(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.assertList(java.lang.Object,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21967-22088;569-571;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21795-21960;564-567;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.skipTimes_range()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4818-5355;128-137;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TestParsers.java;[132-215;10-12;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testAtomic()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9962-10238;243-248;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testBetween()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11883-11988;301-303;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testCast()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11680-11876;295-299;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testCopy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21570-21788;557-562;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testEmptyListParser_toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16567-16677;424-426;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testEndBy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testEndBy1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testFails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10876-11078;270-274;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testFollowedBy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3445-3692;97-101;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testFrom()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testFrom_throwsOnScanners()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20459-20789;534-539;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testFrom_withDelimiter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20796-21140;541-547;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testIfElse()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11085-11345;276-282;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testIfElse_withNext()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11352-11523;284-288;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixl()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18528-18819;485-492;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixl_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18826-18952;494-497;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixl_noOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18313-18521;478-483;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixn()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18054-18306;470-476;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixn_noOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17839-18047;463-468;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19174-19474;506-513;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixr_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19481-19607;515-518;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testInfixr_noOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18959-19167;499-504;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testLabel()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11530-11673;290-293;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testLexer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21147-21563;549-555;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testMany()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testMany1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testMap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12029-12223;306-311;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testMap_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12230-12361;313-316;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNext()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3053-3306;85-90;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNext_firstParserFails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2755-2873;74-77;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNext_nextParserFails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2880-3046;79-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNext_withMap()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2543-2748;67-72;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNot()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testNotFollowedBy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testOptional()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8950-9134;215-219;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testOptional_withDefaultValue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9141-9344;221-225;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testOr()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testParse()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testPeek()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9646-9955;235-241;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testPostfix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17495-17782;453-460;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testPostfix_noOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17274-17488;446-451;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testPrefix()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16941-17267;436-444;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testPrefix_noOperator()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16723-16934;429-434;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testRetn()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3313-3438;92-95;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSepBy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSepBy1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSepEndBy()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSepEndBy1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSkipMany()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSkipMany1()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSkipTimes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSource()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1833-2240;49-57;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tokenType(java.lang.Class,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[18967-19397;507-517;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testStep()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10245-10439;250-253;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testStep_negativeStep()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10446-10647;255-262;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testSucceeds()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10654-10869;264-268;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testTimes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testTimes_range()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.testToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2247-2494;59-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.getMockFields(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.runTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.runBare()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParserTest.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$Rhs(org.codehaus.jparsec.functors.Map2,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25597-25700;697-700;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$Rhs.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25711-25781;702-704;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$1.map(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[2291-2356;48-50;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[2364-2435;51-53;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27655-27674;764-764;3-22];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map5)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[10403-10827;277-285;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map5)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence5Parser.java;[1573-1854;28-36;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tuple(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[8124-8526;214-222;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map4)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[10010-10398;267-275;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map4)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence4Parser.java;[1529-1767;27-34;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tuple(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[7752-8119;204-212;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map3)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[9652-10005;257-265;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map3)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence3Parser.java;[1485-1680;26-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tuple(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[7421-7747;195-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27549-27637;758-760;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10$1.map(A)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27358-27421;750-752;11-11];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">A</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27433-27522;753-755;11-11];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$10.map(org.codehaus.jparsec.functors.Map2,B)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27257-27541;748-757;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">B</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.fromOperatorAndRhsToClosure()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[27107-27648;746-762;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.functors.Map2)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence2Parser.java;[1441-1587;25-29;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.pair(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[6768-7103;179-185;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.tuple(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[7108-7416;187-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.applyInfixOperators(T,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24381-24583;655-661;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.applyPostfixOperators(T,java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25254-25458;684-690;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.applyPrefixOperators(T,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24588-24836;663-670;3-3];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState(java.lang.String,java.lang.CharSequence,int,org.codehaus.jparsec.SourceLocator)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[1355-1515;27-30;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[9059-9321;240-246;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5467-5564;143-146;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5572-5649;147-149;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$3.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[23057-23125;616-618;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5$1.map(java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[22841-22941;608-610;11-11];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[22953-23029;611-613;11-11];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$5.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[22724-23049;606-615;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21770-21838;582-584;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4$1.map(org.codehaus.jparsec.functors.Map2,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21469-21584;573-575;15-15];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21600-21697;576-578;15-15];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$4.map(T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21301-21762;570-581;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.toArray(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[19402-19821;519-529;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.longest(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[16345-16746;440-448;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.longest(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[16751-17054;450-456;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[15601-15822;419-424;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[15829-16018;426-429;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12531-12806;335-342;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12813-13122;344-352;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13129-13467;354-362;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13474-13840;364-372;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13847-14247;374-383;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[14254-14682;385-394;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[14689-15145;396-405;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SumParser.java;[1317-1406;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[11545-11852;307-315;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[6463-6763;172-177;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[17384-17787;467-475;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.shortest(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[17792-18098;477-483;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/UnexpectedParser.java;[1301-1357;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.toArray(java.util.Collection)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[20110-20285;540-543;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.toArrayWithIteration(java.lang.Iterable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[19826-20105;531-538;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$9()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$9.map(T,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[26519-26896;726-736;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$9.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[26904-26972;737-739;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.applyInfixrOperators()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[26394-26983;724-741;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$7.map(T,java.util.List)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25045-25166;675-677;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$7.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25174-25238;678-680;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.postfixOperatorMap2(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24841-25249;672-682;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$6.map(java.util.List,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24173-24293;646-648;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$6.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24301-24365;649-651;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.prefixOperatorMap2(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[23970-24376;643-653;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[26179-26267;715-717;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$8.map(org.codehaus.jparsec.functors.Map2,T)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[26062-26171;712-714;7-7];</data>
      <data key="type">METHOD</data>
      <data key="formaltype">T</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.toInfixRhs()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25889-26278;710-719;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.eof(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3185-3359;80-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers.runnable(java.lang.Runnable)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[4018-4234;104-110;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser(org.codehaus.jparsec.Parser[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SequenceParser.java;[1309-1377;21-23;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[4602-4679;118-120;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Parsers$2.map(java.util.Collection)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[4490-4594;115-117;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testAlways()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[789-856;27-29;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testAnyToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21051-21381;561-569;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testArray()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6357-6658;182-188;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testBetween()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[999-1129;36-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testConstant()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1386-1570;48-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1136-1379;40-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testExpect()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17076-17232;452-455;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testFail()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7012-7154;199-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21386-21529;571-574;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testList()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6665-7005;190-197;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testLonger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14162-14579;386-392;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testLongest()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15449-16013;416-424;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testLongest_0Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15181-15271;406-408;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testLongest_1Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15278-15442;410-414;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testNever()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[863-992;31-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_0Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8166-8246;232-234;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_10Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[13325-14155;365-384;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_1Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8253-8407;236-240;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_3Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9364-9713;263-270;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_4Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9720-10139;272-281;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_5Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10146-10647;283-295;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_6Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10654-11217;297-310;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_7Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11224-11850;312-326;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_8Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11857-12553;328-344;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_9Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[12560-13318;346-363;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testOr_withIterable()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testPair()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4550-4818;135-141;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testPlus_0Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7161-7245;204-206;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testPlus_1Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7252-7410;208-212;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testPlus_2Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7417-7793;214-221;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testPlus_3Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7800-8159;223-230;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testRunnable()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1577-1822;53-59;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3461-3815;103-111;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_0Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4181-4348;123-127;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_1Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4355-4543;129-133;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_2Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1829-2122;61-67;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_3Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2129-2495;69-77;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_4Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2502-2936;79-88;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_5Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2943-3454;90-101;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withIterable()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3822-4174;113-121;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap2()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17466-17733;463-469;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap2_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17740-17957;471-476;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap3()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18025-18311;479-485;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap3_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18318-18589;487-493;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap4()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18668-18981;496-503;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap4_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18988-19324;505-513;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap5()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19414-19746;516-523;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testSequence_withMap5_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19753-20148;525-534;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testShorter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testShortest()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testShortest_0Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16020-16112;426-428;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testShortest_1Parser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16119-16285;430-434;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testToArray()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21536-21858;576-584;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testToArrayWithIteration()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21865-22213;586-594;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20192-20507;537-544;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testTokenType()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20768-21044;554-559;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testToken_fails()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20511-20761;545-552;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testTuple_2Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4825-5104;143-149;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testTuple_3Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5111-5453;151-158;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testTuple_4Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5460-5865;160-168;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testTuple_5Parsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5872-6350;170-180;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.testUnexpected()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17239-17409;457-460;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.replay()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.getMockFields(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.runTest()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.runBare()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.mock(java.lang.Class)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ParsersTest.verify()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner(java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1438-1537;29-32;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1542-1868;34-45;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1875-1931;47-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PatternScanner.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PeekParser.java;[1364-1543;25-31;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PeekParser.java;[1550-1608;33-35;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.PeekParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1720-2016;35-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[2023-2084;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatAtLeastParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser(org.codehaus.jparsec.Parser,int,int,org.codehaus.jparsec.ListFactory)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1581-1786;30-36;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1791-2106;38-47;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[2113-2172;49-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.RepeatTimesParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ReturnSourceParser.java;[1487-1719;30-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ReturnSourceParser.java;[1726-1786;39-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ReturnSourceParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.isEof()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2148-2200;50-52;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.peekChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2081-2141;46-48;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.toIndex(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2207-2258;54-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.characters()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2398-2457;63-65;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.getInputName(int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2265-2391;58-61;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.getToken()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2462-2559;67-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.trap()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.errors()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.errorType()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType,java.util.List)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.next()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.setErrorState(int,int,org.codehaus.jparsec.ParseContext$ErrorType)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.fail(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.setAt(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.expected(java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.unexpected(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.set(int,int,java.lang.Object)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.suppressError(boolean)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.getEncountered()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.getIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.renderError()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.errorIndex()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.setEncountered(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannerState.next(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[18142-18162;482-482;3-23];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.among(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[11884-12239;311-319;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[9447-9761;234-243;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.among(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[11482-11877;299-309;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.isChar(org.codehaus.jparsec.pattern.CharPredicate,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[9768-10172;245-255;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.pattern(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[8406-8768;203-212;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14255-14737;376-387;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.isChar(char,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[10179-10550;257-266;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.lineComment(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13015-13354;343-350;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[6453-6780;140-148;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7114-7477;160-169;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[6787-7107;150-158;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7484-7849;171-180;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14744-15150;389-399;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[15157-15672;401-413;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.nestableBlockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[15679-16173;415-427;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.nestedScanner(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[17024-17399;451-459;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[12660-13008;333-341;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.notChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[11214-11475;289-297;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.notAmong(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[12246-12653;321-331;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.notChar(char,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[10835-11207;278-287;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.quoted(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16180-16580;429-437;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.quoted(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16587-17017;439-449;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.quotedBy(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[18015-18135;478-480;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.string(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[8073-8399;192-201;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[9172-9442;225-232;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[8775-9165;214-223;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.match(java.lang.CharSequence,int,int)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[17730-17997;469-474;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.some(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.some(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.repeat(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.many(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners$1.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Scanners.notChar2(char,char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[17406-18008;461-476;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testAmong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6380-6707;181-188;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testAmong_noChars()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6714-6942;190-194;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testAnyChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5450-5835;154-163;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12339-12755;346-354;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_emptyQuotes()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12762-12941;356-360;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withEmptyQuotedPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13330-13623;372-378;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withParsers()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13938-14270;388-395;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMatchesEmpty()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14277-14625;397-404;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMismatches()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14632-14977;406-413;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPatternThatMismatches()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13630-13931;380-386;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testDecInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1248-1457;42-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testDecimal()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1002-1241;34-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testDoubleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8884-9288;255-264;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testHaskellBlockComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11911-12332;336-344;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testHaskellDelimiter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10711-11062;306-314;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testHaskellLineComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8739-8877;250-253;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testHexInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1759-2055;56-62;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testIdentifier()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[516-783;19-25;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[790-995;27-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testIsChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5842-6102;165-171;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testJavaBlockComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11069-11484;316-324;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testJavaDelimiter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10009-10354;286-294;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testJavaLineComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8463-8595;240-243;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testLineComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8027-8456;228-238;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany1_withCharPredicate()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2800-3116;82-87;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany1_withPatternThatConsumesNoInput()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4013-4207;113-117;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany_withCharPredicate()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2594-2793;76-80;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany_withPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3123-3422;89-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testMany_withPatternThatConsumesNoInput()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3429-3621;98-102;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14984-15434;415-424;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_closeQuoteConsumesNoChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17907-18174;480-484;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_openQuoteConsumesNoChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17635-17900;474-478;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_quotedConsumesNoChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17399-17628;469-472;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15897-16486;436-447;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15441-15890;426-434;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_notLogicalPartialMatch()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16981-17392;459-467;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_partialMatch()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16493-16974;449-457;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNestedScanner()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNotAmong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNotAmong_noChars()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7531-7774;213-218;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNotAmong_oneChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7781-8020;220-226;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testNotChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testOctInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1464-1752;48-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testPattern()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4821-5115;137-143;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testQuoted()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18366-18742;492-500;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testQuoted_byChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18181-18359;486-490;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testQuoted_quotedParserConsumeNoChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18749-19039;502-508;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testScientificNotation()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2062-2587;64-74;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testSingleQuoteChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[9575-10002;274-284;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testSingleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[9295-9568;266-272;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testSqlBlockComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11491-11904;326-334;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testSqlDelimiter()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10361-10704;296-304;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testSqlLineComment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8602-8732;245-248;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testStringCaseInsensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5122-5443;145-152;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ScannersTest.testWhitespaces()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4521-4814;128-135;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence2Parser.java;[1592-1868;31-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence2Parser.java;[1875-1940;42-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence2Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence3Parser.java;[1685-2054;34-46;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence3Parser.java;[2061-2126;48-50;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence3Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence4Parser.java;[1772-2234;36-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence4Parser.java;[2241-2306;53-55;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence4Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence5Parser.java;[1859-2414;38-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence5Parser.java;[2421-2486;58-60;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Sequence5Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SequenceParser.java;[1382-1524;25-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SequenceParser.java;[1531-1593;32-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SequenceParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1432-1660;27-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1667-1732;36-38;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipAtLeastParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1482-1729;29-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1736-1799;38-40;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SkipTimesParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StepParser.java;[1411-1568;28-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StepParser.java;[1575-1644;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StepParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StringLiteralsTranslator()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.StringLiteralsTranslator.escapedChar(char)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StringLiteralsTranslator.java;[1356-1573;25-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StringLiteralsTranslator.tokenizeDoubleQuote(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StringLiteralsTranslator.java;[1580-1969;38-52;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.StringLiteralsTranslator.tokenizeSingleQuote(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StringLiteralsTranslator.java;[1974-2317;54-68;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SumParser.java;[1411-1764;25-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SumParser.java;[1771-1829;39-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.SumParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$CharLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[2119-2142;44-44;5-28];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$DecimalLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[6072-6098;143-143;5-31];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$Identifier()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[7417-7439;178-178;5-27];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$IntegerLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[5390-5416;125-125;5-31];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$LongLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[3794-3817;84-84;5-28];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$ScientificNumberLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[6750-6785;161-161;5-40];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$StringLiteral()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[2774-2799;61-61;5-30];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals(org.codehaus.jparsec.Lexicon)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[8166-8250;198-200;3-3];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.equals(java.lang.String,java.lang.String,boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14945-15087;346-348;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.fragment(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13729-13973;312-318;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.fromFragment(java.lang.Object[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13980-14534;320-335;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseInsensitive(java.lang.String[],java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[8254-9094;201-215;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14541-14938;337-344;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[9942-10735;233-247;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[11536-12435;265-281;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[10742-11529;249-263;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[12442-13336;283-299;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.checkDup(java.lang.String[],java.lang.String[],boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[15094-15326;350-356;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.operators(java.lang.String[])">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13343-13722;301-310;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$1.isExpectedTag(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14224-14316;326-328;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14324-14523;329-333;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals$1.map(org.codehaus.jparsec.Token)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.word(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.phrase(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.token(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.union(org.codehaus.jparsec.Lexicon)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.tokenizer()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Terminals.token(java.lang.String[])">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.assertDup(java.lang.String[],java.lang.String[],boolean)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12923-13132;273-278;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCharLiteralParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5474-5655;116-120;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testCheckDup()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12511-12916;265-271;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6391-6572;145-149;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1033-1806;34-43;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.decimalLiteral(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[2145-2394;58-66;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testDoubleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[597-816;24-27;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testEquals()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12220-12504;257-263;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testFromFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6579-7185;151-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.fragment(java.lang.String,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[1338-1645;27-36;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testIdentifierParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6040-6198;134-137;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testIdentifierTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4937-5467;107-114;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6205-6384;139-143;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1813-2339;45-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testLongLiteralDecTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2876-3220;64-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testLongLiteralHexTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3227-3794;71-80;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testLongLiteralOctTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3994-4476;89-96;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testLongLiteralParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5662-5822;122-125;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testLongLiteralTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4483-4930;98-105;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testPhrase()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testScientificNumberLiteralTokenizer()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2346-2869;53-62;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.scientificNotation(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[2657-2942;78-84;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testSingleQuoteChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[397-590;19-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testSingleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[823-1026;29-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testStringLiteralParser()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5829-6033;127-132;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testToken_noTokenName()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7192-7414;162-166;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TerminalsTest.testTokenizeHexAsLong_throwsIfStringIsTooShort()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3801-3987;82-87;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TestParsers()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ToTokenParser.java;[305-577;15-24;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ToTokenParser.java;[584-653;26-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.ToTokenParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.equalToken(org.codehaus.jparsec.Token)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[2420-2547;73-75;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[2271-2413;66-71;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Token.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Token.java;[2168-2264;62-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest.testEquals()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenTest.java;[656-1020;31-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest.testIndex()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenTest.java;[311-391;18-20;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest.testLength()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenTest.java;[222-304;14-16;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest.testToString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenTest.java;[494-649;26-29;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenTest.testValue()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenTest.java;[398-487;22-24;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$1()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$1.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[2964-3049;58-60;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$1.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[2484-2954;48-57;9-9];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$2()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$2.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3368-3470;69-71;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$2.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3476-3553;72-74;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$3()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$3.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3906-4014;83-85;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$3.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4020-4097;86-88;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$4()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$4.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4421-4638;97-102;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$4.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4644-4719;103-105;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$5()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$5.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4943-5045;113-115;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$5.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5051-5120;116-118;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$6()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$6.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5342-5442;126-128;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$6.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5448-5517;129-131;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$7()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$7.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5745-5843;139-141;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$7.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5849-5918;142-144;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$8()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$8.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[6270-6349;156-158;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps$8.map(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[6178-6262;153-155;7-7];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMaps.fragment(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5930-6360;147-160;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.assertFragment(java.lang.Object,org.codehaus.jparsec.functors.Map)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[2980-3222;85-90;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testDecAsLong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1285-1464;46-49;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testDecimalFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[756-859;32-34;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testDoubleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1843-2057;61-64;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[318-407;16-18;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testHexAsLong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1656-1836;56-59;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testIdentifierFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[527-639;24-26;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testIntegerFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[646-749;28-30;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testOctAsLong()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1471-1649;51-54;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testReservedFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[414-520;20-22;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testScientificNotation()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[2273-2975;71-83;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$ScientificNotation(java.lang.String,java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[4347-4470;138-141;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testSingleQuoteChar()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[866-1278;36-44;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokenizerMapsTest.testSingleQuoteString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[2064-2266;66-69;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment(java.lang.String,java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3118-3211;91-94;5-5];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.equalFragment(org.codehaus.jparsec.Tokens$Fragment)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3429-3533;106-108;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3544-3710;110-115;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3717-3807;117-119;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Fragment.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[3818-3878;121-123;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$ScientificNotation.equals(java.lang.Object)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[4576-4848;147-153;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$ScientificNotation.hashCode()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[4859-4961;155-157;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$ScientificNotation.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[4481-4565;143-145;5-5];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens$Tag()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[1313-1331;25-25;3-21];</data>
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.Tokens.integerLiteral(java.lang.String)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Tokens.java;[2401-2650;68-76;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest()">
      <data key="type">CONSTRUCTOR</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.assertFragment(java.lang.Object,java.lang.String,org.codehaus.jparsec.Tokens$Fragment)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[1649-1805;53-56;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testDecimal()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[976-1076;35-37;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testFragment()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[364-761;17-25;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testInteger()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[1083-1183;39-41;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testReserved()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[768-864;27-29;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testScientificNumber()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[1190-1642;43-51;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.TokensTest.testWord()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokensTest.java;[871-969;31-33;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/UnexpectedParser.java;[1362-1460;25-28;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.toString()">
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/UnexpectedParser.java;[1467-1523;30-32;3-3];</data>
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.skipMany()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.atomic()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.newReference()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.skipTimes(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.parse(java.lang.CharSequence)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.token()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.optional(T)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.next(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.many1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.peek()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.not(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.fails()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.map(org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.step(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.label(java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.times(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.times(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.cast()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.retn(R)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.parse(java.lang.Readable)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.many()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.skipMany1()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.not()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.getReturn(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.skipAtLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.atLeast(int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.optional()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.source()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.succeeds()">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.skipTimes(int,int)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD</data>
    </node>
    <node id="org.codehaus.jparsec.UnexpectedParser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD</data>
    </node>
    <edge id="e1" source="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)" target="org.codehaus.jparsec.error.ErrorReporter.reportList(java.lang.StringBuilder,java.util.List)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ErrorReporter.java;[1444-2211;30-50;3-3];</data>
    </edge>
    <edge id="e2" source="org.codehaus.jparsec.error.ErrorReporterTest.reportList(java.lang.String[])" target="org.codehaus.jparsec.error.ErrorReporter.reportList(java.lang.StringBuilder,java.util.List)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1974-2173;59-63;3-3];</data>
    </edge>
    <edge id="e3" source="org.codehaus.jparsec.error.ErrorReporterTest.testReportList()" target="org.codehaus.jparsec.error.ErrorReporterTest.reportList(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1584-1967;50-57;3-3/1584-1967;50-57;3-3/1584-1967;50-57;3-3/1584-1967;50-57;3-3/1584-1967;50-57;3-3/1584-1967;50-57;3-3];</data>
    </edge>
    <edge id="e4" source="org.codehaus.jparsec.error.ErrorReporterTest.testToString_expected()" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[795-1195;32-39;3-3];</data>
    </edge>
    <edge id="e5" source="org.codehaus.jparsec.error.ErrorReporterTest.testToString_failure()" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[562-788;26-30;3-3];</data>
    </edge>
    <edge id="e6" source="org.codehaus.jparsec.error.ErrorReporterTest.testToString_null()" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[325-419;18-20;3-3];</data>
    </edge>
    <edge id="e7" source="org.codehaus.jparsec.error.ErrorReporterTest.testToString_nullError()" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[426-555;22-24;3-3];</data>
    </edge>
    <edge id="e8" source="org.codehaus.jparsec.error.ErrorReporterTest.testToString_unexpected()" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/error/ErrorReporterTest.java;[1202-1577;41-48;3-3];</data>
    </edge>
    <edge id="e9" source="org.codehaus.jparsec.error.ParserException(java.lang.Throwable,org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)" target="org.codehaus.jparsec.error.ParserException.toErrorMessage(java.lang.String,java.lang.String,org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[2058-2619;44-58;3-3];</data>
    </edge>
    <edge id="e10" source="org.codehaus.jparsec.error.ParserException(org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)" target="org.codehaus.jparsec.error.ParserException.toErrorMessage(java.lang.String,java.lang.String,org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[1580-2053;30-42;3-3];</data>
    </edge>
    <edge id="e11" source="org.codehaus.jparsec.error.ParserException.toErrorMessage(java.lang.String,java.lang.String,org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)" target="org.codehaus.jparsec.error.ErrorReporter.toString(org.codehaus.jparsec.error.ParseErrorDetails,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/error/ParserException.java;[2777-3213;65-76;3-3];</data>
    </edge>
    <edge id="e12" source="org.codehaus.jparsec.functors.MapsTest.testToEnum()" target="org.codehaus.jparsec.functors.Maps.toEnum(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/functors/MapsTest.java;[734-919;33-36;3-3/734-919;33-36;3-3];</data>
    </edge>
    <edge id="e13" source="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[2393-3721;66-92;3-3/2393-3721;66-92;3-3/2393-3721;66-92;3-3];</data>
    </edge>
    <edge id="e14" source="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])" target="org.codehaus.jparsec.misc.Curry.findCurryIndex(java.lang.reflect.Constructor,java.lang.Class[],int,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[2393-3721;66-92;3-3];</data>
    </edge>
    <edge id="e15" source="org.codehaus.jparsec.misc.Mapper.expectedParams()" target="org.codehaus.jparsec.misc.Curry.expectedParams()">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[6561-6650;178-180;3-3];</data>
    </edge>
    <edge id="e16" source="org.codehaus.jparsec.misc.Curry.findCurryIndex(java.lang.reflect.Constructor,java.lang.Class[],int,java.lang.Object)" target="org.codehaus.jparsec.misc.Reflection.isInstance(java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5098-5546;136-144;3-3];</data>
    </edge>
    <edge id="e17" source="org.codehaus.jparsec.misc.Mapper.invoke(java.lang.Object[])" target="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5553-6370;146-167;3-3];</data>
    </edge>
    <edge id="e18" source="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])" target="org.codehaus.jparsec.misc.Curry.expectedParams()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5553-6370;146-167;3-3/5553-6370;146-167;3-3];</data>
    </edge>
    <edge id="e19" source="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])" target="org.codehaus.jparsec.misc.Curry.find(int[],int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5553-6370;146-167;3-3];</data>
    </edge>
    <edge id="e20" source="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[5553-6370;146-167;3-3];</data>
    </edge>
    <edge id="e21" source="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)" target="org.codehaus.jparsec.misc.Curry.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[3729-4046;95-99;3-3];</data>
    </edge>
    <edge id="e22" source="org.codehaus.jparsec.misc.Curry.checkFutureParameters(java.lang.Class,int)" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Curry.java;[3729-4046;95-99;3-3];</data>
    </edge>
    <edge id="e23" source="org.codehaus.jparsec.misc.CurryTest.testAbstractClass()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8409-8652;307-314;3-3];</data>
    </edge>
    <edge id="e24" source="org.codehaus.jparsec.misc.CurryTest.testAmbiguousConstructor()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9162-9456;335-343;3-3];</data>
    </edge>
    <edge id="e25" source="org.codehaus.jparsec.misc.CurryTest.testAmbiguousCurryArg()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10204-10416;375-382;3-3];</data>
    </edge>
    <edge id="e26" source="org.codehaus.jparsec.misc.CurryTest.testAsBinary_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10859-11046;401-407;3-3];</data>
    </edge>
    <edge id="e27" source="org.codehaus.jparsec.misc.CurryTest.testAsBinary_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.asBinary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10859-11046;401-407;3-3];</data>
    </edge>
    <edge id="e28" source="org.codehaus.jparsec.misc.CurryTest.testAsUnary_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10670-10852;393-399;3-3];</data>
    </edge>
    <edge id="e29" source="org.codehaus.jparsec.misc.CurryTest.testAsUnary_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.asUnary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10670-10852;393-399;3-3];</data>
    </edge>
    <edge id="e30" source="org.codehaus.jparsec.misc.CurryTest.testBinary()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1688-1901;73-78;3-3];</data>
    </edge>
    <edge id="e31" source="org.codehaus.jparsec.misc.CurryTest.testBinary()" target="org.codehaus.jparsec.misc.Mapper.binary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1688-1901;73-78;3-3];</data>
    </edge>
    <edge id="e32" source="org.codehaus.jparsec.misc.CurryTest.testBinary()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1688-1901;73-78;3-3];</data>
    </edge>
    <edge id="e33" source="org.codehaus.jparsec.misc.CurryTest.testBinary()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1688-1901;73-78;3-3];</data>
    </edge>
    <edge id="e34" source="org.codehaus.jparsec.misc.CurryTest.testCurryArgTypeMismatch()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9983-10197;366-373;3-3];</data>
    </edge>
    <edge id="e35" source="org.codehaus.jparsec.misc.CurryTest.testEquals()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8017-8329;296-301;3-3/8017-8329;296-301;3-3/8017-8329;296-301;3-3/8017-8329;296-301;3-3/8017-8329;296-301;3-3/8017-8329;296-301;3-3/8017-8329;296-301;3-3];</data>
    </edge>
    <edge id="e36" source="org.codehaus.jparsec.misc.CurryTest.testInfix()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5252-5592;204-213;3-3];</data>
    </edge>
    <edge id="e37" source="org.codehaus.jparsec.misc.CurryTest.testInfix()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5252-5592;204-213;3-3];</data>
    </edge>
    <edge id="e38" source="org.codehaus.jparsec.misc.CurryTest.testInfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5252-5592;204-213;3-3];</data>
    </edge>
    <edge id="e39" source="org.codehaus.jparsec.misc.CurryTest.testInfix()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5252-5592;204-213;3-3];</data>
    </edge>
    <edge id="e40" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5992-6389;226-236;3-3];</data>
    </edge>
    <edge id="e41" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5992-6389;226-236;3-3];</data>
    </edge>
    <edge id="e42" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5992-6389;226-236;3-3];</data>
    </edge>
    <edge id="e43" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5992-6389;226-236;3-3];</data>
    </edge>
    <edge id="e44" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12999-13395;464-473;3-3];</data>
    </edge>
    <edge id="e45" source="org.codehaus.jparsec.misc.CurryTest.testInfix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12999-13395;464-473;3-3];</data>
    </edge>
    <edge id="e46" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e47" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e48" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e49" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e50" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e51" source="org.codehaus.jparsec.misc.CurryTest.testInfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[5599-5985;215-224;3-3];</data>
    </edge>
    <edge id="e52" source="org.codehaus.jparsec.misc.CurryTest.testInfix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12625-12992;453-462;3-3];</data>
    </edge>
    <edge id="e53" source="org.codehaus.jparsec.misc.CurryTest.testInfix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12625-12992;453-462;3-3];</data>
    </edge>
    <edge id="e54" source="org.codehaus.jparsec.misc.CurryTest.testInvoke_wrongParameterNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[13402-13706;475-482;3-3];</data>
    </edge>
    <edge id="e55" source="org.codehaus.jparsec.misc.CurryTest.testInvoke_wrongParameterNumber()" target="org.codehaus.jparsec.misc.Curry.invoke(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[13402-13706;475-482;3-3];</data>
    </edge>
    <edge id="e56" source="org.codehaus.jparsec.misc.CurryTest.testName()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7916-8010;292-294;3-3];</data>
    </edge>
    <edge id="e57" source="org.codehaus.jparsec.misc.CurryTest.testNoPublicConstructor()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[8732-9023;320-328;3-3];</data>
    </edge>
    <edge id="e58" source="org.codehaus.jparsec.misc.CurryTest.testPostfix()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4334-4598;179-185;3-3];</data>
    </edge>
    <edge id="e59" source="org.codehaus.jparsec.misc.CurryTest.testPostfix()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4334-4598;179-185;3-3];</data>
    </edge>
    <edge id="e60" source="org.codehaus.jparsec.misc.CurryTest.testPostfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4334-4598;179-185;3-3];</data>
    </edge>
    <edge id="e61" source="org.codehaus.jparsec.misc.CurryTest.testPostfix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4334-4598;179-185;3-3];</data>
    </edge>
    <edge id="e62" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4922-5245;195-202;3-3];</data>
    </edge>
    <edge id="e63" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4922-5245;195-202;3-3];</data>
    </edge>
    <edge id="e64" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4922-5245;195-202;3-3];</data>
    </edge>
    <edge id="e65" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4922-5245;195-202;3-3];</data>
    </edge>
    <edge id="e66" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12218-12618;442-451;3-3];</data>
    </edge>
    <edge id="e67" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[12218-12618;442-451;3-3];</data>
    </edge>
    <edge id="e68" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e69" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e70" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e71" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e72" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e73" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4605-4915;187-193;3-3];</data>
    </edge>
    <edge id="e74" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11837-12211;431-440;3-3];</data>
    </edge>
    <edge id="e75" source="org.codehaus.jparsec.misc.CurryTest.testPostfix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11837-12211;431-440;3-3];</data>
    </edge>
    <edge id="e76" source="org.codehaus.jparsec.misc.CurryTest.testPrefix()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3441-3697;154-160;3-3];</data>
    </edge>
    <edge id="e77" source="org.codehaus.jparsec.misc.CurryTest.testPrefix()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3441-3697;154-160;3-3];</data>
    </edge>
    <edge id="e78" source="org.codehaus.jparsec.misc.CurryTest.testPrefix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3441-3697;154-160;3-3];</data>
    </edge>
    <edge id="e79" source="org.codehaus.jparsec.misc.CurryTest.testPrefix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3441-3697;154-160;3-3];</data>
    </edge>
    <edge id="e80" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4013-4327;170-177;3-3];</data>
    </edge>
    <edge id="e81" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4013-4327;170-177;3-3];</data>
    </edge>
    <edge id="e82" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4013-4327;170-177;3-3];</data>
    </edge>
    <edge id="e83" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[4013-4327;170-177;3-3];</data>
    </edge>
    <edge id="e84" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11432-11830;420-429;3-3];</data>
    </edge>
    <edge id="e85" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_multiOp_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11432-11830;420-429;3-3];</data>
    </edge>
    <edge id="e86" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e87" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e88" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e89" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e90" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e91" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_onlyOneUnskippedOperator()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[3704-4006;162-168;3-3];</data>
    </edge>
    <edge id="e92" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11053-11425;409-418;3-3];</data>
    </edge>
    <edge id="e93" source="org.codehaus.jparsec.misc.CurryTest.testPrefix_wrongParamNumber()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[11053-11425;409-418;3-3];</data>
    </edge>
    <edge id="e94" source="org.codehaus.jparsec.misc.CurryTest.testSequence()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1228-1466;58-64;3-3];</data>
    </edge>
    <edge id="e95" source="org.codehaus.jparsec.misc.CurryTest.testSequence()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1228-1466;58-64;3-3];</data>
    </edge>
    <edge id="e96" source="org.codehaus.jparsec.misc.CurryTest.testSequence()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1228-1466;58-64;3-3];</data>
    </edge>
    <edge id="e97" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesCheckedException()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7465-7800;277-286;3-3];</data>
    </edge>
    <edge id="e98" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesCheckedException()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7465-7800;277-286;3-3];</data>
    </edge>
    <edge id="e99" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesCheckedException()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7465-7800;277-286;3-3];</data>
    </edge>
    <edge id="e100" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesError()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6524-6795;244-252;3-3];</data>
    </edge>
    <edge id="e101" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesError()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6524-6795;244-252;3-3];</data>
    </edge>
    <edge id="e102" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesError()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6524-6795;244-252;3-3];</data>
    </edge>
    <edge id="e103" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesUncheckedException()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6966-7296;260-269;3-3];</data>
    </edge>
    <edge id="e104" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesUncheckedException()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6966-7296;260-269;3-3];</data>
    </edge>
    <edge id="e105" source="org.codehaus.jparsec.misc.CurryTest.testSequence_propagatesUncheckedException()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[6966-7296;260-269;3-3];</data>
    </edge>
    <edge id="e106" source="org.codehaus.jparsec.misc.CurryTest.testToString()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[7807-7909;288-290;3-3];</data>
    </edge>
    <edge id="e107" source="org.codehaus.jparsec.misc.CurryTest.testTooManyCurryArgs()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9829-9976;359-364;3-3];</data>
    </edge>
    <edge id="e108" source="org.codehaus.jparsec.misc.CurryTest.testUnary()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1473-1681;66-71;3-3];</data>
    </edge>
    <edge id="e109" source="org.codehaus.jparsec.misc.CurryTest.testUnary()" target="org.codehaus.jparsec.misc.Mapper.unary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1473-1681;66-71;3-3];</data>
    </edge>
    <edge id="e110" source="org.codehaus.jparsec.misc.CurryTest.testUnary()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1473-1681;66-71;3-3];</data>
    </edge>
    <edge id="e111" source="org.codehaus.jparsec.misc.CurryTest.testUnary()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[1473-1681;66-71;3-3];</data>
    </edge>
    <edge id="e112" source="org.codehaus.jparsec.misc.CurryTest.testVarargConstructor()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[9554-9822;349-357;3-3];</data>
    </edge>
    <edge id="e113" source="org.codehaus.jparsec.misc.CurryTest.testWrongArgumentType()" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10423-10663;384-391;3-3];</data>
    </edge>
    <edge id="e114" source="org.codehaus.jparsec.misc.CurryTest.testWrongArgumentType()" target="org.codehaus.jparsec.misc.Mapper.asBinary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10423-10663;384-391;3-3];</data>
    </edge>
    <edge id="e115" source="org.codehaus.jparsec.misc.CurryTest.testWrongArgumentType()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/CurryTest.java;[10423-10663;384-391;3-3];</data>
    </edge>
    <edge id="e116" source="org.codehaus.jparsec.misc.Mapper()" target="org.codehaus.jparsec.misc.Mapper.mapMethod(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[3708-3953;82-87;3-3];</data>
    </edge>
    <edge id="e117" source="org.codehaus.jparsec.misc.Mapper()" target="org.codehaus.jparsec.misc.Invokables.method(java.lang.Object,net.sf.cglib.reflect.FastMethod)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[3708-3953;82-87;3-3];</data>
    </edge>
    <edge id="e118" source="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])" target="org.codehaus.jparsec.misc.Curry.of(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[4072-5511;94-126;3-3];</data>
    </edge>
    <edge id="e119" source="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.invoke(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20160-20328;501-508;3-3];</data>
    </edge>
    <edge id="e120" source="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.propagate(java.lang.Throwable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20160-20328;501-508;3-3];</data>
    </edge>
    <edge id="e121" source="org.codehaus.jparsec.misc.Mapper.getTargetType(java.lang.Class)" target="org.codehaus.jparsec.misc.Mapper.getRawClass(java.lang.reflect.Type)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21609-22138;550-560;3-3];</data>
    </edge>
    <edge id="e122" source="org.codehaus.jparsec.misc.Mapper.invoke(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.checkArgumentTypes(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20692-20807;523-526;3-3];</data>
    </edge>
    <edge id="e123" source="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24406-25478;632-657;3-3];</data>
    </edge>
    <edge id="e124" source="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24406-25478;632-657;3-3];</data>
    </edge>
    <edge id="e125" source="org.codehaus.jparsec.misc.Mapper.introspectMapperMethod(java.lang.Class)" target="org.codehaus.jparsec.misc.Mapper.findMapMethod(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21054-21602;537-548;3-3];</data>
    </edge>
    <edge id="e126" source="org.codehaus.jparsec.misc.Mapper.introspectMapperMethod(java.lang.Class)" target="org.codehaus.jparsec.misc.Mapper.getTargetType(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21054-21602;537-548;3-3];</data>
    </edge>
    <edge id="e127" source="org.codehaus.jparsec.misc.Mapper.introspectMapperMethod(java.lang.Class)" target="org.codehaus.jparsec.misc.Reflection.wrapperClass(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[21054-21602;537-548;3-3];</data>
    </edge>
    <edge id="e128" source="org.codehaus.jparsec.misc.Mapper.mapMethod(java.lang.Class)" target="org.codehaus.jparsec.misc.Mapper.introspectMapperMethod(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20814-21047;528-535;3-3];</data>
    </edge>
    <edge id="e129" source="org.codehaus.jparsec.misc.Mapper.binary()" target="org.codehaus.jparsec.misc.Mapper.asBinary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6424-6736;151-158;3-3];</data>
    </edge>
    <edge id="e130" source="org.codehaus.jparsec.functors.Map2.map(A,B)" target="org.codehaus.jparsec.misc.Mapper$6$1.map(T,T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14888-14973;357-359;11-11];</data>
    </edge>
    <edge id="e131" source="org.codehaus.jparsec.misc.Mapper$6$1.map(T,T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14888-14973;357-359;11-11];</data>
    </edge>
    <edge id="e132" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$6.map(java.lang.Object)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14805-14992;355-361;7-7];</data>
    </edge>
    <edge id="e133" source="org.codehaus.jparsec.misc.Mapper$6.map(java.lang.Object)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[14805-14992;355-361;7-7];</data>
    </edge>
    <edge id="e134" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13499-15004;326-363;3-3];</data>
    </edge>
    <edge id="e135" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13499-15004;326-363;3-3];</data>
    </edge>
    <edge id="e136" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13499-15004;326-363;3-3];</data>
    </edge>
    <edge id="e137" source="org.codehaus.jparsec.functors.Map2.map(A,B)" target="org.codehaus.jparsec.misc.Mapper$7$1.map(T,T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[17067-17333;403-409;11-11];</data>
    </edge>
    <edge id="e138" source="org.codehaus.jparsec.misc.Mapper$7$1.map(T,T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[17067-17333;403-409;11-11];</data>
    </edge>
    <edge id="e139" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$7.map(java.lang.Object[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[16979-17352;401-411;7-7];</data>
    </edge>
    <edge id="e140" source="org.codehaus.jparsec.misc.Mapper$7.map(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[16979-17352;401-411;7-7];</data>
    </edge>
    <edge id="e141" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
    </edge>
    <edge id="e142" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
    </edge>
    <edge id="e143" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
    </edge>
    <edge id="e144" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.Parsers.array(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
    </edge>
    <edge id="e145" source="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[15011-17364;365-413;3-3];</data>
    </edge>
    <edge id="e146" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$4$1.map(T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11135-11200;268-270;11-11];</data>
    </edge>
    <edge id="e147" source="org.codehaus.jparsec.misc.Mapper$4$1.map(T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11135-11200;268-270;11-11];</data>
    </edge>
    <edge id="e148" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9857-11231;238-274;3-3];</data>
    </edge>
    <edge id="e149" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9857-11231;238-274;3-3];</data>
    </edge>
    <edge id="e150" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9857-11231;238-274;3-3];</data>
    </edge>
    <edge id="e151" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$5$1.map(T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13253-13461;315-320;11-11];</data>
    </edge>
    <edge id="e152" source="org.codehaus.jparsec.misc.Mapper$5$1.map(T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13253-13461;315-320;11-11];</data>
    </edge>
    <edge id="e153" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$5.map(java.lang.Object[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13167-13480;313-322;7-7];</data>
    </edge>
    <edge id="e154" source="org.codehaus.jparsec.misc.Mapper$5.map(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[13167-13480;313-322;7-7];</data>
    </edge>
    <edge id="e155" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
    </edge>
    <edge id="e156" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
    </edge>
    <edge id="e157" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
    </edge>
    <edge id="e158" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.Parsers.array(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
    </edge>
    <edge id="e159" source="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[11238-13492;276-324;3-3];</data>
    </edge>
    <edge id="e160" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$2$1.map(T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8011-8075;190-192;11-11];</data>
    </edge>
    <edge id="e161" source="org.codehaus.jparsec.misc.Mapper$2$1.map(T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8011-8075;190-192;11-11];</data>
    </edge>
    <edge id="e162" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$2.map(java.lang.Object)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[7929-8094;188-194;7-7];</data>
    </edge>
    <edge id="e163" source="org.codehaus.jparsec.misc.Mapper$2.map(java.lang.Object)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[7929-8094;188-194;7-7];</data>
    </edge>
    <edge id="e164" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkNotSkipped(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6743-8106;160-196;3-3];</data>
    </edge>
    <edge id="e165" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6743-8106;160-196;3-3];</data>
    </edge>
    <edge id="e166" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6743-8106;160-196;3-3];</data>
    </edge>
    <edge id="e167" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$3$1.map(T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9722-9819;229-232;11-11];</data>
    </edge>
    <edge id="e168" source="org.codehaus.jparsec.misc.Mapper$3$1.map(T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9722-9819;229-232;11-11];</data>
    </edge>
    <edge id="e169" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$3.map(java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9633-9838;227-234;7-7];</data>
    </edge>
    <edge id="e170" source="org.codehaus.jparsec.misc.Mapper$3.map(java.util.List)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[9633-9838;227-234;7-7];</data>
    </edge>
    <edge id="e171" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8113-9850;198-236;3-3];</data>
    </edge>
    <edge id="e172" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8113-9850;198-236;3-3];</data>
    </edge>
    <edge id="e173" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8113-9850;198-236;3-3];</data>
    </edge>
    <edge id="e174" source="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[8113-9850;198-236;3-3];</data>
    </edge>
    <edge id="e175" source="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.mergeSkipped(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
    </edge>
    <edge id="e176" source="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.expectedParams()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
    </edge>
    <edge id="e177" source="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
    </edge>
    <edge id="e178" source="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.Parsers.array(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
    </edge>
    <edge id="e179" source="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[5518-6115;128-140;3-3];</data>
    </edge>
    <edge id="e180" source="org.codehaus.jparsec.misc.Mapper.unary()" target="org.codehaus.jparsec.misc.Mapper.asUnary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[6120-6419;142-149;3-3];</data>
    </edge>
    <edge id="e181" source="org.codehaus.jparsec.functors.Map2.map(A,B)" target="org.codehaus.jparsec.misc.Mapper$9.map(T,T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19578-19651;477-479;7-7];</data>
    </edge>
    <edge id="e182" source="org.codehaus.jparsec.misc.Mapper$9.map(T,T)" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19578-19651;477-479;7-7];</data>
    </edge>
    <edge id="e183" source="org.codehaus.jparsec.misc.Mapper.asBinary()" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19269-19736;470-484;3-3];</data>
    </edge>
    <edge id="e184" source="org.codehaus.jparsec.misc.Mapper.asBinary()" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19269-19736;470-484;3-3];</data>
    </edge>
    <edge id="e185" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.misc.Mapper$10.map(java.lang.Object[])">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20004-20068;492-494;7-7];</data>
    </edge>
    <edge id="e186" source="org.codehaus.jparsec.misc.Mapper$10.map(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[20004-20068;492-494;7-7];</data>
    </edge>
    <edge id="e187" source="org.codehaus.jparsec.misc.Mapper.asMap()" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[19741-20153;486-499;3-3];</data>
    </edge>
    <edge id="e188" source="org.codehaus.jparsec.misc.Mapper.asUnary()" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18834-19264;454-468;3-3];</data>
    </edge>
    <edge id="e189" source="org.codehaus.jparsec.misc.Mapper.asUnary()" target="org.codehaus.jparsec.misc.Mapper.apply(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18834-19264;454-468;3-3];</data>
    </edge>
    <edge id="e190" source="org.codehaus.jparsec.misc.Mapper.checkArgumentType(int,java.lang.Class,java.lang.Object)" target="org.codehaus.jparsec.misc.Reflection.isAssignable(java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[23348-23691;599-606;3-3];</data>
    </edge>
    <edge id="e191" source="org.codehaus.jparsec.misc.Mapper.checkArgumentTypes(java.lang.Object[])" target="org.codehaus.jparsec.misc.Mapper.checkArgumentType(int,java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[22928-23343;588-597;3-3];</data>
    </edge>
    <edge id="e192" source="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(int,java.lang.Class,int)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18283-18675;438-444;3-3];</data>
    </edge>
    <edge id="e193" source="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)" target="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(int,java.lang.Class,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18125-18278;434-436;3-3];</data>
    </edge>
    <edge id="e194" source="org.codehaus.jparsec.misc.Mapper.checkFutureParameters(java.lang.Class,int)" target="org.codehaus.jparsec.misc.Mapper.expectedParams()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[18125-18278;434-436;3-3];</data>
    </edge>
    <edge id="e195" source="org.codehaus.jparsec.misc.Mapper.checkNotSkipped(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Mapper.java;[24249-24399;628-630;3-3];</data>
    </edge>
    <edge id="e196" source="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e197" source="org.codehaus.jparsec.misc.MapperTest$12()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e198" source="org.codehaus.jparsec.misc.MapperTest.fooMapper()" target="org.codehaus.jparsec.misc.MapperTest$12()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5879-6066;212-219;3-3];</data>
    </edge>
    <edge id="e199" source="org.codehaus.jparsec.misc.MapperTest.fooMapper()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5879-6066;212-219;3-3];</data>
    </edge>
    <edge id="e200" source="org.codehaus.jparsec.misc.MapperTest$14()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e201" source="org.codehaus.jparsec.misc.MapperTest.thingMapper()" target="org.codehaus.jparsec.misc.MapperTest$14()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6869-7099;255-262;3-3];</data>
    </edge>
    <edge id="e202" source="org.codehaus.jparsec.misc.MapperTest.thingMapper()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6869-7099;255-262;3-3];</data>
    </edge>
    <edge id="e203" source="org.codehaus.jparsec.misc.MapperTest.assertWrongParameters(org.codehaus.jparsec.misc.Mapper,int,int)" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[11737-12260;390-404;3-3];</data>
    </edge>
    <edge id="e204" source="org.codehaus.jparsec.misc.MapperTest.testAsMap()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1337-1642;57-62;3-3/1337-1642;57-62;3-3/1337-1642;57-62;3-3/1337-1642;57-62;3-3];</data>
    </edge>
    <edge id="e205" source="org.codehaus.jparsec.misc.MapperTest$2()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e206" source="org.codehaus.jparsec.misc.MapperTest.testBinary()" target="org.codehaus.jparsec.misc.MapperTest$2()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
    </edge>
    <edge id="e207" source="org.codehaus.jparsec.misc.MapperTest.testBinary()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
    </edge>
    <edge id="e208" source="org.codehaus.jparsec.misc.MapperTest.testBinary()" target="org.codehaus.jparsec.misc.Mapper.binary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
    </edge>
    <edge id="e209" source="org.codehaus.jparsec.misc.MapperTest.testBinary()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
    </edge>
    <edge id="e210" source="org.codehaus.jparsec.misc.MapperTest.testBinary()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2007-2368;76-86;3-3];</data>
    </edge>
    <edge id="e211" source="org.codehaus.jparsec.misc.MapperTest.testCurry_sequence()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1134-1330;50-55;3-3];</data>
    </edge>
    <edge id="e212" source="org.codehaus.jparsec.misc.MapperTest.testCurry_sequence()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1134-1330;50-55;3-3];</data>
    </edge>
    <edge id="e213" source="org.codehaus.jparsec.misc.MapperTest.testCurry_sequence()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1134-1330;50-55;3-3];</data>
    </edge>
    <edge id="e214" source="org.codehaus.jparsec.misc.MapperTest$18()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e215" source="org.codehaus.jparsec.misc.MapperTest.testIncompatibleGenericReturnType()" target="org.codehaus.jparsec.misc.MapperTest$18()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13388-13669;453-463;3-3];</data>
    </edge>
    <edge id="e216" source="org.codehaus.jparsec.misc.MapperTest.testIncompatibleGenericReturnType()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13388-13669;453-463;3-3];</data>
    </edge>
    <edge id="e217" source="org.codehaus.jparsec.misc.MapperTest$17()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e218" source="org.codehaus.jparsec.misc.MapperTest.testIncompatibleReturnType()" target="org.codehaus.jparsec.misc.MapperTest$17()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13147-13381;441-451;3-3];</data>
    </edge>
    <edge id="e219" source="org.codehaus.jparsec.misc.MapperTest.testIncompatibleReturnType()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13147-13381;441-451;3-3];</data>
    </edge>
    <edge id="e220" source="org.codehaus.jparsec.misc.MapperTest$7()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e221" source="org.codehaus.jparsec.misc.MapperTest.testInfix()" target="org.codehaus.jparsec.misc.MapperTest$7()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
    </edge>
    <edge id="e222" source="org.codehaus.jparsec.misc.MapperTest.testInfix()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
    </edge>
    <edge id="e223" source="org.codehaus.jparsec.misc.MapperTest.testInfix()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
    </edge>
    <edge id="e224" source="org.codehaus.jparsec.misc.MapperTest.testInfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
    </edge>
    <edge id="e225" source="org.codehaus.jparsec.misc.MapperTest.testInfix()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3517-3792;128-136;3-3];</data>
    </edge>
    <edge id="e226" source="org.codehaus.jparsec.misc.MapperTest$8()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e227" source="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()" target="org.codehaus.jparsec.misc.MapperTest$8()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
    </edge>
    <edge id="e228" source="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
    </edge>
    <edge id="e229" source="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
    </edge>
    <edge id="e230" source="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
    </edge>
    <edge id="e231" source="org.codehaus.jparsec.misc.MapperTest.testInfix_multiOp()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3799-4107;138-146;3-3];</data>
    </edge>
    <edge id="e232" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForInfix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[10698-11584;358-383;3-3/10698-11584;358-383;3-3];</data>
    </edge>
    <edge id="e233" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForInfix()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[10698-11584;358-383;3-3/10698-11584;358-383;3-3];</data>
    </edge>
    <edge id="e234" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForInfix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[10698-11584;358-383;3-3/10698-11584;358-383;3-3/10698-11584;358-383;3-3/10698-11584;358-383;3-3/10698-11584;358-383;3-3/10698-11584;358-383;3-3];</data>
    </edge>
    <edge id="e235" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForInfix()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[10698-11584;358-383;3-3/10698-11584;358-383;3-3];</data>
    </edge>
    <edge id="e236" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPostfix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[9795-10691;331-356;3-3/9795-10691;331-356;3-3];</data>
    </edge>
    <edge id="e237" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPostfix()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[9795-10691;331-356;3-3/9795-10691;331-356;3-3];</data>
    </edge>
    <edge id="e238" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPostfix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[9795-10691;331-356;3-3/9795-10691;331-356;3-3/9795-10691;331-356;3-3/9795-10691;331-356;3-3/9795-10691;331-356;3-3/9795-10691;331-356;3-3];</data>
    </edge>
    <edge id="e239" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPostfix()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[9795-10691;331-356;3-3/9795-10691;331-356;3-3];</data>
    </edge>
    <edge id="e240" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPrefix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8897-9788;304-329;3-3/8897-9788;304-329;3-3];</data>
    </edge>
    <edge id="e241" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPrefix()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8897-9788;304-329;3-3/8897-9788;304-329;3-3];</data>
    </edge>
    <edge id="e242" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPrefix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8897-9788;304-329;3-3/8897-9788;304-329;3-3/8897-9788;304-329;3-3/8897-9788;304-329;3-3/8897-9788;304-329;3-3/8897-9788;304-329;3-3];</data>
    </edge>
    <edge id="e243" source="org.codehaus.jparsec.misc.MapperTest.testInvalidSkipForPrefix()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8897-9788;304-329;3-3/8897-9788;304-329;3-3];</data>
    </edge>
    <edge id="e244" source="org.codehaus.jparsec.misc.MapperTest$9()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e245" source="org.codehaus.jparsec.misc.MapperTest.testMap_errorPropagated()" target="org.codehaus.jparsec.misc.MapperTest$9()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4114-4490;148-162;3-3];</data>
    </edge>
    <edge id="e246" source="org.codehaus.jparsec.misc.MapperTest.testMap_errorPropagated()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4114-4490;148-162;3-3];</data>
    </edge>
    <edge id="e247" source="org.codehaus.jparsec.misc.MapperTest.testMap_errorPropagated()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4114-4490;148-162;3-3];</data>
    </edge>
    <edge id="e248" source="org.codehaus.jparsec.misc.MapperTest.testMap_errorPropagated()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4114-4490;148-162;3-3];</data>
    </edge>
    <edge id="e249" source="org.codehaus.jparsec.misc.MapperTest$11()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e250" source="org.codehaus.jparsec.misc.MapperTest.testMap_exceptionPropagated()" target="org.codehaus.jparsec.misc.MapperTest$11()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4936-5375;180-194;3-3];</data>
    </edge>
    <edge id="e251" source="org.codehaus.jparsec.misc.MapperTest.testMap_exceptionPropagated()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4936-5375;180-194;3-3];</data>
    </edge>
    <edge id="e252" source="org.codehaus.jparsec.misc.MapperTest.testMap_exceptionPropagated()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4936-5375;180-194;3-3];</data>
    </edge>
    <edge id="e253" source="org.codehaus.jparsec.misc.MapperTest.testMap_exceptionPropagated()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4936-5375;180-194;3-3];</data>
    </edge>
    <edge id="e254" source="org.codehaus.jparsec.misc.MapperTest$10()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e255" source="org.codehaus.jparsec.misc.MapperTest.testMap_runtimeExceptionPropagated()" target="org.codehaus.jparsec.misc.MapperTest$10()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4497-4929;164-178;3-3];</data>
    </edge>
    <edge id="e256" source="org.codehaus.jparsec.misc.MapperTest.testMap_runtimeExceptionPropagated()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4497-4929;164-178;3-3];</data>
    </edge>
    <edge id="e257" source="org.codehaus.jparsec.misc.MapperTest.testMap_runtimeExceptionPropagated()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4497-4929;164-178;3-3];</data>
    </edge>
    <edge id="e258" source="org.codehaus.jparsec.misc.MapperTest.testMap_runtimeExceptionPropagated()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[4497-4929;164-178;3-3];</data>
    </edge>
    <edge id="e259" source="org.codehaus.jparsec.misc.MapperTest$19()" target="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e260" source="org.codehaus.jparsec.misc.MapperTest.testMapperMethodInSuperclass()" target="org.codehaus.jparsec.misc.MapperTest$19()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13858-13966;472-474;3-3];</data>
    </edge>
    <edge id="e261" source="org.codehaus.jparsec.misc.MapperTest.testMapperMethodInSuperclass()" target="org.codehaus.jparsec.misc.MapperTest$CharSequenceMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[13858-13966;472-474;3-3];</data>
    </edge>
    <edge id="e262" source="org.codehaus.jparsec.misc.MapperTest$13()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e263" source="org.codehaus.jparsec.misc.MapperTest.testNonGenericMapper()" target="org.codehaus.jparsec.misc.MapperTest$13()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6222-6482;225-233;3-3];</data>
    </edge>
    <edge id="e264" source="org.codehaus.jparsec.misc.MapperTest.testNonGenericMapper()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6222-6482;225-233;3-3];</data>
    </edge>
    <edge id="e265" source="org.codehaus.jparsec.misc.MapperTest.testNonGenericMapper()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6222-6482;225-233;3-3];</data>
    </edge>
    <edge id="e266" source="org.codehaus.jparsec.misc.MapperTest.testNonGenericMapper()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6222-6482;225-233;3-3];</data>
    </edge>
    <edge id="e267" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e268" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.misc.Mapper.infix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3/8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e269" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3/8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e270" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3/8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e271" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3/8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e272" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForInfix()" target="org.codehaus.jparsec.misc.MapperTest.thingMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8523-8890;295-302;3-3];</data>
    </edge>
    <edge id="e273" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e274" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3/8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e275" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3/8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e276" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3/8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e277" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3/8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e278" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPostfix()" target="org.codehaus.jparsec.misc.MapperTest.thingMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[8123-8516;286-293;3-3];</data>
    </edge>
    <edge id="e279" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e280" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3/7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e281" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3/7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e282" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3/7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e283" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3/7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e284" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForPrefix()" target="org.codehaus.jparsec.misc.MapperTest.thingMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7726-8116;277-284;3-3];</data>
    </edge>
    <edge id="e285" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3/7106-7719;264-275;3-3];</data>
    </edge>
    <edge id="e286" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3];</data>
    </edge>
    <edge id="e287" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()" target="org.codehaus.jparsec.misc.Mapper._(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3];</data>
    </edge>
    <edge id="e288" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3/7106-7719;264-275;3-3/7106-7719;264-275;3-3];</data>
    </edge>
    <edge id="e289" source="org.codehaus.jparsec.misc.MapperTest.testParametersSkippedForSequence()" target="org.codehaus.jparsec.misc.MapperTest.fooMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[7106-7719;264-275;3-3];</data>
    </edge>
    <edge id="e290" source="org.codehaus.jparsec.misc.MapperTest$5()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e291" source="org.codehaus.jparsec.misc.MapperTest.testPostfix()" target="org.codehaus.jparsec.misc.MapperTest$5()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
    </edge>
    <edge id="e292" source="org.codehaus.jparsec.misc.MapperTest.testPostfix()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
    </edge>
    <edge id="e293" source="org.codehaus.jparsec.misc.MapperTest.testPostfix()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
    </edge>
    <edge id="e294" source="org.codehaus.jparsec.misc.MapperTest.testPostfix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
    </edge>
    <edge id="e295" source="org.codehaus.jparsec.misc.MapperTest.testPostfix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2944-3207;108-116;3-3];</data>
    </edge>
    <edge id="e296" source="org.codehaus.jparsec.misc.MapperTest$6()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e297" source="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()" target="org.codehaus.jparsec.misc.MapperTest$6()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
    </edge>
    <edge id="e298" source="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
    </edge>
    <edge id="e299" source="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.postfix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
    </edge>
    <edge id="e300" source="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
    </edge>
    <edge id="e301" source="org.codehaus.jparsec.misc.MapperTest.testPostfix_multiOp()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[3214-3510;118-126;3-3];</data>
    </edge>
    <edge id="e302" source="org.codehaus.jparsec.misc.MapperTest$3()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e303" source="org.codehaus.jparsec.misc.MapperTest.testPrefix()" target="org.codehaus.jparsec.misc.MapperTest$3()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
    </edge>
    <edge id="e304" source="org.codehaus.jparsec.misc.MapperTest.testPrefix()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
    </edge>
    <edge id="e305" source="org.codehaus.jparsec.misc.MapperTest.testPrefix()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
    </edge>
    <edge id="e306" source="org.codehaus.jparsec.misc.MapperTest.testPrefix()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
    </edge>
    <edge id="e307" source="org.codehaus.jparsec.misc.MapperTest.testPrefix()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2375-2636;88-96;3-3];</data>
    </edge>
    <edge id="e308" source="org.codehaus.jparsec.misc.MapperTest$4()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e309" source="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()" target="org.codehaus.jparsec.misc.MapperTest$4()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
    </edge>
    <edge id="e310" source="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
    </edge>
    <edge id="e311" source="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()" target="org.codehaus.jparsec.misc.Mapper.prefix(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
    </edge>
    <edge id="e312" source="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
    </edge>
    <edge id="e313" source="org.codehaus.jparsec.misc.MapperTest.testPrefix_multiOp()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[2643-2937;98-106;3-3];</data>
    </edge>
    <edge id="e314" source="org.codehaus.jparsec.misc.MapperTest.testSequence()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[989-1127;45-48;3-3];</data>
    </edge>
    <edge id="e315" source="org.codehaus.jparsec.misc.MapperTest.testSequence()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[989-1127;45-48;3-3];</data>
    </edge>
    <edge id="e316" source="org.codehaus.jparsec.misc.MapperTest.testTargetTypeUnknownAtConstructionTime()" target="org.codehaus.jparsec.misc.MapperTest.fooMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6073-6215;221-223;3-3];</data>
    </edge>
    <edge id="e317" source="org.codehaus.jparsec.misc.MapperTest.testTargetTypeUnknownAtConstructionTime()" target="org.codehaus.jparsec.misc.Mapper.sequence(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6073-6215;221-223;3-3];</data>
    </edge>
    <edge id="e318" source="org.codehaus.jparsec.misc.MapperTest.testTargetTypeUnknownAtConstructionTime()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[6073-6215;221-223;3-3];</data>
    </edge>
    <edge id="e319" source="org.codehaus.jparsec.misc.MapperTest$1()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
    </edge>
    <edge id="e320" source="org.codehaus.jparsec.misc.MapperTest.testUnary()" target="org.codehaus.jparsec.misc.MapperTest$1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
    </edge>
    <edge id="e321" source="org.codehaus.jparsec.misc.MapperTest.testUnary()" target="org.codehaus.jparsec.misc.Mapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
    </edge>
    <edge id="e322" source="org.codehaus.jparsec.misc.MapperTest.testUnary()" target="org.codehaus.jparsec.misc.Mapper.unary()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
    </edge>
    <edge id="e323" source="org.codehaus.jparsec.misc.MapperTest.testUnary()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
    </edge>
    <edge id="e324" source="org.codehaus.jparsec.misc.MapperTest.testUnary()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[1649-2000;64-74;3-3];</data>
    </edge>
    <edge id="e325" source="org.codehaus.jparsec.misc.MapperTest.testWrongParameters()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5382-5647;196-204;3-3];</data>
    </edge>
    <edge id="e326" source="org.codehaus.jparsec.misc.MapperTest.testWrongParameters()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5382-5647;196-204;3-3];</data>
    </edge>
    <edge id="e327" source="org.codehaus.jparsec.misc.MapperTest.testWrongParametersForSequencing()" target="org.codehaus.jparsec.misc.MapperTest.assertWrongParameters(org.codehaus.jparsec.misc.Mapper,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5654-5874;206-210;3-3/5654-5874;206-210;3-3/5654-5874;206-210;3-3];</data>
    </edge>
    <edge id="e328" source="org.codehaus.jparsec.misc.MapperTest.testWrongParametersForSequencing()" target="org.codehaus.jparsec.misc.Mapper.curry(java.lang.Class,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5654-5874;206-210;3-3/5654-5874;206-210;3-3];</data>
    </edge>
    <edge id="e329" source="org.codehaus.jparsec.misc.MapperTest.testWrongParametersForSequencing()" target="org.codehaus.jparsec.misc.MapperTest.fooMapper()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[5654-5874;206-210;3-3];</data>
    </edge>
    <edge id="e330" source="org.codehaus.jparsec.misc.MapperTest.testWrongType()" target="org.codehaus.jparsec.misc.Mapper.asMap()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12267-12649;406-416;3-3];</data>
    </edge>
    <edge id="e331" source="org.codehaus.jparsec.misc.MapperTest.testWrongType()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/MapperTest.java;[12267-12649;406-416;3-3];</data>
    </edge>
    <edge id="e332" source="org.codehaus.jparsec.misc.Reflection.isAssignable(java.lang.Class,java.lang.Object)" target="org.codehaus.jparsec.misc.Reflection.isInstance(java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[1320-1449;47-49;3-3];</data>
    </edge>
    <edge id="e333" source="org.codehaus.jparsec.misc.Reflection.isInstance(java.lang.Class,java.lang.Object)" target="org.codehaus.jparsec.misc.Reflection.wrapperClass(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/misc/Reflection.java;[1209-1313;43-45;3-3];</data>
    </edge>
    <edge id="e334" source="org.codehaus.jparsec.misc.ReflectionTest.testIsAssignable()" target="org.codehaus.jparsec.misc.Reflection.isAssignable(java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[689-1022;25-31;3-3/689-1022;25-31;3-3/689-1022;25-31;3-3/689-1022;25-31;3-3/689-1022;25-31;3-3];</data>
    </edge>
    <edge id="e335" source="org.codehaus.jparsec.misc.ReflectionTest.testIsInstance()" target="org.codehaus.jparsec.misc.Reflection.isInstance(java.lang.Class,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[360-682;17-23;3-3/360-682;17-23;3-3/360-682;17-23;3-3/360-682;17-23;3-3/360-682;17-23;3-3];</data>
    </edge>
    <edge id="e336" source="org.codehaus.jparsec.misc.ReflectionTest.testWrapperClass()" target="org.codehaus.jparsec.misc.Reflection.wrapperClass(java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/misc/ReflectionTest.java;[1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3/1029-1759;33-44;3-3];</data>
    </edge>
    <edge id="e337" source="org.codehaus.jparsec.pattern.CharPredicates.and(org.codehaus.jparsec.pattern.CharPredicate[])" target="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9264-9903;288-307;3-3];</data>
    </edge>
    <edge id="e338" source="org.codehaus.jparsec.pattern.CharPredicates.or(org.codehaus.jparsec.pattern.CharPredicate[])" target="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/CharPredicates.java;[9910-10546;309-328;3-3];</data>
    </edge>
    <edge id="e339" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testAnd()" target="org.codehaus.jparsec.pattern.CharPredicates.and(org.codehaus.jparsec.pattern.CharPredicate[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3];</data>
    </edge>
    <edge id="e340" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testAnd()" target="org.codehaus.jparsec.pattern.CharPredicates.and(org.codehaus.jparsec.pattern.CharPredicate,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3/6430-7155;192-205;3-3];</data>
    </edge>
    <edge id="e341" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testIsChar()" target="org.codehaus.jparsec.pattern.CharPredicates.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[519-730;17-22;3-3];</data>
    </edge>
    <edge id="e342" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotAmong()" target="org.codehaus.jparsec.pattern.CharPredicates.notAmong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[2210-2470;68-74;3-3];</data>
    </edge>
    <edge id="e343" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotChar()" target="org.codehaus.jparsec.pattern.CharPredicates.notChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[737-951;24-29;3-3];</data>
    </edge>
    <edge id="e344" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testNotRange()" target="org.codehaus.jparsec.pattern.CharPredicates.notRange(char,char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[1600-1944;50-58;3-3];</data>
    </edge>
    <edge id="e345" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testOr()" target="org.codehaus.jparsec.pattern.CharPredicates.or(org.codehaus.jparsec.pattern.CharPredicate[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[7162-7864;207-220;3-3/7162-7864;207-220;3-3/7162-7864;207-220;3-3/7162-7864;207-220;3-3/7162-7864;207-220;3-3/7162-7864;207-220;3-3/7162-7864;207-220;3-3];</data>
    </edge>
    <edge id="e346" source="org.codehaus.jparsec.pattern.CharPredicatesTest.testRange()" target="org.codehaus.jparsec.pattern.CharPredicates.range(char,char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/CharPredicatesTest.java;[958-1294;31-39;3-3];</data>
    </edge>
    <edge id="e347" source="org.codehaus.jparsec.pattern.Pattern.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4568-4914;124-131;3-3];</data>
    </edge>
    <edge id="e348" source="org.codehaus.jparsec.pattern.Pattern.many()" target="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2696-2898;59-65;3-3];</data>
    </edge>
    <edge id="e349" source="org.codehaus.jparsec.pattern.Pattern.many(int)" target="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2905-3225;67-76;3-3];</data>
    </edge>
    <edge id="e350" source="org.codehaus.jparsec.pattern.Pattern.many1()" target="org.codehaus.jparsec.pattern.Pattern.many(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3232-3423;78-84;3-3];</data>
    </edge>
    <edge id="e351" source="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.sequence(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[2127-2500;41-50;3-3];</data>
    </edge>
    <edge id="e352" source="org.codehaus.jparsec.pattern.Pattern.not()" target="org.codehaus.jparsec.pattern.Patterns.not(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4189-4377;109-115;3-3];</data>
    </edge>
    <edge id="e353" source="org.codehaus.jparsec.pattern.Pattern.or(org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.or(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[5117-5290;140-143;3-3];</data>
    </edge>
    <edge id="e354" source="org.codehaus.jparsec.pattern.Pattern.repeat(int)" target="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[4921-5110;133-138;3-3];</data>
    </edge>
    <edge id="e355" source="org.codehaus.jparsec.pattern.Pattern.some(int)" target="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3430-3747;86-95;3-3];</data>
    </edge>
    <edge id="e356" source="org.codehaus.jparsec.pattern.Pattern.some(int,int)" target="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Pattern.java;[3754-4182;97-107;3-3];</data>
    </edge>
    <edge id="e357" source="org.codehaus.jparsec.pattern.PatternTest.testIfElse()" target="org.codehaus.jparsec.pattern.Patterns.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3];</data>
    </edge>
    <edge id="e358" source="org.codehaus.jparsec.pattern.PatternTest.testIfElse()" target="org.codehaus.jparsec.pattern.Pattern.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3];</data>
    </edge>
    <edge id="e359" source="org.codehaus.jparsec.pattern.PatternTest.testIfElse()" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3];</data>
    </edge>
    <edge id="e360" source="org.codehaus.jparsec.pattern.PatternTest.testIfElse()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3/2207-2776;65-78;3-3];</data>
    </edge>
    <edge id="e361" source="org.codehaus.jparsec.pattern.PatternTest.testMany()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2783-3063;80-85;3-3/2783-3063;80-85;3-3];</data>
    </edge>
    <edge id="e362" source="org.codehaus.jparsec.pattern.PatternTest.testMany1()" target="org.codehaus.jparsec.pattern.Pattern.many1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3070-3362;87-92;3-3/3070-3362;87-92;3-3/3070-3362;87-92;3-3/3070-3362;87-92;3-3];</data>
    </edge>
    <edge id="e363" source="org.codehaus.jparsec.pattern.PatternTest.testMany1()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3070-3362;87-92;3-3/3070-3362;87-92;3-3];</data>
    </edge>
    <edge id="e364" source="org.codehaus.jparsec.pattern.PatternTest.testMany_throwsForNegativeMin()" target="org.codehaus.jparsec.pattern.Pattern.many(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3865-4056;104-111;3-3];</data>
    </edge>
    <edge id="e365" source="org.codehaus.jparsec.pattern.PatternTest.testMany_withMin()" target="org.codehaus.jparsec.pattern.Pattern.many(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3];</data>
    </edge>
    <edge id="e366" source="org.codehaus.jparsec.pattern.PatternTest.testMany_withMin()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[3369-3858;94-102;3-3/3369-3858;94-102;3-3/3369-3858;94-102;3-3];</data>
    </edge>
    <edge id="e367" source="org.codehaus.jparsec.pattern.PatternTest.testNext()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[431-685;18-22;3-3/431-685;18-22;3-3];</data>
    </edge>
    <edge id="e368" source="org.codehaus.jparsec.pattern.PatternTest.testNext()" target="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[431-685;18-22;3-3/431-685;18-22;3-3/431-685;18-22;3-3];</data>
    </edge>
    <edge id="e369" source="org.codehaus.jparsec.pattern.PatternTest.testNot()" target="org.codehaus.jparsec.pattern.Pattern.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[692-832;24-27;3-3/692-832;24-27;3-3];</data>
    </edge>
    <edge id="e370" source="org.codehaus.jparsec.pattern.PatternTest.testOptional()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1172-1389;36-40;3-3];</data>
    </edge>
    <edge id="e371" source="org.codehaus.jparsec.pattern.PatternTest.testOr()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[839-1165;29-34;3-3/839-1165;29-34;3-3/839-1165;29-34;3-3/839-1165;29-34;3-3];</data>
    </edge>
    <edge id="e372" source="org.codehaus.jparsec.pattern.PatternTest.testOr()" target="org.codehaus.jparsec.pattern.Pattern.or(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[839-1165;29-34;3-3/839-1165;29-34;3-3/839-1165;29-34;3-3/839-1165;29-34;3-3];</data>
    </edge>
    <edge id="e373" source="org.codehaus.jparsec.pattern.PatternTest.testPeek()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1396-1610;42-46;3-3];</data>
    </edge>
    <edge id="e374" source="org.codehaus.jparsec.pattern.PatternTest.testRepeat()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[1617-1997;48-54;3-3/1617-1997;48-54;3-3/1617-1997;48-54;3-3];</data>
    </edge>
    <edge id="e375" source="org.codehaus.jparsec.pattern.PatternTest.testRepeat_throwsForNegativeNumber()" target="org.codehaus.jparsec.pattern.Pattern.repeat(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[2004-2200;56-63;3-3];</data>
    </edge>
    <edge id="e376" source="org.codehaus.jparsec.pattern.PatternTest.testSome()" target="org.codehaus.jparsec.pattern.Pattern.some(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3];</data>
    </edge>
    <edge id="e377" source="org.codehaus.jparsec.pattern.PatternTest.testSome()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3/4063-4458;113-120;3-3];</data>
    </edge>
    <edge id="e378" source="org.codehaus.jparsec.pattern.PatternTest.testSome()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4063-4458;113-120;3-3/4063-4458;113-120;3-3];</data>
    </edge>
    <edge id="e379" source="org.codehaus.jparsec.pattern.PatternTest.testSome_throwsForNegativeMax()" target="org.codehaus.jparsec.pattern.Pattern.some(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4841-5032;130-137;3-3];</data>
    </edge>
    <edge id="e380" source="org.codehaus.jparsec.pattern.PatternTest.testSome_throwsForNegativeMinMax()" target="org.codehaus.jparsec.pattern.Pattern.some(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[5039-5382;139-152;3-3/5039-5382;139-152;3-3];</data>
    </edge>
    <edge id="e381" source="org.codehaus.jparsec.pattern.PatternTest.testSome_withMin()" target="org.codehaus.jparsec.pattern.Pattern.some(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3];</data>
    </edge>
    <edge id="e382" source="org.codehaus.jparsec.pattern.PatternTest.testSome_withMin()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3/4465-4834;122-128;3-3];</data>
    </edge>
    <edge id="e383" source="org.codehaus.jparsec.pattern.PatternTest.testSome_withMin()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternTest.java;[4465-4834;122-128;3-3/4465-4834;122-128;3-3];</data>
    </edge>
    <edge id="e384" source="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[22223-22605;624-632;3-3];</data>
    </edge>
    <edge id="e385" source="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20999-21316;585-594;3-3];</data>
    </edge>
    <edge id="e386" source="org.codehaus.jparsec.pattern.Patterns.among(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6965-7262;178-184;3-3];</data>
    </edge>
    <edge id="e387" source="org.codehaus.jparsec.pattern.Patterns.ifelse(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18947-19573;528-542;3-3/18947-19573;528-542;3-3/18947-19573;528-542;3-3];</data>
    </edge>
    <edge id="e388" source="org.codehaus.jparsec.pattern.Patterns.isChar(char)" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6345-6645;162-168;3-3];</data>
    </edge>
    <edge id="e389" source="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7795-8088;200-206;3-3];</data>
    </edge>
    <edge id="e390" source="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)" target="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7795-8088;200-206;3-3];</data>
    </edge>
    <edge id="e391" source="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[7795-8088;200-206;3-3];</data>
    </edge>
    <edge id="e392" source="org.codehaus.jparsec.pattern.Patterns.longer(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.longest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17173-17450;475-481;3-3];</data>
    </edge>
    <edge id="e393" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$18.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14234-14497;389-393;7-7];</data>
    </edge>
    <edge id="e394" source="org.codehaus.jparsec.pattern.Patterns$18.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14234-14497;389-393;7-7];</data>
    </edge>
    <edge id="e395" source="org.codehaus.jparsec.pattern.Patterns$18.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14234-14497;389-393;7-7];</data>
    </edge>
    <edge id="e396" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.util.Checks.checkMin(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13941-14508;382-395;3-3];</data>
    </edge>
    <edge id="e397" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13941-14508;382-395;3-3];</data>
    </edge>
    <edge id="e398" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13941-14508;382-395;3-3];</data>
    </edge>
    <edge id="e399" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.util.Checks.checkMin(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14863-15252;408-417;3-3];</data>
    </edge>
    <edge id="e400" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14863-15252;408-417;3-3];</data>
    </edge>
    <edge id="e401" source="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14863-15252;408-417;3-3];</data>
    </edge>
    <edge id="e402" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$19.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14715-14845;402-404;7-7];</data>
    </edge>
    <edge id="e403" source="org.codehaus.jparsec.pattern.Patterns$19.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14715-14845;402-404;7-7];</data>
    </edge>
    <edge id="e404" source="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[14515-14856;397-406;3-3];</data>
    </edge>
    <edge id="e405" source="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchMany(org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15257-15474;419-425;3-3];</data>
    </edge>
    <edge id="e406" source="org.codehaus.jparsec.pattern.Patterns.many1(org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[19580-19767;544-547;3-3];</data>
    </edge>
    <edge id="e407" source="org.codehaus.jparsec.pattern.Patterns.not(org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[10805-11066;286-293;3-3];</data>
    </edge>
    <edge id="e408" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$9.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9033-9269;232-237;7-7];</data>
    </edge>
    <edge id="e409" source="org.codehaus.jparsec.pattern.Patterns$9.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchString(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9033-9269;232-237;7-7];</data>
    </edge>
    <edge id="e410" source="org.codehaus.jparsec.pattern.Patterns.notString(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.matchString(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8754-9280;226-239;3-3];</data>
    </edge>
    <edge id="e411" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$10.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9600-9851;247-252;7-7];</data>
    </edge>
    <edge id="e412" source="org.codehaus.jparsec.pattern.Patterns$10.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchStringCaseInsensitive(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9600-9851;247-252;7-7];</data>
    </edge>
    <edge id="e413" source="org.codehaus.jparsec.pattern.Patterns.notStringCaseInsensitive(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.matchStringCaseInsensitive(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[9287-9862;241-254;3-3];</data>
    </edge>
    <edge id="e414" source="org.codehaus.jparsec.pattern.Patterns.range(char,char)" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6652-6958;170-176;3-3];</data>
    </edge>
    <edge id="e415" source="org.codehaus.jparsec.pattern.Patterns.range(char,char)" target="org.codehaus.jparsec.pattern.CharPredicates.range(char,char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[6652-6958;170-176;3-3];</data>
    </edge>
    <edge id="e416" source="org.codehaus.jparsec.pattern.Patterns.regex(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.regex(java.util.regex.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[20232-20402;561-564;3-3];</data>
    </edge>
    <edge id="e417" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$16.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13376-13511;363-365;7-7];</data>
    </edge>
    <edge id="e418" source="org.codehaus.jparsec.pattern.Patterns$16.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13376-13511;363-365;7-7];</data>
    </edge>
    <edge id="e419" source="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13046-13522;356-367;3-3];</data>
    </edge>
    <edge id="e420" source="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13046-13522;356-367;3-3];</data>
    </edge>
    <edge id="e421" source="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[13529-13934;369-380;3-3];</data>
    </edge>
    <edge id="e422" source="org.codehaus.jparsec.pattern.Patterns.sequence(org.codehaus.jparsec.pattern.Pattern[])" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[12442-13041;338-354;3-3];</data>
    </edge>
    <edge id="e423" source="org.codehaus.jparsec.pattern.Patterns.shorter(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.shortest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[18012-18292;500-506;3-3];</data>
    </edge>
    <edge id="e424" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$22.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15793-16067;434-438;7-7];</data>
    </edge>
    <edge id="e425" source="org.codehaus.jparsec.pattern.Patterns$22.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15793-16067;434-438;7-7];</data>
    </edge>
    <edge id="e426" source="org.codehaus.jparsec.pattern.Patterns$22.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15793-16067;434-438;7-7];</data>
    </edge>
    <edge id="e427" source="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15481-16078;427-440;3-3];</data>
    </edge>
    <edge id="e428" source="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[15481-16078;427-440;3-3];</data>
    </edge>
    <edge id="e429" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$24.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16637-16897;458-462;7-7];</data>
    </edge>
    <edge id="e430" source="org.codehaus.jparsec.pattern.Patterns$24.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16637-16897;458-462;7-7];</data>
    </edge>
    <edge id="e431" source="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16500-16908;455-464;3-3];</data>
    </edge>
    <edge id="e432" source="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchRepeat(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16500-16908;455-464;3-3];</data>
    </edge>
    <edge id="e433" source="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16500-16908;455-464;3-3];</data>
    </edge>
    <edge id="e434" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$23.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16349-16484;449-451;7-7];</data>
    </edge>
    <edge id="e435" source="org.codehaus.jparsec.pattern.Patterns$23.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16349-16484;449-451;7-7];</data>
    </edge>
    <edge id="e436" source="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.util.Checks.checkMax(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16085-16495;442-453;3-3];</data>
    </edge>
    <edge id="e437" source="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.CharPredicate,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16085-16495;442-453;3-3];</data>
    </edge>
    <edge id="e438" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$25.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17027-17155;469-471;7-7];</data>
    </edge>
    <edge id="e439" source="org.codehaus.jparsec.pattern.Patterns$25.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[17027-17155;469-471;7-7];</data>
    </edge>
    <edge id="e440" source="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.util.Checks.checkMax(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16913-17166;466-473;3-3];</data>
    </edge>
    <edge id="e441" source="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.matchSome(int,org.codehaus.jparsec.pattern.Pattern,java.lang.CharSequence,int,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[16913-17166;466-473;3-3];</data>
    </edge>
    <edge id="e442" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$7.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8261-8387;211-213;7-7];</data>
    </edge>
    <edge id="e443" source="org.codehaus.jparsec.pattern.Patterns$7.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchString(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8261-8387;211-213;7-7];</data>
    </edge>
    <edge id="e444" source="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.matchString(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8095-8398;208-215;3-3];</data>
    </edge>
    <edge id="e445" source="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns$8.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8595-8736;220-222;7-7];</data>
    </edge>
    <edge id="e446" source="org.codehaus.jparsec.pattern.Patterns$8.match(java.lang.CharSequence,int,int)" target="org.codehaus.jparsec.pattern.Patterns.matchStringCaseInsensitive(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8595-8736;220-222;7-7];</data>
    </edge>
    <edge id="e447" source="org.codehaus.jparsec.pattern.Patterns.stringCaseInsensitive(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.matchStringCaseInsensitive(java.lang.String,java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/pattern/Patterns.java;[8405-8747;217-224;3-3];</data>
    </edge>
    <edge id="e448" source="org.codehaus.jparsec.pattern.PatternsTest.testAmong()" target="org.codehaus.jparsec.pattern.Patterns.among(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[3439-3815;85-93;3-3];</data>
    </edge>
    <edge id="e449" source="org.codehaus.jparsec.pattern.PatternsTest.testAnd()" target="org.codehaus.jparsec.pattern.Patterns.and(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3];</data>
    </edge>
    <edge id="e450" source="org.codehaus.jparsec.pattern.PatternsTest.testAnd()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3/6244-6682;142-149;3-3];</data>
    </edge>
    <edge id="e451" source="org.codehaus.jparsec.pattern.PatternsTest.testDecInteger()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[15289-15577;348-353;3-3/15289-15577;348-353;3-3/15289-15577;348-353;3-3/15289-15577;348-353;3-3];</data>
    </edge>
    <edge id="e452" source="org.codehaus.jparsec.pattern.PatternsTest.testDecimal()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[13952-14279;316-322;3-3/13952-14279;316-322;3-3/13952-14279;316-322;3-3/13952-14279;316-322;3-3/13952-14279;316-322;3-3];</data>
    </edge>
    <edge id="e453" source="org.codehaus.jparsec.pattern.PatternsTest.testDecimalL()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[12957-13467;296-304;3-3/12957-13467;296-304;3-3/12957-13467;296-304;3-3/12957-13467;296-304;3-3/12957-13467;296-304;3-3/12957-13467;296-304;3-3/12957-13467;296-304;3-3];</data>
    </edge>
    <edge id="e454" source="org.codehaus.jparsec.pattern.PatternsTest.testDecimalR()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[13474-13945;306-314;3-3/13474-13945;306-314;3-3/13474-13945;306-314;3-3/13474-13945;306-314;3-3/13474-13945;306-314;3-3/13474-13945;306-314;3-3/13474-13945;306-314;3-3];</data>
    </edge>
    <edge id="e455" source="org.codehaus.jparsec.pattern.PatternsTest.testHasAtLeast()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[1073-1493;35-42;3-3/1073-1493;35-42;3-3/1073-1493;35-42;3-3/1073-1493;35-42;3-3/1073-1493;35-42;3-3/1073-1493;35-42;3-3];</data>
    </edge>
    <edge id="e456" source="org.codehaus.jparsec.pattern.PatternsTest.testHexInteger()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[15584-16009;355-362;3-3/15584-16009;355-362;3-3/15584-16009;355-362;3-3/15584-16009;355-362;3-3/15584-16009;355-362;3-3/15584-16009;355-362;3-3];</data>
    </edge>
    <edge id="e457" source="org.codehaus.jparsec.pattern.PatternsTest.testInteger()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[14656-14925;333-338;3-3/14656-14925;333-338;3-3/14656-14925;333-338;3-3/14656-14925;333-338;3-3];</data>
    </edge>
    <edge id="e458" source="org.codehaus.jparsec.pattern.PatternsTest.testIsChar()" target="org.codehaus.jparsec.pattern.Patterns.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2045-2330;58-63;3-3/2045-2330;58-63;3-3/2045-2330;58-63;3-3/2045-2330;58-63;3-3];</data>
    </edge>
    <edge id="e459" source="org.codehaus.jparsec.pattern.PatternsTest.testIsChar_withPredicate()" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2337-2790;65-71;3-3/2337-2790;65-71;3-3/2337-2790;65-71;3-3/2337-2790;65-71;3-3/2337-2790;65-71;3-3];</data>
    </edge>
    <edge id="e460" source="org.codehaus.jparsec.pattern.PatternsTest.testLineComment()" target="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3];</data>
    </edge>
    <edge id="e461" source="org.codehaus.jparsec.pattern.PatternsTest.testLineComment()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3/4171-4577;103-109;3-3];</data>
    </edge>
    <edge id="e462" source="org.codehaus.jparsec.pattern.PatternsTest.testLonger()" target="org.codehaus.jparsec.pattern.Patterns.longer(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10898-11424;258-266;3-3/10898-11424;258-266;3-3/10898-11424;258-266;3-3/10898-11424;258-266;3-3/10898-11424;258-266;3-3/10898-11424;258-266;3-3];</data>
    </edge>
    <edge id="e463" source="org.codehaus.jparsec.pattern.PatternsTest.testLonger()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10898-11424;258-266;3-3/10898-11424;258-266;3-3/10898-11424;258-266;3-3];</data>
    </edge>
    <edge id="e464" source="org.codehaus.jparsec.pattern.PatternsTest.testLongest()" target="org.codehaus.jparsec.pattern.Patterns.longest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11431-11914;268-275;3-3/11431-11914;268-275;3-3/11431-11914;268-275;3-3/11431-11914;268-275;3-3/11431-11914;268-275;3-3];</data>
    </edge>
    <edge id="e465" source="org.codehaus.jparsec.pattern.PatternsTest.testLongest()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11431-11914;268-275;3-3/11431-11914;268-275;3-3];</data>
    </edge>
    <edge id="e466" source="org.codehaus.jparsec.pattern.PatternsTest.testMany()" target="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8068-8325;182-186;3-3/8068-8325;182-186;3-3/8068-8325;182-186;3-3];</data>
    </edge>
    <edge id="e467" source="org.codehaus.jparsec.pattern.PatternsTest.testMany()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8068-8325;182-186;3-3/8068-8325;182-186;3-3/8068-8325;182-186;3-3];</data>
    </edge>
    <edge id="e468" source="org.codehaus.jparsec.pattern.PatternsTest.testMany1()" target="org.codehaus.jparsec.pattern.Patterns.many1(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8332-8693;188-193;3-3/8332-8693;188-193;3-3/8332-8693;188-193;3-3/8332-8693;188-193;3-3];</data>
    </edge>
    <edge id="e469" source="org.codehaus.jparsec.pattern.PatternsTest.testMany1()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8332-8693;188-193;3-3/8332-8693;188-193;3-3/8332-8693;188-193;3-3/8332-8693;188-193;3-3];</data>
    </edge>
    <edge id="e470" source="org.codehaus.jparsec.pattern.PatternsTest.testMany_negativeNumberThrows()" target="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9083-9299;202-209;3-3];</data>
    </edge>
    <edge id="e471" source="org.codehaus.jparsec.pattern.PatternsTest.testMany_withMin()" target="org.codehaus.jparsec.pattern.Patterns.many(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8700-9076;195-200;3-3/8700-9076;195-200;3-3/8700-9076;195-200;3-3/8700-9076;195-200;3-3];</data>
    </edge>
    <edge id="e472" source="org.codehaus.jparsec.pattern.PatternsTest.testMany_withMin()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[8700-9076;195-200;3-3/8700-9076;195-200;3-3/8700-9076;195-200;3-3/8700-9076;195-200;3-3];</data>
    </edge>
    <edge id="e473" source="org.codehaus.jparsec.pattern.PatternsTest.testNotString()" target="org.codehaus.jparsec.pattern.Patterns.notString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5430-5749;127-132;3-3/5430-5749;127-132;3-3/5430-5749;127-132;3-3/5430-5749;127-132;3-3];</data>
    </edge>
    <edge id="e474" source="org.codehaus.jparsec.pattern.PatternsTest.testNotString()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5430-5749;127-132;3-3/5430-5749;127-132;3-3/5430-5749;127-132;3-3/5430-5749;127-132;3-3];</data>
    </edge>
    <edge id="e475" source="org.codehaus.jparsec.pattern.PatternsTest.testNotStringCaseInsensitive()" target="org.codehaus.jparsec.pattern.Patterns.notStringCaseInsensitive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3];</data>
    </edge>
    <edge id="e476" source="org.codehaus.jparsec.pattern.PatternsTest.testNotStringCaseInsensitive()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3/5756-6237;134-140;3-3];</data>
    </edge>
    <edge id="e477" source="org.codehaus.jparsec.pattern.PatternsTest.testOctInteger()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[14932-15282;340-346;3-3/14932-15282;340-346;3-3/14932-15282;340-346;3-3/14932-15282;340-346;3-3/14932-15282;340-346;3-3];</data>
    </edge>
    <edge id="e478" source="org.codehaus.jparsec.pattern.PatternsTest.testOr()" target="org.codehaus.jparsec.pattern.Patterns.or(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3];</data>
    </edge>
    <edge id="e479" source="org.codehaus.jparsec.pattern.PatternsTest.testOr()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3/6689-7166;151-157;3-3];</data>
    </edge>
    <edge id="e480" source="org.codehaus.jparsec.pattern.PatternsTest.testRange()" target="org.codehaus.jparsec.pattern.Patterns.range(char,char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3/2797-3432;73-83;3-3];</data>
    </edge>
    <edge id="e481" source="org.codehaus.jparsec.pattern.PatternsTest.testRegex()" target="org.codehaus.jparsec.pattern.Patterns.regex(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[16638-17058;378-385;3-3/16638-17058;378-385;3-3/16638-17058;378-385;3-3/16638-17058;378-385;3-3/16638-17058;378-385;3-3/16638-17058;378-385;3-3];</data>
    </edge>
    <edge id="e482" source="org.codehaus.jparsec.pattern.PatternsTest.testRepeat()" target="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7545-7836;167-171;3-3/7545-7836;167-171;3-3/7545-7836;167-171;3-3];</data>
    </edge>
    <edge id="e483" source="org.codehaus.jparsec.pattern.PatternsTest.testRepeat()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7545-7836;167-171;3-3/7545-7836;167-171;3-3/7545-7836;167-171;3-3];</data>
    </edge>
    <edge id="e484" source="org.codehaus.jparsec.pattern.PatternsTest.testRepeat_negativeNumberThrows()" target="org.codehaus.jparsec.pattern.Patterns.repeat(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7843-8061;173-180;3-3];</data>
    </edge>
    <edge id="e485" source="org.codehaus.jparsec.pattern.PatternsTest.testScientificNumber()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3/16016-16631;364-376;3-3];</data>
    </edge>
    <edge id="e486" source="org.codehaus.jparsec.pattern.PatternsTest.testSequence()" target="org.codehaus.jparsec.pattern.Patterns.sequence(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7173-7538;159-165;3-3/7173-7538;159-165;3-3/7173-7538;159-165;3-3];</data>
    </edge>
    <edge id="e487" source="org.codehaus.jparsec.pattern.PatternsTest.testSequence()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[7173-7538;159-165;3-3/7173-7538;159-165;3-3/7173-7538;159-165;3-3/7173-7538;159-165;3-3/7173-7538;159-165;3-3];</data>
    </edge>
    <edge id="e488" source="org.codehaus.jparsec.pattern.PatternsTest.testShorter()" target="org.codehaus.jparsec.pattern.Patterns.shorter(org.codehaus.jparsec.pattern.Pattern,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11921-12454;277-285;3-3/11921-12454;277-285;3-3/11921-12454;277-285;3-3/11921-12454;277-285;3-3/11921-12454;277-285;3-3/11921-12454;277-285;3-3];</data>
    </edge>
    <edge id="e489" source="org.codehaus.jparsec.pattern.PatternsTest.testShorter()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[11921-12454;277-285;3-3/11921-12454;277-285;3-3/11921-12454;277-285;3-3];</data>
    </edge>
    <edge id="e490" source="org.codehaus.jparsec.pattern.PatternsTest.testShortest()" target="org.codehaus.jparsec.pattern.Patterns.shortest(org.codehaus.jparsec.pattern.Pattern[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[12461-12950;287-294;3-3/12461-12950;287-294;3-3/12461-12950;287-294;3-3/12461-12950;287-294;3-3/12461-12950;287-294;3-3];</data>
    </edge>
    <edge id="e491" source="org.codehaus.jparsec.pattern.PatternsTest.testShortest()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[12461-12950;287-294;3-3/12461-12950;287-294;3-3];</data>
    </edge>
    <edge id="e492" source="org.codehaus.jparsec.pattern.PatternsTest.testSome()" target="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9306-9653;211-216;3-3/9306-9653;211-216;3-3/9306-9653;211-216;3-3/9306-9653;211-216;3-3];</data>
    </edge>
    <edge id="e493" source="org.codehaus.jparsec.pattern.PatternsTest.testSome()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9306-9653;211-216;3-3/9306-9653;211-216;3-3/9306-9653;211-216;3-3/9306-9653;211-216;3-3];</data>
    </edge>
    <edge id="e494" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_minBiggerThanMaxThrows()" target="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10669-10891;249-256;3-3];</data>
    </edge>
    <edge id="e495" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_negativeMaxThrows()" target="org.codehaus.jparsec.pattern.Patterns.some(int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10055-10439;225-238;3-3];</data>
    </edge>
    <edge id="e496" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_negativeMaxThrows()" target="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10055-10439;225-238;3-3];</data>
    </edge>
    <edge id="e497" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_negativeMinThrows()" target="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[10446-10662;240-247;3-3];</data>
    </edge>
    <edge id="e498" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_withMin()" target="org.codehaus.jparsec.pattern.Patterns.some(int,int,org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9660-10048;218-223;3-3/9660-10048;218-223;3-3/9660-10048;218-223;3-3/9660-10048;218-223;3-3];</data>
    </edge>
    <edge id="e499" source="org.codehaus.jparsec.pattern.PatternsTest.testSome_withMin()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[9660-10048;218-223;3-3/9660-10048;218-223;3-3/9660-10048;218-223;3-3/9660-10048;218-223;3-3];</data>
    </edge>
    <edge id="e500" source="org.codehaus.jparsec.pattern.PatternsTest.testString()" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4584-4882;111-116;3-3/4584-4882;111-116;3-3/4584-4882;111-116;3-3/4584-4882;111-116;3-3];</data>
    </edge>
    <edge id="e501" source="org.codehaus.jparsec.pattern.PatternsTest.testString()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4584-4882;111-116;3-3/4584-4882;111-116;3-3/4584-4882;111-116;3-3/4584-4882;111-116;3-3];</data>
    </edge>
    <edge id="e502" source="org.codehaus.jparsec.pattern.PatternsTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.pattern.Patterns.stringCaseInsensitive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3];</data>
    </edge>
    <edge id="e503" source="org.codehaus.jparsec.pattern.PatternsTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/pattern/PatternsTest.java;[4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3/4889-5423;118-125;3-3];</data>
    </edge>
    <edge id="e504" source="org.codehaus.jparsec.util.Checks.checkMax(int)" target="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3248-3391;80-84;3-3];</data>
    </edge>
    <edge id="e505" source="org.codehaus.jparsec.util.Checks.checkMin(int)" target="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3100-3243;74-78;3-3];</data>
    </edge>
    <edge id="e506" source="org.codehaus.jparsec.util.Checks.checkNonNegative(int,java.lang.String)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[3398-3638;86-93;3-3];</data>
    </edge>
    <edge id="e507" source="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)" target="org.codehaus.jparsec.util.Checks.checkMin(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[2865-3095;67-72;3-3];</data>
    </edge>
    <edge id="e508" source="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)" target="org.codehaus.jparsec.util.Checks.checkMax(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[2865-3095;67-72;3-3];</data>
    </edge>
    <edge id="e509" source="org.codehaus.jparsec.util.Checks.checkMinMax(int,int)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Checks.java;[2865-3095;67-72;3-3];</data>
    </edge>
    <edge id="e510" source="org.codehaus.jparsec.util.ChecksTest.testCheckArgument_throwsIfConditionIsFalse()" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ChecksTest.java;[454-685;20-27;3-3];</data>
    </edge>
    <edge id="e511" source="org.codehaus.jparsec.util.IntList.get(int)" target="org.codehaus.jparsec.util.IntList.checkIndex(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2131-2410;60-69;3-3];</data>
    </edge>
    <edge id="e512" source="org.codehaus.jparsec.util.IntList.set(int,int)" target="org.codehaus.jparsec.util.IntList.checkIndex(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2417-2774;71-84;3-3];</data>
    </edge>
    <edge id="e513" source="org.codehaus.jparsec.util.IntList.add(int)" target="org.codehaus.jparsec.util.IntList.ensureCapacity(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[3422-3627;111-121;3-3];</data>
    </edge>
    <edge id="e514" source="org.codehaus.jparsec.util.IntList.ensureCapacity(int)" target="org.codehaus.jparsec.util.IntList.grow(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2956-3249;91-101;3-3];</data>
    </edge>
    <edge id="e515" source="org.codehaus.jparsec.util.IntList.ensureCapacity(int)" target="org.codehaus.jparsec.util.IntList.calcSize(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/IntList.java;[2956-3249;91-101;3-3];</data>
    </edge>
    <edge id="e516" source="org.codehaus.jparsec.util.IntListTest.testCalcSize()" target="org.codehaus.jparsec.util.IntList.calcSize(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[183-439;12-18;3-3/183-439;12-18;3-3/183-439;12-18;3-3/183-439;12-18;3-3/183-439;12-18;3-3];</data>
    </edge>
    <edge id="e517" source="org.codehaus.jparsec.util.IntListTest.testEnsureCapacity()" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1756-1965;71-77;3-3];</data>
    </edge>
    <edge id="e518" source="org.codehaus.jparsec.util.IntListTest.testEnsureCapacity()" target="org.codehaus.jparsec.util.IntList.ensureCapacity(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1756-1965;71-77;3-3];</data>
    </edge>
    <edge id="e519" source="org.codehaus.jparsec.util.IntListTest.testEnsureCapacity()" target="org.codehaus.jparsec.util.IntList.toArray()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1756-1965;71-77;3-3];</data>
    </edge>
    <edge id="e520" source="org.codehaus.jparsec.util.IntListTest.testGet()" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[934-1172;38-45;3-3];</data>
    </edge>
    <edge id="e521" source="org.codehaus.jparsec.util.IntListTest.testGet()" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[934-1172;38-45;3-3];</data>
    </edge>
    <edge id="e522" source="org.codehaus.jparsec.util.IntListTest.testGet()" target="org.codehaus.jparsec.util.IntList.toArray()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[934-1172;38-45;3-3];</data>
    </edge>
    <edge id="e523" source="org.codehaus.jparsec.util.IntListTest.testGet_throwsForIndexOutOfBounds()" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1369-1554;55-61;3-3];</data>
    </edge>
    <edge id="e524" source="org.codehaus.jparsec.util.IntListTest.testSet()" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1561-1749;63-69;3-3];</data>
    </edge>
    <edge id="e525" source="org.codehaus.jparsec.util.IntListTest.testSet()" target="org.codehaus.jparsec.util.IntList.set(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1561-1749;63-69;3-3];</data>
    </edge>
    <edge id="e526" source="org.codehaus.jparsec.util.IntListTest.testSet()" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1561-1749;63-69;3-3];</data>
    </edge>
    <edge id="e527" source="org.codehaus.jparsec.util.IntListTest.testSet()" target="org.codehaus.jparsec.util.IntList.toArray()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[1561-1749;63-69;3-3];</data>
    </edge>
    <edge id="e528" source="org.codehaus.jparsec.util.IntListTest.testSet_throwsForIndexOutOfBounds()" target="org.codehaus.jparsec.util.IntList.set(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[2165-2353;87-93;3-3];</data>
    </edge>
    <edge id="e529" source="org.codehaus.jparsec.util.IntListTest.testToArray()" target="org.codehaus.jparsec.util.IntList.toArray()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[690-927;30-36;3-3/690-927;30-36;3-3];</data>
    </edge>
    <edge id="e530" source="org.codehaus.jparsec.util.IntListTest.testToArray()" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/IntListTest.java;[690-927;30-36;3-3/690-927;30-36;3-3];</data>
    </edge>
    <edge id="e531" source="org.codehaus.jparsec.util.ObjectsTest.testIn()" target="org.codehaus.jparsec.util.Objects.in(java.lang.Object,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/ObjectsTest.java;[527-649;24-27;3-3/527-649;24-27;3-3];</data>
    </edge>
    <edge id="e532" source="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])" target="org.codehaus.jparsec.util.Strings.join(java.lang.StringBuilder,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/util/Strings.java;[1334-1636;25-30;3-3];</data>
    </edge>
    <edge id="e533" source="org.codehaus.jparsec.util.StringsTest.testJoin()" target="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/StringsTest.java;[189-399;12-16;3-3/189-399;12-16;3-3/189-399;12-16;3-3];</data>
    </edge>
    <edge id="e534" source="org.codehaus.jparsec.util.StringsTest.testJoin_withStringBuilder()" target="org.codehaus.jparsec.util.Strings.join(java.lang.StringBuilder,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/util/StringsTest.java;[406-730;18-22;3-3/406-730;18-22;3-3/406-730;18-22;3-3];</data>
    </edge>
    <edge id="e535" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.AnyCharScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AnyCharScanner.java;[1421-1603;30-38;3-3];</data>
    </edge>
    <edge id="e536" source="org.codehaus.jparsec.AnyCharScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AnyCharScanner.java;[1421-1603;30-38;3-3];</data>
    </edge>
    <edge id="e537" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ArrayParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ArrayParser.java;[1508-1814;30-39;3-3];</data>
    </edge>
    <edge id="e538" source="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[377-668;21-29;3-3];</data>
    </edge>
    <edge id="e539" source="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.Class)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1581-1963;57-67;3-3];</data>
    </edge>
    <edge id="e540" source="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[675-1073;31-41;3-3];</data>
    </edge>
    <edge id="e541" source="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1080-1574;43-55;3-3];</data>
    </edge>
    <edge id="e542" source="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[1970-2100;69-71;3-3];</data>
    </edge>
    <edge id="e543" source="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2107-2293;73-76;3-3];</data>
    </edge>
    <edge id="e544" source="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2107-2293;73-76;3-3];</data>
    </edge>
    <edge id="e545" source="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2107-2293;73-76;3-3];</data>
    </edge>
    <edge id="e546" source="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2621-2727;86-88;3-3];</data>
    </edge>
    <edge id="e547" source="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2451-2614;82-84;3-3];</data>
    </edge>
    <edge id="e548" source="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2451-2614;82-84;3-3];</data>
    </edge>
    <edge id="e549" source="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2451-2614;82-84;3-3];</data>
    </edge>
    <edge id="e550" source="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2981-3105;95-97;3-3];</data>
    </edge>
    <edge id="e551" source="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2734-2974;90-93;3-3];</data>
    </edge>
    <edge id="e552" source="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2734-2974;90-93;3-3];</data>
    </edge>
    <edge id="e553" source="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/Asserts.java;[2734-2974;90-93;3-3];</data>
    </edge>
    <edge id="e554" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.AtomicParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/AtomicParser.java;[1348-1550;25-32;3-3];</data>
    </edge>
    <edge id="e555" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.BestParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BestParser.java;[1465-1961;28-42;3-3];</data>
    </edge>
    <edge id="e556" source="org.codehaus.jparsec.BestParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.runForBestFit(org.codehaus.jparsec.IntOrder,org.codehaus.jparsec.Parser[],int,org.codehaus.jparsec.ParseContext,java.lang.Object,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BestParser.java;[1465-1961;28-42;3-3];</data>
    </edge>
    <edge id="e557" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.BindNextParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BindNextParser.java;[1800-1933;36-40;3-3];</data>
    </edge>
    <edge id="e558" source="org.codehaus.jparsec.BindNextParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Parsers.runNext(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/BindNextParser.java;[1800-1933;36-40;3-3];</data>
    </edge>
    <edge id="e559" source="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2350-2929;54-68;3-3];</data>
    </edge>
    <edge id="e560" source="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakColumnIndex(int)" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[4653-5003;114-122;3-3/4653-5003;114-122;3-3];</data>
    </edge>
    <edge id="e561" source="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakLocation(int)" target="org.codehaus.jparsec.DefaultSourceLocator.location(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5010-5135;124-126;3-3];</data>
    </edge>
    <edge id="e562" source="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakLocation(int)" target="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakColumnIndex(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5010-5135;124-126;3-3];</data>
    </edge>
    <edge id="e563" source="org.codehaus.jparsec.SourceLocator.locate(int)" target="org.codehaus.jparsec.DefaultSourceLocator.locate(int)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5277-5379;132-134;3-3];</data>
    </edge>
    <edge id="e564" source="org.codehaus.jparsec.DefaultSourceLocator.locate(int)" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5277-5379;132-134;3-3];</data>
    </edge>
    <edge id="e565" source="org.codehaus.jparsec.DefaultSourceLocator.locate(int)" target="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[5277-5379;132-134;3-3];</data>
    </edge>
    <edge id="e566" source="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)" target="org.codehaus.jparsec.DefaultSourceLocator.location(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2936-3501;70-81;3-3/2936-3501;70-81;3-3/2936-3501;70-81;3-3];</data>
    </edge>
    <edge id="e567" source="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2936-3501;70-81;3-3];</data>
    </edge>
    <edge id="e568" source="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)" target="org.codehaus.jparsec.util.IntList.get(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[2936-3501;70-81;3-3];</data>
    </edge>
    <edge id="e569" source="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[3508-4646;83-112;3-3];</data>
    </edge>
    <edge id="e570" source="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)" target="org.codehaus.jparsec.DefaultSourceLocator.location(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[3508-4646;83-112;3-3/3508-4646;83-112;3-3];</data>
    </edge>
    <edge id="e571" source="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)" target="org.codehaus.jparsec.DefaultSourceLocator.getLineBreakLocation(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DefaultSourceLocator.java;[3508-4646;83-112;3-3];</data>
    </edge>
    <edge id="e572" source="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5868-6026;168-174;3-3];</data>
    </edge>
    <edge id="e573" source="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])" target="org.codehaus.jparsec.util.IntList.add(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5711-5861;162-166;3-3];</data>
    </edge>
    <edge id="e574" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_allSmaller()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1750-1874;54-56;3-3];</data>
    </edge>
    <edge id="e575" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_allSmaller()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1750-1874;54-56;3-3];</data>
    </edge>
    <edge id="e576" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1052-1185;34-36;3-3];</data>
    </edge>
    <edge id="e577" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1052-1185;34-36;3-3];</data>
    </edge>
    <edge id="e578" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[913-1045;30-32;3-3];</data>
    </edge>
    <edge id="e579" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_firstElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[913-1045;30-32;3-3];</data>
    </edge>
    <edge id="e580" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1611-1743;50-52;3-3];</data>
    </edge>
    <edge id="e581" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1611-1743;50-52;3-3];</data>
    </edge>
    <edge id="e582" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1473-1604;46-48;3-3];</data>
    </edge>
    <edge id="e583" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_lastElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1473-1604;46-48;3-3];</data>
    </edge>
    <edge id="e584" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_noElement()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2271-2386;70-72;3-3];</data>
    </edge>
    <edge id="e585" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneBiggerElement()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2010-2133;62-64;3-3];</data>
    </edge>
    <edge id="e586" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneBiggerElement()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2010-2133;62-64;3-3];</data>
    </edge>
    <edge id="e587" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneEqualElement()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1881-2003;58-60;3-3];</data>
    </edge>
    <edge id="e588" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneEqualElement()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1881-2003;58-60;3-3];</data>
    </edge>
    <edge id="e589" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneSmallerElement()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2140-2264;66-68;3-3];</data>
    </edge>
    <edge id="e590" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_oneSmallerElement()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2140-2264;66-68;3-3];</data>
    </edge>
    <edge id="e591" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1332-1466;42-44;3-3];</data>
    </edge>
    <edge id="e592" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsBigger()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1332-1466;42-44;3-3];</data>
    </edge>
    <edge id="e593" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocator.binarySearch(org.codehaus.jparsec.util.IntList,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1192-1325;38-40;3-3];</data>
    </edge>
    <edge id="e594" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testBinarySearch_secondElementIsEqual()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.intList(int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[1192-1325;38-40;3-3];</data>
    </edge>
    <edge id="e595" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate()" target="org.codehaus.jparsec.DefaultSourceLocator.locate(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5453-5704;156-160;3-3/5453-5704;156-160;3-3];</data>
    </edge>
    <edge id="e596" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate_emptySource()" target="org.codehaus.jparsec.DefaultSourceLocator.locate(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[662-906;23-28;3-3/662-906;23-28;3-3];</data>
    </edge>
    <edge id="e597" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLocate_onlyOneLineBreakCharacter()" target="org.codehaus.jparsec.DefaultSourceLocator.locate(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[338-655;15-21;3-3/338-655;15-21;3-3/338-655;15-21;3-3];</data>
    </edge>
    <edge id="e598" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInLastLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3950-4172;115-119;3-3];</data>
    </edge>
    <edge id="e599" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInLastLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3950-4172;115-119;3-3];</data>
    </edge>
    <edge id="e600" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInSecondLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3030-3254;91-95;3-3];</data>
    </edge>
    <edge id="e601" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInSecondLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3030-3254;91-95;3-3];</data>
    </edge>
    <edge id="e602" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInThirdLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3491-3714;103-107;3-3];</data>
    </edge>
    <edge id="e603" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstCharInThirdLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3491-3714;103-107;3-3];</data>
    </edge>
    <edge id="e604" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstLineBreak()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2806-3023;85-89;3-3];</data>
    </edge>
    <edge id="e605" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_firstLineBreak()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2806-3023;85-89;3-3];</data>
    </edge>
    <edge id="e606" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_inFirstLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2585-2799;79-83;3-3];</data>
    </edge>
    <edge id="e607" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_inFirstLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2585-2799;79-83;3-3];</data>
    </edge>
    <edge id="e608" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInSecondLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3261-3484;97-101;3-3];</data>
    </edge>
    <edge id="e609" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInSecondLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3261-3484;97-101;3-3];</data>
    </edge>
    <edge id="e610" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInThirdLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3721-3943;109-113;3-3];</data>
    </edge>
    <edge id="e611" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_lastCharInThirdLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[3721-3943;109-113;3-3];</data>
    </edge>
    <edge id="e612" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_noLineBreaksScanned()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[2393-2578;74-77;3-3];</data>
    </edge>
    <edge id="e613" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_secondCharInLastLine()" target="org.codehaus.jparsec.DefaultSourceLocatorTest.addLineBreaks(org.codehaus.jparsec.DefaultSourceLocator,int[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4179-4402;121-125;3-3];</data>
    </edge>
    <edge id="e614" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testLookup_secondCharInLastLine()" target="org.codehaus.jparsec.DefaultSourceLocator.lookup(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4179-4402;121-125;3-3];</data>
    </edge>
    <edge id="e615" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_indexOnEof()" target="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4643-4900;135-140;3-3];</data>
    </edge>
    <edge id="e616" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_indexOutOfBounds()" target="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4409-4636;127-133;3-3];</data>
    </edge>
    <edge id="e617" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_lastCharOfLine()" target="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[5178-5446;149-154;3-3];</data>
    </edge>
    <edge id="e618" source="org.codehaus.jparsec.DefaultSourceLocatorTest.testScanTo_spansLines()" target="org.codehaus.jparsec.DefaultSourceLocator.scanTo(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/DefaultSourceLocatorTest.java;[4907-5171;142-147;3-3];</data>
    </edge>
    <edge id="e619" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.DelimitedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/DelimitedParser.java;[1563-2337;33-58;3-3];</data>
    </edge>
    <edge id="e620" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.EofParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EofParser.java;[1394-1519;30-34;3-3];</data>
    </edge>
    <edge id="e621" source="org.codehaus.jparsec.EofParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/EofParser.java;[1394-1519;30-34;3-3];</data>
    </edge>
    <edge id="e622" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.GetIndexParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/GetIndexParser.java;[1360-1465;24-27;3-3];</data>
    </edge>
    <edge id="e623" source="org.codehaus.jparsec.GetIndexParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/GetIndexParser.java;[1360-1465;24-27;3-3];</data>
    </edge>
    <edge id="e624" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.IfElseParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IfElseParser.java;[1700-2081;32-42;3-3];</data>
    </edge>
    <edge id="e625" source="org.codehaus.jparsec.IfElseParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IfElseParser.java;[1700-2081;32-42;3-3];</data>
    </edge>
    <edge id="e626" source="org.codehaus.jparsec.Indentation.analyzeIndentations(java.util.List,java.lang.Object)" target="org.codehaus.jparsec.Indentation.newLine(org.codehaus.jparsec.Token,java.util.Stack,int,java.util.List)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[5103-6480;127-166;3-3];</data>
    </edge>
    <edge id="e627" source="org.codehaus.jparsec.Indentation.lexer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4226-4968;105-121;3-3];</data>
    </edge>
    <edge id="e628" source="org.codehaus.jparsec.Indentation.lexer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4226-4968;105-121;3-3];</data>
    </edge>
    <edge id="e629" source="org.codehaus.jparsec.Indentation.lexer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Indentation.analyzeIndentations(java.util.List,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Indentation.java;[4226-4968;105-121;3-3];</data>
    </edge>
    <edge id="e630" source="org.codehaus.jparsec.IndentationTest.analyze(java.lang.Object[])" target="org.codehaus.jparsec.Indentation.analyzeIndentations(java.util.List,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5644-5776;122-124;3-3];</data>
    </edge>
    <edge id="e631" source="org.codehaus.jparsec.IndentationTest.analyze(java.lang.Object[])" target="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5644-5776;122-124;3-3];</data>
    </edge>
    <edge id="e632" source="org.codehaus.jparsec.IndentationTest.testAnalyzeIndentations()" target="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3];</data>
    </edge>
    <edge id="e633" source="org.codehaus.jparsec.IndentationTest.testAnalyzeIndentations()" target="org.codehaus.jparsec.IndentationTest.analyze(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3/3330-4612;77-96;3-3];</data>
    </edge>
    <edge id="e634" source="org.codehaus.jparsec.IndentationTest.testIndent()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4619-4937;98-104;3-3];</data>
    </edge>
    <edge id="e635" source="org.codehaus.jparsec.IndentationTest.testIndent()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4619-4937;98-104;3-3/4619-4937;98-104;3-3];</data>
    </edge>
    <edge id="e636" source="org.codehaus.jparsec.IndentationTest.testIndent()" target="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4619-4937;98-104;3-3/4619-4937;98-104;3-3];</data>
    </edge>
    <edge id="e637" source="org.codehaus.jparsec.IndentationTest.testIndent()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4619-4937;98-104;3-3];</data>
    </edge>
    <edge id="e638" source="org.codehaus.jparsec.IndentationTest.testInlineWhitespaces()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[2650-3053;60-68;3-3/2650-3053;60-68;3-3/2650-3053;60-68;3-3/2650-3053;60-68;3-3/2650-3053;60-68;3-3/2650-3053;60-68;3-3];</data>
    </edge>
    <edge id="e639" source="org.codehaus.jparsec.IndentationTest.testLexer()" target="org.codehaus.jparsec.Indentation.lexer(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5272-5637;114-120;3-3];</data>
    </edge>
    <edge id="e640" source="org.codehaus.jparsec.IndentationTest.testLexer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5272-5637;114-120;3-3];</data>
    </edge>
    <edge id="e641" source="org.codehaus.jparsec.IndentationTest.testLexer()" target="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[5272-5637;114-120;3-3];</data>
    </edge>
    <edge id="e642" source="org.codehaus.jparsec.IndentationTest.testLineContinuation()" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[2224-2643;50-58;3-3/2224-2643;50-58;3-3/2224-2643;50-58;3-3/2224-2643;50-58;3-3/2224-2643;50-58;3-3/2224-2643;50-58;3-3];</data>
    </edge>
    <edge id="e643" source="org.codehaus.jparsec.IndentationTest.testOutdent()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4944-5265;106-112;3-3];</data>
    </edge>
    <edge id="e644" source="org.codehaus.jparsec.IndentationTest.testOutdent()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4944-5265;106-112;3-3/4944-5265;106-112;3-3];</data>
    </edge>
    <edge id="e645" source="org.codehaus.jparsec.IndentationTest.testOutdent()" target="org.codehaus.jparsec.IndentationTest.tokenList(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4944-5265;106-112;3-3/4944-5265;106-112;3-3];</data>
    </edge>
    <edge id="e646" source="org.codehaus.jparsec.IndentationTest.testOutdent()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[4944-5265;106-112;3-3];</data>
    </edge>
    <edge id="e647" source="org.codehaus.jparsec.IndentationTest.testWhitespaces()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3060-3323;70-75;3-3];</data>
    </edge>
    <edge id="e648" source="org.codehaus.jparsec.IndentationTest.testWhitespaces()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/IndentationTest.java;[3060-3323;70-75;3-3];</data>
    </edge>
    <edge id="e649" source="org.codehaus.jparsec.InternalFunctorsTest.testLastOfFour()" target="org.codehaus.jparsec.InternalFunctors.lastOfFour()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1928-2156;57-61;3-3];</data>
    </edge>
    <edge id="e650" source="org.codehaus.jparsec.InternalFunctorsTest.testLastOfTwo()" target="org.codehaus.jparsec.InternalFunctors.lastOfTwo()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/InternalFunctorsTest.java;[1507-1699;45-49;3-3];</data>
    </edge>
    <edge id="e651" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.IsCharScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsCharScanner.java;[1568-1866;34-47;3-3];</data>
    </edge>
    <edge id="e652" source="org.codehaus.jparsec.IsCharScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsCharScanner.java;[1568-1866;34-47;3-3];</data>
    </edge>
    <edge id="e653" source="org.codehaus.jparsec.TokenMap.map(org.codehaus.jparsec.Token)" target="org.codehaus.jparsec.IsFragment.map(org.codehaus.jparsec.Token)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsFragment.java;[1449-1697;27-35;3-3];</data>
    </edge>
    <edge id="e654" source="org.codehaus.jparsec.IsFragment.map(org.codehaus.jparsec.Token)" target="org.codehaus.jparsec.IsFragment.isExpectedTag(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsFragment.java;[1449-1697;27-35;3-3];</data>
    </edge>
    <edge id="e655" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3];</data>
    </edge>
    <edge id="e656" source="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3];</data>
    </edge>
    <edge id="e657" source="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.expected(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3/1406-1747;25-39;3-3];</data>
    </edge>
    <edge id="e658" source="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getToken()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3];</data>
    </edge>
    <edge id="e659" source="org.codehaus.jparsec.IsTokenParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.TokenMap.map(org.codehaus.jparsec.Token)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/IsTokenParser.java;[1406-1747;25-39;3-3];</data>
    </edge>
    <edge id="e660" source="org.codehaus.jparsec.Keywords.lexicon(org.codehaus.jparsec.Parser,java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Keywords.unique(java.util.Comparator,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Keywords.java;[3680-4488;98-117;3-3];</data>
    </edge>
    <edge id="e661" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseInsensitive()" target="org.codehaus.jparsec.Keywords.lexicon(org.codehaus.jparsec.Parser,java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[812-1494;27-40;3-3];</data>
    </edge>
    <edge id="e662" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseInsensitive()" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[812-1494;27-40;3-3/812-1494;27-40;3-3];</data>
    </edge>
    <edge id="e663" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseInsensitive()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[812-1494;27-40;3-3/812-1494;27-40;3-3/812-1494;27-40;3-3];</data>
    </edge>
    <edge id="e664" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseSensitive()" target="org.codehaus.jparsec.Keywords.lexicon(org.codehaus.jparsec.Parser,java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[238-805;14-25;3-3];</data>
    </edge>
    <edge id="e665" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseSensitive()" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[238-805;14-25;3-3];</data>
    </edge>
    <edge id="e666" source="org.codehaus.jparsec.KeywordsTest.testLexicon_caseSensitive()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[238-805;14-25;3-3/238-805;14-25;3-3/238-805;14-25;3-3];</data>
    </edge>
    <edge id="e667" source="org.codehaus.jparsec.KeywordsTest.testUnique()" target="org.codehaus.jparsec.Keywords.unique(java.util.Comparator,java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/KeywordsTest.java;[1501-1668;42-46;3-3];</data>
    </edge>
    <edge id="e668" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.LazyParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1622-1701;35-37;3-3];</data>
    </edge>
    <edge id="e669" source="org.codehaus.jparsec.LazyParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.LazyParser.deref()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/LazyParser.java;[1622-1701;35-37;3-3];</data>
    </edge>
    <edge id="e670" source="org.codehaus.jparsec.Lexicon.word(java.lang.String)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[3179-3581;77-88;3-3];</data>
    </edge>
    <edge id="e671" source="org.codehaus.jparsec.Lexicon.union(org.codehaus.jparsec.Lexicon)" target="org.codehaus.jparsec.InternalFunctors.fallback(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[3588-3841;90-95;3-3];</data>
    </edge>
    <edge id="e672" source="org.codehaus.jparsec.Lexicon.phrase(java.lang.String[])" target="org.codehaus.jparsec.Lexicon.token(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2040-2484;48-59;3-3];</data>
    </edge>
    <edge id="e673" source="org.codehaus.jparsec.Lexicon.phrase(java.lang.String[])" target="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2040-2484;48-59;3-3];</data>
    </edge>
    <edge id="e674" source="org.codehaus.jparsec.Lexicon.token(java.lang.String)" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2960-3174;72-75;3-3];</data>
    </edge>
    <edge id="e675" source="org.codehaus.jparsec.Lexicon.token(java.lang.String[])" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2491-2953;61-70;3-3];</data>
    </edge>
    <edge id="e676" source="org.codehaus.jparsec.Lexicon.token(java.lang.String[])" target="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Lexicon.java;[2491-2953;61-70;3-3];</data>
    </edge>
    <edge id="e677" source="org.codehaus.jparsec.LexiconTest.testWord()" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/LexiconTest.java;[264-579;15-21;3-3];</data>
    </edge>
    <edge id="e678" source="org.codehaus.jparsec.LexiconTest.testWord_throwsForNullValue()" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/LexiconTest.java;[586-968;23-32;3-3];</data>
    </edge>
    <edge id="e679" source="org.codehaus.jparsec.ListFactoriesTest.testArrayListFactory()" target="org.codehaus.jparsec.ListFactories.arrayListFactory()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ListFactoriesTest.java;[241-715;14-22;3-3/241-715;14-22;3-3];</data>
    </edge>
    <edge id="e680" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ListParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ListParser.java;[1628-1911;36-44;3-3];</data>
    </edge>
    <edge id="e681" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.MapParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/MapParser.java;[1521-1698;29-35;3-3];</data>
    </edge>
    <edge id="e682" source="org.codehaus.jparsec.MapParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/MapParser.java;[1521-1698;29-35;3-3];</data>
    </edge>
    <edge id="e683" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.NestableBlockCommentScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestableBlockCommentScanner.java;[1667-2666;35-66;3-3];</data>
    </edge>
    <edge id="e684" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.NestedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1464-1798;27-33;3-3];</data>
    </edge>
    <edge id="e685" source="org.codehaus.jparsec.NestedParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1464-1798;27-33;3-3];</data>
    </edge>
    <edge id="e686" source="org.codehaus.jparsec.NestedParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.runNestedParser(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedParser.java;[1464-1798;27-33;3-3];</data>
    </edge>
    <edge id="e687" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.NestedScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1571-1886;32-38;3-3];</data>
    </edge>
    <edge id="e688" source="org.codehaus.jparsec.NestedScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.characters()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1571-1886;32-38;3-3];</data>
    </edge>
    <edge id="e689" source="org.codehaus.jparsec.NestedScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.runNestedParser(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NestedScanner.java;[1571-1886;32-38;3-3];</data>
    </edge>
    <edge id="e690" source="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeHexAsLong(java.lang.String)" target="org.codehaus.jparsec.NumberLiteralsTranslator.toHexDigit(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/NumberLiteralsTranslator.java;[2156-2422;58-66;3-3];</data>
    </edge>
    <edge id="e691" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
    </edge>
    <edge id="e692" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
    </edge>
    <edge id="e693" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
    </edge>
    <edge id="e694" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
    </edge>
    <edge id="e695" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6454-6950;189-206;3-3];</data>
    </edge>
    <edge id="e696" source="org.codehaus.jparsec.OperatorTable.buildExpressionParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Operator[])" target="org.codehaus.jparsec.OperatorTable.slice(org.codehaus.jparsec.OperatorTable$Operator[],int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[5052-6212;143-179;3-3/5052-6212;143-179;3-3];</data>
    </edge>
    <edge id="e697" source="org.codehaus.jparsec.OperatorTable.buildExpressionParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Operator[])" target="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Associativity,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[5052-6212;143-179;3-3/5052-6212;143-179;3-3];</data>
    </edge>
    <edge id="e698" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.OperatorTable.buildExpressionParser(org.codehaus.jparsec.Parser,org.codehaus.jparsec.OperatorTable$Operator[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[4633-4925;128-136;3-3];</data>
    </edge>
    <edge id="e699" source="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.OperatorTable.operators()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[4633-4925;128-136;3-3];</data>
    </edge>
    <edge id="e700" source="org.codehaus.jparsec.OperatorTable.slice(org.codehaus.jparsec.OperatorTable$Operator[],int,int)" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/OperatorTable.java;[6219-6447;181-187;3-3];</data>
    </edge>
    <edge id="e701" source="org.codehaus.jparsec.OperatorTableExpressionTest.op(java.lang.String,T)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2494-2591;67-69;3-3];</data>
    </edge>
    <edge id="e702" source="org.codehaus.jparsec.OperatorTableExpressionTest.op(java.lang.String,T)" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2494-2591;67-69;3-3];</data>
    </edge>
    <edge id="e703" source="org.codehaus.jparsec.OperatorTableExpressionTest.parser()" target="org.codehaus.jparsec.OperatorTableExpressionTest.op(java.lang.String,T)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3];</data>
    </edge>
    <edge id="e704" source="org.codehaus.jparsec.OperatorTableExpressionTest.parser()" target="org.codehaus.jparsec.OperatorTable.infixl(org.codehaus.jparsec.Parser,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2106-2487;55-65;3-3/2106-2487;55-65;3-3/2106-2487;55-65;3-3];</data>
    </edge>
    <edge id="e705" source="org.codehaus.jparsec.OperatorTableExpressionTest.parser()" target="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[2106-2487;55-65;3-3];</data>
    </edge>
    <edge id="e706" source="org.codehaus.jparsec.OperatorTableExpressionTest.testBuildExpressionParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[1019-1930;29-48;3-3];</data>
    </edge>
    <edge id="e707" source="org.codehaus.jparsec.OperatorTableExpressionTest.testBuildExpressionParser()" target="org.codehaus.jparsec.OperatorTableExpressionTest.parser()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[1019-1930;29-48;3-3];</data>
    </edge>
    <edge id="e708" source="org.codehaus.jparsec.OperatorTableExpressionTest.testEmptyOperatorTable()" target="org.codehaus.jparsec.OperatorTable.build(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableExpressionTest.java;[1937-2101;50-53;3-3];</data>
    </edge>
    <edge id="e709" source="org.codehaus.jparsec.OperatorTableTest.testGetOperators()" target="org.codehaus.jparsec.OperatorTable.infixl(org.codehaus.jparsec.Parser,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[1102-1762;34-51;3-3];</data>
    </edge>
    <edge id="e710" source="org.codehaus.jparsec.OperatorTableTest.testGetOperators()" target="org.codehaus.jparsec.OperatorTable.operators()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorTableTest.java;[1102-1762;34-51;3-3];</data>
    </edge>
    <edge id="e711" source="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])" target="org.codehaus.jparsec.Operators.sort(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[1579-2806;34-56;3-3];</data>
    </edge>
    <edge id="e712" source="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[1579-2806;34-56;3-3];</data>
    </edge>
    <edge id="e713" source="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[1579-2806;34-56;3-3];</data>
    </edge>
    <edge id="e714" source="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])" target="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Operators.java;[1579-2806;34-56;3-3];</data>
    </edge>
    <edge id="e715" source="org.codehaus.jparsec.OperatorsTest.testLexicon()" target="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[607-1009;22-32;3-3];</data>
    </edge>
    <edge id="e716" source="org.codehaus.jparsec.OperatorsTest.testLexicon()" target="org.codehaus.jparsec.Lexicon.word(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[607-1009;22-32;3-3];</data>
    </edge>
    <edge id="e717" source="org.codehaus.jparsec.OperatorsTest.testLexicon()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[607-1009;22-32;3-3];</data>
    </edge>
    <edge id="e718" source="org.codehaus.jparsec.OperatorsTest.testSort()" target="org.codehaus.jparsec.Operators.sort(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/OperatorsTest.java;[183-600;13-20;3-3/183-600;13-20;3-3/183-600;13-20;3-3/183-600;13-20;3-3/183-600;13-20;3-3];</data>
    </edge>
    <edge id="e719" source="org.codehaus.jparsec.ParseContext.getIndex()" target="org.codehaus.jparsec.ParseContext.toIndex(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5255-5363;158-161;3-3];</data>
    </edge>
    <edge id="e720" source="org.codehaus.jparsec.ParseContext.getEncountered()" target="org.codehaus.jparsec.ParseContext.getInputName(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[4743-4881;138-143;3-3];</data>
    </edge>
    <edge id="e721" source="org.codehaus.jparsec.ParseContext.renderError()" target="org.codehaus.jparsec.ParseContext.toIndex(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3665-4738;106-136;3-3];</data>
    </edge>
    <edge id="e722" source="org.codehaus.jparsec.ParseContext.renderError()" target="org.codehaus.jparsec.ParseContext.getEncountered()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[3665-4738;106-136;3-3];</data>
    </edge>
    <edge id="e723" source="org.codehaus.jparsec.ParseContext.expected(java.lang.Object)" target="org.codehaus.jparsec.ParseContext.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6491-6565;204-206;3-3];</data>
    </edge>
    <edge id="e724" source="org.codehaus.jparsec.ParseContext.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[5708-6340;172-194;3-3/5708-6340;172-194;3-3];</data>
    </edge>
    <edge id="e725" source="org.codehaus.jparsec.ParseContext.unexpected(java.lang.String)" target="org.codehaus.jparsec.ParseContext.raise(org.codehaus.jparsec.ParseContext$ErrorType,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParseContext.java;[6572-6650;208-210;3-3];</data>
    </edge>
    <edge id="e726" source="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10478-10778;291-298;3-3];</data>
    </edge>
    <edge id="e727" source="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4501-4751;103-109;3-3];</data>
    </edge>
    <edge id="e728" source="org.codehaus.jparsec.Parser.retn(R)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[4314-4494;98-101;3-3];</data>
    </edge>
    <edge id="e729" source="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20502-20612;549-552;3-3];</data>
    </edge>
    <edge id="e730" source="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20169-20495;538-547;3-3];</data>
    </edge>
    <edge id="e731" source="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)" target="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[19721-20162;526-536;3-3];</data>
    </edge>
    <edge id="e732" source="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String,org.codehaus.jparsec.SourceLocator)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[19721-20162;526-536;3-3];</data>
    </edge>
    <edge id="e733" source="org.codehaus.jparsec.Parser.parse(java.lang.Readable)" target="org.codehaus.jparsec.Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20620-20769;555-558;3-3];</data>
    </edge>
    <edge id="e734" source="org.codehaus.jparsec.Parser.parse(java.lang.Readable,java.lang.String)" target="org.codehaus.jparsec.Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20774-21195;560-571;3-3];</data>
    </edge>
    <edge id="e735" source="org.codehaus.jparsec.Parser.parse(java.lang.Readable,java.lang.String)" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[20774-21195;560-571;3-3];</data>
    </edge>
    <edge id="e736" source="org.codehaus.jparsec.Parser.run(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21888-22049;595-602;3-3];</data>
    </edge>
    <edge id="e737" source="org.codehaus.jparsec.Parser.run(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21888-22049;595-602;3-3];</data>
    </edge>
    <edge id="e738" source="org.codehaus.jparsec.Parser.atLeast(int)" target="org.codehaus.jparsec.RepeatAtLeastParser(org.codehaus.jparsec.Parser,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[6380-6671;163-169;3-3];</data>
    </edge>
    <edge id="e739" source="org.codehaus.jparsec.Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[11642-12087;326-335;3-3];</data>
    </edge>
    <edge id="e740" source="org.codehaus.jparsec.Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[11642-12087;326-335;3-3];</data>
    </edge>
    <edge id="e741" source="org.codehaus.jparsec.Parser.endBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12970-13254;362-370;3-3];</data>
    </edge>
    <edge id="e742" source="org.codehaus.jparsec.Parser.endBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12970-13254;362-370;3-3];</data>
    </edge>
    <edge id="e743" source="org.codehaus.jparsec.Parser.endBy1(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[13259-13545;372-380;3-3];</data>
    </edge>
    <edge id="e744" source="org.codehaus.jparsec.Parser.endBy1(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[13259-13545;372-380;3-3];</data>
    </edge>
    <edge id="e745" source="org.codehaus.jparsec.Parser.fails()" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10282-10471;286-289;3-3];</data>
    </edge>
    <edge id="e746" source="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.tokens(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18118-18484;488-496;3-3];</data>
    </edge>
    <edge id="e747" source="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18118-18484;488-496;3-3];</data>
    </edge>
    <edge id="e748" source="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18491-18834;498-506;3-3];</data>
    </edge>
    <edge id="e749" source="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18491-18834;498-506;3-3];</data>
    </edge>
    <edge id="e750" source="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.infixl(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[16190-16912;445-458;2-3];</data>
    </edge>
    <edge id="e751" source="org.codehaus.jparsec.Parser.infixn(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.infixn(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[15635-16186;433-443;3-3];</data>
    </edge>
    <edge id="e752" source="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.infixr(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[16917-17578;460-471;3-3];</data>
    </edge>
    <edge id="e753" source="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18841-19714;508-524;3-3];</data>
    </edge>
    <edge id="e754" source="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.token()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18841-19714;508-524;3-3];</data>
    </edge>
    <edge id="e755" source="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[18841-19714;508-524;3-3];</data>
    </edge>
    <edge id="e756" source="org.codehaus.jparsec.Parser.many()" target="org.codehaus.jparsec.Parser.atLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5597-5800;135-141;3-3];</data>
    </edge>
    <edge id="e757" source="org.codehaus.jparsec.Parser.many1()" target="org.codehaus.jparsec.Parser.atLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5982-6187;148-154;3-3];</data>
    </edge>
    <edge id="e758" source="org.codehaus.jparsec.Parser.not()" target="org.codehaus.jparsec.Parser.not(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9028-9185;246-249;3-3];</data>
    </edge>
    <edge id="e759" source="org.codehaus.jparsec.Parser.not(java.lang.String)" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9192-9485;251-258;3-3];</data>
    </edge>
    <edge id="e760" source="org.codehaus.jparsec.Parser.notFollowedBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5354-5590;127-133;3-3];</data>
    </edge>
    <edge id="e761" source="org.codehaus.jparsec.Parser.notFollowedBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[5354-5590;127-133;3-3];</data>
    </edge>
    <edge id="e762" source="org.codehaus.jparsec.Parser.or(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[8245-8535;221-229;3-3];</data>
    </edge>
    <edge id="e763" source="org.codehaus.jparsec.Parser.postfix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[15130-15630;421-431;3-3];</data>
    </edge>
    <edge id="e764" source="org.codehaus.jparsec.Parser.prefix(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[14623-15125;409-419;3-3];</data>
    </edge>
    <edge id="e765" source="org.codehaus.jparsec.Parser.sepBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12671-12965;353-360;3-3];</data>
    </edge>
    <edge id="e766" source="org.codehaus.jparsec.Parser.sepBy1(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[12092-12664;337-351;3-3];</data>
    </edge>
    <edge id="e767" source="org.codehaus.jparsec.Parser.sepEndBy(org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[14173-14618;398-407;3-3];</data>
    </edge>
    <edge id="e768" source="org.codehaus.jparsec.Parser.step(int)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[9824-10065;270-277;3-3];</data>
    </edge>
    <edge id="e769" source="org.codehaus.jparsec.Parser.succeeds()" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[10072-10275;279-284;3-3];</data>
    </edge>
    <edge id="e770" source="org.codehaus.jparsec.Parser.times(int)" target="org.codehaus.jparsec.Parser.times(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[7146-7348;187-193;3-3];</data>
    </edge>
    <edge id="e771" source="org.codehaus.jparsec.Parser.times(int,int)" target="org.codehaus.jparsec.RepeatTimesParser(org.codehaus.jparsec.Parser,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[7355-7690;195-202;3-3];</data>
    </edge>
    <edge id="e772" source="org.codehaus.jparsec.Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.error.ParserException(java.lang.Throwable,org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21636-21881;589-593;3-3];</data>
    </edge>
    <edge id="e773" source="org.codehaus.jparsec.Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.SourceLocator.locate(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21636-21881;589-593;3-3];</data>
    </edge>
    <edge id="e774" source="org.codehaus.jparsec.Parser.asParserException(java.lang.Throwable,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parser.java;[21636-21881;589-593;3-3];</data>
    </edge>
    <edge id="e775" source="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[7886-8488;190-204;3-3/7886-8488;190-204;3-3/7886-8488;190-204;3-3/7886-8488;190-204;3-3/7886-8488;190-204;3-3/7886-8488;190-204;3-3];</data>
    </edge>
    <edge id="e776" source="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[7886-8488;190-204;3-3/7886-8488;190-204;3-3];</data>
    </edge>
    <edge id="e777" source="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)" target="org.codehaus.jparsec.Parsers.shorter(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[7886-8488;190-204;3-3/7886-8488;190-204;3-3];</data>
    </edge>
    <edge id="e778" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e779" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e780" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e781" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3/6718-7879;166-188;3-3/6718-7879;166-188;3-3/6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e782" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e783" source="org.codehaus.jparsec.ParserErrorHandlingTest.testEmptyTokenCounts()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[6718-7879;166-188;3-3];</data>
    </edge>
    <edge id="e784" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesLonger()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3883-4082;107-111;3-3];</data>
    </edge>
    <edge id="e785" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesLonger()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3883-4082;107-111;3-3/3883-4082;107-111;3-3];</data>
    </edge>
    <edge id="e786" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesLonger()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3883-4082;107-111;3-3];</data>
    </edge>
    <edge id="e787" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesOr()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3685-3876;101-105;3-3];</data>
    </edge>
    <edge id="e788" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesOr()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3685-3876;101-105;3-3];</data>
    </edge>
    <edge id="e789" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesOr()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3685-3876;101-105;3-3/3685-3876;101-105;3-3];</data>
    </edge>
    <edge id="e790" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesOr()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3685-3876;101-105;3-3];</data>
    </edge>
    <edge id="e791" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesPlus()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3474-3678;95-99;3-3];</data>
    </edge>
    <edge id="e792" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesPlus()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3474-3678;95-99;3-3/3474-3678;95-99;3-3];</data>
    </edge>
    <edge id="e793" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesPlus()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3474-3678;95-99;3-3];</data>
    </edge>
    <edge id="e794" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e795" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3/4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e796" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e797" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.Parser.many1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e798" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.Parser.times(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3/4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e799" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e800" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesRepetition()" target="org.codehaus.jparsec.Parser.skipTimes(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4297-5479;119-140;3-3];</data>
    </edge>
    <edge id="e801" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesShorter()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4089-4290;113-117;3-3];</data>
    </edge>
    <edge id="e802" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesShorter()" target="org.codehaus.jparsec.Parsers.shorter(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4089-4290;113-117;3-3];</data>
    </edge>
    <edge id="e803" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesShorter()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4089-4290;113-117;3-3/4089-4290;113-117;3-3];</data>
    </edge>
    <edge id="e804" source="org.codehaus.jparsec.ParserErrorHandlingTest.testErrorSurvivesShorter()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[4089-4290;113-117;3-3];</data>
    </edge>
    <edge id="e805" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectMerged()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2974-3303;80-87;3-3/2974-3303;80-87;3-3];</data>
    </edge>
    <edge id="e806" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectMerged()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2974-3303;80-87;3-3/2974-3303;80-87;3-3];</data>
    </edge>
    <edge id="e807" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectOverridesNot()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1852-2022;43-47;3-3];</data>
    </edge>
    <edge id="e808" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectOverridesNot()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1852-2022;43-47;3-3];</data>
    </edge>
    <edge id="e809" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectOverridesNot()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1852-2022;43-47;3-3];</data>
    </edge>
    <edge id="e810" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectOverridesNot()" target="org.codehaus.jparsec.Parser.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1852-2022;43-47;3-3];</data>
    </edge>
    <edge id="e811" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectedMerged()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3310-3467;89-93;3-3];</data>
    </edge>
    <edge id="e812" source="org.codehaus.jparsec.ParserErrorHandlingTest.testExpectedMerged()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[3310-3467;89-93;3-3];</data>
    </edge>
    <edge id="e813" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExpect()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2029-2182;49-53;3-3];</data>
    </edge>
    <edge id="e814" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExpect()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2029-2182;49-53;3-3];</data>
    </edge>
    <edge id="e815" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExpect()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2029-2182;49-53;3-3];</data>
    </edge>
    <edge id="e816" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFailureOverridesExplicitExpect()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2189-2375;55-59;3-3];</data>
    </edge>
    <edge id="e817" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstFailureWins()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2828-2967;75-78;3-3];</data>
    </edge>
    <edge id="e818" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstFailureWins()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2828-2967;75-78;3-3];</data>
    </edge>
    <edge id="e819" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNeverWins()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2560-2663;66-68;3-3];</data>
    </edge>
    <edge id="e820" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNotWins()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2670-2821;70-73;3-3];</data>
    </edge>
    <edge id="e821" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNotWins()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2670-2821;70-73;3-3];</data>
    </edge>
    <edge id="e822" source="org.codehaus.jparsec.ParserErrorHandlingTest.testFirstNotWins()" target="org.codehaus.jparsec.Parser.not(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2670-2821;70-73;3-3/2670-2821;70-73;3-3];</data>
    </edge>
    <edge id="e823" source="org.codehaus.jparsec.ParserErrorHandlingTest.testMoreRelevantErrorWins()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2382-2553;61-64;3-3];</data>
    </edge>
    <edge id="e824" source="org.codehaus.jparsec.ParserErrorHandlingTest.testMoreRelevantErrorWins()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2382-2553;61-64;3-3];</data>
    </edge>
    <edge id="e825" source="org.codehaus.jparsec.ParserErrorHandlingTest.testMoreRelevantErrorWins()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[2382-2553;61-64;3-3];</data>
    </edge>
    <edge id="e826" source="org.codehaus.jparsec.ParserErrorHandlingTest.testNotOverridesNever()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1670-1845;37-41;3-3];</data>
    </edge>
    <edge id="e827" source="org.codehaus.jparsec.ParserErrorHandlingTest.testNotOverridesNever()" target="org.codehaus.jparsec.Parser.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[1670-1845;37-41;3-3];</data>
    </edge>
    <edge id="e828" source="org.codehaus.jparsec.ParserErrorHandlingTest.testOuterExpectWins()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5486-5623;142-144;3-3];</data>
    </edge>
    <edge id="e829" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e830" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e831" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e832" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e833" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e834" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e835" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3/5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e836" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e837" source="org.codehaus.jparsec.ParserErrorHandlingTest.testTokenLevelError()" target="org.codehaus.jparsec.ParserErrorHandlingTest.assertError(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserErrorHandlingTest.java;[5630-6711;146-164;3-3];</data>
    </edge>
    <edge id="e838" source="org.codehaus.jparsec.ParserInternals.runNestedParser(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4068-4655;114-127;3-3];</data>
    </edge>
    <edge id="e839" source="org.codehaus.jparsec.ParserInternals.runNestedParser(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.ParserInternals.copyError(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4068-4655;114-127;3-3];</data>
    </edge>
    <edge id="e840" source="org.codehaus.jparsec.ParserInternals.copyError(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.errors()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4660-4985;129-136;3-3];</data>
    </edge>
    <edge id="e841" source="org.codehaus.jparsec.ParserInternals.copyError(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.isEof()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4660-4985;129-136;3-3];</data>
    </edge>
    <edge id="e842" source="org.codehaus.jparsec.ParserInternals.copyError(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getEncountered()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserInternals.java;[4660-4985;129-136;3-3];</data>
    </edge>
    <edge id="e843" source="org.codehaus.jparsec.ParserReferenceTest.testLazy()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserReferenceTest.java;[311-674;15-24;3-3/311-674;15-24;3-3];</data>
    </edge>
    <edge id="e844" source="org.codehaus.jparsec.ParserReferenceTest.testUninitializedLazy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserReferenceTest.java;[681-886;26-30;3-3];</data>
    </edge>
    <edge id="e845" source="org.codehaus.jparsec.ParseContext.isEof()" target="org.codehaus.jparsec.ParserState.isEof()">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1515-1576;31-33;3-3];</data>
    </edge>
    <edge id="e846" source="org.codehaus.jparsec.ParseContext.toIndex(int)" target="org.codehaus.jparsec.ParserState.toIndex(int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1583-1695;35-38;3-3];</data>
    </edge>
    <edge id="e847" source="org.codehaus.jparsec.ParseContext.getInputName(int)" target="org.codehaus.jparsec.ParserState.getInputName(int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[2232-2350;59-62;3-3];</data>
    </edge>
    <edge id="e848" source="org.codehaus.jparsec.ParseContext.getToken()" target="org.codehaus.jparsec.ParserState.getToken()">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ParserState.java;[1700-1753;40-42;3-3];</data>
    </edge>
    <edge id="e849" source="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21795-21960;564-567;3-3];</data>
    </edge>
    <edge id="e850" source="org.codehaus.jparsec.ParserTest.testAtomic()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9962-10238;243-248;3-3/9962-10238;243-248;3-3];</data>
    </edge>
    <edge id="e851" source="org.codehaus.jparsec.ParserTest.testAtomic()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9962-10238;243-248;3-3/9962-10238;243-248;3-3/9962-10238;243-248;3-3];</data>
    </edge>
    <edge id="e852" source="org.codehaus.jparsec.ParserTest.testAtomic()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9962-10238;243-248;3-3];</data>
    </edge>
    <edge id="e853" source="org.codehaus.jparsec.ParserTest.testAtomic()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9962-10238;243-248;3-3];</data>
    </edge>
    <edge id="e854" source="org.codehaus.jparsec.ParserTest.testBetween()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11883-11988;301-303;3-3];</data>
    </edge>
    <edge id="e855" source="org.codehaus.jparsec.ParserTest.testBetween()" target="org.codehaus.jparsec.Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11883-11988;301-303;3-3];</data>
    </edge>
    <edge id="e856" source="org.codehaus.jparsec.ParserTest.testBetween()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11883-11988;301-303;3-3/11883-11988;301-303;3-3];</data>
    </edge>
    <edge id="e857" source="org.codehaus.jparsec.ParserTest.testCast()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11680-11876;295-299;3-3];</data>
    </edge>
    <edge id="e858" source="org.codehaus.jparsec.ParserTest.testCopy()" target="org.codehaus.jparsec.Parser.copy(java.lang.Readable,java.lang.Appendable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21570-21788;557-562;3-3];</data>
    </edge>
    <edge id="e859" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.Parser.endBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3/13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e860" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3/13209-13584;338-346;3-3/13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e861" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3/13209-13584;338-346;3-3/13209-13584;338-346;3-3/13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e862" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e863" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3/13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e864" source="org.codehaus.jparsec.ParserTest.testEndBy()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13209-13584;338-346;3-3];</data>
    </edge>
    <edge id="e865" source="org.codehaus.jparsec.ParserTest.testEndBy1()" target="org.codehaus.jparsec.Parser.endBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3/13591-13951;348-356;3-3];</data>
    </edge>
    <edge id="e866" source="org.codehaus.jparsec.ParserTest.testEndBy1()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3/13591-13951;348-356;3-3];</data>
    </edge>
    <edge id="e867" source="org.codehaus.jparsec.ParserTest.testEndBy1()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3/13591-13951;348-356;3-3];</data>
    </edge>
    <edge id="e868" source="org.codehaus.jparsec.ParserTest.testEndBy1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3/13591-13951;348-356;3-3/13591-13951;348-356;3-3/13591-13951;348-356;3-3];</data>
    </edge>
    <edge id="e869" source="org.codehaus.jparsec.ParserTest.testEndBy1()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13591-13951;348-356;3-3];</data>
    </edge>
    <edge id="e870" source="org.codehaus.jparsec.ParserTest.testFails()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10876-11078;270-274;3-3/10876-11078;270-274;3-3/10876-11078;270-274;3-3];</data>
    </edge>
    <edge id="e871" source="org.codehaus.jparsec.ParserTest.testFails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10876-11078;270-274;3-3/10876-11078;270-274;3-3];</data>
    </edge>
    <edge id="e872" source="org.codehaus.jparsec.ParserTest.testFails()" target="org.codehaus.jparsec.Parser.fails()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10876-11078;270-274;3-3/10876-11078;270-274;3-3/10876-11078;270-274;3-3];</data>
    </edge>
    <edge id="e873" source="org.codehaus.jparsec.ParserTest.testFails()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10876-11078;270-274;3-3];</data>
    </edge>
    <edge id="e874" source="org.codehaus.jparsec.ParserTest.testFollowedBy()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3445-3692;97-101;3-3];</data>
    </edge>
    <edge id="e875" source="org.codehaus.jparsec.ParserTest.testFollowedBy()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3445-3692;97-101;3-3/3445-3692;97-101;3-3/3445-3692;97-101;3-3];</data>
    </edge>
    <edge id="e876" source="org.codehaus.jparsec.ParserTest.testFollowedBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3445-3692;97-101;3-3/3445-3692;97-101;3-3];</data>
    </edge>
    <edge id="e877" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3/19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e878" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e879" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3/19614-20452;520-532;3-3/19614-20452;520-532;3-3/19614-20452;520-532;3-3/19614-20452;520-532;3-3/19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e880" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e881" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e882" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e883" source="org.codehaus.jparsec.ParserTest.testFrom()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19614-20452;520-532;3-3/19614-20452;520-532;3-3/19614-20452;520-532;3-3];</data>
    </edge>
    <edge id="e884" source="org.codehaus.jparsec.ParserTest.testFrom_throwsOnScanners()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20459-20789;534-539;3-3/20459-20789;534-539;3-3];</data>
    </edge>
    <edge id="e885" source="org.codehaus.jparsec.ParserTest.testFrom_throwsOnScanners()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20459-20789;534-539;3-3];</data>
    </edge>
    <edge id="e886" source="org.codehaus.jparsec.ParserTest.testFrom_throwsOnScanners()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20459-20789;534-539;3-3/20459-20789;534-539;3-3];</data>
    </edge>
    <edge id="e887" source="org.codehaus.jparsec.ParserTest.testFrom_withDelimiter()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20796-21140;541-547;3-3];</data>
    </edge>
    <edge id="e888" source="org.codehaus.jparsec.ParserTest.testFrom_withDelimiter()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20796-21140;541-547;3-3];</data>
    </edge>
    <edge id="e889" source="org.codehaus.jparsec.ParserTest.testFrom_withDelimiter()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[20796-21140;541-547;3-3];</data>
    </edge>
    <edge id="e890" source="org.codehaus.jparsec.ParserTest.testIfElse()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11085-11345;276-282;3-3];</data>
    </edge>
    <edge id="e891" source="org.codehaus.jparsec.ParserTest.testIfElse()" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11085-11345;276-282;3-3];</data>
    </edge>
    <edge id="e892" source="org.codehaus.jparsec.ParserTest.testIfElse()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11085-11345;276-282;3-3/11085-11345;276-282;3-3];</data>
    </edge>
    <edge id="e893" source="org.codehaus.jparsec.ParserTest.testIfElse()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11085-11345;276-282;3-3];</data>
    </edge>
    <edge id="e894" source="org.codehaus.jparsec.ParserTest.testIfElse_withNext()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11352-11523;284-288;3-3];</data>
    </edge>
    <edge id="e895" source="org.codehaus.jparsec.ParserTest.testIfElse_withNext()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11352-11523;284-288;3-3];</data>
    </edge>
    <edge id="e896" source="org.codehaus.jparsec.ParserTest.testIfElse_withNext()" target="org.codehaus.jparsec.Parser.ifelse(org.codehaus.jparsec.functors.Map,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11352-11523;284-288;3-3];</data>
    </edge>
    <edge id="e897" source="org.codehaus.jparsec.ParserTest.testInfixl()" target="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18528-18819;485-492;3-3];</data>
    </edge>
    <edge id="e898" source="org.codehaus.jparsec.ParserTest.testInfixl()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18528-18819;485-492;3-3];</data>
    </edge>
    <edge id="e899" source="org.codehaus.jparsec.ParserTest.testInfixl()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18528-18819;485-492;3-3];</data>
    </edge>
    <edge id="e900" source="org.codehaus.jparsec.ParserTest.testInfixl()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18528-18819;485-492;3-3];</data>
    </edge>
    <edge id="e901" source="org.codehaus.jparsec.ParserTest.testInfixl_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18826-18952;494-497;3-3];</data>
    </edge>
    <edge id="e902" source="org.codehaus.jparsec.ParserTest.testInfixl_fails()" target="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18826-18952;494-497;3-3];</data>
    </edge>
    <edge id="e903" source="org.codehaus.jparsec.ParserTest.testInfixl_fails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18826-18952;494-497;3-3];</data>
    </edge>
    <edge id="e904" source="org.codehaus.jparsec.ParserTest.testInfixl_fails()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18826-18952;494-497;3-3];</data>
    </edge>
    <edge id="e905" source="org.codehaus.jparsec.ParserTest.testInfixl_noOperator()" target="org.codehaus.jparsec.Parser.infixl(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18313-18521;478-483;3-3];</data>
    </edge>
    <edge id="e906" source="org.codehaus.jparsec.ParserTest.testInfixl_noOperator()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18313-18521;478-483;3-3];</data>
    </edge>
    <edge id="e907" source="org.codehaus.jparsec.ParserTest.testInfixn()" target="org.codehaus.jparsec.Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18054-18306;470-476;3-3];</data>
    </edge>
    <edge id="e908" source="org.codehaus.jparsec.ParserTest.testInfixn()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18054-18306;470-476;3-3];</data>
    </edge>
    <edge id="e909" source="org.codehaus.jparsec.ParserTest.testInfixn()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18054-18306;470-476;3-3];</data>
    </edge>
    <edge id="e910" source="org.codehaus.jparsec.ParserTest.testInfixn()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18054-18306;470-476;3-3];</data>
    </edge>
    <edge id="e911" source="org.codehaus.jparsec.ParserTest.testInfixn_noOperator()" target="org.codehaus.jparsec.Parser.infixn(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17839-18047;463-468;3-3];</data>
    </edge>
    <edge id="e912" source="org.codehaus.jparsec.ParserTest.testInfixn_noOperator()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17839-18047;463-468;3-3];</data>
    </edge>
    <edge id="e913" source="org.codehaus.jparsec.ParserTest.testInfixr()" target="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19174-19474;506-513;3-3];</data>
    </edge>
    <edge id="e914" source="org.codehaus.jparsec.ParserTest.testInfixr()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19174-19474;506-513;3-3];</data>
    </edge>
    <edge id="e915" source="org.codehaus.jparsec.ParserTest.testInfixr()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19174-19474;506-513;3-3];</data>
    </edge>
    <edge id="e916" source="org.codehaus.jparsec.ParserTest.testInfixr()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19174-19474;506-513;3-3];</data>
    </edge>
    <edge id="e917" source="org.codehaus.jparsec.ParserTest.testInfixr_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19481-19607;515-518;3-3];</data>
    </edge>
    <edge id="e918" source="org.codehaus.jparsec.ParserTest.testInfixr_fails()" target="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19481-19607;515-518;3-3];</data>
    </edge>
    <edge id="e919" source="org.codehaus.jparsec.ParserTest.testInfixr_fails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19481-19607;515-518;3-3];</data>
    </edge>
    <edge id="e920" source="org.codehaus.jparsec.ParserTest.testInfixr_fails()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[19481-19607;515-518;3-3];</data>
    </edge>
    <edge id="e921" source="org.codehaus.jparsec.ParserTest.testInfixr_noOperator()" target="org.codehaus.jparsec.Parser.infixr(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18959-19167;499-504;3-3];</data>
    </edge>
    <edge id="e922" source="org.codehaus.jparsec.ParserTest.testInfixr_noOperator()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[18959-19167;499-504;3-3];</data>
    </edge>
    <edge id="e923" source="org.codehaus.jparsec.ParserTest.testLabel()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11530-11673;290-293;3-3];</data>
    </edge>
    <edge id="e924" source="org.codehaus.jparsec.ParserTest.testLabel()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[11530-11673;290-293;3-3];</data>
    </edge>
    <edge id="e925" source="org.codehaus.jparsec.ParserTest.testLexer()" target="org.codehaus.jparsec.Parser.lexer(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21147-21563;549-555;3-3];</data>
    </edge>
    <edge id="e926" source="org.codehaus.jparsec.ParserTest.testLexer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[21147-21563;549-555;3-3/21147-21563;549-555;3-3/21147-21563;549-555;3-3/21147-21563;549-555;3-3];</data>
    </edge>
    <edge id="e927" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e928" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e929" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e930" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e931" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e932" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.Parser.atLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3/7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e933" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e934" source="org.codehaus.jparsec.ParserTest.testMany()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7725-8547;189-204;3-3];</data>
    </edge>
    <edge id="e935" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3/7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e936" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e937" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.Parser.many1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e938" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3/7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e939" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e940" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e941" source="org.codehaus.jparsec.ParserTest.testMany1()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[7246-7718;178-187;3-3];</data>
    </edge>
    <edge id="e942" source="org.codehaus.jparsec.ParserTest.testMap()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12029-12223;306-311;3-3];</data>
    </edge>
    <edge id="e943" source="org.codehaus.jparsec.ParserTest.testMap_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12230-12361;313-316;3-3];</data>
    </edge>
    <edge id="e944" source="org.codehaus.jparsec.ParserTest.testNext()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3053-3306;85-90;3-3/3053-3306;85-90;3-3/3053-3306;85-90;3-3/3053-3306;85-90;3-3];</data>
    </edge>
    <edge id="e945" source="org.codehaus.jparsec.ParserTest.testNext()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3053-3306;85-90;3-3];</data>
    </edge>
    <edge id="e946" source="org.codehaus.jparsec.ParserTest.testNext()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3053-3306;85-90;3-3];</data>
    </edge>
    <edge id="e947" source="org.codehaus.jparsec.ParserTest.testNext()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3053-3306;85-90;3-3];</data>
    </edge>
    <edge id="e948" source="org.codehaus.jparsec.ParserTest.testNext_firstParserFails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2755-2873;74-77;3-3];</data>
    </edge>
    <edge id="e949" source="org.codehaus.jparsec.ParserTest.testNext_nextParserFails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2880-3046;79-83;3-3];</data>
    </edge>
    <edge id="e950" source="org.codehaus.jparsec.ParserTest.testNext_withMap()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2543-2748;67-72;3-3];</data>
    </edge>
    <edge id="e951" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3/9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e952" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Parser.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3/9351-9639;227-233;3-3/9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e953" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e954" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e955" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e956" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Parser.not(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3/9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e957" source="org.codehaus.jparsec.ParserTest.testNot()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9351-9639;227-233;3-3];</data>
    </edge>
    <edge id="e958" source="org.codehaus.jparsec.ParserTest.testNotFollowedBy()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3/3699-4031;103-108;3-3];</data>
    </edge>
    <edge id="e959" source="org.codehaus.jparsec.ParserTest.testNotFollowedBy()" target="org.codehaus.jparsec.Parser.notFollowedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3/3699-4031;103-108;3-3/3699-4031;103-108;3-3/3699-4031;103-108;3-3];</data>
    </edge>
    <edge id="e960" source="org.codehaus.jparsec.ParserTest.testNotFollowedBy()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3];</data>
    </edge>
    <edge id="e961" source="org.codehaus.jparsec.ParserTest.testNotFollowedBy()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3];</data>
    </edge>
    <edge id="e962" source="org.codehaus.jparsec.ParserTest.testNotFollowedBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3699-4031;103-108;3-3/3699-4031;103-108;3-3];</data>
    </edge>
    <edge id="e963" source="org.codehaus.jparsec.ParserTest.testOptional()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8950-9134;215-219;3-3/8950-9134;215-219;3-3];</data>
    </edge>
    <edge id="e964" source="org.codehaus.jparsec.ParserTest.testOptional()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8950-9134;215-219;3-3];</data>
    </edge>
    <edge id="e965" source="org.codehaus.jparsec.ParserTest.testOptional()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8950-9134;215-219;3-3];</data>
    </edge>
    <edge id="e966" source="org.codehaus.jparsec.ParserTest.testOptional_withDefaultValue()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9141-9344;221-225;3-3/9141-9344;221-225;3-3];</data>
    </edge>
    <edge id="e967" source="org.codehaus.jparsec.ParserTest.testOptional_withDefaultValue()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9141-9344;221-225;3-3];</data>
    </edge>
    <edge id="e968" source="org.codehaus.jparsec.ParserTest.testOptional_withDefaultValue()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9141-9344;221-225;3-3];</data>
    </edge>
    <edge id="e969" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.Parser.or(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e970" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e971" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e972" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3/8554-8943;206-213;3-3/8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e973" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e974" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e975" source="org.codehaus.jparsec.ParserTest.testOr()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[8554-8943;206-213;3-3];</data>
    </edge>
    <edge id="e976" source="org.codehaus.jparsec.ParserTest.testParse()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
    </edge>
    <edge id="e977" source="org.codehaus.jparsec.ParserTest.testParse()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
    </edge>
    <edge id="e978" source="org.codehaus.jparsec.ParserTest.testParse()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
    </edge>
    <edge id="e979" source="org.codehaus.jparsec.ParserTest.testParse()" target="org.codehaus.jparsec.Parser.parse(java.lang.Readable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
    </edge>
    <edge id="e980" source="org.codehaus.jparsec.ParserTest.testParse()" target="org.codehaus.jparsec.Parser.parse(java.lang.Readable,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1132-1826;33-47;3-3];</data>
    </edge>
    <edge id="e981" source="org.codehaus.jparsec.ParserTest.testPeek()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9646-9955;235-241;3-3];</data>
    </edge>
    <edge id="e982" source="org.codehaus.jparsec.ParserTest.testPeek()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9646-9955;235-241;3-3/9646-9955;235-241;3-3/9646-9955;235-241;3-3];</data>
    </edge>
    <edge id="e983" source="org.codehaus.jparsec.ParserTest.testPeek()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[9646-9955;235-241;3-3/9646-9955;235-241;3-3];</data>
    </edge>
    <edge id="e984" source="org.codehaus.jparsec.ParserTest.testPostfix()" target="org.codehaus.jparsec.Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17495-17782;453-460;3-3];</data>
    </edge>
    <edge id="e985" source="org.codehaus.jparsec.ParserTest.testPostfix()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17495-17782;453-460;3-3];</data>
    </edge>
    <edge id="e986" source="org.codehaus.jparsec.ParserTest.testPostfix()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17495-17782;453-460;3-3];</data>
    </edge>
    <edge id="e987" source="org.codehaus.jparsec.ParserTest.testPostfix()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17495-17782;453-460;3-3];</data>
    </edge>
    <edge id="e988" source="org.codehaus.jparsec.ParserTest.testPostfix_noOperator()" target="org.codehaus.jparsec.Parser.postfix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17274-17488;446-451;3-3];</data>
    </edge>
    <edge id="e989" source="org.codehaus.jparsec.ParserTest.testPostfix_noOperator()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[17274-17488;446-451;3-3];</data>
    </edge>
    <edge id="e990" source="org.codehaus.jparsec.ParserTest.testPrefix()" target="org.codehaus.jparsec.Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16941-17267;436-444;3-3];</data>
    </edge>
    <edge id="e991" source="org.codehaus.jparsec.ParserTest.testPrefix()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16941-17267;436-444;3-3];</data>
    </edge>
    <edge id="e992" source="org.codehaus.jparsec.ParserTest.testPrefix()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16941-17267;436-444;3-3];</data>
    </edge>
    <edge id="e993" source="org.codehaus.jparsec.ParserTest.testPrefix()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16941-17267;436-444;3-3];</data>
    </edge>
    <edge id="e994" source="org.codehaus.jparsec.ParserTest.testPrefix_noOperator()" target="org.codehaus.jparsec.Parser.prefix(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16723-16934;429-434;3-3];</data>
    </edge>
    <edge id="e995" source="org.codehaus.jparsec.ParserTest.testPrefix_noOperator()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[16723-16934;429-434;3-3];</data>
    </edge>
    <edge id="e996" source="org.codehaus.jparsec.ParserTest.testRetn()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3313-3438;92-95;3-3];</data>
    </edge>
    <edge id="e997" source="org.codehaus.jparsec.ParserTest.testRetn()" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3313-3438;92-95;3-3/3313-3438;92-95;3-3];</data>
    </edge>
    <edge id="e998" source="org.codehaus.jparsec.ParserTest.testRetn()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[3313-3438;92-95;3-3];</data>
    </edge>
    <edge id="e999" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.Parser.sepBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3/12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1000" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3/12796-13202;328-336;3-3/12796-13202;328-336;3-3/12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1001" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3/12796-13202;328-336;3-3/12796-13202;328-336;3-3/12796-13202;328-336;3-3/12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1002" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3/12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1003" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1004" source="org.codehaus.jparsec.ParserTest.testSepBy()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12796-13202;328-336;3-3];</data>
    </edge>
    <edge id="e1005" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.Parser.sepBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3/12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1006" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3/12368-12789;318-326;3-3/12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1007" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3/12368-12789;318-326;3-3/12368-12789;318-326;3-3/12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1008" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3/12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1009" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3/12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1010" source="org.codehaus.jparsec.ParserTest.testSepBy1()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[12368-12789;318-326;3-3];</data>
    </edge>
    <edge id="e1011" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Parser.sepEndBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1012" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1013" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1014" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1015" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1016" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1017" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1018" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3/15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1019" source="org.codehaus.jparsec.ParserTest.testSepEndBy()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[15256-16560;391-422;3-3];</data>
    </edge>
    <edge id="e1020" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Parser.sepEndBy1(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1021" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1022" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1023" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1024" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1025" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1026" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1027" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3/13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1028" source="org.codehaus.jparsec.ParserTest.testSepEndBy1()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[13956-15251;358-389;3-3];</data>
    </edge>
    <edge id="e1029" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1030" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1031" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1032" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3/5922-6775;151-166;3-3/5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1033" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1034" source="org.codehaus.jparsec.ParserTest.testSkipMany()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5922-6775;151-166;3-3];</data>
    </edge>
    <edge id="e1035" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3/6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1036" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1037" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.Parser.skipMany1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1038" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3/6782-7239;168-176;3-3/6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1039" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1040" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1041" source="org.codehaus.jparsec.ParserTest.testSkipMany1()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[6782-7239;168-176;3-3];</data>
    </edge>
    <edge id="e1042" source="org.codehaus.jparsec.ParserTest.testSkipTimes()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3/4038-4418;110-117;3-3/4038-4418;110-117;3-3];</data>
    </edge>
    <edge id="e1043" source="org.codehaus.jparsec.ParserTest.testSkipTimes()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3/4038-4418;110-117;3-3];</data>
    </edge>
    <edge id="e1044" source="org.codehaus.jparsec.ParserTest.testSkipTimes()" target="org.codehaus.jparsec.Parser.skipTimes(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3/4038-4418;110-117;3-3/4038-4418;110-117;3-3/4038-4418;110-117;3-3/4038-4418;110-117;3-3/4038-4418;110-117;3-3];</data>
    </edge>
    <edge id="e1045" source="org.codehaus.jparsec.ParserTest.testSkipTimes()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3/4038-4418;110-117;3-3];</data>
    </edge>
    <edge id="e1046" source="org.codehaus.jparsec.ParserTest.testSkipTimes()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4038-4418;110-117;3-3/4038-4418;110-117;3-3];</data>
    </edge>
    <edge id="e1047" source="org.codehaus.jparsec.ParserTest.testSource()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1833-2240;49-57;3-3/1833-2240;49-57;3-3];</data>
    </edge>
    <edge id="e1048" source="org.codehaus.jparsec.ParserTest.testSource()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1833-2240;49-57;3-3/1833-2240;49-57;3-3];</data>
    </edge>
    <edge id="e1049" source="org.codehaus.jparsec.ParserTest.testSource()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[1833-2240;49-57;3-3];</data>
    </edge>
    <edge id="e1050" source="org.codehaus.jparsec.ParserTest.testStep()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10245-10439;250-253;3-3];</data>
    </edge>
    <edge id="e1051" source="org.codehaus.jparsec.ParserTest.testStep()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10245-10439;250-253;3-3/10245-10439;250-253;3-3];</data>
    </edge>
    <edge id="e1052" source="org.codehaus.jparsec.ParserTest.testStep()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10245-10439;250-253;3-3];</data>
    </edge>
    <edge id="e1053" source="org.codehaus.jparsec.ParserTest.testStep()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10245-10439;250-253;3-3];</data>
    </edge>
    <edge id="e1054" source="org.codehaus.jparsec.ParserTest.testStep_negativeStep()" target="org.codehaus.jparsec.Parser.step(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10446-10647;255-262;3-3];</data>
    </edge>
    <edge id="e1055" source="org.codehaus.jparsec.ParserTest.testSucceeds()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10654-10869;264-268;3-3/10654-10869;264-268;3-3/10654-10869;264-268;3-3];</data>
    </edge>
    <edge id="e1056" source="org.codehaus.jparsec.ParserTest.testSucceeds()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10654-10869;264-268;3-3/10654-10869;264-268;3-3];</data>
    </edge>
    <edge id="e1057" source="org.codehaus.jparsec.ParserTest.testSucceeds()" target="org.codehaus.jparsec.Parser.succeeds()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10654-10869;264-268;3-3/10654-10869;264-268;3-3/10654-10869;264-268;3-3];</data>
    </edge>
    <edge id="e1058" source="org.codehaus.jparsec.ParserTest.testSucceeds()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[10654-10869;264-268;3-3];</data>
    </edge>
    <edge id="e1059" source="org.codehaus.jparsec.ParserTest.testTimes()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3/4425-4811;119-126;3-3/4425-4811;119-126;3-3];</data>
    </edge>
    <edge id="e1060" source="org.codehaus.jparsec.ParserTest.testTimes()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3/4425-4811;119-126;3-3];</data>
    </edge>
    <edge id="e1061" source="org.codehaus.jparsec.ParserTest.testTimes()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3/4425-4811;119-126;3-3/4425-4811;119-126;3-3/4425-4811;119-126;3-3/4425-4811;119-126;3-3/4425-4811;119-126;3-3];</data>
    </edge>
    <edge id="e1062" source="org.codehaus.jparsec.ParserTest.testTimes()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3/4425-4811;119-126;3-3];</data>
    </edge>
    <edge id="e1063" source="org.codehaus.jparsec.ParserTest.testTimes()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[4425-4811;119-126;3-3/4425-4811;119-126;3-3];</data>
    </edge>
    <edge id="e1064" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.ParserTest.assertListParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1065" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1066" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.Parser.times(int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1067" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3/5362-5915;139-149;3-3/5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1068" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3/5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1069" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1070" source="org.codehaus.jparsec.ParserTest.testTimes_range()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[5362-5915;139-149;3-3];</data>
    </edge>
    <edge id="e1071" source="org.codehaus.jparsec.ParserTest.testToken()" target="org.codehaus.jparsec.Parser.token()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2247-2494;59-64;3-3/2247-2494;59-64;3-3/2247-2494;59-64;3-3/2247-2494;59-64;3-3];</data>
    </edge>
    <edge id="e1072" source="org.codehaus.jparsec.ParserTest.testToken()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2247-2494;59-64;3-3/2247-2494;59-64;3-3];</data>
    </edge>
    <edge id="e1073" source="org.codehaus.jparsec.ParserTest.testToken()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParserTest.java;[2247-2494;59-64;3-3];</data>
    </edge>
    <edge id="e1074" source="org.codehaus.jparsec.Parsers.runNext(org.codehaus.jparsec.ParseContext,org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[20292-20508;545-549;3-3];</data>
    </edge>
    <edge id="e1075" source="org.codehaus.jparsec.Parsers.applyPostfixOperators(T,java.lang.Iterable)" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25254-25458;684-690;3-3];</data>
    </edge>
    <edge id="e1076" source="org.codehaus.jparsec.Parsers.applyPrefixOperators(T,java.util.List)" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24588-24836;663-670;3-3];</data>
    </edge>
    <edge id="e1077" source="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)" target="org.codehaus.jparsec.Parser.run(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3532-4013;90-102;3-3];</data>
    </edge>
    <edge id="e1078" source="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)" target="org.codehaus.jparsec.error.ParserException(org.codehaus.jparsec.error.ParseErrorDetails,java.lang.String,org.codehaus.jparsec.error.Location)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3532-4013;90-102;3-3];</data>
    </edge>
    <edge id="e1079" source="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)" target="org.codehaus.jparsec.ParseContext.renderError()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3532-4013;90-102;3-3];</data>
    </edge>
    <edge id="e1080" source="org.codehaus.jparsec.Parsers.parse(java.lang.CharSequence,org.codehaus.jparsec.Parser,org.codehaus.jparsec.SourceLocator,java.lang.String)" target="org.codehaus.jparsec.SourceLocator.locate(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[3532-4013;90-102;3-3];</data>
    </edge>
    <edge id="e1081" source="org.codehaus.jparsec.Parsers.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[9059-9321;240-246;3-3];</data>
    </edge>
    <edge id="e1082" source="org.codehaus.jparsec.Parsers.infixl(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[21855-23161;588-621;3-3];</data>
    </edge>
    <edge id="e1083" source="org.codehaus.jparsec.Parsers.infixr(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[23166-23965;623-641;3-3];</data>
    </edge>
    <edge id="e1084" source="org.codehaus.jparsec.Parsers.or(java.lang.Iterable)" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[15601-15822;419-424;3-3];</data>
    </edge>
    <edge id="e1085" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12284-12524;327-333;3-3];</data>
    </edge>
    <edge id="e1086" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12531-12806;335-342;3-3];</data>
    </edge>
    <edge id="e1087" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[12813-13122;344-352;3-3];</data>
    </edge>
    <edge id="e1088" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13129-13467;354-362;3-3];</data>
    </edge>
    <edge id="e1089" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13474-13840;364-372;3-3];</data>
    </edge>
    <edge id="e1090" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[13847-14247;374-383;3-3];</data>
    </edge>
    <edge id="e1091" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[14254-14682;385-394;3-3];</data>
    </edge>
    <edge id="e1092" source="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[14689-15145;396-405;3-3];</data>
    </edge>
    <edge id="e1093" source="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.InternalFunctors.lastOfTwo()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[5665-5948;153-159;3-3];</data>
    </edge>
    <edge id="e1094" source="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.InternalFunctors.lastOfFour()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[6192-6458;166-170;3-3];</data>
    </edge>
    <edge id="e1095" source="org.codehaus.jparsec.Parsers.shorter(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[17059-17379;458-465;3-3];</data>
    </edge>
    <edge id="e1096" source="org.codehaus.jparsec.Parsers.shortest(java.lang.Iterable)" target="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[17792-18098;477-483;3-3];</data>
    </edge>
    <edge id="e1097" source="org.codehaus.jparsec.functors.Map2.map(A,B)" target="org.codehaus.jparsec.Parsers$7.map(T,java.util.List)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25045-25166;675-677;7-7];</data>
    </edge>
    <edge id="e1098" source="org.codehaus.jparsec.Parsers$7.map(T,java.util.List)" target="org.codehaus.jparsec.Parsers.applyPostfixOperators(T,java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[25045-25166;675-677;7-7];</data>
    </edge>
    <edge id="e1099" source="org.codehaus.jparsec.functors.Map2.map(A,B)" target="org.codehaus.jparsec.Parsers$6.map(java.util.List,T)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24173-24293;646-648;7-7];</data>
    </edge>
    <edge id="e1100" source="org.codehaus.jparsec.Parsers$6.map(java.util.List,T)" target="org.codehaus.jparsec.Parsers.applyPrefixOperators(T,java.util.List)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[24173-24293;646-648;7-7];</data>
    </edge>
    <edge id="e1101" source="org.codehaus.jparsec.Parsers.alt(org.codehaus.jparsec.Parser[])" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Parsers.java;[15829-16018;426-429;3-3];</data>
    </edge>
    <edge id="e1102" source="org.codehaus.jparsec.ParsersTest.testAlways()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[789-856;27-29;3-3];</data>
    </edge>
    <edge id="e1103" source="org.codehaus.jparsec.ParsersTest.testAnyToken()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21051-21381;561-569;3-3];</data>
    </edge>
    <edge id="e1104" source="org.codehaus.jparsec.ParsersTest.testAnyToken()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21051-21381;561-569;3-3/21051-21381;561-569;3-3];</data>
    </edge>
    <edge id="e1105" source="org.codehaus.jparsec.ParsersTest.testAnyToken()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21051-21381;561-569;3-3/21051-21381;561-569;3-3];</data>
    </edge>
    <edge id="e1106" source="org.codehaus.jparsec.ParsersTest.testAnyToken()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21051-21381;561-569;3-3];</data>
    </edge>
    <edge id="e1107" source="org.codehaus.jparsec.ParsersTest.testArray()" target="org.codehaus.jparsec.Parsers.array(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6357-6658;182-188;3-3];</data>
    </edge>
    <edge id="e1108" source="org.codehaus.jparsec.ParsersTest.testArray()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6357-6658;182-188;3-3/6357-6658;182-188;3-3];</data>
    </edge>
    <edge id="e1109" source="org.codehaus.jparsec.ParsersTest.testArray()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6357-6658;182-188;3-3];</data>
    </edge>
    <edge id="e1110" source="org.codehaus.jparsec.ParsersTest.testArray()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6357-6658;182-188;3-3/6357-6658;182-188;3-3];</data>
    </edge>
    <edge id="e1111" source="org.codehaus.jparsec.ParsersTest.testBetween()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[999-1129;36-38;3-3];</data>
    </edge>
    <edge id="e1112" source="org.codehaus.jparsec.ParsersTest.testBetween()" target="org.codehaus.jparsec.Parsers.between(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[999-1129;36-38;3-3];</data>
    </edge>
    <edge id="e1113" source="org.codehaus.jparsec.ParsersTest.testBetween()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[999-1129;36-38;3-3/999-1129;36-38;3-3];</data>
    </edge>
    <edge id="e1114" source="org.codehaus.jparsec.ParsersTest.testBetween()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[999-1129;36-38;3-3];</data>
    </edge>
    <edge id="e1115" source="org.codehaus.jparsec.ParsersTest.testConstant()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1386-1570;48-51;3-3];</data>
    </edge>
    <edge id="e1116" source="org.codehaus.jparsec.ParsersTest.testConstant()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1386-1570;48-51;3-3];</data>
    </edge>
    <edge id="e1117" source="org.codehaus.jparsec.ParsersTest.testConstant()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1386-1570;48-51;3-3];</data>
    </edge>
    <edge id="e1118" source="org.codehaus.jparsec.ParsersTest.testEof()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1136-1379;40-46;3-3/1136-1379;40-46;3-3];</data>
    </edge>
    <edge id="e1119" source="org.codehaus.jparsec.ParsersTest.testEof()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1136-1379;40-46;3-3/1136-1379;40-46;3-3];</data>
    </edge>
    <edge id="e1120" source="org.codehaus.jparsec.ParsersTest.testExpect()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17076-17232;452-455;3-3];</data>
    </edge>
    <edge id="e1121" source="org.codehaus.jparsec.ParsersTest.testFail()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7012-7154;199-202;3-3];</data>
    </edge>
    <edge id="e1122" source="org.codehaus.jparsec.ParsersTest.testIndex()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21386-21529;571-574;3-3];</data>
    </edge>
    <edge id="e1123" source="org.codehaus.jparsec.ParsersTest.testIndex()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21386-21529;571-574;3-3];</data>
    </edge>
    <edge id="e1124" source="org.codehaus.jparsec.ParsersTest.testIndex()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21386-21529;571-574;3-3];</data>
    </edge>
    <edge id="e1125" source="org.codehaus.jparsec.ParsersTest.testList()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6665-7005;190-197;3-3/6665-7005;190-197;3-3];</data>
    </edge>
    <edge id="e1126" source="org.codehaus.jparsec.ParsersTest.testList()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6665-7005;190-197;3-3];</data>
    </edge>
    <edge id="e1127" source="org.codehaus.jparsec.ParsersTest.testList()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[6665-7005;190-197;3-3/6665-7005;190-197;3-3];</data>
    </edge>
    <edge id="e1128" source="org.codehaus.jparsec.ParsersTest.testLonger()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3];</data>
    </edge>
    <edge id="e1129" source="org.codehaus.jparsec.ParsersTest.testLonger()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3];</data>
    </edge>
    <edge id="e1130" source="org.codehaus.jparsec.ParsersTest.testLonger()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3/14162-14579;386-392;3-3];</data>
    </edge>
    <edge id="e1131" source="org.codehaus.jparsec.ParsersTest.testLongest()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3];</data>
    </edge>
    <edge id="e1132" source="org.codehaus.jparsec.ParsersTest.testLongest()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3];</data>
    </edge>
    <edge id="e1133" source="org.codehaus.jparsec.ParsersTest.testLongest()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3/15449-16013;416-424;3-3];</data>
    </edge>
    <edge id="e1134" source="org.codehaus.jparsec.ParsersTest.testLongest_1Parser()" target="org.codehaus.jparsec.Parsers.longest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[15278-15442;410-414;3-3];</data>
    </edge>
    <edge id="e1135" source="org.codehaus.jparsec.ParsersTest.testNever()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[863-992;31-34;3-3];</data>
    </edge>
    <edge id="e1136" source="org.codehaus.jparsec.ParsersTest.testOr_0Parser()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8166-8246;232-234;3-3];</data>
    </edge>
    <edge id="e1137" source="org.codehaus.jparsec.ParsersTest.testOr_10Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[13325-14155;365-384;3-3/13325-14155;365-384;3-3];</data>
    </edge>
    <edge id="e1138" source="org.codehaus.jparsec.ParsersTest.testOr_10Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3];</data>
    </edge>
    <edge id="e1139" source="org.codehaus.jparsec.ParsersTest.testOr_10Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3/13325-14155;365-384;3-3];</data>
    </edge>
    <edge id="e1140" source="org.codehaus.jparsec.ParsersTest.testOr_10Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[13325-14155;365-384;3-3];</data>
    </edge>
    <edge id="e1141" source="org.codehaus.jparsec.ParsersTest.testOr_1Parser()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8253-8407;236-240;3-3];</data>
    </edge>
    <edge id="e1142" source="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3];</data>
    </edge>
    <edge id="e1143" source="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3];</data>
    </edge>
    <edge id="e1144" source="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3];</data>
    </edge>
    <edge id="e1145" source="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3/8916-9357;253-261;3-3];</data>
    </edge>
    <edge id="e1146" source="org.codehaus.jparsec.ParsersTest.testOr_2Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8916-9357;253-261;3-3/8916-9357;253-261;3-3];</data>
    </edge>
    <edge id="e1147" source="org.codehaus.jparsec.ParsersTest.testOr_3Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9364-9713;263-270;3-3/9364-9713;263-270;3-3];</data>
    </edge>
    <edge id="e1148" source="org.codehaus.jparsec.ParsersTest.testOr_3Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9364-9713;263-270;3-3/9364-9713;263-270;3-3/9364-9713;263-270;3-3/9364-9713;263-270;3-3/9364-9713;263-270;3-3];</data>
    </edge>
    <edge id="e1149" source="org.codehaus.jparsec.ParsersTest.testOr_3Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9364-9713;263-270;3-3/9364-9713;263-270;3-3/9364-9713;263-270;3-3/9364-9713;263-270;3-3];</data>
    </edge>
    <edge id="e1150" source="org.codehaus.jparsec.ParsersTest.testOr_3Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9364-9713;263-270;3-3];</data>
    </edge>
    <edge id="e1151" source="org.codehaus.jparsec.ParsersTest.testOr_4Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9720-10139;272-281;3-3/9720-10139;272-281;3-3];</data>
    </edge>
    <edge id="e1152" source="org.codehaus.jparsec.ParsersTest.testOr_4Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3];</data>
    </edge>
    <edge id="e1153" source="org.codehaus.jparsec.ParsersTest.testOr_4Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3/9720-10139;272-281;3-3];</data>
    </edge>
    <edge id="e1154" source="org.codehaus.jparsec.ParsersTest.testOr_4Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[9720-10139;272-281;3-3];</data>
    </edge>
    <edge id="e1155" source="org.codehaus.jparsec.ParsersTest.testOr_5Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10146-10647;283-295;3-3/10146-10647;283-295;3-3];</data>
    </edge>
    <edge id="e1156" source="org.codehaus.jparsec.ParsersTest.testOr_5Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3];</data>
    </edge>
    <edge id="e1157" source="org.codehaus.jparsec.ParsersTest.testOr_5Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3/10146-10647;283-295;3-3];</data>
    </edge>
    <edge id="e1158" source="org.codehaus.jparsec.ParsersTest.testOr_5Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10146-10647;283-295;3-3];</data>
    </edge>
    <edge id="e1159" source="org.codehaus.jparsec.ParsersTest.testOr_6Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10654-11217;297-310;3-3/10654-11217;297-310;3-3];</data>
    </edge>
    <edge id="e1160" source="org.codehaus.jparsec.ParsersTest.testOr_6Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3];</data>
    </edge>
    <edge id="e1161" source="org.codehaus.jparsec.ParsersTest.testOr_6Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3/10654-11217;297-310;3-3];</data>
    </edge>
    <edge id="e1162" source="org.codehaus.jparsec.ParsersTest.testOr_6Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[10654-11217;297-310;3-3];</data>
    </edge>
    <edge id="e1163" source="org.codehaus.jparsec.ParsersTest.testOr_7Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11224-11850;312-326;3-3/11224-11850;312-326;3-3];</data>
    </edge>
    <edge id="e1164" source="org.codehaus.jparsec.ParsersTest.testOr_7Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3];</data>
    </edge>
    <edge id="e1165" source="org.codehaus.jparsec.ParsersTest.testOr_7Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3/11224-11850;312-326;3-3];</data>
    </edge>
    <edge id="e1166" source="org.codehaus.jparsec.ParsersTest.testOr_7Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11224-11850;312-326;3-3];</data>
    </edge>
    <edge id="e1167" source="org.codehaus.jparsec.ParsersTest.testOr_8Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11857-12553;328-344;3-3/11857-12553;328-344;3-3];</data>
    </edge>
    <edge id="e1168" source="org.codehaus.jparsec.ParsersTest.testOr_8Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3];</data>
    </edge>
    <edge id="e1169" source="org.codehaus.jparsec.ParsersTest.testOr_8Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3/11857-12553;328-344;3-3];</data>
    </edge>
    <edge id="e1170" source="org.codehaus.jparsec.ParsersTest.testOr_8Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[11857-12553;328-344;3-3];</data>
    </edge>
    <edge id="e1171" source="org.codehaus.jparsec.ParsersTest.testOr_9Parsers()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[12560-13318;346-363;3-3/12560-13318;346-363;3-3];</data>
    </edge>
    <edge id="e1172" source="org.codehaus.jparsec.ParsersTest.testOr_9Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3];</data>
    </edge>
    <edge id="e1173" source="org.codehaus.jparsec.ParsersTest.testOr_9Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3/12560-13318;346-363;3-3];</data>
    </edge>
    <edge id="e1174" source="org.codehaus.jparsec.ParsersTest.testOr_9Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[12560-13318;346-363;3-3];</data>
    </edge>
    <edge id="e1175" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.Parsers.or(java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1176" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1177" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1178" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.Parsers.or(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1179" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3/8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1180" source="org.codehaus.jparsec.ParsersTest.testOr_withIterable()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[8414-8909;242-251;3-3/8414-8909;242-251;3-3];</data>
    </edge>
    <edge id="e1181" source="org.codehaus.jparsec.ParsersTest.testPair()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4550-4818;135-141;3-3/4550-4818;135-141;3-3];</data>
    </edge>
    <edge id="e1182" source="org.codehaus.jparsec.ParsersTest.testPair()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4550-4818;135-141;3-3];</data>
    </edge>
    <edge id="e1183" source="org.codehaus.jparsec.ParsersTest.testPair()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4550-4818;135-141;3-3/4550-4818;135-141;3-3];</data>
    </edge>
    <edge id="e1184" source="org.codehaus.jparsec.ParsersTest.testPlus_0Parser()" target="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7161-7245;204-206;3-3];</data>
    </edge>
    <edge id="e1185" source="org.codehaus.jparsec.ParsersTest.testPlus_1Parser()" target="org.codehaus.jparsec.Parsers.plus(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7252-7410;208-212;3-3];</data>
    </edge>
    <edge id="e1186" source="org.codehaus.jparsec.ParsersTest.testPlus_2Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7417-7793;214-221;3-3/7417-7793;214-221;3-3/7417-7793;214-221;3-3];</data>
    </edge>
    <edge id="e1187" source="org.codehaus.jparsec.ParsersTest.testPlus_2Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7417-7793;214-221;3-3/7417-7793;214-221;3-3];</data>
    </edge>
    <edge id="e1188" source="org.codehaus.jparsec.ParsersTest.testPlus_2Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7417-7793;214-221;3-3/7417-7793;214-221;3-3];</data>
    </edge>
    <edge id="e1189" source="org.codehaus.jparsec.ParsersTest.testPlus_2Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7417-7793;214-221;3-3/7417-7793;214-221;3-3/7417-7793;214-221;3-3];</data>
    </edge>
    <edge id="e1190" source="org.codehaus.jparsec.ParsersTest.testPlus_3Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7800-8159;223-230;3-3/7800-8159;223-230;3-3/7800-8159;223-230;3-3/7800-8159;223-230;3-3/7800-8159;223-230;3-3];</data>
    </edge>
    <edge id="e1191" source="org.codehaus.jparsec.ParsersTest.testPlus_3Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7800-8159;223-230;3-3/7800-8159;223-230;3-3/7800-8159;223-230;3-3];</data>
    </edge>
    <edge id="e1192" source="org.codehaus.jparsec.ParsersTest.testPlus_3Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7800-8159;223-230;3-3];</data>
    </edge>
    <edge id="e1193" source="org.codehaus.jparsec.ParsersTest.testPlus_3Parsers()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[7800-8159;223-230;3-3];</data>
    </edge>
    <edge id="e1194" source="org.codehaus.jparsec.ParsersTest.testRunnable()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1577-1822;53-59;3-3];</data>
    </edge>
    <edge id="e1195" source="org.codehaus.jparsec.ParsersTest.testSequence()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3461-3815;103-111;3-3];</data>
    </edge>
    <edge id="e1196" source="org.codehaus.jparsec.ParsersTest.testSequence()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3461-3815;103-111;3-3/3461-3815;103-111;3-3/3461-3815;103-111;3-3];</data>
    </edge>
    <edge id="e1197" source="org.codehaus.jparsec.ParsersTest.testSequence_0Parser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4181-4348;123-127;3-3];</data>
    </edge>
    <edge id="e1198" source="org.codehaus.jparsec.ParsersTest.testSequence_1Parser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4355-4543;129-133;3-3];</data>
    </edge>
    <edge id="e1199" source="org.codehaus.jparsec.ParsersTest.testSequence_2Parsers()" target="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1829-2122;61-67;3-3];</data>
    </edge>
    <edge id="e1200" source="org.codehaus.jparsec.ParsersTest.testSequence_2Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1829-2122;61-67;3-3];</data>
    </edge>
    <edge id="e1201" source="org.codehaus.jparsec.ParsersTest.testSequence_2Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[1829-2122;61-67;3-3/1829-2122;61-67;3-3];</data>
    </edge>
    <edge id="e1202" source="org.codehaus.jparsec.ParsersTest.testSequence_3Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2129-2495;69-77;3-3];</data>
    </edge>
    <edge id="e1203" source="org.codehaus.jparsec.ParsersTest.testSequence_3Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2129-2495;69-77;3-3/2129-2495;69-77;3-3/2129-2495;69-77;3-3];</data>
    </edge>
    <edge id="e1204" source="org.codehaus.jparsec.ParsersTest.testSequence_4Parsers()" target="org.codehaus.jparsec.Parsers.sequence(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2502-2936;79-88;3-3];</data>
    </edge>
    <edge id="e1205" source="org.codehaus.jparsec.ParsersTest.testSequence_4Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2502-2936;79-88;3-3];</data>
    </edge>
    <edge id="e1206" source="org.codehaus.jparsec.ParsersTest.testSequence_4Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2502-2936;79-88;3-3/2502-2936;79-88;3-3/2502-2936;79-88;3-3/2502-2936;79-88;3-3];</data>
    </edge>
    <edge id="e1207" source="org.codehaus.jparsec.ParsersTest.testSequence_5Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2943-3454;90-101;3-3];</data>
    </edge>
    <edge id="e1208" source="org.codehaus.jparsec.ParsersTest.testSequence_5Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[2943-3454;90-101;3-3/2943-3454;90-101;3-3/2943-3454;90-101;3-3/2943-3454;90-101;3-3/2943-3454;90-101;3-3];</data>
    </edge>
    <edge id="e1209" source="org.codehaus.jparsec.ParsersTest.testSequence_withIterable()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3822-4174;113-121;3-3];</data>
    </edge>
    <edge id="e1210" source="org.codehaus.jparsec.ParsersTest.testSequence_withIterable()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[3822-4174;113-121;3-3/3822-4174;113-121;3-3];</data>
    </edge>
    <edge id="e1211" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap2()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17466-17733;463-469;3-3/17466-17733;463-469;3-3];</data>
    </edge>
    <edge id="e1212" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap2()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17466-17733;463-469;3-3];</data>
    </edge>
    <edge id="e1213" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap2_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17740-17957;471-476;3-3/17740-17957;471-476;3-3];</data>
    </edge>
    <edge id="e1214" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap3()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18025-18311;479-485;3-3/18025-18311;479-485;3-3/18025-18311;479-485;3-3];</data>
    </edge>
    <edge id="e1215" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap3()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18025-18311;479-485;3-3];</data>
    </edge>
    <edge id="e1216" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap3_fails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18318-18589;487-493;3-3/18318-18589;487-493;3-3/18318-18589;487-493;3-3];</data>
    </edge>
    <edge id="e1217" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap3_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18318-18589;487-493;3-3/18318-18589;487-493;3-3/18318-18589;487-493;3-3];</data>
    </edge>
    <edge id="e1218" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap4()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18668-18981;496-503;3-3/18668-18981;496-503;3-3/18668-18981;496-503;3-3/18668-18981;496-503;3-3];</data>
    </edge>
    <edge id="e1219" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap4()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18668-18981;496-503;3-3];</data>
    </edge>
    <edge id="e1220" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap4_fails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18988-19324;505-513;3-3/18988-19324;505-513;3-3/18988-19324;505-513;3-3/18988-19324;505-513;3-3];</data>
    </edge>
    <edge id="e1221" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap4_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[18988-19324;505-513;3-3/18988-19324;505-513;3-3/18988-19324;505-513;3-3/18988-19324;505-513;3-3];</data>
    </edge>
    <edge id="e1222" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap5()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19414-19746;516-523;3-3/19414-19746;516-523;3-3/19414-19746;516-523;3-3/19414-19746;516-523;3-3/19414-19746;516-523;3-3];</data>
    </edge>
    <edge id="e1223" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap5()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19414-19746;516-523;3-3];</data>
    </edge>
    <edge id="e1224" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap5_fails()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3];</data>
    </edge>
    <edge id="e1225" source="org.codehaus.jparsec.ParsersTest.testSequence_withMap5_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3/19753-20148;525-534;3-3];</data>
    </edge>
    <edge id="e1226" source="org.codehaus.jparsec.ParsersTest.testShorter()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3];</data>
    </edge>
    <edge id="e1227" source="org.codehaus.jparsec.ParsersTest.testShorter()" target="org.codehaus.jparsec.Parsers.shorter(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3];</data>
    </edge>
    <edge id="e1228" source="org.codehaus.jparsec.ParsersTest.testShorter()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3];</data>
    </edge>
    <edge id="e1229" source="org.codehaus.jparsec.ParsersTest.testShorter()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3];</data>
    </edge>
    <edge id="e1230" source="org.codehaus.jparsec.ParsersTest.testShorter()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3/14586-15174;394-404;3-3];</data>
    </edge>
    <edge id="e1231" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1232" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1233" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1234" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1235" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.Parser.followedBy(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3/16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1236" source="org.codehaus.jparsec.ParsersTest.testShortest()" target="org.codehaus.jparsec.Parsers.shortest(java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16292-17069;436-450;3-3];</data>
    </edge>
    <edge id="e1237" source="org.codehaus.jparsec.ParsersTest.testShortest_0Parser()" target="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16020-16112;426-428;3-3];</data>
    </edge>
    <edge id="e1238" source="org.codehaus.jparsec.ParsersTest.testShortest_1Parser()" target="org.codehaus.jparsec.Parsers.shortest(org.codehaus.jparsec.Parser[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[16119-16285;430-434;3-3];</data>
    </edge>
    <edge id="e1239" source="org.codehaus.jparsec.ParsersTest.testToArrayWithIteration()" target="org.codehaus.jparsec.Parsers.toArrayWithIteration(java.lang.Iterable)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[21865-22213;586-594;3-3];</data>
    </edge>
    <edge id="e1240" source="org.codehaus.jparsec.ParsersTest.testToken()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20192-20507;537-544;3-3];</data>
    </edge>
    <edge id="e1241" source="org.codehaus.jparsec.ParsersTest.testToken()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20192-20507;537-544;3-3];</data>
    </edge>
    <edge id="e1242" source="org.codehaus.jparsec.ParsersTest.testToken()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20192-20507;537-544;3-3];</data>
    </edge>
    <edge id="e1243" source="org.codehaus.jparsec.ParsersTest.testTokenType()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20768-21044;554-559;3-3];</data>
    </edge>
    <edge id="e1244" source="org.codehaus.jparsec.ParsersTest.testTokenType()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20768-21044;554-559;3-3];</data>
    </edge>
    <edge id="e1245" source="org.codehaus.jparsec.ParsersTest.testTokenType()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20768-21044;554-559;3-3];</data>
    </edge>
    <edge id="e1246" source="org.codehaus.jparsec.ParsersTest.testToken_fails()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20511-20761;545-552;3-3];</data>
    </edge>
    <edge id="e1247" source="org.codehaus.jparsec.ParsersTest.testToken_fails()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20511-20761;545-552;3-3];</data>
    </edge>
    <edge id="e1248" source="org.codehaus.jparsec.ParsersTest.testToken_fails()" target="org.codehaus.jparsec.Parser.times(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[20511-20761;545-552;3-3];</data>
    </edge>
    <edge id="e1249" source="org.codehaus.jparsec.ParsersTest.testTuple_2Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4825-5104;143-149;3-3/4825-5104;143-149;3-3];</data>
    </edge>
    <edge id="e1250" source="org.codehaus.jparsec.ParsersTest.testTuple_2Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4825-5104;143-149;3-3];</data>
    </edge>
    <edge id="e1251" source="org.codehaus.jparsec.ParsersTest.testTuple_2Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[4825-5104;143-149;3-3/4825-5104;143-149;3-3];</data>
    </edge>
    <edge id="e1252" source="org.codehaus.jparsec.ParsersTest.testTuple_3Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5111-5453;151-158;3-3/5111-5453;151-158;3-3/5111-5453;151-158;3-3];</data>
    </edge>
    <edge id="e1253" source="org.codehaus.jparsec.ParsersTest.testTuple_3Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5111-5453;151-158;3-3];</data>
    </edge>
    <edge id="e1254" source="org.codehaus.jparsec.ParsersTest.testTuple_3Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5111-5453;151-158;3-3/5111-5453;151-158;3-3/5111-5453;151-158;3-3];</data>
    </edge>
    <edge id="e1255" source="org.codehaus.jparsec.ParsersTest.testTuple_4Parsers()" target="org.codehaus.jparsec.Parsers.tuple(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5460-5865;160-168;3-3];</data>
    </edge>
    <edge id="e1256" source="org.codehaus.jparsec.ParsersTest.testTuple_4Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5460-5865;160-168;3-3/5460-5865;160-168;3-3/5460-5865;160-168;3-3/5460-5865;160-168;3-3];</data>
    </edge>
    <edge id="e1257" source="org.codehaus.jparsec.ParsersTest.testTuple_4Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5460-5865;160-168;3-3];</data>
    </edge>
    <edge id="e1258" source="org.codehaus.jparsec.ParsersTest.testTuple_4Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5460-5865;160-168;3-3/5460-5865;160-168;3-3/5460-5865;160-168;3-3/5460-5865;160-168;3-3];</data>
    </edge>
    <edge id="e1259" source="org.codehaus.jparsec.ParsersTest.testTuple_5Parsers()" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3];</data>
    </edge>
    <edge id="e1260" source="org.codehaus.jparsec.ParsersTest.testTuple_5Parsers()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5872-6350;170-180;3-3];</data>
    </edge>
    <edge id="e1261" source="org.codehaus.jparsec.ParsersTest.testTuple_5Parsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3/5872-6350;170-180;3-3];</data>
    </edge>
    <edge id="e1262" source="org.codehaus.jparsec.ParsersTest.testUnexpected()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ParsersTest.java;[17239-17409;457-460;3-3];</data>
    </edge>
    <edge id="e1263" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.PatternScanner.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1542-1868;34-45;3-3];</data>
    </edge>
    <edge id="e1264" source="org.codehaus.jparsec.PatternScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.characters()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1542-1868;34-45;3-3];</data>
    </edge>
    <edge id="e1265" source="org.codehaus.jparsec.PatternScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.pattern.Pattern.match(java.lang.CharSequence,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1542-1868;34-45;3-3];</data>
    </edge>
    <edge id="e1266" source="org.codehaus.jparsec.PatternScanner.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.next(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PatternScanner.java;[1542-1868;34-45;3-3];</data>
    </edge>
    <edge id="e1267" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.PeekParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/PeekParser.java;[1364-1543;25-31;3-3];</data>
    </edge>
    <edge id="e1268" source="org.codehaus.jparsec.RepeatAtLeastParser(org.codehaus.jparsec.Parser,int)" target="org.codehaus.jparsec.ListFactories.arrayListFactory()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1418-1539;25-27;3-3];</data>
    </edge>
    <edge id="e1269" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.RepeatAtLeastParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1720-2016;35-44;3-3];</data>
    </edge>
    <edge id="e1270" source="org.codehaus.jparsec.RepeatAtLeastParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1720-2016;35-44;3-3];</data>
    </edge>
    <edge id="e1271" source="org.codehaus.jparsec.RepeatAtLeastParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.many(org.codehaus.jparsec.Parser,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatAtLeastParser.java;[1720-2016;35-44;3-3];</data>
    </edge>
    <edge id="e1272" source="org.codehaus.jparsec.RepeatTimesParser(org.codehaus.jparsec.Parser,int,int)" target="org.codehaus.jparsec.ListFactories.arrayListFactory()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1443-1576;26-28;3-3];</data>
    </edge>
    <edge id="e1273" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.RepeatTimesParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1791-2106;38-47;3-3];</data>
    </edge>
    <edge id="e1274" source="org.codehaus.jparsec.RepeatTimesParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1791-2106;38-47;3-3];</data>
    </edge>
    <edge id="e1275" source="org.codehaus.jparsec.RepeatTimesParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeatAtMost(org.codehaus.jparsec.Parser,int,java.util.Collection,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/RepeatTimesParser.java;[1791-2106;38-47;3-3];</data>
    </edge>
    <edge id="e1276" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ReturnSourceParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ReturnSourceParser.java;[1487-1719;30-37;3-3];</data>
    </edge>
    <edge id="e1277" source="org.codehaus.jparsec.ReturnSourceParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ReturnSourceParser.java;[1487-1719;30-37;3-3/1487-1719;30-37;3-3];</data>
    </edge>
    <edge id="e1278" source="org.codehaus.jparsec.ParseContext.characters()" target="org.codehaus.jparsec.ScannerState.characters()">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2398-2457;63-65;3-3];</data>
    </edge>
    <edge id="e1279" source="org.codehaus.jparsec.ParseContext.getInputName(int)" target="org.codehaus.jparsec.ScannerState.getInputName(int)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ScannerState.java;[2265-2391;58-61;3-3];</data>
    </edge>
    <edge id="e1280" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1281" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1282" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.notString(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1283" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Pattern.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1284" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1285" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13361-13687;352-359;3-3];</data>
    </edge>
    <edge id="e1286" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3/13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1287" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3/13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1288" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Pattern.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1289" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.pattern.Pattern.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1290" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1291" source="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13694-14248;361-374;3-3];</data>
    </edge>
    <edge id="e1292" source="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.not()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14255-14737;376-387;3-3];</data>
    </edge>
    <edge id="e1293" source="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14255-14737;376-387;3-3];</data>
    </edge>
    <edge id="e1294" source="org.codehaus.jparsec.Scanners.lineComment(java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.lineComment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[13015-13354;343-350;3-3];</data>
    </edge>
    <edge id="e1295" source="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[6453-6780;140-148;3-3];</data>
    </edge>
    <edge id="e1296" source="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Pattern.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[6453-6780;140-148;3-3];</data>
    </edge>
    <edge id="e1297" source="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.Pattern,java.lang.String)" target="org.codehaus.jparsec.pattern.Pattern.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7114-7477;160-169;3-3];</data>
    </edge>
    <edge id="e1298" source="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.CharPredicate)" target="org.codehaus.jparsec.pattern.Patterns.many1(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[6787-7107;150-158;3-3];</data>
    </edge>
    <edge id="e1299" source="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.Pattern,java.lang.String)" target="org.codehaus.jparsec.pattern.Pattern.many1()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7484-7849;171-180;3-3];</data>
    </edge>
    <edge id="e1300" source="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14744-15150;389-399;3-3];</data>
    </edge>
    <edge id="e1301" source="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.isChar(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[14744-15150;389-399;3-3];</data>
    </edge>
    <edge id="e1302" source="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[15157-15672;401-413;3-3/15157-15672;401-413;3-3];</data>
    </edge>
    <edge id="e1303" source="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)" target="org.codehaus.jparsec.Scanners.notChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[12660-13008;333-341;3-3];</data>
    </edge>
    <edge id="e1304" source="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)" target="org.codehaus.jparsec.pattern.CharPredicates.notAmong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[12660-13008;333-341;3-3];</data>
    </edge>
    <edge id="e1305" source="org.codehaus.jparsec.Scanners.notChar(char)" target="org.codehaus.jparsec.Scanners.notChar(char,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[11214-11475;289-297;3-3];</data>
    </edge>
    <edge id="e1306" source="org.codehaus.jparsec.Scanners.quoted(char,char)" target="org.codehaus.jparsec.pattern.Patterns.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16180-16580;429-437;3-3];</data>
    </edge>
    <edge id="e1307" source="org.codehaus.jparsec.Scanners.quoted(char,char)" target="org.codehaus.jparsec.pattern.Pattern.next(org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16180-16580;429-437;3-3];</data>
    </edge>
    <edge id="e1308" source="org.codehaus.jparsec.Scanners.quoted(char,char)" target="org.codehaus.jparsec.pattern.Patterns.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16180-16580;429-437;3-3];</data>
    </edge>
    <edge id="e1309" source="org.codehaus.jparsec.Scanners.quoted(char,char)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[16180-16580;429-437;3-3];</data>
    </edge>
    <edge id="e1310" source="org.codehaus.jparsec.Scanners.string(java.lang.String)" target="org.codehaus.jparsec.Scanners.string(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[7854-8066;182-190;3-3];</data>
    </edge>
    <edge id="e1311" source="org.codehaus.jparsec.Scanners.string(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[8073-8399;192-201;3-3];</data>
    </edge>
    <edge id="e1312" source="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String)" target="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[9172-9442;225-232;3-3];</data>
    </edge>
    <edge id="e1313" source="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String,java.lang.String)" target="org.codehaus.jparsec.pattern.Patterns.stringCaseInsensitive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Scanners.java;[8775-9165;214-223;3-3];</data>
    </edge>
    <edge id="e1314" source="org.codehaus.jparsec.ScannersTest.testAmong()" target="org.codehaus.jparsec.Scanners.among(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6380-6707;181-188;3-3];</data>
    </edge>
    <edge id="e1315" source="org.codehaus.jparsec.ScannersTest.testAmong()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6380-6707;181-188;3-3/6380-6707;181-188;3-3];</data>
    </edge>
    <edge id="e1316" source="org.codehaus.jparsec.ScannersTest.testAmong()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6380-6707;181-188;3-3];</data>
    </edge>
    <edge id="e1317" source="org.codehaus.jparsec.ScannersTest.testAmong()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6380-6707;181-188;3-3/6380-6707;181-188;3-3];</data>
    </edge>
    <edge id="e1318" source="org.codehaus.jparsec.ScannersTest.testAmong_noChars()" target="org.codehaus.jparsec.Scanners.among(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6714-6942;190-194;3-3];</data>
    </edge>
    <edge id="e1319" source="org.codehaus.jparsec.ScannersTest.testAmong_noChars()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6714-6942;190-194;3-3/6714-6942;190-194;3-3];</data>
    </edge>
    <edge id="e1320" source="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()" target="org.codehaus.jparsec.Scanners.among(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
    </edge>
    <edge id="e1321" source="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
    </edge>
    <edge id="e1322" source="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
    </edge>
    <edge id="e1323" source="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
    </edge>
    <edge id="e1324" source="org.codehaus.jparsec.ScannersTest.testAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6949-7212;196-202;3-3];</data>
    </edge>
    <edge id="e1325" source="org.codehaus.jparsec.ScannersTest.testAnyChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5450-5835;154-163;3-3/5450-5835;154-163;3-3/5450-5835;154-163;3-3/5450-5835;154-163;3-3];</data>
    </edge>
    <edge id="e1326" source="org.codehaus.jparsec.ScannersTest.testAnyChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5450-5835;154-163;3-3];</data>
    </edge>
    <edge id="e1327" source="org.codehaus.jparsec.ScannersTest.testAnyChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5450-5835;154-163;3-3];</data>
    </edge>
    <edge id="e1328" source="org.codehaus.jparsec.ScannersTest.testBlockComment()" target="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12339-12755;346-354;3-3];</data>
    </edge>
    <edge id="e1329" source="org.codehaus.jparsec.ScannersTest.testBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12339-12755;346-354;3-3/12339-12755;346-354;3-3/12339-12755;346-354;3-3];</data>
    </edge>
    <edge id="e1330" source="org.codehaus.jparsec.ScannersTest.testBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12339-12755;346-354;3-3];</data>
    </edge>
    <edge id="e1331" source="org.codehaus.jparsec.ScannersTest.testBlockComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12339-12755;346-354;3-3/12339-12755;346-354;3-3];</data>
    </edge>
    <edge id="e1332" source="org.codehaus.jparsec.ScannersTest.testBlockComment_emptyQuotes()" target="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12762-12941;356-360;3-3];</data>
    </edge>
    <edge id="e1333" source="org.codehaus.jparsec.ScannersTest.testBlockComment_emptyQuotes()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12762-12941;356-360;3-3];</data>
    </edge>
    <edge id="e1334" source="org.codehaus.jparsec.ScannersTest.testBlockComment_emptyQuotes()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12762-12941;356-360;3-3];</data>
    </edge>
    <edge id="e1335" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withEmptyQuotedPattern()" target="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13330-13623;372-378;3-3];</data>
    </edge>
    <edge id="e1336" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withEmptyQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13330-13623;372-378;3-3];</data>
    </edge>
    <edge id="e1337" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withEmptyQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13330-13623;372-378;3-3/13330-13623;372-378;3-3/13330-13623;372-378;3-3];</data>
    </edge>
    <edge id="e1338" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withParsers()" target="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13938-14270;388-395;3-3];</data>
    </edge>
    <edge id="e1339" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withParsers()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13938-14270;388-395;3-3/13938-14270;388-395;3-3];</data>
    </edge>
    <edge id="e1340" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withParsers()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13938-14270;388-395;3-3/13938-14270;388-395;3-3];</data>
    </edge>
    <edge id="e1341" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withParsers()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13938-14270;388-395;3-3/13938-14270;388-395;3-3];</data>
    </edge>
    <edge id="e1342" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMatchesEmpty()" target="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14277-14625;397-404;3-3];</data>
    </edge>
    <edge id="e1343" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMatchesEmpty()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14277-14625;397-404;3-3/14277-14625;397-404;3-3];</data>
    </edge>
    <edge id="e1344" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMatchesEmpty()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14277-14625;397-404;3-3];</data>
    </edge>
    <edge id="e1345" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMatchesEmpty()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14277-14625;397-404;3-3/14277-14625;397-404;3-3];</data>
    </edge>
    <edge id="e1346" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMismatches()" target="org.codehaus.jparsec.Scanners.blockComment(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14632-14977;406-413;3-3];</data>
    </edge>
    <edge id="e1347" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMismatches()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14632-14977;406-413;3-3/14632-14977;406-413;3-3];</data>
    </edge>
    <edge id="e1348" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMismatches()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14632-14977;406-413;3-3];</data>
    </edge>
    <edge id="e1349" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedParserThatMismatches()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14632-14977;406-413;3-3/14632-14977;406-413;3-3];</data>
    </edge>
    <edge id="e1350" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3];</data>
    </edge>
    <edge id="e1351" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.pattern.Patterns.hasAtLeast(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3];</data>
    </edge>
    <edge id="e1352" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3/12948-13323;362-370;3-3/12948-13323;362-370;3-3];</data>
    </edge>
    <edge id="e1353" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3];</data>
    </edge>
    <edge id="e1354" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[12948-13323;362-370;3-3/12948-13323;362-370;3-3];</data>
    </edge>
    <edge id="e1355" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPatternThatMismatches()" target="org.codehaus.jparsec.Scanners.blockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13630-13931;380-386;3-3];</data>
    </edge>
    <edge id="e1356" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPatternThatMismatches()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13630-13931;380-386;3-3];</data>
    </edge>
    <edge id="e1357" source="org.codehaus.jparsec.ScannersTest.testBlockComment_withQuotedPatternThatMismatches()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[13630-13931;380-386;3-3/13630-13931;380-386;3-3/13630-13931;380-386;3-3];</data>
    </edge>
    <edge id="e1358" source="org.codehaus.jparsec.ScannersTest.testDecInteger()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1248-1457;42-46;3-3];</data>
    </edge>
    <edge id="e1359" source="org.codehaus.jparsec.ScannersTest.testDecInteger()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1248-1457;42-46;3-3];</data>
    </edge>
    <edge id="e1360" source="org.codehaus.jparsec.ScannersTest.testDecimal()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1002-1241;34-40;3-3/1002-1241;34-40;3-3/1002-1241;34-40;3-3/1002-1241;34-40;3-3];</data>
    </edge>
    <edge id="e1361" source="org.codehaus.jparsec.ScannersTest.testDoubleQuoteString()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8884-9288;255-264;3-3/8884-9288;255-264;3-3/8884-9288;255-264;3-3];</data>
    </edge>
    <edge id="e1362" source="org.codehaus.jparsec.ScannersTest.testDoubleQuoteString()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8884-9288;255-264;3-3/8884-9288;255-264;3-3/8884-9288;255-264;3-3/8884-9288;255-264;3-3];</data>
    </edge>
    <edge id="e1363" source="org.codehaus.jparsec.ScannersTest.testHaskellBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11911-12332;336-344;3-3/11911-12332;336-344;3-3/11911-12332;336-344;3-3];</data>
    </edge>
    <edge id="e1364" source="org.codehaus.jparsec.ScannersTest.testHaskellBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11911-12332;336-344;3-3];</data>
    </edge>
    <edge id="e1365" source="org.codehaus.jparsec.ScannersTest.testHaskellBlockComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11911-12332;336-344;3-3/11911-12332;336-344;3-3];</data>
    </edge>
    <edge id="e1366" source="org.codehaus.jparsec.ScannersTest.testHaskellDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10711-11062;306-314;3-3/10711-11062;306-314;3-3/10711-11062;306-314;3-3/10711-11062;306-314;3-3/10711-11062;306-314;3-3];</data>
    </edge>
    <edge id="e1367" source="org.codehaus.jparsec.ScannersTest.testHaskellDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10711-11062;306-314;3-3];</data>
    </edge>
    <edge id="e1368" source="org.codehaus.jparsec.ScannersTest.testHaskellLineComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8739-8877;250-253;3-3];</data>
    </edge>
    <edge id="e1369" source="org.codehaus.jparsec.ScannersTest.testHexInteger()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1759-2055;56-62;3-3/1759-2055;56-62;3-3];</data>
    </edge>
    <edge id="e1370" source="org.codehaus.jparsec.ScannersTest.testHexInteger()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1759-2055;56-62;3-3];</data>
    </edge>
    <edge id="e1371" source="org.codehaus.jparsec.ScannersTest.testHexInteger()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1759-2055;56-62;3-3];</data>
    </edge>
    <edge id="e1372" source="org.codehaus.jparsec.ScannersTest.testIdentifier()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[516-783;19-25;3-3/516-783;19-25;3-3/516-783;19-25;3-3];</data>
    </edge>
    <edge id="e1373" source="org.codehaus.jparsec.ScannersTest.testIdentifier()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[516-783;19-25;3-3];</data>
    </edge>
    <edge id="e1374" source="org.codehaus.jparsec.ScannersTest.testInteger()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[790-995;27-32;3-3/790-995;27-32;3-3];</data>
    </edge>
    <edge id="e1375" source="org.codehaus.jparsec.ScannersTest.testInteger()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[790-995;27-32;3-3];</data>
    </edge>
    <edge id="e1376" source="org.codehaus.jparsec.ScannersTest.testIsChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5842-6102;165-171;3-3];</data>
    </edge>
    <edge id="e1377" source="org.codehaus.jparsec.ScannersTest.testIsChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5842-6102;165-171;3-3];</data>
    </edge>
    <edge id="e1378" source="org.codehaus.jparsec.ScannersTest.testIsChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5842-6102;165-171;3-3];</data>
    </edge>
    <edge id="e1379" source="org.codehaus.jparsec.ScannersTest.testIsChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5842-6102;165-171;3-3];</data>
    </edge>
    <edge id="e1380" source="org.codehaus.jparsec.ScannersTest.testJavaBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11069-11484;316-324;3-3/11069-11484;316-324;3-3/11069-11484;316-324;3-3];</data>
    </edge>
    <edge id="e1381" source="org.codehaus.jparsec.ScannersTest.testJavaBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11069-11484;316-324;3-3];</data>
    </edge>
    <edge id="e1382" source="org.codehaus.jparsec.ScannersTest.testJavaBlockComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11069-11484;316-324;3-3/11069-11484;316-324;3-3];</data>
    </edge>
    <edge id="e1383" source="org.codehaus.jparsec.ScannersTest.testJavaDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10009-10354;286-294;3-3/10009-10354;286-294;3-3/10009-10354;286-294;3-3/10009-10354;286-294;3-3/10009-10354;286-294;3-3];</data>
    </edge>
    <edge id="e1384" source="org.codehaus.jparsec.ScannersTest.testJavaDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10009-10354;286-294;3-3];</data>
    </edge>
    <edge id="e1385" source="org.codehaus.jparsec.ScannersTest.testJavaLineComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8463-8595;240-243;3-3];</data>
    </edge>
    <edge id="e1386" source="org.codehaus.jparsec.ScannersTest.testLineComment()" target="org.codehaus.jparsec.Scanners.lineComment(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8027-8456;228-238;3-3];</data>
    </edge>
    <edge id="e1387" source="org.codehaus.jparsec.ScannersTest.testLineComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8027-8456;228-238;3-3/8027-8456;228-238;3-3];</data>
    </edge>
    <edge id="e1388" source="org.codehaus.jparsec.ScannersTest.testLineComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8027-8456;228-238;3-3/8027-8456;228-238;3-3/8027-8456;228-238;3-3];</data>
    </edge>
    <edge id="e1389" source="org.codehaus.jparsec.ScannersTest.testLineComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8027-8456;228-238;3-3/8027-8456;228-238;3-3/8027-8456;228-238;3-3];</data>
    </edge>
    <edge id="e1390" source="org.codehaus.jparsec.ScannersTest.testMany1_withCharPredicate()" target="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2800-3116;82-87;3-3];</data>
    </edge>
    <edge id="e1391" source="org.codehaus.jparsec.ScannersTest.testMany1_withCharPredicate()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2800-3116;82-87;3-3];</data>
    </edge>
    <edge id="e1392" source="org.codehaus.jparsec.ScannersTest.testMany1_withCharPredicate()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2800-3116;82-87;3-3/2800-3116;82-87;3-3];</data>
    </edge>
    <edge id="e1393" source="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()" target="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3];</data>
    </edge>
    <edge id="e1394" source="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3];</data>
    </edge>
    <edge id="e1395" source="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3];</data>
    </edge>
    <edge id="e1396" source="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3/3628-4006;104-111;3-3];</data>
    </edge>
    <edge id="e1397" source="org.codehaus.jparsec.ScannersTest.testMany1_withPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3628-4006;104-111;3-3/3628-4006;104-111;3-3];</data>
    </edge>
    <edge id="e1398" source="org.codehaus.jparsec.ScannersTest.testMany1_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Scanners.many1(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4013-4207;113-117;3-3];</data>
    </edge>
    <edge id="e1399" source="org.codehaus.jparsec.ScannersTest.testMany1_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4013-4207;113-117;3-3];</data>
    </edge>
    <edge id="e1400" source="org.codehaus.jparsec.ScannersTest.testMany1_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4013-4207;113-117;3-3];</data>
    </edge>
    <edge id="e1401" source="org.codehaus.jparsec.ScannersTest.testMany_withCharPredicate()" target="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.CharPredicate)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2594-2793;76-80;3-3];</data>
    </edge>
    <edge id="e1402" source="org.codehaus.jparsec.ScannersTest.testMany_withCharPredicate()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2594-2793;76-80;3-3/2594-2793;76-80;3-3];</data>
    </edge>
    <edge id="e1403" source="org.codehaus.jparsec.ScannersTest.testMany_withPattern()" target="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3123-3422;89-96;3-3];</data>
    </edge>
    <edge id="e1404" source="org.codehaus.jparsec.ScannersTest.testMany_withPattern()" target="org.codehaus.jparsec.pattern.Patterns.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3123-3422;89-96;3-3];</data>
    </edge>
    <edge id="e1405" source="org.codehaus.jparsec.ScannersTest.testMany_withPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3123-3422;89-96;3-3/3123-3422;89-96;3-3];</data>
    </edge>
    <edge id="e1406" source="org.codehaus.jparsec.ScannersTest.testMany_withPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3123-3422;89-96;3-3/3123-3422;89-96;3-3/3123-3422;89-96;3-3];</data>
    </edge>
    <edge id="e1407" source="org.codehaus.jparsec.ScannersTest.testMany_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Scanners.many(org.codehaus.jparsec.pattern.Pattern,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3429-3621;98-102;3-3];</data>
    </edge>
    <edge id="e1408" source="org.codehaus.jparsec.ScannersTest.testMany_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3429-3621;98-102;3-3];</data>
    </edge>
    <edge id="e1409" source="org.codehaus.jparsec.ScannersTest.testMany_withPatternThatConsumesNoInput()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[3429-3621;98-102;3-3];</data>
    </edge>
    <edge id="e1410" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment()" target="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14984-15434;415-424;3-3];</data>
    </edge>
    <edge id="e1411" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14984-15434;415-424;3-3/14984-15434;415-424;3-3];</data>
    </edge>
    <edge id="e1412" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[14984-15434;415-424;3-3/14984-15434;415-424;3-3/14984-15434;415-424;3-3/14984-15434;415-424;3-3];</data>
    </edge>
    <edge id="e1413" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_closeQuoteConsumesNoChar()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17907-18174;480-484;3-3];</data>
    </edge>
    <edge id="e1414" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_closeQuoteConsumesNoChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17907-18174;480-484;3-3];</data>
    </edge>
    <edge id="e1415" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_openQuoteConsumesNoChar()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17635-17900;474-478;3-3];</data>
    </edge>
    <edge id="e1416" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_openQuoteConsumesNoChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17635-17900;474-478;3-3];</data>
    </edge>
    <edge id="e1417" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_quotedConsumesNoChar()" target="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17399-17628;469-472;3-3];</data>
    </edge>
    <edge id="e1418" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_quotedConsumesNoChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.Class)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[17399-17628;469-472;3-3];</data>
    </edge>
    <edge id="e1419" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedParser()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15897-16486;436-447;3-3/15897-16486;436-447;3-3];</data>
    </edge>
    <edge id="e1420" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedParser()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15897-16486;436-447;3-3/15897-16486;436-447;3-3];</data>
    </edge>
    <edge id="e1421" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedParser()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15897-16486;436-447;3-3/15897-16486;436-447;3-3/15897-16486;436-447;3-3/15897-16486;436-447;3-3/15897-16486;436-447;3-3];</data>
    </edge>
    <edge id="e1422" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Scanners.nestableBlockComment(java.lang.String,java.lang.String,org.codehaus.jparsec.pattern.Pattern)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15441-15890;426-434;3-3];</data>
    </edge>
    <edge id="e1423" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15441-15890;426-434;3-3/15441-15890;426-434;3-3];</data>
    </edge>
    <edge id="e1424" source="org.codehaus.jparsec.ScannersTest.testNestableBlockComment_withQuotedPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[15441-15890;426-434;3-3/15441-15890;426-434;3-3/15441-15890;426-434;3-3/15441-15890;426-434;3-3];</data>
    </edge>
    <edge id="e1425" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_notLogicalPartialMatch()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16981-17392;459-467;3-3/16981-17392;459-467;3-3];</data>
    </edge>
    <edge id="e1426" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_notLogicalPartialMatch()" target="org.codehaus.jparsec.Scanners.among(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16981-17392;459-467;3-3];</data>
    </edge>
    <edge id="e1427" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_notLogicalPartialMatch()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16981-17392;459-467;3-3/16981-17392;459-467;3-3];</data>
    </edge>
    <edge id="e1428" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_notLogicalPartialMatch()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16981-17392;459-467;3-3];</data>
    </edge>
    <edge id="e1429" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_partialMatch()" target="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16493-16974;449-457;3-3/16493-16974;449-457;3-3];</data>
    </edge>
    <edge id="e1430" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_partialMatch()" target="org.codehaus.jparsec.Parser.many()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16493-16974;449-457;3-3];</data>
    </edge>
    <edge id="e1431" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_partialMatch()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16493-16974;449-457;3-3/16493-16974;449-457;3-3];</data>
    </edge>
    <edge id="e1432" source="org.codehaus.jparsec.ScannersTest.testNestedBlockComment_partialMatch()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[16493-16974;449-457;3-3/16493-16974;449-457;3-3/16493-16974;449-457;3-3];</data>
    </edge>
    <edge id="e1433" source="org.codehaus.jparsec.ScannersTest.testNestedScanner()" target="org.codehaus.jparsec.Parser.skipTimes(int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3];</data>
    </edge>
    <edge id="e1434" source="org.codehaus.jparsec.ScannersTest.testNestedScanner()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3/19046-19699;510-522;3-3/19046-19699;510-522;3-3/19046-19699;510-522;3-3];</data>
    </edge>
    <edge id="e1435" source="org.codehaus.jparsec.ScannersTest.testNestedScanner()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3/19046-19699;510-522;3-3];</data>
    </edge>
    <edge id="e1436" source="org.codehaus.jparsec.ScannersTest.testNestedScanner()" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3/19046-19699;510-522;3-3/19046-19699;510-522;3-3/19046-19699;510-522;3-3];</data>
    </edge>
    <edge id="e1437" source="org.codehaus.jparsec.ScannersTest.testNestedScanner()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[19046-19699;510-522;3-3/19046-19699;510-522;3-3];</data>
    </edge>
    <edge id="e1438" source="org.codehaus.jparsec.ScannersTest.testNotAmong()" target="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3];</data>
    </edge>
    <edge id="e1439" source="org.codehaus.jparsec.ScannersTest.testNotAmong()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3];</data>
    </edge>
    <edge id="e1440" source="org.codehaus.jparsec.ScannersTest.testNotAmong()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3];</data>
    </edge>
    <edge id="e1441" source="org.codehaus.jparsec.ScannersTest.testNotAmong()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3];</data>
    </edge>
    <edge id="e1442" source="org.codehaus.jparsec.ScannersTest.testNotAmong()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7219-7524;204-211;3-3/7219-7524;204-211;3-3];</data>
    </edge>
    <edge id="e1443" source="org.codehaus.jparsec.ScannersTest.testNotAmong_noChars()" target="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7531-7774;213-218;3-3];</data>
    </edge>
    <edge id="e1444" source="org.codehaus.jparsec.ScannersTest.testNotAmong_noChars()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7531-7774;213-218;3-3];</data>
    </edge>
    <edge id="e1445" source="org.codehaus.jparsec.ScannersTest.testNotAmong_noChars()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7531-7774;213-218;3-3];</data>
    </edge>
    <edge id="e1446" source="org.codehaus.jparsec.ScannersTest.testNotAmong_noChars()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7531-7774;213-218;3-3];</data>
    </edge>
    <edge id="e1447" source="org.codehaus.jparsec.ScannersTest.testNotAmong_oneChar()" target="org.codehaus.jparsec.Scanners.notAmong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7781-8020;220-226;3-3];</data>
    </edge>
    <edge id="e1448" source="org.codehaus.jparsec.ScannersTest.testNotAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7781-8020;220-226;3-3];</data>
    </edge>
    <edge id="e1449" source="org.codehaus.jparsec.ScannersTest.testNotAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7781-8020;220-226;3-3];</data>
    </edge>
    <edge id="e1450" source="org.codehaus.jparsec.ScannersTest.testNotAmong_oneChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[7781-8020;220-226;3-3/7781-8020;220-226;3-3];</data>
    </edge>
    <edge id="e1451" source="org.codehaus.jparsec.ScannersTest.testNotChar()" target="org.codehaus.jparsec.Scanners.notChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
    </edge>
    <edge id="e1452" source="org.codehaus.jparsec.ScannersTest.testNotChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
    </edge>
    <edge id="e1453" source="org.codehaus.jparsec.ScannersTest.testNotChar()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
    </edge>
    <edge id="e1454" source="org.codehaus.jparsec.ScannersTest.testNotChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
    </edge>
    <edge id="e1455" source="org.codehaus.jparsec.ScannersTest.testNotChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[6109-6373;173-179;3-3];</data>
    </edge>
    <edge id="e1456" source="org.codehaus.jparsec.ScannersTest.testOctInteger()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1464-1752;48-54;3-3/1464-1752;48-54;3-3];</data>
    </edge>
    <edge id="e1457" source="org.codehaus.jparsec.ScannersTest.testOctInteger()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1464-1752;48-54;3-3];</data>
    </edge>
    <edge id="e1458" source="org.codehaus.jparsec.ScannersTest.testOctInteger()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[1464-1752;48-54;3-3];</data>
    </edge>
    <edge id="e1459" source="org.codehaus.jparsec.ScannersTest.testPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4821-5115;137-143;3-3];</data>
    </edge>
    <edge id="e1460" source="org.codehaus.jparsec.ScannersTest.testPattern()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4821-5115;137-143;3-3];</data>
    </edge>
    <edge id="e1461" source="org.codehaus.jparsec.ScannersTest.testPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4821-5115;137-143;3-3];</data>
    </edge>
    <edge id="e1462" source="org.codehaus.jparsec.ScannersTest.testPattern()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4821-5115;137-143;3-3];</data>
    </edge>
    <edge id="e1463" source="org.codehaus.jparsec.ScannersTest.testQuoted()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18366-18742;492-500;3-3/18366-18742;492-500;3-3];</data>
    </edge>
    <edge id="e1464" source="org.codehaus.jparsec.ScannersTest.testQuoted()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18366-18742;492-500;3-3/18366-18742;492-500;3-3/18366-18742;492-500;3-3];</data>
    </edge>
    <edge id="e1465" source="org.codehaus.jparsec.ScannersTest.testQuoted_byChar()" target="org.codehaus.jparsec.Scanners.quoted(char,char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18181-18359;486-490;3-3];</data>
    </edge>
    <edge id="e1466" source="org.codehaus.jparsec.ScannersTest.testQuoted_byChar()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18181-18359;486-490;3-3];</data>
    </edge>
    <edge id="e1467" source="org.codehaus.jparsec.ScannersTest.testQuoted_byChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18181-18359;486-490;3-3];</data>
    </edge>
    <edge id="e1468" source="org.codehaus.jparsec.ScannersTest.testQuoted_quotedParserConsumeNoChar()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18749-19039;502-508;3-3];</data>
    </edge>
    <edge id="e1469" source="org.codehaus.jparsec.ScannersTest.testQuoted_quotedParserConsumeNoChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[18749-19039;502-508;3-3/18749-19039;502-508;3-3];</data>
    </edge>
    <edge id="e1470" source="org.codehaus.jparsec.ScannersTest.testScientificNotation()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2062-2587;64-74;3-3/2062-2587;64-74;3-3/2062-2587;64-74;3-3/2062-2587;64-74;3-3];</data>
    </edge>
    <edge id="e1471" source="org.codehaus.jparsec.ScannersTest.testScientificNotation()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2062-2587;64-74;3-3/2062-2587;64-74;3-3];</data>
    </edge>
    <edge id="e1472" source="org.codehaus.jparsec.ScannersTest.testScientificNotation()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[2062-2587;64-74;3-3/2062-2587;64-74;3-3];</data>
    </edge>
    <edge id="e1473" source="org.codehaus.jparsec.ScannersTest.testSingleQuoteChar()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[9575-10002;274-284;3-3/9575-10002;274-284;3-3/9575-10002;274-284;3-3/9575-10002;274-284;3-3];</data>
    </edge>
    <edge id="e1474" source="org.codehaus.jparsec.ScannersTest.testSingleQuoteChar()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[9575-10002;274-284;3-3/9575-10002;274-284;3-3/9575-10002;274-284;3-3/9575-10002;274-284;3-3];</data>
    </edge>
    <edge id="e1475" source="org.codehaus.jparsec.ScannersTest.testSingleQuoteString()" target="org.codehaus.jparsec.Asserts.assertStringScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[9295-9568;266-272;3-3/9295-9568;266-272;3-3/9295-9568;266-272;3-3/9295-9568;266-272;3-3];</data>
    </edge>
    <edge id="e1476" source="org.codehaus.jparsec.ScannersTest.testSqlBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11491-11904;326-334;3-3/11491-11904;326-334;3-3/11491-11904;326-334;3-3];</data>
    </edge>
    <edge id="e1477" source="org.codehaus.jparsec.ScannersTest.testSqlBlockComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11491-11904;326-334;3-3];</data>
    </edge>
    <edge id="e1478" source="org.codehaus.jparsec.ScannersTest.testSqlBlockComment()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[11491-11904;326-334;3-3/11491-11904;326-334;3-3];</data>
    </edge>
    <edge id="e1479" source="org.codehaus.jparsec.ScannersTest.testSqlDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10361-10704;296-304;3-3/10361-10704;296-304;3-3/10361-10704;296-304;3-3/10361-10704;296-304;3-3/10361-10704;296-304;3-3];</data>
    </edge>
    <edge id="e1480" source="org.codehaus.jparsec.ScannersTest.testSqlDelimiter()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[10361-10704;296-304;3-3];</data>
    </edge>
    <edge id="e1481" source="org.codehaus.jparsec.ScannersTest.testSqlLineComment()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[8602-8732;245-248;3-3];</data>
    </edge>
    <edge id="e1482" source="org.codehaus.jparsec.ScannersTest.testString()" target="org.codehaus.jparsec.Scanners.string(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3];</data>
    </edge>
    <edge id="e1483" source="org.codehaus.jparsec.ScannersTest.testString()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3];</data>
    </edge>
    <edge id="e1484" source="org.codehaus.jparsec.ScannersTest.testString()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3];</data>
    </edge>
    <edge id="e1485" source="org.codehaus.jparsec.ScannersTest.testString()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3];</data>
    </edge>
    <edge id="e1486" source="org.codehaus.jparsec.ScannersTest.testString()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4214-4514;119-126;3-3/4214-4514;119-126;3-3];</data>
    </edge>
    <edge id="e1487" source="org.codehaus.jparsec.ScannersTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.Scanners.stringCaseInsensitive(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5122-5443;145-152;3-3];</data>
    </edge>
    <edge id="e1488" source="org.codehaus.jparsec.ScannersTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5122-5443;145-152;3-3/5122-5443;145-152;3-3/5122-5443;145-152;3-3];</data>
    </edge>
    <edge id="e1489" source="org.codehaus.jparsec.ScannersTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5122-5443;145-152;3-3];</data>
    </edge>
    <edge id="e1490" source="org.codehaus.jparsec.ScannersTest.testStringCaseInsensitive()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[5122-5443;145-152;3-3];</data>
    </edge>
    <edge id="e1491" source="org.codehaus.jparsec.ScannersTest.testWhitespaces()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4521-4814;128-135;3-3];</data>
    </edge>
    <edge id="e1492" source="org.codehaus.jparsec.ScannersTest.testWhitespaces()" target="org.codehaus.jparsec.Asserts.assertScanner(org.codehaus.jparsec.Parser,java.lang.String,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4521-4814;128-135;3-3];</data>
    </edge>
    <edge id="e1493" source="org.codehaus.jparsec.ScannersTest.testWhitespaces()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/ScannersTest.java;[4521-4814;128-135;3-3/4521-4814;128-135;3-3];</data>
    </edge>
    <edge id="e1494" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Sequence2Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence2Parser.java;[1592-1868;31-40;3-3];</data>
    </edge>
    <edge id="e1495" source="org.codehaus.jparsec.Sequence2Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.functors.Map2.map(A,B)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence2Parser.java;[1592-1868;31-40;3-3];</data>
    </edge>
    <edge id="e1496" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Sequence3Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence3Parser.java;[1685-2054;34-46;3-3];</data>
    </edge>
    <edge id="e1497" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Sequence4Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence4Parser.java;[1772-2234;36-51;3-3];</data>
    </edge>
    <edge id="e1498" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.Sequence5Parser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Sequence5Parser.java;[1859-2414;38-56;3-3];</data>
    </edge>
    <edge id="e1499" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.SequenceParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SequenceParser.java;[1382-1524;25-30;3-3];</data>
    </edge>
    <edge id="e1500" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.SkipAtLeastParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1432-1660;27-34;3-3];</data>
    </edge>
    <edge id="e1501" source="org.codehaus.jparsec.SkipAtLeastParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1432-1660;27-34;3-3];</data>
    </edge>
    <edge id="e1502" source="org.codehaus.jparsec.SkipAtLeastParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.many(org.codehaus.jparsec.Parser,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipAtLeastParser.java;[1432-1660;27-34;3-3];</data>
    </edge>
    <edge id="e1503" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.SkipTimesParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1482-1729;29-36;3-3];</data>
    </edge>
    <edge id="e1504" source="org.codehaus.jparsec.SkipTimesParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeat(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1482-1729;29-36;3-3];</data>
    </edge>
    <edge id="e1505" source="org.codehaus.jparsec.SkipTimesParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParserInternals.repeatAtMost(org.codehaus.jparsec.Parser,int,org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SkipTimesParser.java;[1482-1729;29-36;3-3];</data>
    </edge>
    <edge id="e1506" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.StepParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/StepParser.java;[1411-1568;28-33;3-3];</data>
    </edge>
    <edge id="e1507" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.SumParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/SumParser.java;[1411-1764;25-37;3-3];</data>
    </edge>
    <edge id="e1508" source="org.codehaus.jparsec.Terminals.caseInsensitive(java.lang.String[],java.lang.String[])" target="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[8254-9094;201-215;3-3];</data>
    </edge>
    <edge id="e1509" source="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])" target="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[9942-10735;233-247;3-3];</data>
    </edge>
    <edge id="e1510" source="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[11536-12435;265-281;3-3];</data>
    </edge>
    <edge id="e1511" source="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])" target="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[9101-9935;217-231;3-3];</data>
    </edge>
    <edge id="e1512" source="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])" target="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[10742-11529;249-263;3-3];</data>
    </edge>
    <edge id="e1513" source="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[12442-13336;283-299;3-3];</data>
    </edge>
    <edge id="e1514" source="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14541-14938;337-344;3-3];</data>
    </edge>
    <edge id="e1515" source="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Keywords.lexicon(org.codehaus.jparsec.Parser,java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14541-14938;337-344;3-3];</data>
    </edge>
    <edge id="e1516" source="org.codehaus.jparsec.Terminals.instance(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[],boolean,org.codehaus.jparsec.functors.Map)" target="org.codehaus.jparsec.Lexicon.union(org.codehaus.jparsec.Lexicon)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14541-14938;337-344;3-3];</data>
    </edge>
    <edge id="e1517" source="org.codehaus.jparsec.Terminals.operators(java.lang.String[])" target="org.codehaus.jparsec.Operators.lexicon(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13343-13722;301-310;3-3];</data>
    </edge>
    <edge id="e1518" source="org.codehaus.jparsec.IsFragment.isExpectedTag(java.lang.Object)" target="org.codehaus.jparsec.Terminals$1.isExpectedTag(java.lang.Object)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14224-14316;326-328;7-7];</data>
    </edge>
    <edge id="e1519" source="org.codehaus.jparsec.Terminals$1.isExpectedTag(java.lang.Object)" target="org.codehaus.jparsec.util.Objects.in(java.lang.Object,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[14224-14316;326-328;7-7];</data>
    </edge>
    <edge id="e1520" source="org.codehaus.jparsec.Terminals.fromFragment(java.lang.Object[])" target="org.codehaus.jparsec.util.Objects.in(java.lang.Object,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13980-14534;320-335;3-3];</data>
    </edge>
    <edge id="e1521" source="org.codehaus.jparsec.Terminals.fromFragment(java.lang.Object[])" target="org.codehaus.jparsec.util.Strings.join(java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[13980-14534;320-335;3-3];</data>
    </edge>
    <edge id="e1522" source="org.codehaus.jparsec.Terminals.checkDup(java.lang.String[],java.lang.String[],boolean)" target="org.codehaus.jparsec.util.Checks.checkArgument(boolean,java.lang.String,java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/Terminals.java;[15094-15326;350-356;3-3];</data>
    </edge>
    <edge id="e1523" source="org.codehaus.jparsec.TerminalsTest.assertDup(java.lang.String[],java.lang.String[],boolean)" target="org.codehaus.jparsec.Terminals.checkDup(java.lang.String[],java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12923-13132;273-278;3-3];</data>
    </edge>
    <edge id="e1524" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()" target="org.codehaus.jparsec.Terminals.caseInsensitive(java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3];</data>
    </edge>
    <edge id="e1525" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3];</data>
    </edge>
    <edge id="e1526" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3/9607-10527;211-225;3-3];</data>
    </edge>
    <edge id="e1527" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3/9607-10527;211-225;3-3/9607-10527;211-225;3-3/9607-10527;211-225;3-3/9607-10527;211-225;3-3/9607-10527;211-225;3-3];</data>
    </edge>
    <edge id="e1528" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[9607-10527;211-225;3-3/9607-10527;211-225;3-3];</data>
    </edge>
    <edge id="e1529" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()" target="org.codehaus.jparsec.Terminals.caseInsensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3];</data>
    </edge>
    <edge id="e1530" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3];</data>
    </edge>
    <edge id="e1531" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3/11375-12213;242-255;3-3];</data>
    </edge>
    <edge id="e1532" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3/11375-12213;242-255;3-3/11375-12213;242-255;3-3/11375-12213;242-255;3-3/11375-12213;242-255;3-3];</data>
    </edge>
    <edge id="e1533" source="org.codehaus.jparsec.TerminalsTest.testCaseInsensitive_withScanner()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[11375-12213;242-255;3-3/11375-12213;242-255;3-3];</data>
    </edge>
    <edge id="e1534" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()" target="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3];</data>
    </edge>
    <edge id="e1535" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3];</data>
    </edge>
    <edge id="e1536" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3/8671-9600;195-209;3-3];</data>
    </edge>
    <edge id="e1537" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3/8671-9600;195-209;3-3/8671-9600;195-209;3-3/8671-9600;195-209;3-3/8671-9600;195-209;3-3];</data>
    </edge>
    <edge id="e1538" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8671-9600;195-209;3-3/8671-9600;195-209;3-3/8671-9600;195-209;3-3];</data>
    </edge>
    <edge id="e1539" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()" target="org.codehaus.jparsec.Terminals.caseSensitive(org.codehaus.jparsec.Parser,java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3];</data>
    </edge>
    <edge id="e1540" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3];</data>
    </edge>
    <edge id="e1541" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3/10534-11368;227-240;3-3];</data>
    </edge>
    <edge id="e1542" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3/10534-11368;227-240;3-3/10534-11368;227-240;3-3/10534-11368;227-240;3-3/10534-11368;227-240;3-3];</data>
    </edge>
    <edge id="e1543" source="org.codehaus.jparsec.TerminalsTest.testCaseSensitive_withScanner()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[10534-11368;227-240;3-3/10534-11368;227-240;3-3];</data>
    </edge>
    <edge id="e1544" source="org.codehaus.jparsec.TerminalsTest.testCharLiteralParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5474-5655;116-120;3-3];</data>
    </edge>
    <edge id="e1545" source="org.codehaus.jparsec.TerminalsTest.testCharLiteralParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5474-5655;116-120;3-3];</data>
    </edge>
    <edge id="e1546" source="org.codehaus.jparsec.TerminalsTest.testCheckDup()" target="org.codehaus.jparsec.Terminals.checkDup(java.lang.String[],java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12511-12916;265-271;3-3/12511-12916;265-271;3-3/12511-12916;265-271;3-3];</data>
    </edge>
    <edge id="e1547" source="org.codehaus.jparsec.TerminalsTest.testCheckDup()" target="org.codehaus.jparsec.TerminalsTest.assertDup(java.lang.String[],java.lang.String[],boolean)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[12511-12916;265-271;3-3/12511-12916;265-271;3-3];</data>
    </edge>
    <edge id="e1548" source="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6391-6572;145-149;3-3];</data>
    </edge>
    <edge id="e1549" source="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6391-6572;145-149;3-3];</data>
    </edge>
    <edge id="e1550" source="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1033-1806;34-43;3-3/1033-1806;34-43;3-3/1033-1806;34-43;3-3/1033-1806;34-43;3-3/1033-1806;34-43;3-3/1033-1806;34-43;3-3/1033-1806;34-43;3-3];</data>
    </edge>
    <edge id="e1551" source="org.codehaus.jparsec.TerminalsTest.testDecimalLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1033-1806;34-43;3-3];</data>
    </edge>
    <edge id="e1552" source="org.codehaus.jparsec.TerminalsTest.testDoubleQuoteString()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[597-816;24-27;3-3/597-816;24-27;3-3];</data>
    </edge>
    <edge id="e1553" source="org.codehaus.jparsec.TerminalsTest.testFromFragment()" target="org.codehaus.jparsec.Terminals.fromFragment(java.lang.Object[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6579-7185;151-160;3-3/6579-7185;151-160;3-3/6579-7185;151-160;3-3];</data>
    </edge>
    <edge id="e1554" source="org.codehaus.jparsec.TerminalsTest.testFromFragment()" target="org.codehaus.jparsec.TokenMap.map(org.codehaus.jparsec.Token)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6579-7185;151-160;3-3/6579-7185;151-160;3-3/6579-7185;151-160;3-3/6579-7185;151-160;3-3];</data>
    </edge>
    <edge id="e1555" source="org.codehaus.jparsec.TerminalsTest.testIdentifierParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6040-6198;134-137;3-3];</data>
    </edge>
    <edge id="e1556" source="org.codehaus.jparsec.TerminalsTest.testIdentifierParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6040-6198;134-137;3-3];</data>
    </edge>
    <edge id="e1557" source="org.codehaus.jparsec.TerminalsTest.testIdentifierTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4937-5467;107-114;3-3/4937-5467;107-114;3-3/4937-5467;107-114;3-3/4937-5467;107-114;3-3/4937-5467;107-114;3-3];</data>
    </edge>
    <edge id="e1558" source="org.codehaus.jparsec.TerminalsTest.testIdentifierTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4937-5467;107-114;3-3];</data>
    </edge>
    <edge id="e1559" source="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6205-6384;139-143;3-3];</data>
    </edge>
    <edge id="e1560" source="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[6205-6384;139-143;3-3];</data>
    </edge>
    <edge id="e1561" source="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1813-2339;45-51;3-3/1813-2339;45-51;3-3/1813-2339;45-51;3-3/1813-2339;45-51;3-3];</data>
    </edge>
    <edge id="e1562" source="org.codehaus.jparsec.TerminalsTest.testIntegerLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[1813-2339;45-51;3-3];</data>
    </edge>
    <edge id="e1563" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralDecTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2876-3220;64-69;3-3/2876-3220;64-69;3-3];</data>
    </edge>
    <edge id="e1564" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralDecTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2876-3220;64-69;3-3];</data>
    </edge>
    <edge id="e1565" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralDecTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2876-3220;64-69;3-3];</data>
    </edge>
    <edge id="e1566" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralHexTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3227-3794;71-80;3-3/3227-3794;71-80;3-3/3227-3794;71-80;3-3/3227-3794;71-80;3-3];</data>
    </edge>
    <edge id="e1567" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralHexTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3227-3794;71-80;3-3/3227-3794;71-80;3-3];</data>
    </edge>
    <edge id="e1568" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralHexTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3227-3794;71-80;3-3];</data>
    </edge>
    <edge id="e1569" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralOctTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3994-4476;89-96;3-3/3994-4476;89-96;3-3];</data>
    </edge>
    <edge id="e1570" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralOctTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3994-4476;89-96;3-3/3994-4476;89-96;3-3/3994-4476;89-96;3-3];</data>
    </edge>
    <edge id="e1571" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralOctTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[3994-4476;89-96;3-3];</data>
    </edge>
    <edge id="e1572" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5662-5822;122-125;3-3];</data>
    </edge>
    <edge id="e1573" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5662-5822;122-125;3-3];</data>
    </edge>
    <edge id="e1574" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4483-4930;98-105;3-3/4483-4930;98-105;3-3/4483-4930;98-105;3-3/4483-4930;98-105;3-3/4483-4930;98-105;3-3];</data>
    </edge>
    <edge id="e1575" source="org.codehaus.jparsec.TerminalsTest.testLongLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[4483-4930;98-105;3-3];</data>
    </edge>
    <edge id="e1576" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Terminals.caseSensitive(java.lang.String[],java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1577" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Lexicon.phrase(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1578" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1579" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Parser.parse(java.lang.CharSequence)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1580" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3/8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1581" source="org.codehaus.jparsec.TerminalsTest.testPhrase()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[8183-8664;184-193;3-3];</data>
    </edge>
    <edge id="e1582" source="org.codehaus.jparsec.TerminalsTest.testScientificNumberLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2346-2869;53-62;3-3/2346-2869;53-62;3-3/2346-2869;53-62;3-3];</data>
    </edge>
    <edge id="e1583" source="org.codehaus.jparsec.TerminalsTest.testScientificNumberLiteralTokenizer()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[2346-2869;53-62;3-3];</data>
    </edge>
    <edge id="e1584" source="org.codehaus.jparsec.TerminalsTest.testSingleQuoteChar()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[397-590;19-22;3-3/397-590;19-22;3-3];</data>
    </edge>
    <edge id="e1585" source="org.codehaus.jparsec.TerminalsTest.testSingleQuoteString()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[823-1026;29-32;3-3/823-1026;29-32;3-3];</data>
    </edge>
    <edge id="e1586" source="org.codehaus.jparsec.TerminalsTest.testStringLiteralParser()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5829-6033;127-132;3-3];</data>
    </edge>
    <edge id="e1587" source="org.codehaus.jparsec.TerminalsTest.testStringLiteralParser()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[5829-6033;127-132;3-3];</data>
    </edge>
    <edge id="e1588" source="org.codehaus.jparsec.TerminalsTest.testToken_noTokenName()" target="org.codehaus.jparsec.Terminals.operators(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7192-7414;162-166;3-3];</data>
    </edge>
    <edge id="e1589" source="org.codehaus.jparsec.TerminalsTest.testToken_noTokenName()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7192-7414;162-166;3-3];</data>
    </edge>
    <edge id="e1590" source="org.codehaus.jparsec.TerminalsTest.testToken_noTokenName()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7192-7414;162-166;3-3];</data>
    </edge>
    <edge id="e1591" source="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()" target="org.codehaus.jparsec.Terminals.operators(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
    </edge>
    <edge id="e1592" source="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
    </edge>
    <edge id="e1593" source="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
    </edge>
    <edge id="e1594" source="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
    </edge>
    <edge id="e1595" source="org.codehaus.jparsec.TerminalsTest.testToken_oneTokenNameOnly()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7421-7759;168-174;3-3];</data>
    </edge>
    <edge id="e1596" source="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()" target="org.codehaus.jparsec.Terminals.operators(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3];</data>
    </edge>
    <edge id="e1597" source="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()" target="org.codehaus.jparsec.Lexicon.token(java.lang.String[])">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3];</data>
    </edge>
    <edge id="e1598" source="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()" target="org.codehaus.jparsec.Parser.from(org.codehaus.jparsec.Parser,org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3];</data>
    </edge>
    <edge id="e1599" source="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()" target="org.codehaus.jparsec.Asserts.assertParser(org.codehaus.jparsec.Parser,java.lang.String,java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3/7766-8176;176-182;3-3];</data>
    </edge>
    <edge id="e1600" source="org.codehaus.jparsec.TerminalsTest.testToken_tokenNamesListed()" target="org.codehaus.jparsec.Asserts.assertFailure(org.codehaus.jparsec.Parser,java.lang.String,int,int,java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TerminalsTest.java;[7766-8176;176-182;3-3];</data>
    </edge>
    <edge id="e1601" source="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)" target="org.codehaus.jparsec.Parser.next(org.codehaus.jparsec.Parser)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TestParsers.java;[222-454;14-20;3-3];</data>
    </edge>
    <edge id="e1602" source="org.codehaus.jparsec.TestParsers.areChars(java.lang.String)" target="org.codehaus.jparsec.TestParsers.isChar(char)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TestParsers.java;[222-454;14-20;3-3];</data>
    </edge>
    <edge id="e1603" source="org.codehaus.jparsec.TestParsers.isChar(char)" target="org.codehaus.jparsec.Parser.retn(R)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TestParsers.java;[132-215;10-12;3-3];</data>
    </edge>
    <edge id="e1604" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ToTokenParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ToTokenParser.java;[305-577;15-24;3-3];</data>
    </edge>
    <edge id="e1605" source="org.codehaus.jparsec.ToTokenParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.getIndex()">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/ToTokenParser.java;[305-577;15-24;3-3/305-577;15-24;3-3];</data>
    </edge>
    <edge id="e1606" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.TokenizerMaps$2.map(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3368-3470;69-71;5-5];</data>
    </edge>
    <edge id="e1607" source="org.codehaus.jparsec.TokenizerMaps$2.map(java.lang.String)" target="org.codehaus.jparsec.StringLiteralsTranslator.tokenizeDoubleQuote(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3368-3470;69-71;5-5];</data>
    </edge>
    <edge id="e1608" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.TokenizerMaps$3.map(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3906-4014;83-85;5-5];</data>
    </edge>
    <edge id="e1609" source="org.codehaus.jparsec.TokenizerMaps$3.map(java.lang.String)" target="org.codehaus.jparsec.StringLiteralsTranslator.tokenizeSingleQuote(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[3906-4014;83-85;5-5];</data>
    </edge>
    <edge id="e1610" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.TokenizerMaps$5.map(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4943-5045;113-115;5-5];</data>
    </edge>
    <edge id="e1611" source="org.codehaus.jparsec.TokenizerMaps$5.map(java.lang.String)" target="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeDecimalAsLong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[4943-5045;113-115;5-5];</data>
    </edge>
    <edge id="e1612" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.TokenizerMaps$6.map(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5342-5442;126-128;5-5];</data>
    </edge>
    <edge id="e1613" source="org.codehaus.jparsec.TokenizerMaps$6.map(java.lang.String)" target="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeOctalAsLong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5342-5442;126-128;5-5];</data>
    </edge>
    <edge id="e1614" source="org.codehaus.jparsec.functors.Map.map(From)" target="org.codehaus.jparsec.TokenizerMaps$7.map(java.lang.String)">
      <data key="type">INTERFACE_IMPLEMENTATION</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5745-5843;139-141;5-5];</data>
    </edge>
    <edge id="e1615" source="org.codehaus.jparsec.TokenizerMaps$7.map(java.lang.String)" target="org.codehaus.jparsec.NumberLiteralsTranslator.tokenizeHexAsLong(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/TokenizerMaps.java;[5745-5843;139-141;5-5];</data>
    </edge>
    <edge id="e1616" source="org.codehaus.jparsec.TokenizerMapsTest.testDecAsLong()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1285-1464;46-49;3-3];</data>
    </edge>
    <edge id="e1617" source="org.codehaus.jparsec.TokenizerMapsTest.testDoubleQuoteString()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1843-2057;61-64;3-3];</data>
    </edge>
    <edge id="e1618" source="org.codehaus.jparsec.TokenizerMapsTest.testFragment()" target="org.codehaus.jparsec.TokenizerMaps.fragment(java.lang.Object)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[318-407;16-18;3-3];</data>
    </edge>
    <edge id="e1619" source="org.codehaus.jparsec.TokenizerMapsTest.testHexAsLong()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1656-1836;56-59;3-3];</data>
    </edge>
    <edge id="e1620" source="org.codehaus.jparsec.TokenizerMapsTest.testOctAsLong()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[1471-1649;51-54;3-3];</data>
    </edge>
    <edge id="e1621" source="org.codehaus.jparsec.TokenizerMapsTest.testSingleQuoteString()" target="org.codehaus.jparsec.functors.Map.map(From)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/test/org/codehaus/jparsec/TokenizerMapsTest.java;[2064-2266;66-69;3-3];</data>
    </edge>
    <edge id="e1622" source="org.codehaus.jparsec.Parser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.UnexpectedParser.apply(org.codehaus.jparsec.ParseContext)">
      <data key="type">METHOD_OVERRIDE</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/UnexpectedParser.java;[1362-1460;25-28;3-3];</data>
    </edge>
    <edge id="e1623" source="org.codehaus.jparsec.UnexpectedParser.apply(org.codehaus.jparsec.ParseContext)" target="org.codehaus.jparsec.ParseContext.unexpected(java.lang.String)">
      <data key="type">METHOD_CALL</data>
      <data key="sourcecode">/home/vince/Experiments/steimann/jparsec/src/org/codehaus/jparsec/UnexpectedParser.java;[1362-1460;25-28;3-3];</data>
    </edge>
  </graph>
</graphml>
