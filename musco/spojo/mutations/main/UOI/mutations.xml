<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="UOI" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="27927">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_9" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="((prime * result) + ((name) == null ? 0 : name.hashCode())) * -1" />
    <mutant id="mutant_27" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.deriveClassFromSource(T)" from="(actualClass != null) &amp;&amp; (actualClass.isArray())" to="!((actualClass != null) &amp;&amp; (actualClass.isArray()))" />
    <mutant id="mutant_8" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_26" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)) - 1" />
    <mutant id="mutant_29" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.isImmutable(java.lang.Object)" from="(((clazz.isPrimitive()) || (clazz.isEnum())) || (Number.class.isAssignableFrom(clazz)))" to="(!(((clazz.isPrimitive()) || (clazz.isEnum())) || (Number.class.isAssignableFrom(clazz))))" />
    <mutant id="mutant_28" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.isImmutable(java.lang.Object)" from="((clazz.isPrimitive()) || (clazz.isEnum()))" to="(!((clazz.isPrimitive()) || (clazz.isEnum())))" />
    <mutant id="mutant_5" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="((prime * result) + ((childMap) == null ? 0 : childMap.hashCode())) - 1" />
    <mutant id="mutant_4" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="((prime * result) + ((childMap) == null ? 0 : childMap.hashCode())) + 1" />
    <mutant id="mutant_7" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_6" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_41" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.copyPropertiesWithInclude(java.lang.Object,java.lang.Object,com.github.sworm.spojo.data.Property)" from="(com.github.sworm.spojo.utils.SpojoUtils.hasWritableMethod(targetPd)) &amp;&amp; (property.containsChild(propertyName))" to="!((com.github.sworm.spojo.utils.SpojoUtils.hasWritableMethod(targetPd)) &amp;&amp; (property.containsChild(propertyName)))" />
    <mutant id="mutant_40" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.copyPropertiesWithInclude(java.lang.Object,java.lang.Object,com.github.sworm.spojo.data.Property)" from="(property != null) &amp;&amp; (!(property.isEmpty()))" to="!((property != null) &amp;&amp; (!(property.isEmpty())))" />
    <mutant id="mutant_21" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + 1)" />
    <mutant id="mutant_43" viable="true" in="com.github.sworm.spojo.config.SpojoConfiguration.addClass(java.lang.Class)" from="(ruleList != null) &amp;&amp; (!(ruleList.isEmpty()))" to="!((ruleList != null) &amp;&amp; (!(ruleList.isEmpty())))" />
    <mutant id="mutant_20" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="((length - 1) + 1)" />
    <mutant id="mutant_42" viable="true" in="com.github.sworm.spojo.config.RuleMetadataImpl.hasInheritance()" from="((extendsFrom) != null) &amp;&amp; (!(extendsFrom.isEmpty()))" to="!(((extendsFrom) != null) &amp;&amp; (!(extendsFrom.isEmpty())))" />
    <mutant id="mutant_23" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) - 1)" />
    <mutant id="mutant_22" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg)))" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) * -1)" />
    <mutant id="mutant_44" viable="true" in="com.github.sworm.spojo.Spojo.shrink(T,E,java.lang.String)" from="(source != null) &amp;&amp; (target != null)" to="!((source != null) &amp;&amp; (target != null))" />
    <mutant id="mutant_25" viable="true" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)) + 1" />
    <mutant id="mutant_24" viable="false" in="com.github.sworm.spojo.factories.impl.AnnotationLoaderFactoryBean.scanPackages()" from="((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)" to="(((ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX) + (ClassUtils.convertClassNameToResourcePath(pkg))) + (AnnotationLoaderFactoryBean.RESOURCE_PATTERN)) * -1" />
    <mutant id="mutant_1" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_0" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_3" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((childMap) == null ? 0 : childMap.hashCode())" to="((prime * result) + ((childMap) == null ? 0 : childMap.hashCode())) * -1" />
    <mutant id="mutant_2" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_16" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="((prime * result) + ((definition) == null ? 0 : definition.hashCode())) * -1" />
    <mutant id="mutant_38" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="(((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;) * -1)" />
    <mutant id="mutant_15" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="((prime * result) + ((definition) == null ? 0 : definition.hashCode())) - 1" />
    <mutant id="mutant_37" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="(((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;) - 1)" />
    <mutant id="mutant_18" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="((length - 1) - 1)" />
    <mutant id="mutant_17" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((definition) == null ? 0 : definition.hashCode())" to="((prime * result) + ((definition) == null ? 0 : definition.hashCode())) + 1" />
    <mutant id="mutant_39" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.copyPropertiesWithExclude(java.lang.Object,java.lang.Object,com.github.sworm.spojo.data.Property)" from="(innerProperty == null) || (innerProperty.isComplexType())" to="!((innerProperty == null) || (innerProperty.isComplexType()))" />
    <mutant id="mutant_19" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.generate2String(com.github.sworm.spojo.data.Property)" from="(length - 1)" to="((length - 1) * -1)" />
    <mutant id="mutant_30" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.isImmutable(java.lang.Object)" from="(((clazz.isPrimitive()) || (clazz.isEnum())) || (Number.class.isAssignableFrom(clazz))) || (SpojoUtils.defaultImmutableClasses.contains(clazz))" to="!((((clazz.isPrimitive()) || (clazz.isEnum())) || (Number.class.isAssignableFrom(clazz))) || (SpojoUtils.defaultImmutableClasses.contains(clazz)))" />
    <mutant id="mutant_10" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="((prime * result) + ((name) == null ? 0 : name.hashCode())) - 1" />
    <mutant id="mutant_32" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(Set.class.equals(ret)) || (Collection.class.equals(ret))" to="!((Set.class.equals(ret)) || (Collection.class.equals(ret)))" />
    <mutant id="mutant_31" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.isPropertyCopyable(java.beans.PropertyDescriptor,java.lang.String)" from="(sourcePd != null) &amp;&amp; ((sourcePd.getReadMethod()) != null)" to="!((sourcePd != null) &amp;&amp; ((sourcePd.getReadMethod()) != null))" />
    <mutant id="mutant_12" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) - 1)" />
    <mutant id="mutant_34" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="((&quot;The interface: \'&quot; + ret) + 1)" />
    <mutant id="mutant_11" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result) + ((name) == null ? 0 : name.hashCode())" to="((prime * result) + ((name) == null ? 0 : name.hashCode())) + 1" />
    <mutant id="mutant_33" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="((&quot;The interface: \'&quot; + ret) * -1)" />
    <mutant id="mutant_14" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) * -1)" />
    <mutant id="mutant_36" viable="true" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;)" to="(((&quot;The interface: \'&quot; + ret) + &quot;\' can\'t be instanciated&quot;) + 1)" />
    <mutant id="mutant_13" viable="true" in="com.github.sworm.spojo.data.AbstractProperty.hashCode()" from="(prime * result)" to="((prime * result) + 1)" />
    <mutant id="mutant_35" viable="false" in="com.github.sworm.spojo.utils.SpojoUtils.findClazztype2instantiate(java.lang.reflect.Method,java.lang.Object)" from="(&quot;The interface: \'&quot; + ret)" to="((&quot;The interface: \'&quot; + ret) - 1)" />
  </mutants>
</mutation>
