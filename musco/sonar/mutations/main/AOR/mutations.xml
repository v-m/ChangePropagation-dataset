<?xml version="1.0" encoding="UTF-8"?>
<mutation operator-id="AOR" parent="../../../smf.run.xml" name="main" config-file="mutations.xml" time="184301">
  <class-to-mutate />
  <mutants>
    <mutant id="mutant_327" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * 2)" />
    <mutant id="mutant_569" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="dialectId" />
    <mutant id="mutant_328" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / 2)" />
    <mutant id="mutant_329" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / 3)" />
    <mutant id="mutant_323" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="2" />
    <mutant id="mutant_565" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="(((proxy.type()) + &quot; proxy: &quot;) * (proxy.address()))" />
    <mutant id="mutant_324" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_566" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="proxy.address()" />
    <mutant id="mutant_325" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % 2)" />
    <mutant id="mutant_567" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="(((proxy.type()) + &quot; proxy: &quot;) - (proxy.address()))" />
    <mutant id="mutant_326" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 2)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - 2)" />
    <mutant id="mutant_568" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="(((proxy.type()) + &quot; proxy: &quot;) % (proxy.address()))" />
    <mutant id="mutant_1083" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="(newKey * (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" />
    <mutant id="mutant_1084" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="(newKey - (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" />
    <mutant id="mutant_1081" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())" />
    <mutant id="mutant_1082" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="newKey" />
    <mutant id="mutant_1080" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="(newKey % (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" />
    <mutant id="mutant_1078" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="(newKey - (resourceKey.substring(oldKey.length(), resourceKey.length())))" />
    <mutant id="mutant_1079" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" to="(newKey / (resourceDeprecatedKey.substring(oldKey.length(), resourceDeprecatedKey.length())))" />
    <mutant id="mutant_1076" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="newKey" />
    <mutant id="mutant_1077" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="(newKey * (resourceKey.substring(oldKey.length(), resourceKey.length())))" />
    <mutant id="mutant_1074" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="(newKey % (resourceKey.substring(oldKey.length(), resourceKey.length())))" />
    <mutant id="mutant_1075" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="resourceKey.substring(oldKey.length(), resourceKey.length())" />
    <mutant id="mutant_561" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="&quot; proxy: &quot;" />
    <mutant id="mutant_320" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_562" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="((proxy.type()) - &quot; proxy: &quot;)" />
    <mutant id="mutant_321" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot;" />
    <mutant id="mutant_563" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="((proxy.type()) + &quot; proxy: &quot;)" />
    <mutant id="mutant_322" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; * (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_564" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="(((proxy.type()) + &quot; proxy: &quot;) + (proxy.address()))" to="(((proxy.type()) + &quot; proxy: &quot;) / (proxy.address()))" />
    <mutant id="mutant_560" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="(proxy.type())" />
    <mutant id="mutant_338" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % 4)" />
    <mutant id="mutant_339" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - 4)" />
    <mutant id="mutant_334" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - 3)" />
    <mutant id="mutant_576" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="&quot; jdbc url &quot;" />
    <mutant id="mutant_335" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / 4)" />
    <mutant id="mutant_577" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" />
    <mutant id="mutant_336" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_578" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) * &quot; jdbc url &quot;)" />
    <mutant id="mutant_337" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="4" />
    <mutant id="mutant_579" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) % &quot; jdbc url &quot;)" />
    <mutant id="mutant_1072" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) % &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1073" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.runBatchUpdateForAllResources(java.util.Collection,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(newKey + (resourceKey.substring(oldKey.length(), resourceKey.length())))" to="(newKey / (resourceKey.substring(oldKey.length(), resourceKey.length())))" />
    <mutant id="mutant_1070" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) - &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1071" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="&quot;\&quot; key already exists.&quot;" />
    <mutant id="mutant_1069" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) * &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1067" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" />
    <mutant id="mutant_1068" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newName) / &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1065" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; % newName)" />
    <mutant id="mutant_1066" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; * newName)" />
    <mutant id="mutant_1063" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; / newName)" />
    <mutant id="mutant_1064" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; - newName)" />
    <mutant id="mutant_330" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="3" />
    <mutant id="mutant_572" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; * dialectId)" />
    <mutant id="mutant_331" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_573" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; - dialectId)" />
    <mutant id="mutant_332" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % 3)" />
    <mutant id="mutant_574" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="&quot;Unable to determine database dialect to use within sonar with dialect &quot;" />
    <mutant id="mutant_333" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 3)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * 3)" />
    <mutant id="mutant_575" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) / &quot; jdbc url &quot;)" />
    <mutant id="mutant_570" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; % dialectId)" />
    <mutant id="mutant_571" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId)" to="(&quot;Unable to determine database dialect to use within sonar with dialect &quot; / dialectId)" />
    <mutant id="mutant_107" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" />
    <mutant id="mutant_349" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_108" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="ruleKey" />
    <mutant id="mutant_109" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) % ruleKey)" />
    <mutant id="mutant_103" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="((&quot;rules/&quot; + repositoryKey) / &quot;/&quot;)" />
    <mutant id="mutant_345" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot;" />
    <mutant id="mutant_587" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="(((Integer)(args[0])) * 1)" />
    <mutant id="mutant_104" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="((&quot;rules/&quot; + repositoryKey) - &quot;/&quot;)" />
    <mutant id="mutant_346" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="&quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;" />
    <mutant id="mutant_588" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="1" />
    <mutant id="mutant_105" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="&quot;/&quot;" />
    <mutant id="mutant_347" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; % (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_589" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="(((Integer)(args[0])) % 1)" />
    <mutant id="mutant_106" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="((&quot;rules/&quot; + repositoryKey) * &quot;/&quot;)" />
    <mutant id="mutant_348" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot;" />
    <mutant id="mutant_1061" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="&quot;Impossible to update key: a resource with \&quot;&quot;" />
    <mutant id="mutant_1062" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.checkNewNameOfAllModules(java.util.Set,java.lang.String,java.lang.String,org.sonar.core.resource.ResourceKeyUpdaterMapper)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newName)" to="newName" />
    <mutant id="mutant_1060" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="(key.length()) * (ResourceIndexerDao.MINIMUM_KEY_SIZE)" />
    <mutant id="mutant_1058" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="(key.length()) + (ResourceIndexerDao.MINIMUM_KEY_SIZE)" />
    <mutant id="mutant_1059" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="ResourceIndexerDao.MINIMUM_KEY_SIZE" />
    <mutant id="mutant_1056" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="key.length()" />
    <mutant id="mutant_1298" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) / (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1057" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="(key.length()) / (ResourceIndexerDao.MINIMUM_KEY_SIZE)" />
    <mutant id="mutant_1299" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(++(index))" />
    <mutant id="mutant_1054" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot;" />
    <mutant id="mutant_1296" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) - (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1055" viable="true" in="org.sonar.core.resource.ResourceIndexerDao.insertIndexEntries(java.lang.String,long,java.lang.String,long,int,org.sonar.core.resource.ResourceIndexerMapper)" from="(key.length()) - (ResourceIndexerDao.MINIMUM_KEY_SIZE)" to="(key.length()) % (ResourceIndexerDao.MINIMUM_KEY_SIZE)" />
    <mutant id="mutant_1297" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) * (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1052" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) * &quot;%&quot;" />
    <mutant id="mutant_1294" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(DatabaseSession.BATCH_SIZE)" />
    <mutant id="mutant_1053" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) % &quot;%&quot;" />
    <mutant id="mutant_1295" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) + (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_341" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; / &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_583" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="jdbcConnectionUrl" />
    <mutant id="mutant_100" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="&quot;rules/&quot;" />
    <mutant id="mutant_342" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; - &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_584" viable="true" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" />
    <mutant id="mutant_101" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="((&quot;rules/&quot; + repositoryKey) % &quot;/&quot;)" />
    <mutant id="mutant_343" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; % &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_585" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) % jdbcConnectionUrl)" />
    <mutant id="mutant_102" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;)" to="(&quot;rules/&quot; + repositoryKey)" />
    <mutant id="mutant_344" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; * &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_586" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) - jdbcConnectionUrl)" />
    <mutant id="mutant_580" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;)" to="((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) - &quot; jdbc url &quot;)" />
    <mutant id="mutant_581" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) * jdbcConnectionUrl)" />
    <mutant id="mutant_340" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 4)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * 4)" />
    <mutant id="mutant_582" viable="false" in="org.sonar.core.persistence.dialect.DialectUtils.find(java.lang.String,java.lang.String)" from="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) + jdbcConnectionUrl)" to="(((&quot;Unable to determine database dialect to use within sonar with dialect &quot; + dialectId) + &quot; jdbc url &quot;) / jdbcConnectionUrl)" />
    <mutant id="mutant_118" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) * &quot;.html&quot;" />
    <mutant id="mutant_119" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="(&quot;.param.&quot; % paramKey)" />
    <mutant id="mutant_114" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) % &quot;.html&quot;" />
    <mutant id="mutant_356" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_598" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="(count % 1)" />
    <mutant id="mutant_115" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) / &quot;.html&quot;" />
    <mutant id="mutant_357" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; * (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_599" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="((versions.size()) / 1)" />
    <mutant id="mutant_116" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey" />
    <mutant id="mutant_358" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; % (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_117" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="&quot;.html&quot;" />
    <mutant id="mutant_359" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot;" />
    <mutant id="mutant_1050" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) / &quot;%&quot;" />
    <mutant id="mutant_1292" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) / (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1051" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) - &quot;%&quot;" />
    <mutant id="mutant_1293" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(++(index))" />
    <mutant id="mutant_1290" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) - (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1291" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) * (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1047" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; - sql)" />
    <mutant id="mutant_1289" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="((++(index)) + (DatabaseSession.BATCH_SIZE))" />
    <mutant id="mutant_1048" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="&quot;%&quot;" />
    <mutant id="mutant_1045" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; / sql)" />
    <mutant id="mutant_1287" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="&quot;Unable to persist : &quot;" />
    <mutant id="mutant_1046" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; % sql)" />
    <mutant id="mutant_1288" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="(&quot;Unable to persist : &quot; % model)" />
    <mutant id="mutant_1043" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="sql" />
    <mutant id="mutant_1285" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="(&quot;Unable to persist : &quot; - model)" />
    <mutant id="mutant_1044" viable="false" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; * sql)" />
    <mutant id="mutant_1286" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="(&quot;Unable to persist : &quot; * model)" />
    <mutant id="mutant_1041" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - &quot;)&quot;)" />
    <mutant id="mutant_1283" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="(&quot;Unable to persist : &quot; / model)" />
    <mutant id="mutant_1042" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_1284" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.internalSave(java.lang.Object,boolean)" from="(&quot;Unable to persist : &quot; + model)" to="model" />
    <mutant id="mutant_110" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) * ruleKey)" />
    <mutant id="mutant_352" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; * (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_594" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="(count / 1)" />
    <mutant id="mutant_111" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) / ruleKey)" />
    <mutant id="mutant_353" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; / (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_595" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="count" />
    <mutant id="mutant_112" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey)" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) - ruleKey)" />
    <mutant id="mutant_354" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; - (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_596" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="(count + 1)" />
    <mutant id="mutant_113" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) + &quot;.html&quot;" to="(((&quot;rules/&quot; + repositoryKey) + &quot;/&quot;) + ruleKey) - &quot;.html&quot;" />
    <mutant id="mutant_355" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot;" />
    <mutant id="mutant_597" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="(count * 1)" />
    <mutant id="mutant_590" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="(((Integer)(args[0])) + 1)" />
    <mutant id="mutant_591" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="(((Integer)(args[0])) / 1)" />
    <mutant id="mutant_350" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; / (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_592" viable="true" in="org.sonar.core.persistence.profiling.ProfilingPreparedStatementHandler.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])" from="(((Integer)(args[0])) - 1)" to="((Integer)(args[0]))" />
    <mutant id="mutant_1049" viable="true" in="org.sonar.core.user.UserMembershipQuery.memberSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot; + sql" />
    <mutant id="mutant_351" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; - (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_593" viable="true" in="org.sonar.core.persistence.DaoUtils.repeatCondition(java.lang.String,int,java.lang.String)" from="(count - 1)" to="1" />
    <mutant id="mutant_129" viable="true" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="&quot;.html&quot;" />
    <mutant id="mutant_125" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="(ruleKey * &quot;.html&quot;)" />
    <mutant id="mutant_367" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; * (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_126" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="(ruleKey / &quot;.html&quot;)" />
    <mutant id="mutant_368" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; - (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_127" viable="true" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="ruleKey" />
    <mutant id="mutant_369" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_128" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="(ruleKey - &quot;.html&quot;)" />
    <mutant id="mutant_121" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="paramKey" />
    <mutant id="mutant_363" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; * (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_122" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="(&quot;.param.&quot; - paramKey)" />
    <mutant id="mutant_364" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_123" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="(&quot;.param.&quot; / paramKey)" />
    <mutant id="mutant_365" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot;" />
    <mutant id="mutant_124" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="(&quot;.param.&quot; * paramKey)" />
    <mutant id="mutant_366" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; % (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_360" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; % (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_361" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; - (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_120" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getParamDescription(java.lang.String,java.lang.String,java.lang.String)" from="(&quot;.param.&quot; + paramKey)" to="&quot;.param.&quot;" />
    <mutant id="mutant_362" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; / (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_136" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="(&quot;Issue attributes must not exceed 4000 characters: &quot; - s)" />
    <mutant id="mutant_378" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) % &quot;&quot;)" />
    <mutant id="mutant_137" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="(&quot;Rule not found: &quot; * (issue.ruleKey()))" />
    <mutant id="mutant_379" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE" />
    <mutant id="mutant_138" viable="true" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="&quot;Rule not found: &quot;" />
    <mutant id="mutant_139" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="(&quot;Rule not found: &quot; - (issue.ruleKey()))" />
    <mutant id="mutant_132" viable="true" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="&quot;Issue attributes must not exceed 4000 characters: &quot;" />
    <mutant id="mutant_374" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % 5)" />
    <mutant id="mutant_133" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="(&quot;Issue attributes must not exceed 4000 characters: &quot; % s)" />
    <mutant id="mutant_375" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * 5)" />
    <mutant id="mutant_134" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="(&quot;Issue attributes must not exceed 4000 characters: &quot; * s)" />
    <mutant id="mutant_376" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - 5)" />
    <mutant id="mutant_135" viable="false" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="(&quot;Issue attributes must not exceed 4000 characters: &quot; / s)" />
    <mutant id="mutant_377" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="&quot;&quot;" />
    <mutant id="mutant_370" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; + (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. This property is specific to the project. Values are : &quot; / (&quot;&lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, &quot; + (&quot;for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to compare to previous analysis&lt;/li&gt;&quot; + (&quot;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;li&gt;A version, for example 1.2&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_371" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / 5)" />
    <mutant id="mutant_130" viable="false" in="org.sonar.core.i18n.RuleI18nManager.lookUpDescriptionInFormerLocation(java.lang.String,java.lang.String)" from="(ruleKey + &quot;.html&quot;)" to="(ruleKey % &quot;.html&quot;)" />
    <mutant id="mutant_372" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_131" viable="true" in="org.sonar.core.issue.db.IssueDto.setIssueAttributes(java.lang.String)" from="(&quot;Issue attributes must not exceed 4000 characters: &quot; + s)" to="s" />
    <mutant id="mutant_373" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 5)" to="5" />
    <mutant id="mutant_147" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="(&quot;Resolve conflict on issue &quot; * (issue.key()))" />
    <mutant id="mutant_389" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot;" />
    <mutant id="mutant_148" viable="true" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="issue.key()" />
    <mutant id="mutant_149" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; % (issue.status()))" />
    <mutant id="mutant_380" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) * &quot;&quot;)" />
    <mutant id="mutant_1098" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="&quot;-&gt; Clean &quot;" />
    <mutant id="mutant_1099" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="(project.getLongName())" />
    <mutant id="mutant_1096" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) * &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1097" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="(&quot;-&gt; Clean &quot; - (project.getLongName()))" />
    <mutant id="mutant_143" viable="true" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="&quot;Resolve conflict on issue &quot;" />
    <mutant id="mutant_385" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; * &quot;this property will slightly increase each SonarQube analysis time.&quot;)" />
    <mutant id="mutant_144" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="(&quot;Resolve conflict on issue &quot; % (issue.key()))" />
    <mutant id="mutant_386" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot;" />
    <mutant id="mutant_145" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="(&quot;Resolve conflict on issue &quot; / (issue.key()))" />
    <mutant id="mutant_387" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; - &quot;this property will slightly increase each SonarQube analysis time.&quot;)" />
    <mutant id="mutant_146" viable="false" in="org.sonar.core.issue.db.UpdateConflictResolver.resolve(org.sonar.api.issue.internal.DefaultIssue,org.sonar.core.issue.db.IssueMapper)" from="(&quot;Resolve conflict on issue &quot; + (issue.key()))" to="(&quot;Resolve conflict on issue &quot; - (issue.key()))" />
    <mutant id="mutant_388" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="&quot;this property will slightly increase each SonarQube analysis time.&quot;" />
    <mutant id="mutant_381" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) - &quot;&quot;)" />
    <mutant id="mutant_140" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="(&quot;Rule not found: &quot; % (issue.ruleKey()))" />
    <mutant id="mutant_382" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) + &quot;&quot;)" to="((CoreProperties.CPD_CROSS_RPOJECT_DEFAULT_VALUE) / &quot;&quot;)" />
    <mutant id="mutant_141" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="(&quot;Rule not found: &quot; / (issue.ruleKey()))" />
    <mutant id="mutant_383" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; % &quot;this property will slightly increase each SonarQube analysis time.&quot;)" />
    <mutant id="mutant_142" viable="false" in="org.sonar.core.issue.db.IssueStorage.rule(org.sonar.api.issue.Issue)" from="(&quot;Rule not found: &quot; + (issue.ruleKey()))" to="issue.ruleKey()" />
    <mutant id="mutant_384" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" to="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; / &quot;this property will slightly increase each SonarQube analysis time.&quot;)" />
    <mutant id="mutant_158" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; / (issue.status()))" />
    <mutant id="mutant_159" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; - (issue.status()))" />
    <mutant id="mutant_1094" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) / &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1095" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) % &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_1092" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" />
    <mutant id="mutant_1093" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="&quot;\&quot; key already exists.&quot;" />
    <mutant id="mutant_1090" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; / newKey)" />
    <mutant id="mutant_1091" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) + &quot;\&quot; key already exists.&quot;)" to="((&quot;Impossible to update key: a resource with \&quot;&quot; + newKey) - &quot;\&quot; key already exists.&quot;)" />
    <mutant id="mutant_390" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; - (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" />
    <mutant id="mutant_1089" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; - newKey)" />
    <mutant id="mutant_391" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; * (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" />
    <mutant id="mutant_1087" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; % newKey)" />
    <mutant id="mutant_1088" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="newKey" />
    <mutant id="mutant_1085" viable="true" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="&quot;Impossible to update key: a resource with \&quot;&quot;" />
    <mutant id="mutant_1086" viable="false" in="org.sonar.core.resource.ResourceKeyUpdaterDao.updateKey(long,java.lang.String)" from="(&quot;Impossible to update key: a resource with \&quot;&quot; + newKey)" to="(&quot;Impossible to update key: a resource with \&quot;&quot; * newKey)" />
    <mutant id="mutant_154" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="issue.status()" />
    <mutant id="mutant_396" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; % (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" />
    <mutant id="mutant_155" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(issue.status())" />
    <mutant id="mutant_397" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; / (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" />
    <mutant id="mutant_156" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="&quot;Unknown status: &quot;" />
    <mutant id="mutant_398" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" />
    <mutant id="mutant_157" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; * (issue.status()))" />
    <mutant id="mutant_399" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot;" />
    <mutant id="mutant_150" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; * (issue.status()))" />
    <mutant id="mutant_392" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; / (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" />
    <mutant id="mutant_151" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="&quot;Unknown status: &quot;" />
    <mutant id="mutant_393" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; % (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" />
    <mutant id="mutant_152" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; / (issue.status()))" />
    <mutant id="mutant_394" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;))" to="(&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)" />
    <mutant id="mutant_153" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.outTransitions(org.sonar.api.issue.Issue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; - (issue.status()))" />
    <mutant id="mutant_395" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; * (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" />
    <mutant id="mutant_169" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) / (issue.key()))" />
    <mutant id="mutant_160" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(&quot;Unknown status: &quot; + (issue.status()))" to="(&quot;Unknown status: &quot; % (issue.status()))" />
    <mutant id="mutant_165" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="((&quot;Unknown status: &quot; + (issue.status())) - &quot; [issue=&quot;)" />
    <mutant id="mutant_166" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="((&quot;Unknown status: &quot; + (issue.status())) * &quot; [issue=&quot;)" />
    <mutant id="mutant_167" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" />
    <mutant id="mutant_168" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) - (issue.key()))" />
    <mutant id="mutant_161" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="(&quot;Unknown status: &quot; + (issue.status()))" />
    <mutant id="mutant_162" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="&quot; [issue=&quot;" />
    <mutant id="mutant_163" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="((&quot;Unknown status: &quot; + (issue.status())) % &quot; [issue=&quot;)" />
    <mutant id="mutant_164" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;)" to="((&quot;Unknown status: &quot; + (issue.status())) / &quot; [issue=&quot;)" />
    <mutant id="mutant_170" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) % (issue.key()))" />
    <mutant id="mutant_171" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) * (issue.key()))" />
    <mutant id="mutant_176" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_177" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) - &quot;]&quot;)" />
    <mutant id="mutant_178" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) * &quot;]&quot;)" />
    <mutant id="mutant_179" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="(&quot;Issue is still alive: &quot; / issue)" />
    <mutant id="mutant_172" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" to="(issue.key())" />
    <mutant id="mutant_173" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) / &quot;]&quot;)" />
    <mutant id="mutant_174" viable="true" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="(((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key()))" />
    <mutant id="mutant_175" viable="false" in="org.sonar.core.issue.workflow.IssueWorkflow.stateOf(org.sonar.api.issue.internal.DefaultIssue)" from="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) + &quot;]&quot;)" to="((((&quot;Unknown status: &quot; + (issue.status())) + &quot; [issue=&quot;) + (issue.key())) % &quot;]&quot;)" />
    <mutant id="mutant_180" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="issue" />
    <mutant id="mutant_181" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="(&quot;Issue is still alive: &quot; * issue)" />
    <mutant id="mutant_182" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="(&quot;Issue is still alive: &quot; - issue)" />
    <mutant id="mutant_187" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="(&quot;Several automatic transitions are available for issue: &quot; - issue)" />
    <mutant id="mutant_188" viable="true" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="&quot;Several automatic transitions are available for issue: &quot;" />
    <mutant id="mutant_189" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="(&quot;Several automatic transitions are available for issue: &quot; % issue)" />
    <mutant id="mutant_183" viable="true" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="&quot;Issue is still alive: &quot;" />
    <mutant id="mutant_184" viable="false" in="org.sonar.core.issue.workflow.SetEndOfLife.execute(org.sonar.core.issue.workflow.Function$Context)" from="(&quot;Issue is still alive: &quot; + issue)" to="(&quot;Issue is still alive: &quot; % issue)" />
    <mutant id="mutant_185" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="(&quot;Several automatic transitions are available for issue: &quot; * issue)" />
    <mutant id="mutant_186" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="issue" />
    <mutant id="mutant_190" viable="false" in="org.sonar.core.issue.workflow.State.outAutomaticTransition(org.sonar.api.issue.Issue)" from="(&quot;Several automatic transitions are available for issue: &quot; + issue)" to="(&quot;Several automatic transitions are available for issue: &quot; / issue)" />
    <mutant id="mutant_191" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="(key)" />
    <mutant id="mutant_192" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="(&quot;Transition from state &quot; % (key))" />
    <mutant id="mutant_193" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="&quot;Transition from state &quot;" />
    <mutant id="mutant_198" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="((&quot;Transition from state &quot; + (key)) / &quot; does not exist: &quot;)" />
    <mutant id="mutant_199" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="((&quot;Transition from state &quot; + (key)) - &quot; does not exist: &quot;)" />
    <mutant id="mutant_194" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="(&quot;Transition from state &quot; * (key))" />
    <mutant id="mutant_195" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="(&quot;Transition from state &quot; / (key))" />
    <mutant id="mutant_196" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(&quot;Transition from state &quot; + (key))" to="(&quot;Transition from state &quot; - (key))" />
    <mutant id="mutant_197" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="((&quot;Transition from state &quot; + (key)) * &quot; does not exist: &quot;)" />
    <mutant id="mutant_900" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; / (pageIndex))" />
    <mutant id="mutant_901" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; - (pageIndex))" />
    <mutant id="mutant_902" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; * (pageIndex))" />
    <mutant id="mutant_907" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) / &quot;)&quot;)" />
    <mutant id="mutant_908" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * &quot;)&quot;)" />
    <mutant id="mutant_909" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_903" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; % (pageIndex))" />
    <mutant id="mutant_904" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="&quot;Page index must be greater than 0 (got &quot;" />
    <mutant id="mutant_905" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - &quot;)&quot;)" />
    <mutant id="mutant_906" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" />
    <mutant id="mutant_910" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) % &quot;)&quot;)" />
    <mutant id="mutant_911" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="sql" />
    <mutant id="mutant_912" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; * sql)" />
    <mutant id="mutant_913" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; / sql)" />
    <mutant id="mutant_918" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) / &quot;%&quot;" />
    <mutant id="mutant_919" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) - &quot;%&quot;" />
    <mutant id="mutant_914" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; % sql)" />
    <mutant id="mutant_915" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; - sql)" />
    <mutant id="mutant_916" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="&quot;%&quot;" />
    <mutant id="mutant_917" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot; + sql" />
    <mutant id="mutant_921" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) % &quot;%&quot;" />
    <mutant id="mutant_922" viable="true" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot;" />
    <mutant id="mutant_923" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="((normalizedName.toLowerCase()) % &quot;_&quot;)" />
    <mutant id="mutant_924" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="&quot;_&quot;" />
    <mutant id="mutant_920" viable="false" in="org.sonar.core.permission.PermissionQuery.searchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) * &quot;%&quot;" />
    <mutant id="mutant_929" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;)" />
    <mutant id="mutant_925" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="(normalizedName.toLowerCase())" />
    <mutant id="mutant_926" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="((normalizedName.toLowerCase()) - &quot;_&quot;)" />
    <mutant id="mutant_927" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="((normalizedName.toLowerCase()) / &quot;_&quot;)" />
    <mutant id="mutant_928" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;)" to="((normalizedName.toLowerCase()) * &quot;_&quot;)" />
    <mutant id="mutant_932" viable="true" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="(normalizedName.toLowerCase()) + &quot;_&quot;" />
    <mutant id="mutant_933" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="((normalizedName.toLowerCase()) + &quot;_&quot;) - (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" />
    <mutant id="mutant_934" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="((normalizedName.toLowerCase()) + &quot;_&quot;) * (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" />
    <mutant id="mutant_935" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="(&quot;Unknown period property : &quot; % periodProperty)" />
    <mutant id="mutant_930" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="((normalizedName.toLowerCase()) + &quot;_&quot;) / (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" />
    <mutant id="mutant_931" viable="false" in="org.sonar.core.permission.PermissionTemplateDao.generateTemplateKee(java.lang.String,java.util.Date)" from="((normalizedName.toLowerCase()) + &quot;_&quot;) + (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" to="((normalizedName.toLowerCase()) + &quot;_&quot;) % (DateFormatUtils.format(timeStamp, &quot;yyyyMMdd_HHmmss&quot;))" />
    <mutant id="mutant_936" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="(&quot;Unknown period property : &quot; * periodProperty)" />
    <mutant id="mutant_937" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="(&quot;Unknown period property : &quot; - periodProperty)" />
    <mutant id="mutant_938" viable="false" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="(&quot;Unknown period property : &quot; / periodProperty)" />
    <mutant id="mutant_939" viable="true" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="periodProperty" />
    <mutant id="mutant_1300" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.remove(java.lang.Object)" from="((++(index)) % (DatabaseSession.BATCH_SIZE))" to="(DatabaseSession.BATCH_SIZE)" />
    <mutant id="mutant_701" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(membership)" />
    <mutant id="mutant_943" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / periodIndex)" />
    <mutant id="mutant_702" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; - (membership))" />
    <mutant id="mutant_944" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % periodIndex)" />
    <mutant id="mutant_703" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; * (membership))" />
    <mutant id="mutant_945" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - periodIndex)" />
    <mutant id="mutant_704" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="&quot;Membership is not valid (got &quot;" />
    <mutant id="mutant_946" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="periodIndex" />
    <mutant id="mutant_940" viable="true" in="org.sonar.core.timemachine.Periods$PeriodParameters(java.lang.String)" from="(&quot;Unknown period property : &quot; + periodProperty)" to="&quot;Unknown period property : &quot;" />
    <mutant id="mutant_941" viable="true" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_700" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="(&quot;Updating semaphore &quot; * (semaphore.getName()))" />
    <mutant id="mutant_942" viable="false" in="org.sonar.core.timemachine.Periods.abbreviation(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * periodIndex)" />
    <mutant id="mutant_709" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) * &quot;). Availables values are &quot;)" />
    <mutant id="mutant_705" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; / (membership))" />
    <mutant id="mutant_947" viable="true" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_706" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; % (membership))" />
    <mutant id="mutant_948" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * periodIndex)" />
    <mutant id="mutant_707" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) - &quot;). Availables values are &quot;)" />
    <mutant id="mutant_949" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / periodIndex)" />
    <mutant id="mutant_708" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="&quot;). Availables values are &quot;" />
    <mutant id="mutant_712" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(&quot;Membership is not valid (got &quot; + (membership))" />
    <mutant id="mutant_954" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="(&quot;This mode is not supported : &quot; / mode)" />
    <mutant id="mutant_713" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_955" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="(&quot;This mode is not supported : &quot; % mode)" />
    <mutant id="mutant_714" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_956" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="(&quot;This mode is not supported : &quot; - mode)" />
    <mutant id="mutant_715" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" />
    <mutant id="mutant_957" viable="true" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="mode" />
    <mutant id="mutant_950" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % periodIndex)" />
    <mutant id="mutant_951" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - periodIndex)" />
    <mutant id="mutant_710" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) / &quot;). Availables values are &quot;)" />
    <mutant id="mutant_952" viable="false" in="org.sonar.core.timemachine.Periods.label(int)" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + periodIndex)" to="periodIndex" />
    <mutant id="mutant_711" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) % &quot;). Availables values are &quot;)" />
    <mutant id="mutant_953" viable="false" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="(&quot;This mode is not supported : &quot; * mode)" />
    <mutant id="mutant_716" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) / (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_958" viable="true" in="org.sonar.core.timemachine.Periods.label(java.lang.String,java.lang.String,java.lang.String,boolean)" from="(&quot;This mode is not supported : &quot; + mode)" to="&quot;This mode is not supported : &quot;" />
    <mutant id="mutant_717" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) % (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_959" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="(resourceDto.getUuid())" />
    <mutant id="mutant_718" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP))" to="ProjectQgateAssociationQuery.AVAILABLE_MEMBERSHIP" />
    <mutant id="mutant_719" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(pageIndex)" />
    <mutant id="mutant_723" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="&quot;Page index must be greater than 0 (got &quot;" />
    <mutant id="mutant_965" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) - (ComponentDto.MODULE_UUID_PATH_SEP))" />
    <mutant id="mutant_724" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; % (pageIndex))" />
    <mutant id="mutant_966" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" />
    <mutant id="mutant_725" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" />
    <mutant id="mutant_967" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="ComponentDto.MODULE_UUID_PATH_SEP" />
    <mutant id="mutant_726" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) / &quot;)&quot;)" />
    <mutant id="mutant_968" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) * (ComponentDto.MODULE_UUID_PATH_SEP))" />
    <mutant id="mutant_961" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="((ComponentDto.MODULE_UUID_PATH_SEP) / (resourceDto.getUuid()))" />
    <mutant id="mutant_720" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; / (pageIndex))" />
    <mutant id="mutant_962" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="((ComponentDto.MODULE_UUID_PATH_SEP) * (resourceDto.getUuid()))" />
    <mutant id="mutant_721" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; * (pageIndex))" />
    <mutant id="mutant_963" viable="true" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="(ComponentDto.MODULE_UUID_PATH_SEP)" />
    <mutant id="mutant_722" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; - (pageIndex))" />
    <mutant id="mutant_964" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="((ComponentDto.MODULE_UUID_PATH_SEP) % (resourceDto.getUuid()))" />
    <mutant id="mutant_727" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) % &quot;)&quot;)" />
    <mutant id="mutant_969" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) / (ComponentDto.MODULE_UUID_PATH_SEP))" />
    <mutant id="mutant_728" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_729" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * &quot;)&quot;)" />
    <mutant id="mutant_1113" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) - (project.getId()))" />
    <mutant id="mutant_1114" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" />
    <mutant id="mutant_1111" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="(project.getId())" />
    <mutant id="mutant_1112" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) * (project.getId()))" />
    <mutant id="mutant_1110" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) % (project.getId()))" />
    <mutant id="mutant_1119" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) / &quot;]&quot;)" />
    <mutant id="mutant_960" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid()))" to="((ComponentDto.MODULE_UUID_PATH_SEP) - (resourceDto.getUuid()))" />
    <mutant id="mutant_1117" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="&quot;]&quot;" />
    <mutant id="mutant_1118" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" />
    <mutant id="mutant_1115" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) * &quot;]&quot;)" />
    <mutant id="mutant_1116" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) % &quot;]&quot;)" />
    <mutant id="mutant_734" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="sql * &quot;%&quot;" />
    <mutant id="mutant_976" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(membership)" />
    <mutant id="mutant_735" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="sql % &quot;%&quot;" />
    <mutant id="mutant_977" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) / &quot;). Availables values are &quot;)" />
    <mutant id="mutant_736" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="&quot;%&quot;" />
    <mutant id="mutant_978" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) % &quot;). Availables values are &quot;)" />
    <mutant id="mutant_737" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="(31 - result)" />
    <mutant id="mutant_979" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="&quot;). Availables values are &quot;" />
    <mutant id="mutant_730" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - &quot;)&quot;)" />
    <mutant id="mutant_972" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; / (membership))" />
    <mutant id="mutant_731" viable="true" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="sql" />
    <mutant id="mutant_973" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="&quot;Membership is not valid (got &quot;" />
    <mutant id="mutant_732" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="sql / &quot;%&quot;" />
    <mutant id="mutant_974" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; * (membership))" />
    <mutant id="mutant_733" viable="false" in="org.sonar.core.qualitygate.db.ProjectQgateAssociationQuery.projectSearchToSql(java.lang.String)" from="sql + &quot;%&quot;" to="sql - &quot;%&quot;" />
    <mutant id="mutant_975" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; % (membership))" />
    <mutant id="mutant_738" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="(31 / result)" />
    <mutant id="mutant_739" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="(31 % result)" />
    <mutant id="mutant_1102" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="(&quot;-&gt; Clean &quot; / (project.getLongName()))" />
    <mutant id="mutant_1103" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) / &quot; [id=&quot;)" />
    <mutant id="mutant_1100" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="(&quot;-&gt; Clean &quot; * (project.getLongName()))" />
    <mutant id="mutant_1101" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(&quot;-&gt; Clean &quot; + (project.getLongName()))" to="(&quot;-&gt; Clean &quot; % (project.getLongName()))" />
    <mutant id="mutant_970" viable="false" in="org.sonar.core.user.AuthorDao.insertAuthorAndDeveloper(java.lang.String,org.sonar.core.resource.ResourceDto)" from="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) + (ComponentDto.MODULE_UUID_PATH_SEP))" to="(((ComponentDto.MODULE_UUID_PATH_SEP) + (resourceDto.getUuid())) % (ComponentDto.MODULE_UUID_PATH_SEP))" />
    <mutant id="mutant_1108" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="&quot; [id=&quot;" />
    <mutant id="mutant_971" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; - (membership))" />
    <mutant id="mutant_1109" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId()))" to="(((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) / (project.getId()))" />
    <mutant id="mutant_1106" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) * &quot; [id=&quot;)" />
    <mutant id="mutant_1107" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) - &quot; [id=&quot;)" />
    <mutant id="mutant_1104" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="(&quot;-&gt; Clean &quot; + (project.getLongName()))" />
    <mutant id="mutant_1105" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;)" to="((&quot;-&gt; Clean &quot; + (project.getLongName())) % &quot; [id=&quot;)" />
    <mutant id="mutant_503" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="(&quot;Fail to load the Logback configuration: &quot; / logbackFile)" />
    <mutant id="mutant_745" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="(31 * result) * (ruleKey.hashCode())" />
    <mutant id="mutant_987" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" />
    <mutant id="mutant_504" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="(&quot;Fail to load the Logback configuration: &quot; - logbackFile)" />
    <mutant id="mutant_746" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="(31 * result) / (ruleKey.hashCode())" />
    <mutant id="mutant_988" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="GroupMembershipQuery.AVAILABLE_MEMBERSHIP" />
    <mutant id="mutant_505" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="(&quot;Fail to load the Logback configuration: &quot; % logbackFile)" />
    <mutant id="mutant_747" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="31 * result" />
    <mutant id="mutant_989" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; * (pageIndex))" />
    <mutant id="mutant_506" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="(&quot;Fail to load the Logback configuration: &quot; * logbackFile)" />
    <mutant id="mutant_748" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="(31 * result) - (ruleKey.hashCode())" />
    <mutant id="mutant_741" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="31" />
    <mutant id="mutant_983" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_500" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; * (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_742" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="(31 + result)" />
    <mutant id="mutant_984" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) / (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_501" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; % (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_743" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="(31 * result) % (ruleKey.hashCode())" />
    <mutant id="mutant_985" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) % (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_502" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; - (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_744" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result) + (ruleKey.hashCode())" to="ruleKey.hashCode()" />
    <mutant id="mutant_986" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - (GroupMembershipQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_507" viable="true" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="&quot;Fail to load the Logback configuration: &quot;" />
    <mutant id="mutant_749" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="(&quot;Bad format of activeRule key: &quot; * s)" />
    <mutant id="mutant_508" viable="false" in="org.sonar.core.config.Logback.configure(java.io.File,java.util.Map)" from="(&quot;Fail to load the Logback configuration: &quot; + logbackFile)" to="logbackFile" />
    <mutant id="mutant_509" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="(&quot;Logback configuration not found in classloader: &quot; * classloaderPath)" />
    <mutant id="mutant_980" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(&quot;Membership is not valid (got &quot; + (membership))" />
    <mutant id="mutant_981" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) - &quot;). Availables values are &quot;)" />
    <mutant id="mutant_740" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.hashCode()" from="(31 * result)" to="result" />
    <mutant id="mutant_982" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) * &quot;). Availables values are &quot;)" />
    <mutant id="mutant_514" viable="true" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="classloaderPath" />
    <mutant id="mutant_756" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="semiColonPos" />
    <mutant id="mutant_998" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_515" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="(&quot;Download: &quot; - (uri))" />
    <mutant id="mutant_757" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="(semiColonPos - 1)" />
    <mutant id="mutant_999" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) - &quot;)&quot;)" />
    <mutant id="mutant_516" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="&quot;Download: &quot;" />
    <mutant id="mutant_758" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="(semiColonPos % 1)" />
    <mutant id="mutant_517" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="(&quot;Download: &quot; * (uri))" />
    <mutant id="mutant_759" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="(semiColonPos * 1)" />
    <mutant id="mutant_510" viable="true" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="&quot;Logback configuration not found in classloader: &quot;" />
    <mutant id="mutant_752" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="&quot;Bad format of activeRule key: &quot;" />
    <mutant id="mutant_994" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="&quot;Page index must be greater than 0 (got &quot;" />
    <mutant id="mutant_511" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="(&quot;Logback configuration not found in classloader: &quot; - classloaderPath)" />
    <mutant id="mutant_753" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="(&quot;Bad format of activeRule key: &quot; - s)" />
    <mutant id="mutant_995" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * &quot;)&quot;)" />
    <mutant id="mutant_512" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="(&quot;Logback configuration not found in classloader: &quot; % classloaderPath)" />
    <mutant id="mutant_754" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="(&quot;Bad format of activeRule key: &quot; % s)" />
    <mutant id="mutant_996" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) % &quot;)&quot;)" />
    <mutant id="mutant_513" viable="false" in="org.sonar.core.config.Logback.configure(java.lang.String,java.util.Map)" from="(&quot;Logback configuration not found in classloader: &quot; + classloaderPath)" to="(&quot;Logback configuration not found in classloader: &quot; / classloaderPath)" />
    <mutant id="mutant_755" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="1" />
    <mutant id="mutant_997" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" />
    <mutant id="mutant_518" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="(&quot;Download: &quot; / (uri))" />
    <mutant id="mutant_519" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="(uri)" />
    <mutant id="mutant_990" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; - (pageIndex))" />
    <mutant id="mutant_991" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; % (pageIndex))" />
    <mutant id="mutant_750" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="s" />
    <mutant id="mutant_992" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; / (pageIndex))" />
    <mutant id="mutant_751" viable="false" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(&quot;Bad format of activeRule key: &quot; + s)" to="(&quot;Bad format of activeRule key: &quot; / s)" />
    <mutant id="mutant_993" viable="true" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(pageIndex)" />
    <mutant id="mutant_525" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="((&quot;Download: &quot; + (uri)) % &quot; (&quot;)" />
    <mutant id="mutant_767" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="(&quot;%&quot; + (query.toUpperCase())) % &quot;%&quot;" />
    <mutant id="mutant_526" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="(&quot;Download: &quot; + (uri))" />
    <mutant id="mutant_768" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="(&quot;%&quot; + (query.toUpperCase())) - &quot;%&quot;" />
    <mutant id="mutant_527" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) * (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" />
    <mutant id="mutant_769" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="(&quot;%&quot; + (query.toUpperCase())) / &quot;%&quot;" />
    <mutant id="mutant_528" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) % (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" />
    <mutant id="mutant_521" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="((&quot;Download: &quot; + (uri)) - &quot; (&quot;)" />
    <mutant id="mutant_763" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="(&quot;%&quot; % (query.toUpperCase()))" />
    <mutant id="mutant_522" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="((&quot;Download: &quot; + (uri)) / &quot; (&quot;)" />
    <mutant id="mutant_764" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="(&quot;%&quot; * (query.toUpperCase()))" />
    <mutant id="mutant_523" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="&quot; (&quot;" />
    <mutant id="mutant_765" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="(&quot;%&quot; / (query.toUpperCase()))" />
    <mutant id="mutant_524" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" to="((&quot;Download: &quot; + (uri)) * &quot; (&quot;)" />
    <mutant id="mutant_766" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="&quot;%&quot;" />
    <mutant id="mutant_1160" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; * (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" />
    <mutant id="mutant_1161" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; - (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" />
    <mutant id="mutant_529" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) / (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" />
    <mutant id="mutant_1157" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; % (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" />
    <mutant id="mutant_1158" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="&quot;left outer join projects pj on pp.resource_id = pj.id &quot;" />
    <mutant id="mutant_1155" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot;" />
    <mutant id="mutant_1156" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; / &quot;and (&quot;)" />
    <mutant id="mutant_1153" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; - &quot;and (&quot;)" />
    <mutant id="mutant_1154" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; * &quot;and (&quot;)" />
    <mutant id="mutant_1151" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="&quot;and (&quot;" />
    <mutant id="mutant_1152" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" to="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; % &quot;and (&quot;)" />
    <mutant id="mutant_760" viable="true" in="org.sonar.core.qualityprofile.db.ActiveRuleKey.parse(java.lang.String)" from="(semiColonPos + 1)" to="(semiColonPos / 1)" />
    <mutant id="mutant_761" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="(&quot;%&quot; - (query.toUpperCase()))" />
    <mutant id="mutant_520" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Download: &quot; + (uri))" to="(&quot;Download: &quot; % (uri))" />
    <mutant id="mutant_762" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase()))" to="(query.toUpperCase())" />
    <mutant id="mutant_1159" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; / (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" />
    <mutant id="mutant_536" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="&quot;)&quot;" />
    <mutant id="mutant_778" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="(&quot;Quality profile not found: &quot; * key)" />
    <mutant id="mutant_537" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) * &quot;)&quot;)" />
    <mutant id="mutant_779" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="((component.getClass().getCanonicalName()) * &quot; started&quot;)" />
    <mutant id="mutant_538" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) / &quot;)&quot;)" />
    <mutant id="mutant_539" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="((login) / &quot;:&quot;)" />
    <mutant id="mutant_532" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) - (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" />
    <mutant id="mutant_774" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="(&quot;Quality profile not found: &quot; / key)" />
    <mutant id="mutant_533" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" />
    <mutant id="mutant_775" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="&quot;Quality profile not found: &quot;" />
    <mutant id="mutant_534" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) % &quot;)&quot;)" />
    <mutant id="mutant_776" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="(&quot;Quality profile not found: &quot; - key)" />
    <mutant id="mutant_535" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) + &quot;)&quot;)" to="((((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))) - &quot;)&quot;)" />
    <mutant id="mutant_777" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="(&quot;Quality profile not found: &quot; % key)" />
    <mutant id="mutant_1150" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="(cumulatedDuration / ((clock.now()) - (startTime)))" />
    <mutant id="mutant_1146" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="cumulatedDuration" />
    <mutant id="mutant_1147" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="(cumulatedDuration - ((clock.now()) - (startTime)))" />
    <mutant id="mutant_1144" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="(startTime)" />
    <mutant id="mutant_1145" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="(cumulatedDuration % ((clock.now()) - (startTime)))" />
    <mutant id="mutant_1142" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="(clock.now())" />
    <mutant id="mutant_1143" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="((clock.now()) * (startTime))" />
    <mutant id="mutant_1140" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="((clock.now()) / (startTime))" />
    <mutant id="mutant_1141" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="((clock.now()) % (startTime))" />
    <mutant id="mutant_770" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="&quot;%&quot; + (query.toUpperCase())" />
    <mutant id="mutant_771" viable="false" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="(&quot;%&quot; + (query.toUpperCase())) * &quot;%&quot;" />
    <mutant id="mutant_530" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="((&quot;Download: &quot; + (uri)) + &quot; (&quot;)" />
    <mutant id="mutant_772" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.sqlQueryString(java.lang.String)" from="(&quot;%&quot; + (query.toUpperCase())) + &quot;%&quot;" to="&quot;%&quot;" />
    <mutant id="mutant_531" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((&quot;Download: &quot; + (uri)) + &quot; (&quot;) + (DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault())))" to="(org.sonar.core.util.DefaultHttpDownloader.BaseHttpDownloader.getProxySynthesis(uri, java.net.ProxySelector.getDefault()))" />
    <mutant id="mutant_773" viable="true" in="org.sonar.core.qualityprofile.db.QualityProfileDao.getNonNullByKey(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Quality profile not found: &quot; + key)" to="key" />
    <mutant id="mutant_1148" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="((clock.now()) - (startTime))" />
    <mutant id="mutant_1149" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="(cumulatedDuration + ((clock.now()) - (startTime)))" to="(cumulatedDuration * ((clock.now()) - (startTime)))" />
    <mutant id="mutant_305" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; * (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_547" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="(((login) + &quot;:&quot;) * (password))" />
    <mutant id="mutant_789" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="(&quot;Unable to register component &quot; % (getName(component)))" />
    <mutant id="mutant_306" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; / (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_548" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="(((login) + &quot;:&quot;) - (password))" />
    <mutant id="mutant_307" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_549" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="(((login) + &quot;:&quot;) % (password))" />
    <mutant id="mutant_308" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot;" />
    <mutant id="mutant_301" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; % (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_543" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="((login) - &quot;:&quot;)" />
    <mutant id="mutant_785" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="(&quot;Unable to register component &quot; * (getName(component)))" />
    <mutant id="mutant_302" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; * (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_544" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="((login) % &quot;:&quot;)" />
    <mutant id="mutant_786" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="(&quot;Unable to register component &quot; / (getName(component)))" />
    <mutant id="mutant_303" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot;" />
    <mutant id="mutant_545" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="password" />
    <mutant id="mutant_787" viable="true" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="&quot;Unable to register component &quot;" />
    <mutant id="mutant_304" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_546" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="(((login) + &quot;:&quot;) / (password))" />
    <mutant id="mutant_788" viable="true" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="getName(component)" />
    <mutant id="mutant_309" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; - (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_1135" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="((entry.getValue()) - percent)" />
    <mutant id="mutant_1136" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="entry.getValue()" />
    <mutant id="mutant_1133" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="((entry.getValue()) * percent)" />
    <mutant id="mutant_1134" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="((entry.getValue()) % percent)" />
    <mutant id="mutant_1131" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="totalTime + 100.0" />
    <mutant id="mutant_1132" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="totalTime - 100.0" />
    <mutant id="mutant_1130" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="totalTime * 100.0" />
    <mutant id="mutant_781" viable="true" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="&quot; started&quot;" />
    <mutant id="mutant_540" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="(login)" />
    <mutant id="mutant_782" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="((component.getClass().getCanonicalName()) % &quot; started&quot;)" />
    <mutant id="mutant_541" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="((login) * &quot;:&quot;)" />
    <mutant id="mutant_783" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="((component.getClass().getCanonicalName()) / &quot; started&quot;)" />
    <mutant id="mutant_300" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; / (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_542" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="((login) + &quot;:&quot;)" to="&quot;:&quot;" />
    <mutant id="mutant_784" viable="false" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="((component.getClass().getCanonicalName()) - &quot; started&quot;)" />
    <mutant id="mutant_1139" viable="true" in="org.sonar.core.purge.PurgeProfiler.stop()" from="((clock.now()) - (startTime))" to="((clock.now()) + (startTime))" />
    <mutant id="mutant_1137" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="((entry.getValue()) + percent)" />
    <mutant id="mutant_780" viable="true" in="org.sonar.core.platform.ComponentContainer$1.start(java.lang.Object)" from="((component.getClass().getCanonicalName()) + &quot; started&quot;)" to="component.getClass().getCanonicalName()" />
    <mutant id="mutant_1138" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="((int)((entry.getValue()) / percent))" to="percent" />
    <mutant id="mutant_316" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; * (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_558" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="((proxy.type()) / &quot; proxy: &quot;)" />
    <mutant id="mutant_317" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; % (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_559" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="((proxy.type()) * &quot; proxy: &quot;)" />
    <mutant id="mutant_318" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; / (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_319" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; + (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" to="(&quot;Period used to compare measures and track new issues. Values are : &lt;ul class=\'bullet\'&gt;&lt;li&gt;Number of days before &quot; - (&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))))" />
    <mutant id="mutant_312" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot;" />
    <mutant id="mutant_554" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="(&quot;Basic &quot; * encoded)" />
    <mutant id="mutant_796" viable="true" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="getName(extension)" />
    <mutant id="mutant_313" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; % (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_555" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="(&quot;Basic &quot; % encoded)" />
    <mutant id="mutant_797" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; % (jar.getAbsolutePath()))" />
    <mutant id="mutant_314" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; - (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_556" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="encoded" />
    <mutant id="mutant_798" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; * (jar.getAbsolutePath()))" />
    <mutant id="mutant_315" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_557" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader.getProxySynthesis(java.net.URI,java.net.ProxySelector)" from="((proxy.type()) + &quot; proxy: &quot;)" to="((proxy.type()) % &quot; proxy: &quot;)" />
    <mutant id="mutant_799" viable="true" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="&quot;Can not extract sonar-plugin-api-deps.jar to &quot;" />
    <mutant id="mutant_1124" viable="true" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="&quot;&lt;- Clean snapshot &quot;" />
    <mutant id="mutant_1125" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="projectSnapshotId" />
    <mutant id="mutant_1122" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="(&quot;&lt;- Clean snapshot &quot; * projectSnapshotId)" />
    <mutant id="mutant_1123" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="(&quot;&lt;- Clean snapshot &quot; % projectSnapshotId)" />
    <mutant id="mutant_1120" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.persistence.DbSession,org.sonar.core.purge.PurgeConfiguration,org.sonar.core.purge.PurgeListener)" from="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) + &quot;]&quot;)" to="((((&quot;-&gt; Clean &quot; + (project.getLongName())) + &quot; [id=&quot;) + (project.getId())) - &quot;]&quot;)" />
    <mutant id="mutant_1121" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="(&quot;&lt;- Clean snapshot &quot; - projectSnapshotId)" />
    <mutant id="mutant_550" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(((login) + &quot;:&quot;) + (password))" to="((login) + &quot;:&quot;)" />
    <mutant id="mutant_792" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="(&quot;Unable to register extension &quot; / (getName(extension)))" />
    <mutant id="mutant_551" viable="true" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="&quot;Basic &quot;" />
    <mutant id="mutant_793" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="(&quot;Unable to register extension &quot; - (getName(extension)))" />
    <mutant id="mutant_310" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" to="(&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; % (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)))" />
    <mutant id="mutant_552" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="(&quot;Basic &quot; / encoded)" />
    <mutant id="mutant_794" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="(&quot;Unable to register extension &quot; % (getName(extension)))" />
    <mutant id="mutant_311" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; + (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" to="(&quot;analysis, for example 5.&lt;/li&gt;&lt;li&gt;A custom date. Format is yyyy-MM-dd, for example 2010-12-25&lt;/li&gt;&lt;li&gt;\'previous_analysis\' to &quot; / (&quot;compare to previous analysis&lt;/li&gt;&lt;li&gt;\'previous_version\' to compare to the previous version in the project history&lt;/li&gt;&lt;/ul&gt;&quot; + (&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))))" />
    <mutant id="mutant_553" viable="false" in="org.sonar.core.util.DefaultHttpDownloader$BaseHttpDownloader$HttpInputSupplier.getInput()" from="(&quot;Basic &quot; + encoded)" to="(&quot;Basic &quot; - encoded)" />
    <mutant id="mutant_795" viable="true" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="&quot;Unable to register extension &quot;" />
    <mutant id="mutant_1128" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="totalTime % 100.0" />
    <mutant id="mutant_1129" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="100.0" />
    <mutant id="mutant_790" viable="false" in="org.sonar.core.platform.ComponentContainer.addComponent(java.lang.Object,boolean)" from="(&quot;Unable to register component &quot; + (getName(component)))" to="(&quot;Unable to register component &quot; - (getName(component)))" />
    <mutant id="mutant_1126" viable="false" in="org.sonar.core.purge.PurgeDao.purge(org.sonar.core.resource.ResourceDto,java.lang.String[],org.sonar.core.purge.PurgeCommands)" from="(&quot;&lt;- Clean snapshot &quot; + projectSnapshotId)" to="(&quot;&lt;- Clean snapshot &quot; / projectSnapshotId)" />
    <mutant id="mutant_791" viable="false" in="org.sonar.core.platform.ComponentContainer.addExtension(org.sonar.core.platform.PluginInfo,java.lang.Object)" from="(&quot;Unable to register extension &quot; + (getName(extension)))" to="(&quot;Unable to register extension &quot; * (getName(extension)))" />
    <mutant id="mutant_1127" viable="true" in="org.sonar.core.purge.PurgeProfiler.dump(long,org.sonar.api.utils.log.Logger)" from="totalTime / 100.0" to="totalTime" />
    <mutant id="mutant_9" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; - &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" />
    <mutant id="mutant_206" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) / transitionKey)" />
    <mutant id="mutant_448" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; % (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" />
    <mutant id="mutant_8" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="&quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;" />
    <mutant id="mutant_207" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" />
    <mutant id="mutant_449" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; % (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" />
    <mutant id="mutant_208" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) * transitionKey)" />
    <mutant id="mutant_209" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="(&quot;Transition \'&quot; * (transition.key()))" />
    <mutant id="mutant_5" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; % &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_202" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="(&quot;Transition from state &quot; + (key))" />
    <mutant id="mutant_444" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" />
    <mutant id="mutant_686" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="system.now()" />
    <mutant id="mutant_4" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; * &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_203" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) - transitionKey)" />
    <mutant id="mutant_445" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; - (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" />
    <mutant id="mutant_687" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="(system.now()) / (semaphore.getLockedAt())" />
    <mutant id="mutant_7" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="&quot;After this number of weeks, if there are several snapshots during the same week, &quot;" />
    <mutant id="mutant_204" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) % transitionKey)" />
    <mutant id="mutant_446" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; / (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" />
    <mutant id="mutant_688" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="(system.now()) * (semaphore.getLockedAt())" />
    <mutant id="mutant_6" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; / &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" />
    <mutant id="mutant_205" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="(((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;) + transitionKey)" to="transitionKey" />
    <mutant id="mutant_447" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot;" />
    <mutant id="mutant_689" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="(&quot;Semaphore max age must be positive: &quot; % maxAgeInSeconds)" />
    <mutant id="mutant_85" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="nbDays" />
    <mutant id="mutant_84" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="nbDays * 365" />
    <mutant id="mutant_87" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="nbDays - 365" />
    <mutant id="mutant_86" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="nbDays + 365" />
    <mutant id="mutant_89" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="(durationPrefix / key)" />
    <mutant id="mutant_88" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="nbDays % 365" />
    <mutant id="mutant_90" viable="true" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="durationPrefix" />
    <mutant id="mutant_1199" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) % notificationDispatcherKey)" />
    <mutant id="mutant_92" viable="true" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="key" />
    <mutant id="mutant_1197" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="(&quot;Fail to execute SQL request: &quot; / sql)" />
    <mutant id="mutant_91" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="(durationPrefix % key)" />
    <mutant id="mutant_1198" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="(&quot;Fail to execute SQL request: &quot; % sql)" />
    <mutant id="mutant_94" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="(durationPrefix - key)" />
    <mutant id="mutant_1195" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="(&quot;Fail to execute SQL request: &quot; - sql)" />
    <mutant id="mutant_93" viable="false" in="org.sonar.core.i18n.DurationLabel.message(java.lang.String,java.lang.Long)" from="(durationPrefix + key)" to="(durationPrefix * key)" />
    <mutant id="mutant_1196" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="(&quot;Fail to execute SQL request: &quot; * sql)" />
    <mutant id="mutant_1" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; / &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_440" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" />
    <mutant id="mutant_682" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="now % (((long)(maxAgeInSeconds)) * 1000)" />
    <mutant id="mutant_0" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="&quot;After this number of hours, if there are several snapshots during the same day, &quot;" />
    <mutant id="mutant_441" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; * (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" />
    <mutant id="mutant_683" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="(system.now()) + (semaphore.getLockedAt())" />
    <mutant id="mutant_3" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="&quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;" />
    <mutant id="mutant_200" viable="true" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="&quot; does not exist: &quot;" />
    <mutant id="mutant_442" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot;" />
    <mutant id="mutant_684" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="semaphore.getLockedAt()" />
    <mutant id="mutant_2" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of hours, if there are several snapshots during the same day, &quot; - &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_201" viable="false" in="org.sonar.core.issue.workflow.State.transition(java.lang.String)" from="((&quot;Transition from state &quot; + (key)) + &quot; does not exist: &quot;)" to="((&quot;Transition from state &quot; + (key)) % &quot; does not exist: &quot;)" />
    <mutant id="mutant_443" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" to="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; * (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" />
    <mutant id="mutant_685" viable="true" in="org.sonar.core.persistence.SemaphoreDao.lockedSince(org.sonar.core.persistence.SemaphoreDto)" from="(system.now()) - (semaphore.getLockedAt())" to="(system.now()) % (semaphore.getLockedAt())" />
    <mutant id="mutant_680" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="((long)(maxAgeInSeconds)) * 1000" />
    <mutant id="mutant_681" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="now + (((long)(maxAgeInSeconds)) * 1000)" />
    <mutant id="mutant_217" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="((&quot;Transition \'&quot; + (transition.key())) - &quot;\' is declared several times from the originating state \'&quot;)" />
    <mutant id="mutant_459" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="IssueExclusionProperties.MULTICRITERIA_SUFFIX" />
    <mutant id="mutant_218" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="(&quot;Transition \'&quot; + (transition.key()))" />
    <mutant id="mutant_219" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="((&quot;Transition \'&quot; + (transition.key())) * &quot;\' is declared several times from the originating state \'&quot;)" />
    <mutant id="mutant_213" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="&quot;Transition \'&quot;" />
    <mutant id="mutant_455" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) - (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_697" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="(&quot;Updating semaphore &quot; / (semaphore.getName()))" />
    <mutant id="mutant_214" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="(&quot;Transition \'&quot; / (transition.key()))" />
    <mutant id="mutant_456" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="IssueExclusionProperties.EXCLUSION_KEY_PREFIX" />
    <mutant id="mutant_698" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="(&quot;Updating semaphore &quot; % (semaphore.getName()))" />
    <mutant id="mutant_215" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="((&quot;Transition \'&quot; + (transition.key())) % &quot;\' is declared several times from the originating state \'&quot;)" />
    <mutant id="mutant_457" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) % (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_699" viable="true" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="semaphore.getName()" />
    <mutant id="mutant_216" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="((&quot;Transition \'&quot; + (transition.key())) / &quot;\' is declared several times from the originating state \'&quot;)" />
    <mutant id="mutant_458" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) * (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_74" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="60" />
    <mutant id="mutant_1193" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="sql" />
    <mutant id="mutant_73" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="nbMinutes % 60" />
    <mutant id="mutant_1194" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;Fail to execute SQL request: &quot; + sql)" to="&quot;Fail to execute SQL request: &quot;" />
    <mutant id="mutant_76" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="nbMinutes - 60" />
    <mutant id="mutant_1191" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="((&quot;notification.&quot; + dispatcherKey) * &quot;.%&quot;)" />
    <mutant id="mutant_75" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="nbMinutes * 60" />
    <mutant id="mutant_1192" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="((&quot;notification.&quot; + dispatcherKey) % &quot;.%&quot;)" />
    <mutant id="mutant_78" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="nbHours + 24" />
    <mutant id="mutant_77" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="24" />
    <mutant id="mutant_1190" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="&quot;.%&quot;" />
    <mutant id="mutant_79" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="nbHours - 24" />
    <mutant id="mutant_1188" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="((&quot;notification.&quot; + dispatcherKey) - &quot;.%&quot;)" />
    <mutant id="mutant_1189" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="(&quot;notification.&quot; + dispatcherKey)" />
    <mutant id="mutant_81" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="nbHours * 24" />
    <mutant id="mutant_1186" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="(&quot;notification.&quot; * dispatcherKey)" />
    <mutant id="mutant_80" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="nbHours % 24" />
    <mutant id="mutant_1187" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;notification.&quot; + dispatcherKey) + &quot;.%&quot;)" to="((&quot;notification.&quot; + dispatcherKey) / &quot;.%&quot;)" />
    <mutant id="mutant_83" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbDays / 365" to="365" />
    <mutant id="mutant_1184" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="(&quot;notification.&quot; - dispatcherKey)" />
    <mutant id="mutant_82" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbHours / 24" to="nbHours" />
    <mutant id="mutant_1185" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="dispatcherKey" />
    <mutant id="mutant_451" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; * (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" />
    <mutant id="mutant_693" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="(&quot;Semaphore max age must be positive: &quot; - maxAgeInSeconds)" />
    <mutant id="mutant_210" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="(transition.key())" />
    <mutant id="mutant_452" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; - (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" />
    <mutant id="mutant_694" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="(&quot;Semaphore max age must be positive: &quot; * maxAgeInSeconds)" />
    <mutant id="mutant_211" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="(&quot;Transition \'&quot; - (transition.key()))" />
    <mutant id="mutant_453" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; / (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" />
    <mutant id="mutant_695" viable="true" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="&quot;Updating semaphore &quot;" />
    <mutant id="mutant_212" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(&quot;Transition \'&quot; + (transition.key()))" to="(&quot;Transition \'&quot; % (transition.key()))" />
    <mutant id="mutant_454" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="(&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)))" />
    <mutant id="mutant_696" viable="false" in="org.sonar.core.persistence.SemaphoreUpdater$1.run()" from="(&quot;Updating semaphore &quot; + (semaphore.getName()))" to="(&quot;Updating semaphore &quot; - (semaphore.getName()))" />
    <mutant id="mutant_690" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="&quot;Semaphore max age must be positive: &quot;" />
    <mutant id="mutant_691" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="maxAgeInSeconds" />
    <mutant id="mutant_450" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot; + (&quot;which compares the technical debt on a project to the cost it would take to rewrite the code from scratch. &quot; + (&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))))" to="&quot;SQALE ratings range from A (very good) to E (very bad). The rating is determined by the value of the Technical Debt Ratio, &quot;" />
    <mutant id="mutant_692" viable="false" in="org.sonar.core.persistence.SemaphoreDao.acquire(java.lang.String,int)" from="(&quot;Semaphore max age must be positive: &quot; + maxAgeInSeconds)" to="(&quot;Semaphore max age must be positive: &quot; / maxAgeInSeconds)" />
    <mutant id="mutant_228" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) - &quot;\'&quot;)" />
    <mutant id="mutant_229" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="&quot;\'&quot;" />
    <mutant id="mutant_224" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) % stateKey)" />
    <mutant id="mutant_466" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) * (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_225" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) * stateKey)" />
    <mutant id="mutant_467" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;or rule name fragment. For example:&quot; % &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_226" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="stateKey" />
    <mutant id="mutant_468" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;" />
    <mutant id="mutant_227" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) % &quot;\'&quot;)" />
    <mutant id="mutant_469" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;or rule name fragment. For example:&quot; / &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_1182" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="(&quot;notification.&quot; / dispatcherKey)" />
    <mutant id="mutant_1183" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="(&quot;notification.&quot; % dispatcherKey)" />
    <mutant id="mutant_1180" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="&quot;)&quot;" />
    <mutant id="mutant_1181" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;notification.&quot; + dispatcherKey)" to="&quot;notification.&quot;" />
    <mutant id="mutant_1179" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) % &quot;)&quot;" />
    <mutant id="mutant_1177" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))" />
    <mutant id="mutant_1178" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) - &quot;)&quot;" />
    <mutant id="mutant_1175" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) / &quot;)&quot;" />
    <mutant id="mutant_1176" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) + &quot;)&quot;" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))) * &quot;)&quot;" />
    <mutant id="mutant_1173" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) * (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" />
    <mutant id="mutant_1174" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) - (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" />
    <mutant id="mutant_220" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" to="&quot;\' is declared several times from the originating state \'&quot;" />
    <mutant id="mutant_462" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="IssueExclusionProperties.INCLUSION_KEY_PREFIX" />
    <mutant id="mutant_221" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) / stateKey)" />
    <mutant id="mutant_463" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="IssueExclusionProperties.MULTICRITERIA_SUFFIX" />
    <mutant id="mutant_222" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) - stateKey)" />
    <mutant id="mutant_464" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) % (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_223" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" to="((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;)" />
    <mutant id="mutant_465" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) / (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_460" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) / (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_461" viable="false" in="?" from="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) + (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" to="(IssueExclusionProperties.INCLUSION_KEY_PREFIX) - (IssueExclusionProperties.MULTICRITERIA_SUFFIX)" />
    <mutant id="mutant_239" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="&quot;Destination state does not exist: &quot;" />
    <mutant id="mutant_235" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="&quot;Originating state does not exist: &quot;" />
    <mutant id="mutant_477" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; - (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_236" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="(&quot;Originating state does not exist: &quot; - (transition.from()))" />
    <mutant id="mutant_478" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;" />
    <mutant id="mutant_237" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="(&quot;Originating state does not exist: &quot; * (transition.from()))" />
    <mutant id="mutant_479" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="IssueExclusionProperties.BLOCK_SUFFIX" />
    <mutant id="mutant_238" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="transition.from()" />
    <mutant id="mutant_96" viable="true" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="repositoryKey" />
    <mutant id="mutant_1171" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" />
    <mutant id="mutant_95" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="(&quot;rules/&quot; * repositoryKey)" />
    <mutant id="mutant_1172" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="(DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;))" />
    <mutant id="mutant_98" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="(&quot;rules/&quot; / repositoryKey)" />
    <mutant id="mutant_97" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="(&quot;rules/&quot; - repositoryKey)" />
    <mutant id="mutant_1170" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) % (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" />
    <mutant id="mutant_99" viable="false" in="org.sonar.core.i18n.RuleI18nManager.getDescription(java.lang.String,java.lang.String)" from="(&quot;rules/&quot; + repositoryKey)" to="(&quot;rules/&quot; % repositoryKey)" />
    <mutant id="mutant_1168" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" />
    <mutant id="mutant_1169" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) + (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" to="((&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))) / (DaoUtils.repeatCondition(&quot;pp.prop_key like ?&quot;, dispatcherKeys.size(), &quot;or&quot;)))" />
    <mutant id="mutant_1166" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="(&quot;SELECT count(*) FROM properties pp &quot; * (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" />
    <mutant id="mutant_1167" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="&quot;SELECT count(*) FROM properties pp &quot;" />
    <mutant id="mutant_1164" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="(&quot;SELECT count(*) FROM properties pp &quot; - (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" />
    <mutant id="mutant_1165" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="(&quot;SELECT count(*) FROM properties pp &quot; / (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" />
    <mutant id="mutant_1162" viable="true" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;))" to="(&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)" />
    <mutant id="mutant_1163" viable="false" in="org.sonar.core.properties.PropertiesDao.hasProjectNotificationSubscribersForDispatchers(java.lang.String,java.util.Collection)" from="(&quot;SELECT count(*) FROM properties pp &quot; + (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" to="(&quot;SELECT count(*) FROM properties pp &quot; % (&quot;left outer join projects pj on pp.resource_id = pj.id &quot; + (&quot;where pp.user_id is not null and (pp.resource_id is null or pj.uuid=?) &quot; + &quot;and (&quot;)))" />
    <mutant id="mutant_231" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) * &quot;\'&quot;)" />
    <mutant id="mutant_473" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; / (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_232" viable="false" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) / &quot;\'&quot;)" />
    <mutant id="mutant_474" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; * (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_233" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="(&quot;Originating state does not exist: &quot; / (transition.from()))" />
    <mutant id="mutant_475" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; % (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_234" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Originating state does not exist: &quot; + (transition.from()))" to="(&quot;Originating state does not exist: &quot; % (transition.from()))" />
    <mutant id="mutant_476" viable="false" in="?" from="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot; + (&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;&lt;br/&gt;A rule key pattern consists of the rule repository name, followed by a colon, followed by a rule key &quot;" />
    <mutant id="mutant_470" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;or rule name fragment. For example:&quot; - &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_471" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="(&quot;or rule name fragment. For example:&quot; * &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" />
    <mutant id="mutant_230" viable="true" in="org.sonar.core.issue.workflow.State.checkDuplications(org.sonar.core.issue.workflow.Transition[],java.lang.String)" from="((((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey) + &quot;\'&quot;)" to="(((&quot;Transition \'&quot; + (transition.key())) + &quot;\' is declared several times from the originating state \'&quot;) + stateKey)" />
    <mutant id="mutant_472" viable="false" in="?" from="(&quot;or rule name fragment. For example:&quot; + &quot;&lt;ul&gt;&lt;li&gt;squid:S1195&lt;/li&gt;&lt;li&gt;squid:*Naming*&lt;/li&gt;&lt;/ul&gt;&quot;)" to="&quot;or rule name fragment. For example:&quot;" />
    <mutant id="mutant_246" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 / result)" />
    <mutant id="mutant_488" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) - (IssueExclusionProperties.ALLFILE_SUFFIX)" />
    <mutant id="mutant_247" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 % result)" />
    <mutant id="mutant_489" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) % (IssueExclusionProperties.ALLFILE_SUFFIX)" />
    <mutant id="mutant_248" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="result" />
    <mutant id="mutant_249" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="31" />
    <mutant id="mutant_242" viable="true" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="transition.to()" />
    <mutant id="mutant_484" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) % (IssueExclusionProperties.BLOCK_SUFFIX)" />
    <mutant id="mutant_243" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="(&quot;Destination state does not exist: &quot; % (transition.to()))" />
    <mutant id="mutant_485" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="IssueExclusionProperties.EXCLUSION_KEY_PREFIX" />
    <mutant id="mutant_244" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="(&quot;Destination state does not exist: &quot; * (transition.to()))" />
    <mutant id="mutant_486" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) / (IssueExclusionProperties.ALLFILE_SUFFIX)" />
    <mutant id="mutant_245" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 - result)" />
    <mutant id="mutant_487" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="IssueExclusionProperties.ALLFILE_SUFFIX" />
    <mutant id="mutant_480" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) - (IssueExclusionProperties.BLOCK_SUFFIX)" />
    <mutant id="mutant_481" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="IssueExclusionProperties.EXCLUSION_KEY_PREFIX" />
    <mutant id="mutant_240" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="(&quot;Destination state does not exist: &quot; / (transition.to()))" />
    <mutant id="mutant_482" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) / (IssueExclusionProperties.BLOCK_SUFFIX)" />
    <mutant id="mutant_241" viable="false" in="org.sonar.core.issue.workflow.StateMachine$Builder.transition(org.sonar.core.issue.workflow.Transition)" from="(&quot;Destination state does not exist: &quot; + (transition.to()))" to="(&quot;Destination state does not exist: &quot; - (transition.to()))" />
    <mutant id="mutant_483" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.BLOCK_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) * (IssueExclusionProperties.BLOCK_SUFFIX)" />
    <mutant id="mutant_257" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 - result)" />
    <mutant id="mutant_499" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP" />
    <mutant id="mutant_258" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 / result)" />
    <mutant id="mutant_259" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 % result)" />
    <mutant id="mutant_490" viable="false" in="?" from="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) + (IssueExclusionProperties.ALLFILE_SUFFIX)" to="(IssueExclusionProperties.EXCLUSION_KEY_PREFIX) * (IssueExclusionProperties.ALLFILE_SUFFIX)" />
    <mutant id="mutant_253" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="(31 * result) - (from.hashCode())" />
    <mutant id="mutant_495" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot;" />
    <mutant id="mutant_254" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="(31 * result) % (from.hashCode())" />
    <mutant id="mutant_496" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; / (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_255" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="31 * result" />
    <mutant id="mutant_497" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; / (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_256" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="(31 * result) / (from.hashCode())" />
    <mutant id="mutant_498" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="&quot;Patterns to restrict the application of a rule to only certain components, ignoring all others.&quot;" />
    <mutant id="mutant_491" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; * (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_250" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 + result)" />
    <mutant id="mutant_492" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; % (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_251" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="from.hashCode()" />
    <mutant id="mutant_493" viable="true" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP" />
    <mutant id="mutant_252" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (from.hashCode())" to="(31 * result) * (from.hashCode())" />
    <mutant id="mutant_494" viable="false" in="org.sonar.core.config.IssueExclusionProperties.all()" from="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; + (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" to="(&quot;Patterns to ignore issues on certain components and for certain coding rules.&quot; - (IssueExclusionProperties.PROPERTY_RULE_KEY_PATTERN_HELP))" />
    <mutant id="mutant_268" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="(31 * result) / (to.hashCode())" />
    <mutant id="mutant_269" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="unresolvedIssues" />
    <mutant id="mutant_264" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="(31 * result) * (to.hashCode())" />
    <mutant id="mutant_265" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="(31 * result) - (to.hashCode())" />
    <mutant id="mutant_266" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="(31 * result) % (to.hashCode())" />
    <mutant id="mutant_267" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="31 * result" />
    <mutant id="mutant_260" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="result" />
    <mutant id="mutant_261" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="31" />
    <mutant id="mutant_262" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result)" to="(31 + result)" />
    <mutant id="mutant_263" viable="true" in="org.sonar.core.issue.workflow.Transition.hashCode()" from="(31 * result) + (to.hashCode())" to="to.hashCode()" />
    <mutant id="mutant_279" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="((stringBuilder.length()) / 1)" />
    <mutant id="mutant_270" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="(totalIssues) * (unresolvedIssues)" />
    <mutant id="mutant_275" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="1" />
    <mutant id="mutant_276" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="((stringBuilder.length()) * 1)" />
    <mutant id="mutant_277" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="((stringBuilder.length()) + 1)" />
    <mutant id="mutant_278" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="stringBuilder.length()" />
    <mutant id="mutant_271" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="totalIssues" />
    <mutant id="mutant_272" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="(totalIssues) / (unresolvedIssues)" />
    <mutant id="mutant_273" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="(totalIssues) + (unresolvedIssues)" />
    <mutant id="mutant_274" viable="true" in="org.sonar.core.issue.ActionPlanStats.resolvedIssues()" from="(totalIssues) - (unresolvedIssues)" to="(totalIssues) % (unresolvedIssues)" />
    <mutant id="mutant_280" viable="true" in="org.sonar.core.issue.IssueFilterSerializer.serialize(java.util.Map)" from="((stringBuilder.length()) - 1)" to="((stringBuilder.length()) % 1)" />
    <mutant id="mutant_281" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; * &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" />
    <mutant id="mutant_286" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="&quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;" />
    <mutant id="mutant_287" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="1" />
    <mutant id="mutant_288" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="CoreProperties.TIMEMACHINE_PERIOD_PREFIX" />
    <mutant id="mutant_289" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) - 1)" />
    <mutant id="mutant_282" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; - &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" />
    <mutant id="mutant_283" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; / &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" />
    <mutant id="mutant_284" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; % &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" />
    <mutant id="mutant_285" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot; + &quot;When using the LDAP plugin, for these accounts, the user attributes (name, email, ...) are not re-synchronized&quot;)" to="&quot;Comma separated list of user logins that will always be authenticated using SonarQube database. &quot;" />
    <mutant id="mutant_290" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) % 1)" />
    <mutant id="mutant_291" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) * 1)" />
    <mutant id="mutant_292" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) + 1)" to="((CoreProperties.TIMEMACHINE_PERIOD_PREFIX) / 1)" />
    <mutant id="mutant_297" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; - &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_298" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="&quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;" />
    <mutant id="mutant_299" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; + (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" to="(&quot;&lt;p&gt;When specifying a number of days or a date, the snapshot selected for comparison is &quot; - (&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;))" />
    <mutant id="mutant_293" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; / &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_294" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; % &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_295" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot;" />
    <mutant id="mutant_296" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; + &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" to="(&quot; the first one available inside the corresponding time range. &lt;/p&gt;&quot; * &quot;&lt;p&gt;Changing this property only takes effect after subsequent project inspections.&lt;p/&gt;&quot;)" />
    <mutant id="mutant_27" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="((system2.now()) + (date.getTime()))" />
    <mutant id="mutant_26" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="((system2.now()) * (date.getTime()))" />
    <mutant id="mutant_29" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="&quot;_&quot;" />
    <mutant id="mutant_28" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="date.getTime()" />
    <mutant id="mutant_21" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="toDate.getTime()" />
    <mutant id="mutant_20" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="((toDate.getTime()) % (fromDate.getTime()))" />
    <mutant id="mutant_23" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="((system2.now()) % (date.getTime()))" />
    <mutant id="mutant_22" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="((toDate.getTime()) / (fromDate.getTime()))" />
    <mutant id="mutant_25" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="system2.now()" />
    <mutant id="mutant_24" viable="true" in="org.sonar.core.i18n.DefaultI18n.ageFromNow(java.util.Locale,java.util.Date)" from="((system2.now()) - (date.getTime()))" to="((system2.now()) / (date.getTime()))" />
    <mutant id="mutant_16" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; / &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_15" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; * &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_18" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="((toDate.getTime()) * (fromDate.getTime()))" />
    <mutant id="mutant_17" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; % &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_19" viable="true" in="org.sonar.core.i18n.DefaultI18n.age(java.util.Locale,java.util.Date,java.util.Date)" from="((toDate.getTime()) - (fromDate.getTime()))" to="((toDate.getTime()) + (fromDate.getTime()))" />
    <mutant id="mutant_10" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; % &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" />
    <mutant id="mutant_12" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="&quot;After this number of weeks, if there are several snapshots during the same month, &quot;" />
    <mutant id="mutant_11" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same week, &quot; * &quot;the DbCleaner keeps the most recent one and fully deletes the other ones&quot;)" />
    <mutant id="mutant_14" viable="true" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="&quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;" />
    <mutant id="mutant_13" viable="false" in="org.sonar.core.computation.dbcleaner.DataCleanerProperties.all()" from="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; + &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" to="(&quot;After this number of weeks, if there are several snapshots during the same month, &quot; - &quot;the DbCleaner keeps the most recent one and fully deletes the other ones.&quot;)" />
    <mutant id="mutant_49" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="(DefaultI18n.BUNDLE_PACKAGE) * pluginKey" />
    <mutant id="mutant_48" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="(DefaultI18n.BUNDLE_PACKAGE) / pluginKey" />
    <mutant id="mutant_41" viable="true" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="filePath" />
    <mutant id="mutant_40" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="&quot;/&quot; / filename" />
    <mutant id="mutant_43" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="(&quot;Fail to load file: &quot; * filePath)" />
    <mutant id="mutant_42" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="(&quot;Fail to load file: &quot; % filePath)" />
    <mutant id="mutant_45" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="(&quot;Fail to load file: &quot; / filePath)" />
    <mutant id="mutant_44" viable="true" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="&quot;Fail to load file: &quot;" />
    <mutant id="mutant_47" viable="true" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="pluginKey" />
    <mutant id="mutant_46" viable="false" in="org.sonar.core.i18n.DefaultI18n.readInputStream(java.lang.String,java.io.InputStream)" from="(&quot;Fail to load file: &quot; + filePath)" to="(&quot;Fail to load file: &quot; - filePath)" />
    <mutant id="mutant_50" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="(DefaultI18n.BUNDLE_PACKAGE) - pluginKey" />
    <mutant id="mutant_38" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="&quot;/&quot; % filename" />
    <mutant id="mutant_37" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="&quot;/&quot; - filename" />
    <mutant id="mutant_39" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="filename" />
    <mutant id="mutant_30" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="&quot;_&quot; * (locale.getLanguage())" />
    <mutant id="mutant_32" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="locale.getLanguage()" />
    <mutant id="mutant_31" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="&quot;_&quot; % (locale.getLanguage())" />
    <mutant id="mutant_34" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="&quot;_&quot; - (locale.getLanguage())" />
    <mutant id="mutant_33" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;_&quot; + (locale.getLanguage())" to="&quot;_&quot; / (locale.getLanguage())" />
    <mutant id="mutant_36" viable="true" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="&quot;/&quot;" />
    <mutant id="mutant_35" viable="false" in="org.sonar.core.i18n.DefaultI18n.messageFromFile(java.util.Locale,java.lang.String,java.lang.String)" from="&quot;/&quot; + filename" to="&quot;/&quot; * filename" />
    <mutant id="mutant_63" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="1000.0" />
    <mutant id="mutant_62" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="durationInMillis % 1000.0" />
    <mutant id="mutant_65" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="nbSeconds % 60" />
    <mutant id="mutant_64" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="durationInMillis * 1000.0" />
    <mutant id="mutant_67" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="nbSeconds - 60" />
    <mutant id="mutant_66" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="nbSeconds" />
    <mutant id="mutant_69" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="nbSeconds + 60" />
    <mutant id="mutant_68" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="nbSeconds * 60" />
    <mutant id="mutant_70" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbSeconds / 60" to="60" />
    <mutant id="mutant_72" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="nbMinutes" />
    <mutant id="mutant_71" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="nbMinutes / 60" to="nbMinutes + 60" />
    <mutant id="mutant_59" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="durationInMillis" />
    <mutant id="mutant_52" viable="true" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="DefaultI18n.BUNDLE_PACKAGE" />
    <mutant id="mutant_51" viable="false" in="org.sonar.core.i18n.DefaultI18n.initPlugin(java.lang.String)" from="(DefaultI18n.BUNDLE_PACKAGE) + pluginKey" to="(DefaultI18n.BUNDLE_PACKAGE) % pluginKey" />
    <mutant id="mutant_54" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="(nbDays % 30)" />
    <mutant id="mutant_53" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="(nbDays + 30)" />
    <mutant id="mutant_56" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="(nbDays - 30)" />
    <mutant id="mutant_55" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="nbDays" />
    <mutant id="mutant_58" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="(nbDays * 30)" />
    <mutant id="mutant_57" viable="true" in="org.sonar.core.i18n.DurationLabel.getMessage(double,double,double,double,double)" from="(nbDays / 30)" to="30" />
    <mutant id="mutant_61" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="durationInMillis - 1000.0" />
    <mutant id="mutant_60" viable="true" in="org.sonar.core.i18n.DurationLabel.label(long)" from="durationInMillis / 1000.0" to="durationInMillis + 1000.0" />
    <mutant id="mutant_800" viable="true" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="jar.getAbsolutePath()" />
    <mutant id="mutant_801" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; - (jar.getAbsolutePath()))" />
    <mutant id="mutant_802" viable="false" in="org.sonar.core.platform.PluginClassloaderFactory.extractCompatibilityModeJar()" from="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; + (jar.getAbsolutePath()))" to="(&quot;Can not extract sonar-plugin-api-deps.jar to &quot; / (jar.getAbsolutePath()))" />
    <mutant id="mutant_803" viable="true" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="s" />
    <mutant id="mutant_808" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="(&quot;Manifest field does not have correct format: &quot; - s)" />
    <mutant id="mutant_809" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="(31 - result)" />
    <mutant id="mutant_804" viable="true" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="&quot;Manifest field does not have correct format: &quot;" />
    <mutant id="mutant_805" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="(&quot;Manifest field does not have correct format: &quot; * s)" />
    <mutant id="mutant_806" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="(&quot;Manifest field does not have correct format: &quot; % s)" />
    <mutant id="mutant_807" viable="false" in="org.sonar.core.platform.PluginInfo$RequiredPlugin.parse(java.lang.String)" from="(&quot;Manifest field does not have correct format: &quot; + s)" to="(&quot;Manifest field does not have correct format: &quot; / s)" />
    <mutant id="mutant_811" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="(31 % result)" />
    <mutant id="mutant_812" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="result" />
    <mutant id="mutant_813" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="31" />
    <mutant id="mutant_814" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="(31 + result)" />
    <mutant id="mutant_810" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result)" to="(31 / result)" />
    <mutant id="mutant_819" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="(version) != null ? version.hashCode() : 0" />
    <mutant id="mutant_815" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="(31 * result) % ((version) != null ? version.hashCode() : 0)" />
    <mutant id="mutant_816" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="(31 * result) / ((version) != null ? version.hashCode() : 0)" />
    <mutant id="mutant_817" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="(31 * result) - ((version) != null ? version.hashCode() : 0)" />
    <mutant id="mutant_818" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="31 * result" />
    <mutant id="mutant_822" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="(&quot;Fail to extract plugin metadata from file: &quot; / jarFile)" />
    <mutant id="mutant_823" viable="true" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="&quot;Fail to extract plugin metadata from file: &quot;" />
    <mutant id="mutant_824" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="(&quot;Fail to extract plugin metadata from file: &quot; % jarFile)" />
    <mutant id="mutant_825" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="(&quot;Fail to extract plugin metadata from file: &quot; - jarFile)" />
    <mutant id="mutant_820" viable="true" in="org.sonar.core.platform.PluginInfo.hashCode()" from="(31 * result) + ((version) != null ? version.hashCode() : 0)" to="(31 * result) * ((version) != null ? version.hashCode() : 0)" />
    <mutant id="mutant_821" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="jarFile" />
    <mutant id="mutant_826" viable="false" in="org.sonar.core.platform.PluginInfo.create(java.io.File)" from="(&quot;Fail to extract plugin metadata from file: &quot; + jarFile)" to="(&quot;Fail to extract plugin metadata from file: &quot; * jarFile)" />
    <mutant id="mutant_827" viable="true" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="&quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;" />
    <mutant id="mutant_828" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; / &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" />
    <mutant id="mutant_829" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; - &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" />
    <mutant id="mutant_833" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; / &quot;(built with API lower than {})&quot;)" />
    <mutant id="mutant_834" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; % &quot;(built with API lower than {})&quot;)" />
    <mutant id="mutant_835" viable="true" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="&quot;API compatibility mode is enabled on plugin {} [{}] &quot;" />
    <mutant id="mutant_836" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; * &quot;(built with API lower than {})&quot;)" />
    <mutant id="mutant_830" viable="true" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot;" />
    <mutant id="mutant_831" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; % &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" />
    <mutant id="mutant_832" viable="false" in="org.sonar.core.platform.PluginInfo.setBasePlugin(java.lang.String)" from="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; + &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" to="(&quot;Plugin [{}] still defines \'l10nen\' as base plugin. &quot; * &quot;This metadata can be removed from manifest of l10n plugins since version 5.2.&quot;)" />
    <mutant id="mutant_837" viable="true" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="&quot;(built with API lower than {})&quot;" />
    <mutant id="mutant_838" viable="false" in="org.sonar.core.platform.PluginLoader.defineClassloaders(java.util.Map)" from="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; + &quot;(built with API lower than {})&quot;)" to="(&quot;API compatibility mode is enabled on plugin {} [{}] &quot; - &quot;(built with API lower than {})&quot;)" />
    <mutant id="mutant_839" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="(&quot;Fail to close classloader &quot; - (classLoader.toString()))" />
    <mutant id="mutant_602" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="((versions.size()) * 1)" />
    <mutant id="mutant_844" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="(&quot;Fail to close classloader &quot; / (classLoader.toString()))" />
    <mutant id="mutant_603" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="versions.size()" />
    <mutant id="mutant_845" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="roleDao.countResourceUserRoles(session, resourceId)" />
    <mutant id="mutant_604" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="((versions.size()) + 1)" />
    <mutant id="mutant_846" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="(roleDao.countResourceGroupRoles(session, resourceId)) - (roleDao.countResourceUserRoles(session, resourceId))" />
    <mutant id="mutant_605" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/schema-&quot; * dialect)" />
    <mutant id="mutant_847" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="(roleDao.countResourceGroupRoles(session, resourceId)) * (roleDao.countResourceUserRoles(session, resourceId))" />
    <mutant id="mutant_840" viable="true" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="classLoader.toString()" />
    <mutant id="mutant_841" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="(&quot;Fail to close classloader &quot; % (classLoader.toString()))" />
    <mutant id="mutant_600" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="1" />
    <mutant id="mutant_842" viable="false" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="(&quot;Fail to close classloader &quot; * (classLoader.toString()))" />
    <mutant id="mutant_601" viable="true" in="org.sonar.core.persistence.DatabaseVersion.getVersion()" from="((versions.size()) - 1)" to="((versions.size()) % 1)" />
    <mutant id="mutant_843" viable="true" in="org.sonar.core.platform.PluginLoader.unload(java.util.Collection)" from="(&quot;Fail to close classloader &quot; + (classLoader.toString()))" to="&quot;Fail to close classloader &quot;" />
    <mutant id="mutant_606" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/schema-&quot; / dialect)" />
    <mutant id="mutant_848" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="roleDao.countResourceGroupRoles(session, resourceId)" />
    <mutant id="mutant_607" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/schema-&quot; - dialect)" />
    <mutant id="mutant_849" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="(roleDao.countResourceGroupRoles(session, resourceId)) % (roleDao.countResourceUserRoles(session, resourceId))" />
    <mutant id="mutant_608" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="&quot;org/sonar/core/persistence/schema-&quot;" />
    <mutant id="mutant_609" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/schema-&quot; % dialect)" />
    <mutant id="mutant_1234" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" />
    <mutant id="mutant_1235" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="(&quot;Fail to parse date: &quot; * s)" />
    <mutant id="mutant_1232" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) % notificationChannelKey)" />
    <mutant id="mutant_1233" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) * notificationChannelKey)" />
    <mutant id="mutant_1230" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) - notificationChannelKey)" />
    <mutant id="mutant_1231" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="notificationChannelKey" />
    <mutant id="mutant_1238" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="(&quot;Fail to parse date: &quot; - s)" />
    <mutant id="mutant_1239" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="(&quot;Fail to parse date: &quot; % s)" />
    <mutant id="mutant_1236" viable="true" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="s" />
    <mutant id="mutant_1237" viable="true" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="&quot;Fail to parse date: &quot;" />
    <mutant id="mutant_613" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" />
    <mutant id="mutant_855" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="(&quot;sonar.permission.template.&quot; % qualifier)" />
    <mutant id="mutant_614" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="&quot;.ddl&quot;" />
    <mutant id="mutant_856" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="(&quot;sonar.permission.template.&quot; - qualifier)" />
    <mutant id="mutant_615" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) / &quot;.ddl&quot;)" />
    <mutant id="mutant_857" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="((&quot;sonar.permission.template.&quot; + qualifier) / &quot;.default&quot;)" />
    <mutant id="mutant_616" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) - &quot;.ddl&quot;)" />
    <mutant id="mutant_858" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="((&quot;sonar.permission.template.&quot; + qualifier) % &quot;.default&quot;)" />
    <mutant id="mutant_851" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="&quot;sonar.permission.template.&quot;" />
    <mutant id="mutant_610" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/schema-&quot; + dialect)" to="dialect" />
    <mutant id="mutant_852" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="qualifier" />
    <mutant id="mutant_611" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) * &quot;.ddl&quot;)" />
    <mutant id="mutant_853" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="(&quot;sonar.permission.template.&quot; / qualifier)" />
    <mutant id="mutant_612" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) + &quot;.ddl&quot;)" to="((&quot;org/sonar/core/persistence/schema-&quot; + dialect) % &quot;.ddl&quot;)" />
    <mutant id="mutant_854" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="(&quot;sonar.permission.template.&quot; + qualifier)" to="(&quot;sonar.permission.template.&quot; * qualifier)" />
    <mutant id="mutant_617" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/rows-&quot; - dialect)" />
    <mutant id="mutant_859" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="((&quot;sonar.permission.template.&quot; + qualifier) - &quot;.default&quot;)" />
    <mutant id="mutant_618" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/rows-&quot; % dialect)" />
    <mutant id="mutant_619" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/rows-&quot; / dialect)" />
    <mutant id="mutant_1223" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="&quot;.&quot;" />
    <mutant id="mutant_1224" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) % &quot;.&quot;)" />
    <mutant id="mutant_1221" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) / notificationDispatcherKey)" />
    <mutant id="mutant_1222" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(PropertiesDao.NOTIFICATION_PREFIX)" />
    <mutant id="mutant_1220" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="notificationDispatcherKey" />
    <mutant id="mutant_1229" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) / notificationChannelKey)" />
    <mutant id="mutant_850" viable="true" in="org.sonar.core.permission.PermissionFacade.countComponentPermissions(org.sonar.core.persistence.DbSession,java.lang.Long)" from="(roleDao.countResourceGroupRoles(session, resourceId)) + (roleDao.countResourceUserRoles(session, resourceId))" to="(roleDao.countResourceGroupRoles(session, resourceId)) / (roleDao.countResourceUserRoles(session, resourceId))" />
    <mutant id="mutant_1227" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) - &quot;.&quot;)" />
    <mutant id="mutant_1228" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) / &quot;.&quot;)" />
    <mutant id="mutant_1225" viable="true" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" />
    <mutant id="mutant_1226" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) * &quot;.&quot;)" />
    <mutant id="mutant_624" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="&quot;.sql&quot;" />
    <mutant id="mutant_866" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="(&quot;Could not retrieve permission template with key &quot; / templateKey)" />
    <mutant id="mutant_625" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) / &quot;.sql&quot;)" />
    <mutant id="mutant_867" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="(&quot;Could not retrieve permission template with key &quot; - templateKey)" />
    <mutant id="mutant_626" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) - &quot;.sql&quot;)" />
    <mutant id="mutant_868" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="&quot;Could not retrieve permission template with key &quot;" />
    <mutant id="mutant_627" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) % &quot;.sql&quot;)" />
    <mutant id="mutant_869" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="&quot;Could not retrieve permissions for template with key &quot;" />
    <mutant id="mutant_620" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="dialect" />
    <mutant id="mutant_862" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="&quot;.default&quot;" />
    <mutant id="mutant_621" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="(&quot;org/sonar/core/persistence/rows-&quot; * dialect)" />
    <mutant id="mutant_863" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="(&quot;Could not retrieve permission template with key &quot; * templateKey)" />
    <mutant id="mutant_622" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" to="&quot;org/sonar/core/persistence/rows-&quot;" />
    <mutant id="mutant_864" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="(&quot;Could not retrieve permission template with key &quot; % templateKey)" />
    <mutant id="mutant_623" viable="false" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) * &quot;.sql&quot;)" />
    <mutant id="mutant_865" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permission template with key &quot; + templateKey)" to="templateKey" />
    <mutant id="mutant_628" viable="true" in="org.sonar.core.persistence.DdlUtils.createSchema(java.sql.Connection,java.lang.String)" from="((&quot;org/sonar/core/persistence/rows-&quot; + dialect) + &quot;.sql&quot;)" to="(&quot;org/sonar/core/persistence/rows-&quot; + dialect)" />
    <mutant id="mutant_629" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="(&quot;Fail to restore: &quot; - path)" />
    <mutant id="mutant_1212" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) - notificationChannelKey)" />
    <mutant id="mutant_1213" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="notificationChannelKey" />
    <mutant id="mutant_1210" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) / &quot;.&quot;)" />
    <mutant id="mutant_1211" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) / notificationChannelKey)" />
    <mutant id="mutant_860" viable="true" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="(&quot;sonar.permission.template.&quot; + qualifier)" />
    <mutant id="mutant_1218" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) * notificationDispatcherKey)" />
    <mutant id="mutant_861" viable="false" in="org.sonar.core.permission.PermissionFacade.getApplicablePermissionTemplateKey(org.sonar.core.persistence.DbSession,java.lang.String,java.lang.String)" from="((&quot;sonar.permission.template.&quot; + qualifier) + &quot;.default&quot;)" to="((&quot;sonar.permission.template.&quot; + qualifier) * &quot;.default&quot;)" />
    <mutant id="mutant_1219" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) - notificationDispatcherKey)" />
    <mutant id="mutant_1216" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" />
    <mutant id="mutant_1217" viable="false" in="org.sonar.core.properties.PropertiesDao.findUsersForNotification(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) % notificationDispatcherKey)" />
    <mutant id="mutant_1214" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) % notificationChannelKey)" />
    <mutant id="mutant_1215" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) + notificationChannelKey)" to="((((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;) * notificationChannelKey)" />
    <mutant id="mutant_635" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)" />
    <mutant id="mutant_877" viable="true" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot;" />
    <mutant id="mutant_636" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="(&quot;Database[&quot; * ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" />
    <mutant id="mutant_878" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; - &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" />
    <mutant id="mutant_637" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="&quot;Database[&quot;" />
    <mutant id="mutant_879" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; % &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" />
    <mutant id="mutant_638" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="(&quot;Database[&quot; - ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" />
    <mutant id="mutant_631" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="(&quot;Fail to restore: &quot; % path)" />
    <mutant id="mutant_873" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="(&quot;Could not retrieve permissions for template with key &quot; % templateKey)" />
    <mutant id="mutant_632" viable="true" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="path" />
    <mutant id="mutant_874" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="(&quot;Could not retrieve permissions for template with key &quot; / templateKey)" />
    <mutant id="mutant_633" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="(&quot;Fail to restore: &quot; / path)" />
    <mutant id="mutant_875" viable="true" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="&quot; A system administrator must update these templates so that only one of them matches the key.&quot;" />
    <mutant id="mutant_634" viable="true" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="&quot;Fail to restore: &quot;" />
    <mutant id="mutant_876" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; / &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" />
    <mutant id="mutant_639" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="(&quot;Database[&quot; % ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" />
    <mutant id="mutant_1201" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) - notificationDispatcherKey)" />
    <mutant id="mutant_1202" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="notificationDispatcherKey" />
    <mutant id="mutant_1200" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) * notificationDispatcherKey)" />
    <mutant id="mutant_1209" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) - &quot;.&quot;)" />
    <mutant id="mutant_870" viable="true" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="templateKey" />
    <mutant id="mutant_871" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="(&quot;Could not retrieve permissions for template with key &quot; * templateKey)" />
    <mutant id="mutant_1207" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" />
    <mutant id="mutant_630" viable="false" in="org.sonar.core.persistence.DdlUtils.executeScript(java.sql.Connection,java.lang.String)" from="(&quot;Fail to restore: &quot; + path)" to="(&quot;Fail to restore: &quot; * path)" />
    <mutant id="mutant_872" viable="false" in="org.sonar.core.permission.PermissionFacade.getPermissionTemplateWithPermissions(org.sonar.core.persistence.DbSession,java.lang.String)" from="(&quot;Could not retrieve permissions for template with key &quot; + templateKey)" to="(&quot;Could not retrieve permissions for template with key &quot; - templateKey)" />
    <mutant id="mutant_1208" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) * &quot;.&quot;)" />
    <mutant id="mutant_1205" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="&quot;.&quot;" />
    <mutant id="mutant_1206" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) + &quot;.&quot;)" to="(((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey) % &quot;.&quot;)" />
    <mutant id="mutant_1203" viable="false" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="((PropertiesDao.NOTIFICATION_PREFIX) / notificationDispatcherKey)" />
    <mutant id="mutant_1204" viable="true" in="org.sonar.core.properties.PropertiesDao.findNotificationSubscribers(java.lang.String,java.lang.String,java.lang.String)" from="((PropertiesDao.NOTIFICATION_PREFIX) + notificationDispatcherKey)" to="(PropertiesDao.NOTIFICATION_PREFIX)" />
    <mutant id="mutant_404" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot;" />
    <mutant id="mutant_646" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) * &quot;]&quot;" />
    <mutant id="mutant_888" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) * &quot;). Availables values are &quot;)" />
    <mutant id="mutant_405" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; / &quot;See below to know how to use wildcards to specify this property.&quot;)" />
    <mutant id="mutant_647" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="(&quot;Create JDBC datasource for &quot; * (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" />
    <mutant id="mutant_889" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) - &quot;). Availables values are &quot;)" />
    <mutant id="mutant_406" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; - &quot;See below to know how to use wildcards to specify this property.&quot;)" />
    <mutant id="mutant_648" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="(&quot;Create JDBC datasource for &quot; / (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" />
    <mutant id="mutant_407" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="(&quot;&quot; * (CoreMetrics.NCLOC_KEY))" />
    <mutant id="mutant_649" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="(&quot;Create JDBC datasource for &quot; - (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" />
    <mutant id="mutant_400" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; + (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" to="(&quot;By default, SonarQube detects duplications at sub-project level. This means that a block &quot; - (&quot;duplicated on two sub-projects of the same project won\'t be reported. Setting this parameter to \&quot;true\&quot; &quot; + (&quot;allows to detect duplicates across sub-projects and more generally across projects. Note that activating &quot; + &quot;this property will slightly increase each SonarQube analysis time.&quot;)))" />
    <mutant id="mutant_642" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)" />
    <mutant id="mutant_884" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="&quot;Membership is not valid (got &quot;" />
    <mutant id="mutant_401" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; * &quot;See below to know how to use wildcards to specify this property.&quot;)" />
    <mutant id="mutant_643" viable="true" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="&quot;]&quot;" />
    <mutant id="mutant_885" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; - (membership))" />
    <mutant id="mutant_402" viable="false" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; % &quot;See below to know how to use wildcards to specify this property.&quot;)" />
    <mutant id="mutant_644" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) - &quot;]&quot;" />
    <mutant id="mutant_886" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; * (membership))" />
    <mutant id="mutant_403" viable="true" in="org.sonar.core.config.CorePropertyDefinitions.all()" from="(&quot;Patterns used to exclude some source files from the duplication detection mechanism. &quot; + &quot;See below to know how to use wildcards to specify this property.&quot;)" to="&quot;See below to know how to use wildcards to specify this property.&quot;" />
    <mutant id="mutant_645" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) / &quot;]&quot;" />
    <mutant id="mutant_887" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="&quot;). Availables values are &quot;" />
    <mutant id="mutant_1281" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="(i - 1)" />
    <mutant id="mutant_1040" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) % &quot;)&quot;)" />
    <mutant id="mutant_1282" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="(i % 1)" />
    <mutant id="mutant_1280" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="(i * 1)" />
    <mutant id="mutant_408" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="&quot;&quot;" />
    <mutant id="mutant_409" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="CoreMetrics.NCLOC_KEY" />
    <mutant id="mutant_1036" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="&quot;Page index must be greater than 0 (got &quot;" />
    <mutant id="mutant_1278" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="1" />
    <mutant id="mutant_1037" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) * &quot;)&quot;)" />
    <mutant id="mutant_1279" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="i" />
    <mutant id="mutant_1034" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; * (pageIndex))" />
    <mutant id="mutant_1276" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="(&quot;Expected single result, but got : &quot; - (result.toString()))" />
    <mutant id="mutant_1035" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; - (pageIndex))" />
    <mutant id="mutant_1277" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getQueryForCriterias(java.lang.Class,boolean,java.lang.Object[])" from="(i + 1)" to="(i / 1)" />
    <mutant id="mutant_1032" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; % (pageIndex))" />
    <mutant id="mutant_1274" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="&quot;Expected single result, but got : &quot;" />
    <mutant id="mutant_1033" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(pageIndex)" />
    <mutant id="mutant_1275" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="(&quot;Expected single result, but got : &quot; / (result.toString()))" />
    <mutant id="mutant_1030" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" />
    <mutant id="mutant_1272" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="(&quot;Expected single result, but got : &quot; * (result.toString()))" />
    <mutant id="mutant_1031" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(&quot;Page index must be greater than 0 (got &quot; / (pageIndex))" />
    <mutant id="mutant_1273" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="result.toString()" />
    <mutant id="mutant_880" viable="false" in="org.sonar.core.permission.PermissionFacade.checkAtMostOneMatchForComponentKey(java.lang.String,java.util.List)" from="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; + &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" to="(&quot;The \&quot;{0}\&quot; key matches multiple permission templates: {1}.&quot; * &quot; A system administrator must update these templates so that only one of them matches the key.&quot;)" />
    <mutant id="mutant_881" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; / (membership))" />
    <mutant id="mutant_640" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" to="(&quot;Database[&quot; / ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;))" />
    <mutant id="mutant_882" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(membership)" />
    <mutant id="mutant_641" viable="false" in="org.sonar.core.persistence.DefaultDatabase.toString()" from="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) + &quot;]&quot;" to="(&quot;Database[&quot; + ((properties) != null ? properties.getProperty(DefaultDatabase.SONAR_JDBC_URL) : &quot;?&quot;)) % &quot;]&quot;" />
    <mutant id="mutant_883" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; % (membership))" />
    <mutant id="mutant_1038" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) / &quot;)&quot;)" />
    <mutant id="mutant_1039" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" />
    <mutant id="mutant_415" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="(&quot;&quot; % (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" />
    <mutant id="mutant_657" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="(&quot;/&quot; * (mapperName.replace('.', '/')))" />
    <mutant id="mutant_899" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initPageIndex()" from="(&quot;Page index must be greater than 0 (got &quot; + (pageIndex))" to="(pageIndex)" />
    <mutant id="mutant_416" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="CoreProperties.DEVELOPMENT_COST_DEF_VALUE" />
    <mutant id="mutant_658" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="(&quot;/&quot; / (mapperName.replace('.', '/')))" />
    <mutant id="mutant_417" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="(&quot;&quot; / (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" />
    <mutant id="mutant_659" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) - &quot;.xml&quot;)" />
    <mutant id="mutant_418" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="(&quot;&quot; * (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" />
    <mutant id="mutant_411" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="(&quot;&quot; % (CoreMetrics.NCLOC_KEY))" />
    <mutant id="mutant_653" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="(&quot;/&quot; % (mapperName.replace('.', '/')))" />
    <mutant id="mutant_895" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) - (PermissionQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_412" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="(&quot;&quot; - (CoreMetrics.NCLOC_KEY))" />
    <mutant id="mutant_654" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="(mapperName.replace('.', '/'))" />
    <mutant id="mutant_896" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) / (PermissionQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_413" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="&quot;&quot;" />
    <mutant id="mutant_655" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="&quot;/&quot;" />
    <mutant id="mutant_897" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="PermissionQuery.AVAILABLE_MEMBERSHIP" />
    <mutant id="mutant_414" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" to="(&quot;&quot; - (CoreProperties.DEVELOPMENT_COST_DEF_VALUE))" />
    <mutant id="mutant_656" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;/&quot; + (mapperName.replace('.', '/')))" to="(&quot;/&quot; - (mapperName.replace('.', '/')))" />
    <mutant id="mutant_898" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) % (PermissionQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_1270" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) - (StringUtils.join(criterias, &quot;,&quot;)))" />
    <mutant id="mutant_1271" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(javax.persistence.Query,T)" from="(&quot;Expected single result, but got : &quot; + (result.toString()))" to="(&quot;Expected single result, but got : &quot; % (result.toString()))" />
    <mutant id="mutant_419" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; - &quot;then the value of this property would be 30.&quot;)" />
    <mutant id="mutant_1025" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="UserMembershipQuery.AVAILABLE_MEMBERSHIPS" />
    <mutant id="mutant_1267" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" />
    <mutant id="mutant_1026" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) % (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" />
    <mutant id="mutant_1268" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="StringUtils.join(criterias, &quot;,&quot;)" />
    <mutant id="mutant_1023" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(&quot;Membership is not valid (got &quot; + (membership))" />
    <mutant id="mutant_1265" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) * (StringUtils.join(criterias, &quot;,&quot;)))" />
    <mutant id="mutant_1024" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) / &quot;). Availables values are &quot;)" />
    <mutant id="mutant_1266" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) / (StringUtils.join(criterias, &quot;,&quot;)))" />
    <mutant id="mutant_1021" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="&quot;). Availables values are &quot;" />
    <mutant id="mutant_1263" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" />
    <mutant id="mutant_1022" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) % &quot;). Availables values are &quot;)" />
    <mutant id="mutant_1264" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) * &quot; with criterias : &quot;)" />
    <mutant id="mutant_1261" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) / &quot; with criterias : &quot;)" />
    <mutant id="mutant_1020" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) - &quot;). Availables values are &quot;)" />
    <mutant id="mutant_1262" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) % &quot; with criterias : &quot;)" />
    <mutant id="mutant_891" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) % &quot;). Availables values are &quot;)" />
    <mutant id="mutant_650" viable="true" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="&quot;Create JDBC datasource for &quot;" />
    <mutant id="mutant_892" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) / &quot;). Availables values are &quot;)" />
    <mutant id="mutant_651" viable="true" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)" />
    <mutant id="mutant_893" viable="false" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * (PermissionQuery.AVAILABLE_MEMBERSHIP))" />
    <mutant id="mutant_410" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreMetrics.NCLOC_KEY))" to="(&quot;&quot; / (CoreMetrics.NCLOC_KEY))" />
    <mutant id="mutant_652" viable="false" in="org.sonar.core.persistence.DefaultDatabase.initDatasource()" from="(&quot;Create JDBC datasource for &quot; + (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" to="(&quot;Create JDBC datasource for &quot; % (properties.getProperty(org.sonar.api.database.DatabaseProperties.PROP_URL, DefaultDatabase.DEFAULT_URL)))" />
    <mutant id="mutant_894" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (PermissionQuery.AVAILABLE_MEMBERSHIP))" to="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" />
    <mutant id="mutant_1029" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) * (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" />
    <mutant id="mutant_1027" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) / (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" />
    <mutant id="mutant_1269" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) + (StringUtils.join(criterias, &quot;,&quot;)))" to="(((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;) % (StringUtils.join(criterias, &quot;,&quot;)))" />
    <mutant id="mutant_890" viable="true" in="org.sonar.core.permission.PermissionQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="(&quot;Membership is not valid (got &quot; + (membership))" />
    <mutant id="mutant_1028" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;) + (UserMembershipQuery.AVAILABLE_MEMBERSHIPS))" to="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" />
    <mutant id="mutant_426" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="&quot;&quot;" />
    <mutant id="mutant_668" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="(&quot;Unable to load mapper &quot; / mapperName)" />
    <mutant id="mutant_427" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="(&quot;&quot; * (CoreProperties.RATING_GRID_DEF_VALUES))" />
    <mutant id="mutant_669" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="&quot;Unable to load mapper &quot;" />
    <mutant id="mutant_428" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="(&quot;&quot; % (CoreProperties.RATING_GRID_DEF_VALUES))" />
    <mutant id="mutant_429" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="(&quot;&quot; / (CoreProperties.RATING_GRID_DEF_VALUES))" />
    <mutant id="mutant_422" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; % &quot;then the value of this property would be 30.&quot;)" />
    <mutant id="mutant_664" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="(&quot;/&quot; + (mapperName.replace('.', '/')))" />
    <mutant id="mutant_423" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="&quot;then the value of this property would be 30.&quot;" />
    <mutant id="mutant_665" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="mapperName" />
    <mutant id="mutant_424" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; / &quot;then the value of this property would be 30.&quot;)" />
    <mutant id="mutant_666" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="(&quot;Unable to load mapper &quot; * mapperName)" />
    <mutant id="mutant_425" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="(&quot;&quot; - (CoreProperties.RATING_GRID_DEF_VALUES))" />
    <mutant id="mutant_667" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="(&quot;Unable to load mapper &quot; % mapperName)" />
    <mutant id="mutant_1260" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) - &quot; with criterias : &quot;)" />
    <mutant id="mutant_1014" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; % (membership))" />
    <mutant id="mutant_1256" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="(&quot;Expected single result for entitiy &quot; % (entityClass.getSimpleName()))" />
    <mutant id="mutant_1015" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; / (membership))" />
    <mutant id="mutant_1257" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="(entityClass.getSimpleName())" />
    <mutant id="mutant_1012" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot;" />
    <mutant id="mutant_1254" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="&quot;Expected single result for entitiy &quot;" />
    <mutant id="mutant_1013" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(membership)" />
    <mutant id="mutant_1255" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="(&quot;Expected single result for entitiy &quot; / (entityClass.getSimpleName()))" />
    <mutant id="mutant_1010" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) * &quot;%&quot;" />
    <mutant id="mutant_1252" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="(((entry.getKey()) + &quot;: &quot;) % (entry.getValue()))" />
    <mutant id="mutant_1011" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) % &quot;%&quot;" />
    <mutant id="mutant_1253" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="(&quot;Expected single result for entitiy &quot; - (entityClass.getSimpleName()))" />
    <mutant id="mutant_1250" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="entry.getValue()" />
    <mutant id="mutant_1251" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="(((entry.getKey()) + &quot;: &quot;) * (entry.getValue()))" />
    <mutant id="mutant_660" viable="true" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="&quot;.xml&quot;" />
    <mutant id="mutant_661" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) * &quot;.xml&quot;)" />
    <mutant id="mutant_420" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; * &quot;then the value of this property would be 30.&quot;)" />
    <mutant id="mutant_662" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) / &quot;.xml&quot;)" />
    <mutant id="mutant_421" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot; + &quot;then the value of this property would be 30.&quot;)" to="&quot;Cost to develop one unit of code. If the unit is a line of code (LOC), and the cost to develop 1 LOC has been estimated at 30 minutes, &quot;" />
    <mutant id="mutant_663" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="((&quot;/&quot; + (mapperName.replace('.', '/'))) + &quot;.xml&quot;)" to="((&quot;/&quot; + (mapperName.replace('.', '/'))) % &quot;.xml&quot;)" />
    <mutant id="mutant_1018" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; - (membership))" />
    <mutant id="mutant_1019" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="((&quot;Membership is not valid (got &quot; + (membership)) + &quot;). Availables values are &quot;)" to="((&quot;Membership is not valid (got &quot; + (membership)) * &quot;). Availables values are &quot;)" />
    <mutant id="mutant_1016" viable="false" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="(&quot;Membership is not valid (got &quot; * (membership))" />
    <mutant id="mutant_1258" viable="false" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="(&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName()))" to="(&quot;Expected single result for entitiy &quot; * (entityClass.getSimpleName()))" />
    <mutant id="mutant_1017" viable="true" in="org.sonar.core.user.UserMembershipQuery$Builder.initMembership()" from="(&quot;Membership is not valid (got &quot; + (membership))" to="&quot;Membership is not valid (got &quot;" />
    <mutant id="mutant_1259" viable="true" in="org.sonar.jpa.session.JpaDatabaseSession.getSingleResult(java.lang.Class,java.lang.Object[])" from="((&quot;Expected single result for entitiy &quot; + (entityClass.getSimpleName())) + &quot; with criterias : &quot;)" to="&quot; with criterias : &quot;" />
    <mutant id="mutant_437" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; - (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" />
    <mutant id="mutant_679" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="now / (((long)(maxAgeInSeconds)) * 1000)" />
    <mutant id="mutant_438" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; % (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" />
    <mutant id="mutant_439" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; + (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" to="(&quot;The default values for A through D are 0.1,0.2,0.5,1. Anything over 1 is an E. &quot; / (&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;))" />
    <mutant id="mutant_433" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; % &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" />
    <mutant id="mutant_675" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="(((long)(maxAgeInSeconds)) - 1000)" />
    <mutant id="mutant_434" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot;" />
    <mutant id="mutant_676" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="(((long)(maxAgeInSeconds)) + 1000)" />
    <mutant id="mutant_435" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; - &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" />
    <mutant id="mutant_677" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="now * (((long)(maxAgeInSeconds)) * 1000)" />
    <mutant id="mutant_436" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; / &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" />
    <mutant id="mutant_678" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="now - (((long)(maxAgeInSeconds)) * 1000)" to="now" />
    <mutant id="mutant_1003" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; / sql)" />
    <mutant id="mutant_1245" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="((entry.getKey()) % &quot;: &quot;)" />
    <mutant id="mutant_1004" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; % sql)" />
    <mutant id="mutant_1246" viable="true" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="&quot;: &quot;" />
    <mutant id="mutant_1001" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="sql" />
    <mutant id="mutant_1243" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="((entry.getKey()) * &quot;: &quot;)" />
    <mutant id="mutant_1002" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; * sql)" />
    <mutant id="mutant_1244" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="(entry.getKey())" />
    <mutant id="mutant_1241" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="((entry.getKey()) / &quot;: &quot;)" />
    <mutant id="mutant_1000" viable="false" in="org.sonar.core.user.GroupMembershipQuery$Builder.initPageIndex()" from="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) + &quot;)&quot;)" to="((&quot;Page index must be greater than 0 (got &quot; + (pageIndex)) / &quot;)&quot;)" />
    <mutant id="mutant_1242" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="((entry.getKey()) + &quot;: &quot;)" to="((entry.getKey()) - &quot;: &quot;)" />
    <mutant id="mutant_1240" viable="false" in="org.sonar.core.UtcDateUtils.parseDateTime(java.lang.String)" from="(&quot;Fail to parse date: &quot; + s)" to="(&quot;Fail to parse date: &quot; / s)" />
    <mutant id="mutant_671" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="(((long)(maxAgeInSeconds)) % 1000)" />
    <mutant id="mutant_430" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;&quot; + (CoreProperties.RATING_GRID_DEF_VALUES))" to="CoreProperties.RATING_GRID_DEF_VALUES" />
    <mutant id="mutant_672" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="((long)(maxAgeInSeconds))" />
    <mutant id="mutant_431" viable="false" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; * &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" />
    <mutant id="mutant_673" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="1000" />
    <mutant id="mutant_1009" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) - &quot;%&quot;" />
    <mutant id="mutant_432" viable="true" in="org.sonar.core.config.DebtProperties.all()" from="(&quot;Example: assuming the size metric is lines of code (LOC), and the work unit is 30 (minutes to produce 1 LOC), &quot; + &quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;)" to="&quot;a project with a technical debt of 24,000 minutes for 2,500 LOC will have a technical debt ratio of 24000/(30 * 2,500) = 0.32. That yields a SQALE rating of C.&quot;" />
    <mutant id="mutant_674" viable="true" in="org.sonar.core.persistence.SemaphoreDao.acquireIfOutdated(java.lang.String,int,org.apache.ibatis.session.SqlSession)" from="(((long)(maxAgeInSeconds)) * 1000)" to="(((long)(maxAgeInSeconds)) / 1000)" />
    <mutant id="mutant_1007" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="&quot;%&quot; + sql" />
    <mutant id="mutant_1249" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="(((entry.getKey()) + &quot;: &quot;) - (entry.getValue()))" />
    <mutant id="mutant_1008" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql) + &quot;%&quot;" to="(&quot;%&quot; + sql) / &quot;%&quot;" />
    <mutant id="mutant_1005" viable="false" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="(&quot;%&quot; - sql)" />
    <mutant id="mutant_1247" viable="true" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="((entry.getKey()) + &quot;: &quot;)" />
    <mutant id="mutant_670" viable="false" in="org.sonar.core.persistence.MyBatis.loadMapper(org.apache.ibatis.session.Configuration,java.lang.String)" from="(&quot;Unable to load mapper &quot; + mapperName)" to="(&quot;Unable to load mapper &quot; - mapperName)" />
    <mutant id="mutant_1006" viable="true" in="org.sonar.core.user.GroupMembershipQuery.groupSearchToSql(java.lang.String)" from="(&quot;%&quot; + sql)" to="&quot;%&quot;" />
    <mutant id="mutant_1248" viable="false" in="org.sonar.jpa.session.AbstractDatabaseConnector.logHibernateSettings(java.util.Properties)" from="(((entry.getKey()) + &quot;: &quot;) + (entry.getValue()))" to="(((entry.getKey()) + &quot;: &quot;) / (entry.getValue()))" />
  </mutants>
</mutation>
